

#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Linq.Expressions;
using System.Collections;
using System.Collections.Generic;
using AppFramework.Infrastructure.Data.Repositories;
using AppFramework.Specifications;
using KMUH.iKASAWebApi.ApplicationLayer.DTO;
using KMUH.iKASAWebApi.Infrastructure.Data.Repositories;
using KMUH.iKASAWebApi.DomainModel.Entities;

namespace KMUH.iKASAWebApi.ApplicationLayer.Services
{
	public partial interface IiKASAWebApiOperationService : IDisposable
	{


		IiKASAWebApiContextUnitOfWork UnitOfWork { get; set;}


		string ConnectionStringName { get; set; }


		iKASAWebApiContext DbContext { get; }


		int ExecuteNonQuery(string commandText, params System.Data.Common.DbParameter[] parameters);


		int ExecuteNonQuery(string commandText, System.Data.CommandType commandType, params System.Data.Common.DbParameter[] parameters);


		T ExecuteScalar<T>(string commandText, params System.Data.Common.DbParameter[] parameters);


		T ExecuteScalar<T>(string commandTextt, System.Data.CommandType commandType, params System.Data.Common.DbParameter[] parameters);


		IEnumerable<dynamic> ExecuteQuery(string commandText, params System.Data.Common.DbParameter[] parameters);


		IEnumerable<T> ExecuteQuery<T>(string commandText, params System.Data.Common.DbParameter[] parameters);


		IEnumerable<T> ExecuteQuery<T>(string commandText, System.Data.CommandType commandType, params System.Data.Common.DbParameter[] parameters);


		IEnumerable<T> ExecuteQueryByMultiSource<T>(List<DbConnectionSource> dbSources, string commandText, params System.Data.Common.DbParameter[] dbParameters) where T : class;


		IEnumerable<T> ExecuteQueryByMultiSource<T>(List<DbConnectionSource> dbSources, string dataSourcePropertyName, string commandText, params System.Data.Common.DbParameter[] dbParameters) where T : class;


		void FlushChanges();


		void FlushChanges(bool releaseMemory);


		string GenerateNewIdentity(string IdentityOwner);


		DateTime GetSysDate();


		#region 移課程暫存 CRUD Operations


		I移課程暫存Service 移課程暫存Service { get; }
		IQueryable<移課程暫存> 移課程暫存s { get; }
		IQueryable<移課程暫存> Read移課程暫存s(Expression<Func<移課程暫存, bool>> filter, int dummy);
		IEnumerable<移課程暫存Dto> Read移課程暫存s();
		IEnumerable<移課程暫存Dto> Read移課程暫存s(Expression<Func<移課程暫存, bool>> filter);
		IEnumerable<移課程暫存Dto> Read移課程暫存s(ISpecification<移課程暫存> specification);
		IEnumerable<移課程暫存Dto> Read移課程暫存s(IQueryable<移課程暫存> query);
		IEnumerable<移課程暫存Dto> Read移課程暫存s(string[] propertyToSearch, object[] keyWords);
		IEnumerable<移課程暫存Dto> Read移課程暫存s(object[] keyWords);
		IEnumerable<移課程暫存Dto> Read移課程暫存sPaged(int startIndex, int pageSize);
		IEnumerable<移課程暫存Dto> Read移課程暫存sPaged(IQueryable<移課程暫存> source, int pageIndex, int pageSize);
		IEnumerable<移課程暫存Dto> Read移課程暫存sPaged(IQueryable<移課程暫存> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<移課程暫存Dto> Read移課程暫存sFiltered(string sortExpression, string filterExpression);
		IEnumerable<移課程暫存Dto> Read移課程暫存sPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<移課程暫存Dto> Read移課程暫存sPagedAndFiltered(int startIndex, int pageSize, Expression<Func<移課程暫存, bool>> filter);
		移課程暫存Dto Read移課程暫存s(string dtoKey);
		int Count移課程暫存s();
		int Count移課程暫存s(string filterExpression);
		int Count移課程暫存s(Expression<Func<移課程暫存, bool>> filter);
		string Create移課程暫存(移課程暫存Dto 移課程暫存, bool doSaveChanges = true);
		void Update移課程暫存(移課程暫存Dto 移課程暫存, bool doSaveChanges = true);
		void Update移課程暫存s(IEnumerable<移課程暫存Dto> 移課程暫存s, bool doSaveChanges = true);
		void Delete移課程暫存(移課程暫存Dto 移課程暫存, bool doSaveChanges = true);
		void Delete移課程暫存s(IEnumerable<移課程暫存Dto> 移課程暫存s, bool doSaveChanges = true);
		void Save移課程暫存(移課程暫存Dto 移課程暫存, bool doSaveChanges = true);
		void Save移課程暫存s(IEnumerable<移課程暫存Dto> 移課程暫存s, bool doSaveChanges = true);


		#endregion 移課程暫存 CRUD Operations


		#region 抓MAIL暫存 CRUD Operations


		I抓MAIL暫存Service 抓MAIL暫存Service { get; }
		IQueryable<抓MAIL暫存> 抓MAIL暫存s { get; }
		IQueryable<抓MAIL暫存> Read抓MAIL暫存s(Expression<Func<抓MAIL暫存, bool>> filter, int dummy);
		IEnumerable<抓MAIL暫存Dto> Read抓MAIL暫存s();
		IEnumerable<抓MAIL暫存Dto> Read抓MAIL暫存s(Expression<Func<抓MAIL暫存, bool>> filter);
		IEnumerable<抓MAIL暫存Dto> Read抓MAIL暫存s(ISpecification<抓MAIL暫存> specification);
		IEnumerable<抓MAIL暫存Dto> Read抓MAIL暫存s(IQueryable<抓MAIL暫存> query);
		IEnumerable<抓MAIL暫存Dto> Read抓MAIL暫存s(string[] propertyToSearch, object[] keyWords);
		IEnumerable<抓MAIL暫存Dto> Read抓MAIL暫存s(object[] keyWords);
		IEnumerable<抓MAIL暫存Dto> Read抓MAIL暫存sPaged(int startIndex, int pageSize);
		IEnumerable<抓MAIL暫存Dto> Read抓MAIL暫存sPaged(IQueryable<抓MAIL暫存> source, int pageIndex, int pageSize);
		IEnumerable<抓MAIL暫存Dto> Read抓MAIL暫存sPaged(IQueryable<抓MAIL暫存> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<抓MAIL暫存Dto> Read抓MAIL暫存sFiltered(string sortExpression, string filterExpression);
		IEnumerable<抓MAIL暫存Dto> Read抓MAIL暫存sPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<抓MAIL暫存Dto> Read抓MAIL暫存sPagedAndFiltered(int startIndex, int pageSize, Expression<Func<抓MAIL暫存, bool>> filter);
		抓MAIL暫存Dto Read抓MAIL暫存s(string dtoKey);
		int Count抓MAIL暫存s();
		int Count抓MAIL暫存s(string filterExpression);
		int Count抓MAIL暫存s(Expression<Func<抓MAIL暫存, bool>> filter);
		string Create抓MAIL暫存(抓MAIL暫存Dto 抓mail暫存, bool doSaveChanges = true);
		void Update抓MAIL暫存(抓MAIL暫存Dto 抓mail暫存, bool doSaveChanges = true);
		void Update抓MAIL暫存s(IEnumerable<抓MAIL暫存Dto> 抓mail暫存s, bool doSaveChanges = true);
		void Delete抓MAIL暫存(抓MAIL暫存Dto 抓mail暫存, bool doSaveChanges = true);
		void Delete抓MAIL暫存s(IEnumerable<抓MAIL暫存Dto> 抓mail暫存s, bool doSaveChanges = true);
		void Save抓MAIL暫存(抓MAIL暫存Dto 抓mail暫存, bool doSaveChanges = true);
		void Save抓MAIL暫存s(IEnumerable<抓MAIL暫存Dto> 抓mail暫存s, bool doSaveChanges = true);


		#endregion 抓MAIL暫存 CRUD Operations


		#region 住院醫師暫存 CRUD Operations


		I住院醫師暫存Service 住院醫師暫存Service { get; }
		IQueryable<住院醫師暫存> 住院醫師暫存s { get; }
		IQueryable<住院醫師暫存> Read住院醫師暫存s(Expression<Func<住院醫師暫存, bool>> filter, int dummy);
		IEnumerable<住院醫師暫存Dto> Read住院醫師暫存s();
		IEnumerable<住院醫師暫存Dto> Read住院醫師暫存s(Expression<Func<住院醫師暫存, bool>> filter);
		IEnumerable<住院醫師暫存Dto> Read住院醫師暫存s(ISpecification<住院醫師暫存> specification);
		IEnumerable<住院醫師暫存Dto> Read住院醫師暫存s(IQueryable<住院醫師暫存> query);
		IEnumerable<住院醫師暫存Dto> Read住院醫師暫存s(string[] propertyToSearch, object[] keyWords);
		IEnumerable<住院醫師暫存Dto> Read住院醫師暫存s(object[] keyWords);
		IEnumerable<住院醫師暫存Dto> Read住院醫師暫存sPaged(int startIndex, int pageSize);
		IEnumerable<住院醫師暫存Dto> Read住院醫師暫存sPaged(IQueryable<住院醫師暫存> source, int pageIndex, int pageSize);
		IEnumerable<住院醫師暫存Dto> Read住院醫師暫存sPaged(IQueryable<住院醫師暫存> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<住院醫師暫存Dto> Read住院醫師暫存sFiltered(string sortExpression, string filterExpression);
		IEnumerable<住院醫師暫存Dto> Read住院醫師暫存sPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<住院醫師暫存Dto> Read住院醫師暫存sPagedAndFiltered(int startIndex, int pageSize, Expression<Func<住院醫師暫存, bool>> filter);
		住院醫師暫存Dto Read住院醫師暫存s(string dtoKey);
		int Count住院醫師暫存s();
		int Count住院醫師暫存s(string filterExpression);
		int Count住院醫師暫存s(Expression<Func<住院醫師暫存, bool>> filter);
		string Create住院醫師暫存(住院醫師暫存Dto 住院醫師暫存, bool doSaveChanges = true);
		void Update住院醫師暫存(住院醫師暫存Dto 住院醫師暫存, bool doSaveChanges = true);
		void Update住院醫師暫存s(IEnumerable<住院醫師暫存Dto> 住院醫師暫存s, bool doSaveChanges = true);
		void Delete住院醫師暫存(住院醫師暫存Dto 住院醫師暫存, bool doSaveChanges = true);
		void Delete住院醫師暫存s(IEnumerable<住院醫師暫存Dto> 住院醫師暫存s, bool doSaveChanges = true);
		void Save住院醫師暫存(住院醫師暫存Dto 住院醫師暫存, bool doSaveChanges = true);
		void Save住院醫師暫存s(IEnumerable<住院醫師暫存Dto> 住院醫師暫存s, bool doSaveChanges = true);


		#endregion 住院醫師暫存 CRUD Operations


		#region 西醫受訓人員名單 CRUD Operations


		I西醫受訓人員名單Service 西醫受訓人員名單Service { get; }
		IQueryable<西醫受訓人員名單> 西醫受訓人員名單s { get; }
		IQueryable<西醫受訓人員名單> Read西醫受訓人員名單s(Expression<Func<西醫受訓人員名單, bool>> filter, int dummy);
		IEnumerable<西醫受訓人員名單Dto> Read西醫受訓人員名單s();
		IEnumerable<西醫受訓人員名單Dto> Read西醫受訓人員名單s(Expression<Func<西醫受訓人員名單, bool>> filter);
		IEnumerable<西醫受訓人員名單Dto> Read西醫受訓人員名單s(ISpecification<西醫受訓人員名單> specification);
		IEnumerable<西醫受訓人員名單Dto> Read西醫受訓人員名單s(IQueryable<西醫受訓人員名單> query);
		IEnumerable<西醫受訓人員名單Dto> Read西醫受訓人員名單s(string[] propertyToSearch, object[] keyWords);
		IEnumerable<西醫受訓人員名單Dto> Read西醫受訓人員名單s(object[] keyWords);
		IEnumerable<西醫受訓人員名單Dto> Read西醫受訓人員名單sPaged(int startIndex, int pageSize);
		IEnumerable<西醫受訓人員名單Dto> Read西醫受訓人員名單sPaged(IQueryable<西醫受訓人員名單> source, int pageIndex, int pageSize);
		IEnumerable<西醫受訓人員名單Dto> Read西醫受訓人員名單sPaged(IQueryable<西醫受訓人員名單> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<西醫受訓人員名單Dto> Read西醫受訓人員名單sFiltered(string sortExpression, string filterExpression);
		IEnumerable<西醫受訓人員名單Dto> Read西醫受訓人員名單sPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<西醫受訓人員名單Dto> Read西醫受訓人員名單sPagedAndFiltered(int startIndex, int pageSize, Expression<Func<西醫受訓人員名單, bool>> filter);
		西醫受訓人員名單Dto Read西醫受訓人員名單s(string dtoKey);
		int Count西醫受訓人員名單s();
		int Count西醫受訓人員名單s(string filterExpression);
		int Count西醫受訓人員名單s(Expression<Func<西醫受訓人員名單, bool>> filter);
		string Create西醫受訓人員名單(西醫受訓人員名單Dto 西醫受訓人員名單, bool doSaveChanges = true);
		void Update西醫受訓人員名單(西醫受訓人員名單Dto 西醫受訓人員名單, bool doSaveChanges = true);
		void Update西醫受訓人員名單s(IEnumerable<西醫受訓人員名單Dto> 西醫受訓人員名單s, bool doSaveChanges = true);
		void Delete西醫受訓人員名單(西醫受訓人員名單Dto 西醫受訓人員名單, bool doSaveChanges = true);
		void Delete西醫受訓人員名單s(IEnumerable<西醫受訓人員名單Dto> 西醫受訓人員名單s, bool doSaveChanges = true);
		void Save西醫受訓人員名單(西醫受訓人員名單Dto 西醫受訓人員名單, bool doSaveChanges = true);
		void Save西醫受訓人員名單s(IEnumerable<西醫受訓人員名單Dto> 西醫受訓人員名單s, bool doSaveChanges = true);


		#endregion 西醫受訓人員名單 CRUD Operations


		#region VOTEUSERDEFINELIST CRUD Operations


		IVOTEUSERDEFINELISTService VOTEUSERDEFINELISTService { get; }
		IQueryable<VOTEUSERDEFINELIST> VOTEUSERDEFINELISTs { get; }
		IQueryable<VOTEUSERDEFINELIST> ReadVOTEUSERDEFINELISTs(Expression<Func<VOTEUSERDEFINELIST, bool>> filter, int dummy);
		IEnumerable<VOTEUSERDEFINELISTDto> ReadVOTEUSERDEFINELISTs();
		IEnumerable<VOTEUSERDEFINELISTDto> ReadVOTEUSERDEFINELISTs(Expression<Func<VOTEUSERDEFINELIST, bool>> filter);
		IEnumerable<VOTEUSERDEFINELISTDto> ReadVOTEUSERDEFINELISTs(ISpecification<VOTEUSERDEFINELIST> specification);
		IEnumerable<VOTEUSERDEFINELISTDto> ReadVOTEUSERDEFINELISTs(IQueryable<VOTEUSERDEFINELIST> query);
		IEnumerable<VOTEUSERDEFINELISTDto> ReadVOTEUSERDEFINELISTs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<VOTEUSERDEFINELISTDto> ReadVOTEUSERDEFINELISTs(object[] keyWords);
		IEnumerable<VOTEUSERDEFINELISTDto> ReadVOTEUSERDEFINELISTsPaged(int startIndex, int pageSize);
		IEnumerable<VOTEUSERDEFINELISTDto> ReadVOTEUSERDEFINELISTsPaged(IQueryable<VOTEUSERDEFINELIST> source, int pageIndex, int pageSize);
		IEnumerable<VOTEUSERDEFINELISTDto> ReadVOTEUSERDEFINELISTsPaged(IQueryable<VOTEUSERDEFINELIST> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<VOTEUSERDEFINELISTDto> ReadVOTEUSERDEFINELISTsFiltered(string sortExpression, string filterExpression);
		IEnumerable<VOTEUSERDEFINELISTDto> ReadVOTEUSERDEFINELISTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<VOTEUSERDEFINELISTDto> ReadVOTEUSERDEFINELISTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<VOTEUSERDEFINELIST, bool>> filter);
		VOTEUSERDEFINELISTDto ReadVOTEUSERDEFINELISTs(string dtoKey);
		int CountVOTEUSERDEFINELISTs();
		int CountVOTEUSERDEFINELISTs(string filterExpression);
		int CountVOTEUSERDEFINELISTs(Expression<Func<VOTEUSERDEFINELIST, bool>> filter);
		string CreateVOTEUSERDEFINELIST(VOTEUSERDEFINELISTDto voteuserdefinelist, bool doSaveChanges = true);
		void UpdateVOTEUSERDEFINELIST(VOTEUSERDEFINELISTDto voteuserdefinelist, bool doSaveChanges = true);
		void UpdateVOTEUSERDEFINELISTs(IEnumerable<VOTEUSERDEFINELISTDto> voteuserdefinelists, bool doSaveChanges = true);
		void DeleteVOTEUSERDEFINELIST(VOTEUSERDEFINELISTDto voteuserdefinelist, bool doSaveChanges = true);
		void DeleteVOTEUSERDEFINELISTs(IEnumerable<VOTEUSERDEFINELISTDto> voteuserdefinelists, bool doSaveChanges = true);
		void SaveVOTEUSERDEFINELIST(VOTEUSERDEFINELISTDto voteuserdefinelist, bool doSaveChanges = true);
		void SaveVOTEUSERDEFINELISTs(IEnumerable<VOTEUSERDEFINELISTDto> voteuserdefinelists, bool doSaveChanges = true);


		#endregion VOTEUSERDEFINELIST CRUD Operations


		#region VOTETEMPDATUM CRUD Operations


		IVOTETEMPDATUMService VOTETEMPDATUMService { get; }
		IQueryable<VOTETEMPDATUM> VOTETEMPDATa { get; }
		IQueryable<VOTETEMPDATUM> ReadVOTETEMPDATa(Expression<Func<VOTETEMPDATUM, bool>> filter, int dummy);
		IEnumerable<VOTETEMPDATUMDto> ReadVOTETEMPDATa();
		IEnumerable<VOTETEMPDATUMDto> ReadVOTETEMPDATa(Expression<Func<VOTETEMPDATUM, bool>> filter);
		IEnumerable<VOTETEMPDATUMDto> ReadVOTETEMPDATa(ISpecification<VOTETEMPDATUM> specification);
		IEnumerable<VOTETEMPDATUMDto> ReadVOTETEMPDATa(IQueryable<VOTETEMPDATUM> query);
		IEnumerable<VOTETEMPDATUMDto> ReadVOTETEMPDATa(string[] propertyToSearch, object[] keyWords);
		IEnumerable<VOTETEMPDATUMDto> ReadVOTETEMPDATa(object[] keyWords);
		IEnumerable<VOTETEMPDATUMDto> ReadVOTETEMPDATaPaged(int startIndex, int pageSize);
		IEnumerable<VOTETEMPDATUMDto> ReadVOTETEMPDATaPaged(IQueryable<VOTETEMPDATUM> source, int pageIndex, int pageSize);
		IEnumerable<VOTETEMPDATUMDto> ReadVOTETEMPDATaPaged(IQueryable<VOTETEMPDATUM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<VOTETEMPDATUMDto> ReadVOTETEMPDATaFiltered(string sortExpression, string filterExpression);
		IEnumerable<VOTETEMPDATUMDto> ReadVOTETEMPDATaPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<VOTETEMPDATUMDto> ReadVOTETEMPDATaPagedAndFiltered(int startIndex, int pageSize, Expression<Func<VOTETEMPDATUM, bool>> filter);
		VOTETEMPDATUMDto ReadVOTETEMPDATa(string dtoKey);
		int CountVOTETEMPDATa();
		int CountVOTETEMPDATa(string filterExpression);
		int CountVOTETEMPDATa(Expression<Func<VOTETEMPDATUM, bool>> filter);
		string CreateVOTETEMPDATUM(VOTETEMPDATUMDto votetempdatum, bool doSaveChanges = true);
		void UpdateVOTETEMPDATUM(VOTETEMPDATUMDto votetempdatum, bool doSaveChanges = true);
		void UpdateVOTETEMPDATa(IEnumerable<VOTETEMPDATUMDto> votetempdata, bool doSaveChanges = true);
		void DeleteVOTETEMPDATUM(VOTETEMPDATUMDto votetempdatum, bool doSaveChanges = true);
		void DeleteVOTETEMPDATa(IEnumerable<VOTETEMPDATUMDto> votetempdata, bool doSaveChanges = true);
		void SaveVOTETEMPDATUM(VOTETEMPDATUMDto votetempdatum, bool doSaveChanges = true);
		void SaveVOTETEMPDATa(IEnumerable<VOTETEMPDATUMDto> votetempdata, bool doSaveChanges = true);


		#endregion VOTETEMPDATUM CRUD Operations


		#region VOTETARGET CRUD Operations


		IVOTETARGETService VOTETARGETService { get; }
		IQueryable<VOTETARGET> VOTETARGETs { get; }
		IQueryable<VOTETARGET> ReadVOTETARGETs(Expression<Func<VOTETARGET, bool>> filter, int dummy);
		IEnumerable<VOTETARGETDto> ReadVOTETARGETs();
		IEnumerable<VOTETARGETDto> ReadVOTETARGETs(Expression<Func<VOTETARGET, bool>> filter);
		IEnumerable<VOTETARGETDto> ReadVOTETARGETs(ISpecification<VOTETARGET> specification);
		IEnumerable<VOTETARGETDto> ReadVOTETARGETs(IQueryable<VOTETARGET> query);
		IEnumerable<VOTETARGETDto> ReadVOTETARGETs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<VOTETARGETDto> ReadVOTETARGETs(object[] keyWords);
		IEnumerable<VOTETARGETDto> ReadVOTETARGETsPaged(int startIndex, int pageSize);
		IEnumerable<VOTETARGETDto> ReadVOTETARGETsPaged(IQueryable<VOTETARGET> source, int pageIndex, int pageSize);
		IEnumerable<VOTETARGETDto> ReadVOTETARGETsPaged(IQueryable<VOTETARGET> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<VOTETARGETDto> ReadVOTETARGETsFiltered(string sortExpression, string filterExpression);
		IEnumerable<VOTETARGETDto> ReadVOTETARGETsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<VOTETARGETDto> ReadVOTETARGETsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<VOTETARGET, bool>> filter);
		VOTETARGETDto ReadVOTETARGETs(string dtoKey);
		int CountVOTETARGETs();
		int CountVOTETARGETs(string filterExpression);
		int CountVOTETARGETs(Expression<Func<VOTETARGET, bool>> filter);
		string CreateVOTETARGET(VOTETARGETDto votetarget, bool doSaveChanges = true);
		void UpdateVOTETARGET(VOTETARGETDto votetarget, bool doSaveChanges = true);
		void UpdateVOTETARGETs(IEnumerable<VOTETARGETDto> votetargets, bool doSaveChanges = true);
		void DeleteVOTETARGET(VOTETARGETDto votetarget, bool doSaveChanges = true);
		void DeleteVOTETARGETs(IEnumerable<VOTETARGETDto> votetargets, bool doSaveChanges = true);
		void SaveVOTETARGET(VOTETARGETDto votetarget, bool doSaveChanges = true);
		void SaveVOTETARGETs(IEnumerable<VOTETARGETDto> votetargets, bool doSaveChanges = true);


		#endregion VOTETARGET CRUD Operations


		#region VOTEMAIN CRUD Operations


		IVOTEMAINService VOTEMAINService { get; }
		IQueryable<VOTEMAIN> VOTEMAINs { get; }
		IQueryable<VOTEMAIN> ReadVOTEMAINs(Expression<Func<VOTEMAIN, bool>> filter, int dummy);
		IEnumerable<VOTEMAINDto> ReadVOTEMAINs();
		IEnumerable<VOTEMAINDto> ReadVOTEMAINs(Expression<Func<VOTEMAIN, bool>> filter);
		IEnumerable<VOTEMAINDto> ReadVOTEMAINs(ISpecification<VOTEMAIN> specification);
		IEnumerable<VOTEMAINDto> ReadVOTEMAINs(IQueryable<VOTEMAIN> query);
		IEnumerable<VOTEMAINDto> ReadVOTEMAINs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<VOTEMAINDto> ReadVOTEMAINs(object[] keyWords);
		IEnumerable<VOTEMAINDto> ReadVOTEMAINsPaged(int startIndex, int pageSize);
		IEnumerable<VOTEMAINDto> ReadVOTEMAINsPaged(IQueryable<VOTEMAIN> source, int pageIndex, int pageSize);
		IEnumerable<VOTEMAINDto> ReadVOTEMAINsPaged(IQueryable<VOTEMAIN> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<VOTEMAINDto> ReadVOTEMAINsFiltered(string sortExpression, string filterExpression);
		IEnumerable<VOTEMAINDto> ReadVOTEMAINsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<VOTEMAINDto> ReadVOTEMAINsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<VOTEMAIN, bool>> filter);
		VOTEMAINDto ReadVOTEMAINs(string dtoKey);
		int CountVOTEMAINs();
		int CountVOTEMAINs(string filterExpression);
		int CountVOTEMAINs(Expression<Func<VOTEMAIN, bool>> filter);
		string CreateVOTEMAIN(VOTEMAINDto votemain, bool doSaveChanges = true);
		void UpdateVOTEMAIN(VOTEMAINDto votemain, bool doSaveChanges = true);
		void UpdateVOTEMAINs(IEnumerable<VOTEMAINDto> votemains, bool doSaveChanges = true);
		void DeleteVOTEMAIN(VOTEMAINDto votemain, bool doSaveChanges = true);
		void DeleteVOTEMAINs(IEnumerable<VOTEMAINDto> votemains, bool doSaveChanges = true);
		void SaveVOTEMAIN(VOTEMAINDto votemain, bool doSaveChanges = true);
		void SaveVOTEMAINs(IEnumerable<VOTEMAINDto> votemains, bool doSaveChanges = true);


		#endregion VOTEMAIN CRUD Operations


		#region VOTEJOB CRUD Operations


		IVOTEJOBService VOTEJOBService { get; }
		IQueryable<VOTEJOB> VOTEJOBs { get; }
		IQueryable<VOTEJOB> ReadVOTEJOBs(Expression<Func<VOTEJOB, bool>> filter, int dummy);
		IEnumerable<VOTEJOBDto> ReadVOTEJOBs();
		IEnumerable<VOTEJOBDto> ReadVOTEJOBs(Expression<Func<VOTEJOB, bool>> filter);
		IEnumerable<VOTEJOBDto> ReadVOTEJOBs(ISpecification<VOTEJOB> specification);
		IEnumerable<VOTEJOBDto> ReadVOTEJOBs(IQueryable<VOTEJOB> query);
		IEnumerable<VOTEJOBDto> ReadVOTEJOBs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<VOTEJOBDto> ReadVOTEJOBs(object[] keyWords);
		IEnumerable<VOTEJOBDto> ReadVOTEJOBsPaged(int startIndex, int pageSize);
		IEnumerable<VOTEJOBDto> ReadVOTEJOBsPaged(IQueryable<VOTEJOB> source, int pageIndex, int pageSize);
		IEnumerable<VOTEJOBDto> ReadVOTEJOBsPaged(IQueryable<VOTEJOB> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<VOTEJOBDto> ReadVOTEJOBsFiltered(string sortExpression, string filterExpression);
		IEnumerable<VOTEJOBDto> ReadVOTEJOBsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<VOTEJOBDto> ReadVOTEJOBsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<VOTEJOB, bool>> filter);
		VOTEJOBDto ReadVOTEJOBs(string dtoKey);
		int CountVOTEJOBs();
		int CountVOTEJOBs(string filterExpression);
		int CountVOTEJOBs(Expression<Func<VOTEJOB, bool>> filter);
		string CreateVOTEJOB(VOTEJOBDto votejob, bool doSaveChanges = true);
		void UpdateVOTEJOB(VOTEJOBDto votejob, bool doSaveChanges = true);
		void UpdateVOTEJOBs(IEnumerable<VOTEJOBDto> votejobs, bool doSaveChanges = true);
		void DeleteVOTEJOB(VOTEJOBDto votejob, bool doSaveChanges = true);
		void DeleteVOTEJOBs(IEnumerable<VOTEJOBDto> votejobs, bool doSaveChanges = true);
		void SaveVOTEJOB(VOTEJOBDto votejob, bool doSaveChanges = true);
		void SaveVOTEJOBs(IEnumerable<VOTEJOBDto> votejobs, bool doSaveChanges = true);


		#endregion VOTEJOB CRUD Operations


		#region VOTEINSTANCE CRUD Operations


		IVOTEINSTANCEService VOTEINSTANCEService { get; }
		IQueryable<VOTEINSTANCE> VOTEINSTANCEs { get; }
		IQueryable<VOTEINSTANCE> ReadVOTEINSTANCEs(Expression<Func<VOTEINSTANCE, bool>> filter, int dummy);
		IEnumerable<VOTEINSTANCEDto> ReadVOTEINSTANCEs();
		IEnumerable<VOTEINSTANCEDto> ReadVOTEINSTANCEs(Expression<Func<VOTEINSTANCE, bool>> filter);
		IEnumerable<VOTEINSTANCEDto> ReadVOTEINSTANCEs(ISpecification<VOTEINSTANCE> specification);
		IEnumerable<VOTEINSTANCEDto> ReadVOTEINSTANCEs(IQueryable<VOTEINSTANCE> query);
		IEnumerable<VOTEINSTANCEDto> ReadVOTEINSTANCEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<VOTEINSTANCEDto> ReadVOTEINSTANCEs(object[] keyWords);
		IEnumerable<VOTEINSTANCEDto> ReadVOTEINSTANCEsPaged(int startIndex, int pageSize);
		IEnumerable<VOTEINSTANCEDto> ReadVOTEINSTANCEsPaged(IQueryable<VOTEINSTANCE> source, int pageIndex, int pageSize);
		IEnumerable<VOTEINSTANCEDto> ReadVOTEINSTANCEsPaged(IQueryable<VOTEINSTANCE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<VOTEINSTANCEDto> ReadVOTEINSTANCEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<VOTEINSTANCEDto> ReadVOTEINSTANCEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<VOTEINSTANCEDto> ReadVOTEINSTANCEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<VOTEINSTANCE, bool>> filter);
		VOTEINSTANCEDto ReadVOTEINSTANCEs(string dtoKey);
		int CountVOTEINSTANCEs();
		int CountVOTEINSTANCEs(string filterExpression);
		int CountVOTEINSTANCEs(Expression<Func<VOTEINSTANCE, bool>> filter);
		string CreateVOTEINSTANCE(VOTEINSTANCEDto voteinstance, bool doSaveChanges = true);
		void UpdateVOTEINSTANCE(VOTEINSTANCEDto voteinstance, bool doSaveChanges = true);
		void UpdateVOTEINSTANCEs(IEnumerable<VOTEINSTANCEDto> voteinstances, bool doSaveChanges = true);
		void DeleteVOTEINSTANCE(VOTEINSTANCEDto voteinstance, bool doSaveChanges = true);
		void DeleteVOTEINSTANCEs(IEnumerable<VOTEINSTANCEDto> voteinstances, bool doSaveChanges = true);
		void SaveVOTEINSTANCE(VOTEINSTANCEDto voteinstance, bool doSaveChanges = true);
		void SaveVOTEINSTANCEs(IEnumerable<VOTEINSTANCEDto> voteinstances, bool doSaveChanges = true);


		#endregion VOTEINSTANCE CRUD Operations


		#region VOTEINSDET CRUD Operations


		IVOTEINSDETService VOTEINSDETService { get; }
		IQueryable<VOTEINSDET> VOTEINSDETs { get; }
		IQueryable<VOTEINSDET> ReadVOTEINSDETs(Expression<Func<VOTEINSDET, bool>> filter, int dummy);
		IEnumerable<VOTEINSDETDto> ReadVOTEINSDETs();
		IEnumerable<VOTEINSDETDto> ReadVOTEINSDETs(Expression<Func<VOTEINSDET, bool>> filter);
		IEnumerable<VOTEINSDETDto> ReadVOTEINSDETs(ISpecification<VOTEINSDET> specification);
		IEnumerable<VOTEINSDETDto> ReadVOTEINSDETs(IQueryable<VOTEINSDET> query);
		IEnumerable<VOTEINSDETDto> ReadVOTEINSDETs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<VOTEINSDETDto> ReadVOTEINSDETs(object[] keyWords);
		IEnumerable<VOTEINSDETDto> ReadVOTEINSDETsPaged(int startIndex, int pageSize);
		IEnumerable<VOTEINSDETDto> ReadVOTEINSDETsPaged(IQueryable<VOTEINSDET> source, int pageIndex, int pageSize);
		IEnumerable<VOTEINSDETDto> ReadVOTEINSDETsPaged(IQueryable<VOTEINSDET> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<VOTEINSDETDto> ReadVOTEINSDETsFiltered(string sortExpression, string filterExpression);
		IEnumerable<VOTEINSDETDto> ReadVOTEINSDETsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<VOTEINSDETDto> ReadVOTEINSDETsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<VOTEINSDET, bool>> filter);
		VOTEINSDETDto ReadVOTEINSDETs(string dtoKey);
		int CountVOTEINSDETs();
		int CountVOTEINSDETs(string filterExpression);
		int CountVOTEINSDETs(Expression<Func<VOTEINSDET, bool>> filter);
		string CreateVOTEINSDET(VOTEINSDETDto voteinsdet, bool doSaveChanges = true);
		void UpdateVOTEINSDET(VOTEINSDETDto voteinsdet, bool doSaveChanges = true);
		void UpdateVOTEINSDETs(IEnumerable<VOTEINSDETDto> voteinsdets, bool doSaveChanges = true);
		void DeleteVOTEINSDET(VOTEINSDETDto voteinsdet, bool doSaveChanges = true);
		void DeleteVOTEINSDETs(IEnumerable<VOTEINSDETDto> voteinsdets, bool doSaveChanges = true);
		void SaveVOTEINSDET(VOTEINSDETDto voteinsdet, bool doSaveChanges = true);
		void SaveVOTEINSDETs(IEnumerable<VOTEINSDETDto> voteinsdets, bool doSaveChanges = true);


		#endregion VOTEINSDET CRUD Operations


		#region VOTEGROUP CRUD Operations


		IVOTEGROUPService VOTEGROUPService { get; }
		IQueryable<VOTEGROUP> VOTEGROUPs { get; }
		IQueryable<VOTEGROUP> ReadVOTEGROUPs(Expression<Func<VOTEGROUP, bool>> filter, int dummy);
		IEnumerable<VOTEGROUPDto> ReadVOTEGROUPs();
		IEnumerable<VOTEGROUPDto> ReadVOTEGROUPs(Expression<Func<VOTEGROUP, bool>> filter);
		IEnumerable<VOTEGROUPDto> ReadVOTEGROUPs(ISpecification<VOTEGROUP> specification);
		IEnumerable<VOTEGROUPDto> ReadVOTEGROUPs(IQueryable<VOTEGROUP> query);
		IEnumerable<VOTEGROUPDto> ReadVOTEGROUPs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<VOTEGROUPDto> ReadVOTEGROUPs(object[] keyWords);
		IEnumerable<VOTEGROUPDto> ReadVOTEGROUPsPaged(int startIndex, int pageSize);
		IEnumerable<VOTEGROUPDto> ReadVOTEGROUPsPaged(IQueryable<VOTEGROUP> source, int pageIndex, int pageSize);
		IEnumerable<VOTEGROUPDto> ReadVOTEGROUPsPaged(IQueryable<VOTEGROUP> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<VOTEGROUPDto> ReadVOTEGROUPsFiltered(string sortExpression, string filterExpression);
		IEnumerable<VOTEGROUPDto> ReadVOTEGROUPsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<VOTEGROUPDto> ReadVOTEGROUPsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<VOTEGROUP, bool>> filter);
		VOTEGROUPDto ReadVOTEGROUPs(string dtoKey);
		int CountVOTEGROUPs();
		int CountVOTEGROUPs(string filterExpression);
		int CountVOTEGROUPs(Expression<Func<VOTEGROUP, bool>> filter);
		string CreateVOTEGROUP(VOTEGROUPDto votegroup, bool doSaveChanges = true);
		void UpdateVOTEGROUP(VOTEGROUPDto votegroup, bool doSaveChanges = true);
		void UpdateVOTEGROUPs(IEnumerable<VOTEGROUPDto> votegroups, bool doSaveChanges = true);
		void DeleteVOTEGROUP(VOTEGROUPDto votegroup, bool doSaveChanges = true);
		void DeleteVOTEGROUPs(IEnumerable<VOTEGROUPDto> votegroups, bool doSaveChanges = true);
		void SaveVOTEGROUP(VOTEGROUPDto votegroup, bool doSaveChanges = true);
		void SaveVOTEGROUPs(IEnumerable<VOTEGROUPDto> votegroups, bool doSaveChanges = true);


		#endregion VOTEGROUP CRUD Operations


		#region VOTEGCOND CRUD Operations


		IVOTEGCONDService VOTEGCONDService { get; }
		IQueryable<VOTEGCOND> VOTEGCONDs { get; }
		IQueryable<VOTEGCOND> ReadVOTEGCONDs(Expression<Func<VOTEGCOND, bool>> filter, int dummy);
		IEnumerable<VOTEGCONDDto> ReadVOTEGCONDs();
		IEnumerable<VOTEGCONDDto> ReadVOTEGCONDs(Expression<Func<VOTEGCOND, bool>> filter);
		IEnumerable<VOTEGCONDDto> ReadVOTEGCONDs(ISpecification<VOTEGCOND> specification);
		IEnumerable<VOTEGCONDDto> ReadVOTEGCONDs(IQueryable<VOTEGCOND> query);
		IEnumerable<VOTEGCONDDto> ReadVOTEGCONDs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<VOTEGCONDDto> ReadVOTEGCONDs(object[] keyWords);
		IEnumerable<VOTEGCONDDto> ReadVOTEGCONDsPaged(int startIndex, int pageSize);
		IEnumerable<VOTEGCONDDto> ReadVOTEGCONDsPaged(IQueryable<VOTEGCOND> source, int pageIndex, int pageSize);
		IEnumerable<VOTEGCONDDto> ReadVOTEGCONDsPaged(IQueryable<VOTEGCOND> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<VOTEGCONDDto> ReadVOTEGCONDsFiltered(string sortExpression, string filterExpression);
		IEnumerable<VOTEGCONDDto> ReadVOTEGCONDsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<VOTEGCONDDto> ReadVOTEGCONDsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<VOTEGCOND, bool>> filter);
		VOTEGCONDDto ReadVOTEGCONDs(string dtoKey);
		int CountVOTEGCONDs();
		int CountVOTEGCONDs(string filterExpression);
		int CountVOTEGCONDs(Expression<Func<VOTEGCOND, bool>> filter);
		string CreateVOTEGCOND(VOTEGCONDDto votegcond, bool doSaveChanges = true);
		void UpdateVOTEGCOND(VOTEGCONDDto votegcond, bool doSaveChanges = true);
		void UpdateVOTEGCONDs(IEnumerable<VOTEGCONDDto> votegconds, bool doSaveChanges = true);
		void DeleteVOTEGCOND(VOTEGCONDDto votegcond, bool doSaveChanges = true);
		void DeleteVOTEGCONDs(IEnumerable<VOTEGCONDDto> votegconds, bool doSaveChanges = true);
		void SaveVOTEGCOND(VOTEGCONDDto votegcond, bool doSaveChanges = true);
		void SaveVOTEGCONDs(IEnumerable<VOTEGCONDDto> votegconds, bool doSaveChanges = true);


		#endregion VOTEGCOND CRUD Operations


		#region TRAININGTIME CRUD Operations


		ITRAININGTIMEService TRAININGTIMEService { get; }
		IQueryable<TRAININGTIME> TRAININGTIMEs { get; }
		IQueryable<TRAININGTIME> ReadTRAININGTIMEs(Expression<Func<TRAININGTIME, bool>> filter, int dummy);
		IEnumerable<TRAININGTIMEDto> ReadTRAININGTIMEs();
		IEnumerable<TRAININGTIMEDto> ReadTRAININGTIMEs(Expression<Func<TRAININGTIME, bool>> filter);
		IEnumerable<TRAININGTIMEDto> ReadTRAININGTIMEs(ISpecification<TRAININGTIME> specification);
		IEnumerable<TRAININGTIMEDto> ReadTRAININGTIMEs(IQueryable<TRAININGTIME> query);
		IEnumerable<TRAININGTIMEDto> ReadTRAININGTIMEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<TRAININGTIMEDto> ReadTRAININGTIMEs(object[] keyWords);
		IEnumerable<TRAININGTIMEDto> ReadTRAININGTIMEsPaged(int startIndex, int pageSize);
		IEnumerable<TRAININGTIMEDto> ReadTRAININGTIMEsPaged(IQueryable<TRAININGTIME> source, int pageIndex, int pageSize);
		IEnumerable<TRAININGTIMEDto> ReadTRAININGTIMEsPaged(IQueryable<TRAININGTIME> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<TRAININGTIMEDto> ReadTRAININGTIMEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<TRAININGTIMEDto> ReadTRAININGTIMEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<TRAININGTIMEDto> ReadTRAININGTIMEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<TRAININGTIME, bool>> filter);
		TRAININGTIMEDto ReadTRAININGTIMEs(string dtoKey);
		int CountTRAININGTIMEs();
		int CountTRAININGTIMEs(string filterExpression);
		int CountTRAININGTIMEs(Expression<Func<TRAININGTIME, bool>> filter);
		string CreateTRAININGTIME(TRAININGTIMEDto trainingtime, bool doSaveChanges = true);
		void UpdateTRAININGTIME(TRAININGTIMEDto trainingtime, bool doSaveChanges = true);
		void UpdateTRAININGTIMEs(IEnumerable<TRAININGTIMEDto> trainingtimes, bool doSaveChanges = true);
		void DeleteTRAININGTIME(TRAININGTIMEDto trainingtime, bool doSaveChanges = true);
		void DeleteTRAININGTIMEs(IEnumerable<TRAININGTIMEDto> trainingtimes, bool doSaveChanges = true);
		void SaveTRAININGTIME(TRAININGTIMEDto trainingtime, bool doSaveChanges = true);
		void SaveTRAININGTIMEs(IEnumerable<TRAININGTIMEDto> trainingtimes, bool doSaveChanges = true);


		#endregion TRAININGTIME CRUD Operations


		#region TEST CRUD Operations


		ITESTService TESTService { get; }
		IQueryable<TEST> TESTs { get; }
		IQueryable<TEST> ReadTESTs(Expression<Func<TEST, bool>> filter, int dummy);
		IEnumerable<TESTDto> ReadTESTs();
		IEnumerable<TESTDto> ReadTESTs(Expression<Func<TEST, bool>> filter);
		IEnumerable<TESTDto> ReadTESTs(ISpecification<TEST> specification);
		IEnumerable<TESTDto> ReadTESTs(IQueryable<TEST> query);
		IEnumerable<TESTDto> ReadTESTs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<TESTDto> ReadTESTs(object[] keyWords);
		IEnumerable<TESTDto> ReadTESTsPaged(int startIndex, int pageSize);
		IEnumerable<TESTDto> ReadTESTsPaged(IQueryable<TEST> source, int pageIndex, int pageSize);
		IEnumerable<TESTDto> ReadTESTsPaged(IQueryable<TEST> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<TESTDto> ReadTESTsFiltered(string sortExpression, string filterExpression);
		IEnumerable<TESTDto> ReadTESTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<TESTDto> ReadTESTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<TEST, bool>> filter);
		TESTDto ReadTESTs(string dtoKey);
		int CountTESTs();
		int CountTESTs(string filterExpression);
		int CountTESTs(Expression<Func<TEST, bool>> filter);
		string CreateTEST(TESTDto test, bool doSaveChanges = true);
		void UpdateTEST(TESTDto test, bool doSaveChanges = true);
		void UpdateTESTs(IEnumerable<TESTDto> tests, bool doSaveChanges = true);
		void DeleteTEST(TESTDto test, bool doSaveChanges = true);
		void DeleteTESTs(IEnumerable<TESTDto> tests, bool doSaveChanges = true);
		void SaveTEST(TESTDto test, bool doSaveChanges = true);
		void SaveTESTs(IEnumerable<TESTDto> tests, bool doSaveChanges = true);


		#endregion TEST CRUD Operations


		#region TEACHTIMETYPE CRUD Operations


		ITEACHTIMETYPEService TEACHTIMETYPEService { get; }
		IQueryable<TEACHTIMETYPE> TEACHTIMETYPEs { get; }
		IQueryable<TEACHTIMETYPE> ReadTEACHTIMETYPEs(Expression<Func<TEACHTIMETYPE, bool>> filter, int dummy);
		IEnumerable<TEACHTIMETYPEDto> ReadTEACHTIMETYPEs();
		IEnumerable<TEACHTIMETYPEDto> ReadTEACHTIMETYPEs(Expression<Func<TEACHTIMETYPE, bool>> filter);
		IEnumerable<TEACHTIMETYPEDto> ReadTEACHTIMETYPEs(ISpecification<TEACHTIMETYPE> specification);
		IEnumerable<TEACHTIMETYPEDto> ReadTEACHTIMETYPEs(IQueryable<TEACHTIMETYPE> query);
		IEnumerable<TEACHTIMETYPEDto> ReadTEACHTIMETYPEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<TEACHTIMETYPEDto> ReadTEACHTIMETYPEs(object[] keyWords);
		IEnumerable<TEACHTIMETYPEDto> ReadTEACHTIMETYPEsPaged(int startIndex, int pageSize);
		IEnumerable<TEACHTIMETYPEDto> ReadTEACHTIMETYPEsPaged(IQueryable<TEACHTIMETYPE> source, int pageIndex, int pageSize);
		IEnumerable<TEACHTIMETYPEDto> ReadTEACHTIMETYPEsPaged(IQueryable<TEACHTIMETYPE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<TEACHTIMETYPEDto> ReadTEACHTIMETYPEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<TEACHTIMETYPEDto> ReadTEACHTIMETYPEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<TEACHTIMETYPEDto> ReadTEACHTIMETYPEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<TEACHTIMETYPE, bool>> filter);
		TEACHTIMETYPEDto ReadTEACHTIMETYPEs(string dtoKey);
		int CountTEACHTIMETYPEs();
		int CountTEACHTIMETYPEs(string filterExpression);
		int CountTEACHTIMETYPEs(Expression<Func<TEACHTIMETYPE, bool>> filter);
		string CreateTEACHTIMETYPE(TEACHTIMETYPEDto teachtimetype, bool doSaveChanges = true);
		void UpdateTEACHTIMETYPE(TEACHTIMETYPEDto teachtimetype, bool doSaveChanges = true);
		void UpdateTEACHTIMETYPEs(IEnumerable<TEACHTIMETYPEDto> teachtimetypes, bool doSaveChanges = true);
		void DeleteTEACHTIMETYPE(TEACHTIMETYPEDto teachtimetype, bool doSaveChanges = true);
		void DeleteTEACHTIMETYPEs(IEnumerable<TEACHTIMETYPEDto> teachtimetypes, bool doSaveChanges = true);
		void SaveTEACHTIMETYPE(TEACHTIMETYPEDto teachtimetype, bool doSaveChanges = true);
		void SaveTEACHTIMETYPEs(IEnumerable<TEACHTIMETYPEDto> teachtimetypes, bool doSaveChanges = true);


		#endregion TEACHTIMETYPE CRUD Operations


		#region TEACHTIMERATE CRUD Operations


		ITEACHTIMERATEService TEACHTIMERATEService { get; }
		IQueryable<TEACHTIMERATE> TEACHTIMERATEs { get; }
		IQueryable<TEACHTIMERATE> ReadTEACHTIMERATEs(Expression<Func<TEACHTIMERATE, bool>> filter, int dummy);
		IEnumerable<TEACHTIMERATEDto> ReadTEACHTIMERATEs();
		IEnumerable<TEACHTIMERATEDto> ReadTEACHTIMERATEs(Expression<Func<TEACHTIMERATE, bool>> filter);
		IEnumerable<TEACHTIMERATEDto> ReadTEACHTIMERATEs(ISpecification<TEACHTIMERATE> specification);
		IEnumerable<TEACHTIMERATEDto> ReadTEACHTIMERATEs(IQueryable<TEACHTIMERATE> query);
		IEnumerable<TEACHTIMERATEDto> ReadTEACHTIMERATEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<TEACHTIMERATEDto> ReadTEACHTIMERATEs(object[] keyWords);
		IEnumerable<TEACHTIMERATEDto> ReadTEACHTIMERATEsPaged(int startIndex, int pageSize);
		IEnumerable<TEACHTIMERATEDto> ReadTEACHTIMERATEsPaged(IQueryable<TEACHTIMERATE> source, int pageIndex, int pageSize);
		IEnumerable<TEACHTIMERATEDto> ReadTEACHTIMERATEsPaged(IQueryable<TEACHTIMERATE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<TEACHTIMERATEDto> ReadTEACHTIMERATEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<TEACHTIMERATEDto> ReadTEACHTIMERATEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<TEACHTIMERATEDto> ReadTEACHTIMERATEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<TEACHTIMERATE, bool>> filter);
		TEACHTIMERATEDto ReadTEACHTIMERATEs(string dtoKey);
		int CountTEACHTIMERATEs();
		int CountTEACHTIMERATEs(string filterExpression);
		int CountTEACHTIMERATEs(Expression<Func<TEACHTIMERATE, bool>> filter);
		string CreateTEACHTIMERATE(TEACHTIMERATEDto teachtimerate, bool doSaveChanges = true);
		void UpdateTEACHTIMERATE(TEACHTIMERATEDto teachtimerate, bool doSaveChanges = true);
		void UpdateTEACHTIMERATEs(IEnumerable<TEACHTIMERATEDto> teachtimerates, bool doSaveChanges = true);
		void DeleteTEACHTIMERATE(TEACHTIMERATEDto teachtimerate, bool doSaveChanges = true);
		void DeleteTEACHTIMERATEs(IEnumerable<TEACHTIMERATEDto> teachtimerates, bool doSaveChanges = true);
		void SaveTEACHTIMERATE(TEACHTIMERATEDto teachtimerate, bool doSaveChanges = true);
		void SaveTEACHTIMERATEs(IEnumerable<TEACHTIMERATEDto> teachtimerates, bool doSaveChanges = true);


		#endregion TEACHTIMERATE CRUD Operations


		#region TEACHTIMEKPIREFTEMP CRUD Operations


		ITEACHTIMEKPIREFTEMPService TEACHTIMEKPIREFTEMPService { get; }
		IQueryable<TEACHTIMEKPIREFTEMP> TEACHTIMEKPIREFTEMPs { get; }
		IQueryable<TEACHTIMEKPIREFTEMP> ReadTEACHTIMEKPIREFTEMPs(Expression<Func<TEACHTIMEKPIREFTEMP, bool>> filter, int dummy);
		IEnumerable<TEACHTIMEKPIREFTEMPDto> ReadTEACHTIMEKPIREFTEMPs();
		IEnumerable<TEACHTIMEKPIREFTEMPDto> ReadTEACHTIMEKPIREFTEMPs(Expression<Func<TEACHTIMEKPIREFTEMP, bool>> filter);
		IEnumerable<TEACHTIMEKPIREFTEMPDto> ReadTEACHTIMEKPIREFTEMPs(ISpecification<TEACHTIMEKPIREFTEMP> specification);
		IEnumerable<TEACHTIMEKPIREFTEMPDto> ReadTEACHTIMEKPIREFTEMPs(IQueryable<TEACHTIMEKPIREFTEMP> query);
		IEnumerable<TEACHTIMEKPIREFTEMPDto> ReadTEACHTIMEKPIREFTEMPs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<TEACHTIMEKPIREFTEMPDto> ReadTEACHTIMEKPIREFTEMPs(object[] keyWords);
		IEnumerable<TEACHTIMEKPIREFTEMPDto> ReadTEACHTIMEKPIREFTEMPsPaged(int startIndex, int pageSize);
		IEnumerable<TEACHTIMEKPIREFTEMPDto> ReadTEACHTIMEKPIREFTEMPsPaged(IQueryable<TEACHTIMEKPIREFTEMP> source, int pageIndex, int pageSize);
		IEnumerable<TEACHTIMEKPIREFTEMPDto> ReadTEACHTIMEKPIREFTEMPsPaged(IQueryable<TEACHTIMEKPIREFTEMP> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<TEACHTIMEKPIREFTEMPDto> ReadTEACHTIMEKPIREFTEMPsFiltered(string sortExpression, string filterExpression);
		IEnumerable<TEACHTIMEKPIREFTEMPDto> ReadTEACHTIMEKPIREFTEMPsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<TEACHTIMEKPIREFTEMPDto> ReadTEACHTIMEKPIREFTEMPsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<TEACHTIMEKPIREFTEMP, bool>> filter);
		TEACHTIMEKPIREFTEMPDto ReadTEACHTIMEKPIREFTEMPs(string dtoKey);
		int CountTEACHTIMEKPIREFTEMPs();
		int CountTEACHTIMEKPIREFTEMPs(string filterExpression);
		int CountTEACHTIMEKPIREFTEMPs(Expression<Func<TEACHTIMEKPIREFTEMP, bool>> filter);
		string CreateTEACHTIMEKPIREFTEMP(TEACHTIMEKPIREFTEMPDto teachtimekpireftemp, bool doSaveChanges = true);
		void UpdateTEACHTIMEKPIREFTEMP(TEACHTIMEKPIREFTEMPDto teachtimekpireftemp, bool doSaveChanges = true);
		void UpdateTEACHTIMEKPIREFTEMPs(IEnumerable<TEACHTIMEKPIREFTEMPDto> teachtimekpireftemps, bool doSaveChanges = true);
		void DeleteTEACHTIMEKPIREFTEMP(TEACHTIMEKPIREFTEMPDto teachtimekpireftemp, bool doSaveChanges = true);
		void DeleteTEACHTIMEKPIREFTEMPs(IEnumerable<TEACHTIMEKPIREFTEMPDto> teachtimekpireftemps, bool doSaveChanges = true);
		void SaveTEACHTIMEKPIREFTEMP(TEACHTIMEKPIREFTEMPDto teachtimekpireftemp, bool doSaveChanges = true);
		void SaveTEACHTIMEKPIREFTEMPs(IEnumerable<TEACHTIMEKPIREFTEMPDto> teachtimekpireftemps, bool doSaveChanges = true);


		#endregion TEACHTIMEKPIREFTEMP CRUD Operations


		#region TEACHTIMEKPIREF CRUD Operations


		ITEACHTIMEKPIREFService TEACHTIMEKPIREFService { get; }
		IQueryable<TEACHTIMEKPIREF> TEACHTIMEKPIREFs { get; }
		IQueryable<TEACHTIMEKPIREF> ReadTEACHTIMEKPIREFs(Expression<Func<TEACHTIMEKPIREF, bool>> filter, int dummy);
		IEnumerable<TEACHTIMEKPIREFDto> ReadTEACHTIMEKPIREFs();
		IEnumerable<TEACHTIMEKPIREFDto> ReadTEACHTIMEKPIREFs(Expression<Func<TEACHTIMEKPIREF, bool>> filter);
		IEnumerable<TEACHTIMEKPIREFDto> ReadTEACHTIMEKPIREFs(ISpecification<TEACHTIMEKPIREF> specification);
		IEnumerable<TEACHTIMEKPIREFDto> ReadTEACHTIMEKPIREFs(IQueryable<TEACHTIMEKPIREF> query);
		IEnumerable<TEACHTIMEKPIREFDto> ReadTEACHTIMEKPIREFs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<TEACHTIMEKPIREFDto> ReadTEACHTIMEKPIREFs(object[] keyWords);
		IEnumerable<TEACHTIMEKPIREFDto> ReadTEACHTIMEKPIREFsPaged(int startIndex, int pageSize);
		IEnumerable<TEACHTIMEKPIREFDto> ReadTEACHTIMEKPIREFsPaged(IQueryable<TEACHTIMEKPIREF> source, int pageIndex, int pageSize);
		IEnumerable<TEACHTIMEKPIREFDto> ReadTEACHTIMEKPIREFsPaged(IQueryable<TEACHTIMEKPIREF> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<TEACHTIMEKPIREFDto> ReadTEACHTIMEKPIREFsFiltered(string sortExpression, string filterExpression);
		IEnumerable<TEACHTIMEKPIREFDto> ReadTEACHTIMEKPIREFsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<TEACHTIMEKPIREFDto> ReadTEACHTIMEKPIREFsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<TEACHTIMEKPIREF, bool>> filter);
		TEACHTIMEKPIREFDto ReadTEACHTIMEKPIREFs(string dtoKey);
		int CountTEACHTIMEKPIREFs();
		int CountTEACHTIMEKPIREFs(string filterExpression);
		int CountTEACHTIMEKPIREFs(Expression<Func<TEACHTIMEKPIREF, bool>> filter);
		string CreateTEACHTIMEKPIREF(TEACHTIMEKPIREFDto teachtimekpiref, bool doSaveChanges = true);
		void UpdateTEACHTIMEKPIREF(TEACHTIMEKPIREFDto teachtimekpiref, bool doSaveChanges = true);
		void UpdateTEACHTIMEKPIREFs(IEnumerable<TEACHTIMEKPIREFDto> teachtimekpirefs, bool doSaveChanges = true);
		void DeleteTEACHTIMEKPIREF(TEACHTIMEKPIREFDto teachtimekpiref, bool doSaveChanges = true);
		void DeleteTEACHTIMEKPIREFs(IEnumerable<TEACHTIMEKPIREFDto> teachtimekpirefs, bool doSaveChanges = true);
		void SaveTEACHTIMEKPIREF(TEACHTIMEKPIREFDto teachtimekpiref, bool doSaveChanges = true);
		void SaveTEACHTIMEKPIREFs(IEnumerable<TEACHTIMEKPIREFDto> teachtimekpirefs, bool doSaveChanges = true);


		#endregion TEACHTIMEKPIREF CRUD Operations


		#region TEACHPOINTREF CRUD Operations


		ITEACHPOINTREFService TEACHPOINTREFService { get; }
		IQueryable<TEACHPOINTREF> TEACHPOINTREFs { get; }
		IQueryable<TEACHPOINTREF> ReadTEACHPOINTREFs(Expression<Func<TEACHPOINTREF, bool>> filter, int dummy);
		IEnumerable<TEACHPOINTREFDto> ReadTEACHPOINTREFs();
		IEnumerable<TEACHPOINTREFDto> ReadTEACHPOINTREFs(Expression<Func<TEACHPOINTREF, bool>> filter);
		IEnumerable<TEACHPOINTREFDto> ReadTEACHPOINTREFs(ISpecification<TEACHPOINTREF> specification);
		IEnumerable<TEACHPOINTREFDto> ReadTEACHPOINTREFs(IQueryable<TEACHPOINTREF> query);
		IEnumerable<TEACHPOINTREFDto> ReadTEACHPOINTREFs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<TEACHPOINTREFDto> ReadTEACHPOINTREFs(object[] keyWords);
		IEnumerable<TEACHPOINTREFDto> ReadTEACHPOINTREFsPaged(int startIndex, int pageSize);
		IEnumerable<TEACHPOINTREFDto> ReadTEACHPOINTREFsPaged(IQueryable<TEACHPOINTREF> source, int pageIndex, int pageSize);
		IEnumerable<TEACHPOINTREFDto> ReadTEACHPOINTREFsPaged(IQueryable<TEACHPOINTREF> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<TEACHPOINTREFDto> ReadTEACHPOINTREFsFiltered(string sortExpression, string filterExpression);
		IEnumerable<TEACHPOINTREFDto> ReadTEACHPOINTREFsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<TEACHPOINTREFDto> ReadTEACHPOINTREFsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<TEACHPOINTREF, bool>> filter);
		TEACHPOINTREFDto ReadTEACHPOINTREFs(string dtoKey);
		int CountTEACHPOINTREFs();
		int CountTEACHPOINTREFs(string filterExpression);
		int CountTEACHPOINTREFs(Expression<Func<TEACHPOINTREF, bool>> filter);
		string CreateTEACHPOINTREF(TEACHPOINTREFDto teachpointref, bool doSaveChanges = true);
		void UpdateTEACHPOINTREF(TEACHPOINTREFDto teachpointref, bool doSaveChanges = true);
		void UpdateTEACHPOINTREFs(IEnumerable<TEACHPOINTREFDto> teachpointrefs, bool doSaveChanges = true);
		void DeleteTEACHPOINTREF(TEACHPOINTREFDto teachpointref, bool doSaveChanges = true);
		void DeleteTEACHPOINTREFs(IEnumerable<TEACHPOINTREFDto> teachpointrefs, bool doSaveChanges = true);
		void SaveTEACHPOINTREF(TEACHPOINTREFDto teachpointref, bool doSaveChanges = true);
		void SaveTEACHPOINTREFs(IEnumerable<TEACHPOINTREFDto> teachpointrefs, bool doSaveChanges = true);


		#endregion TEACHPOINTREF CRUD Operations


		#region TEACHPOINTJOBITEM CRUD Operations


		ITEACHPOINTJOBITEMService TEACHPOINTJOBITEMService { get; }
		IQueryable<TEACHPOINTJOBITEM> TEACHPOINTJOBITEMs { get; }
		IQueryable<TEACHPOINTJOBITEM> ReadTEACHPOINTJOBITEMs(Expression<Func<TEACHPOINTJOBITEM, bool>> filter, int dummy);
		IEnumerable<TEACHPOINTJOBITEMDto> ReadTEACHPOINTJOBITEMs();
		IEnumerable<TEACHPOINTJOBITEMDto> ReadTEACHPOINTJOBITEMs(Expression<Func<TEACHPOINTJOBITEM, bool>> filter);
		IEnumerable<TEACHPOINTJOBITEMDto> ReadTEACHPOINTJOBITEMs(ISpecification<TEACHPOINTJOBITEM> specification);
		IEnumerable<TEACHPOINTJOBITEMDto> ReadTEACHPOINTJOBITEMs(IQueryable<TEACHPOINTJOBITEM> query);
		IEnumerable<TEACHPOINTJOBITEMDto> ReadTEACHPOINTJOBITEMs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<TEACHPOINTJOBITEMDto> ReadTEACHPOINTJOBITEMs(object[] keyWords);
		IEnumerable<TEACHPOINTJOBITEMDto> ReadTEACHPOINTJOBITEMsPaged(int startIndex, int pageSize);
		IEnumerable<TEACHPOINTJOBITEMDto> ReadTEACHPOINTJOBITEMsPaged(IQueryable<TEACHPOINTJOBITEM> source, int pageIndex, int pageSize);
		IEnumerable<TEACHPOINTJOBITEMDto> ReadTEACHPOINTJOBITEMsPaged(IQueryable<TEACHPOINTJOBITEM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<TEACHPOINTJOBITEMDto> ReadTEACHPOINTJOBITEMsFiltered(string sortExpression, string filterExpression);
		IEnumerable<TEACHPOINTJOBITEMDto> ReadTEACHPOINTJOBITEMsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<TEACHPOINTJOBITEMDto> ReadTEACHPOINTJOBITEMsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<TEACHPOINTJOBITEM, bool>> filter);
		TEACHPOINTJOBITEMDto ReadTEACHPOINTJOBITEMs(string dtoKey);
		int CountTEACHPOINTJOBITEMs();
		int CountTEACHPOINTJOBITEMs(string filterExpression);
		int CountTEACHPOINTJOBITEMs(Expression<Func<TEACHPOINTJOBITEM, bool>> filter);
		string CreateTEACHPOINTJOBITEM(TEACHPOINTJOBITEMDto teachpointjobitem, bool doSaveChanges = true);
		void UpdateTEACHPOINTJOBITEM(TEACHPOINTJOBITEMDto teachpointjobitem, bool doSaveChanges = true);
		void UpdateTEACHPOINTJOBITEMs(IEnumerable<TEACHPOINTJOBITEMDto> teachpointjobitems, bool doSaveChanges = true);
		void DeleteTEACHPOINTJOBITEM(TEACHPOINTJOBITEMDto teachpointjobitem, bool doSaveChanges = true);
		void DeleteTEACHPOINTJOBITEMs(IEnumerable<TEACHPOINTJOBITEMDto> teachpointjobitems, bool doSaveChanges = true);
		void SaveTEACHPOINTJOBITEM(TEACHPOINTJOBITEMDto teachpointjobitem, bool doSaveChanges = true);
		void SaveTEACHPOINTJOBITEMs(IEnumerable<TEACHPOINTJOBITEMDto> teachpointjobitems, bool doSaveChanges = true);


		#endregion TEACHPOINTJOBITEM CRUD Operations


		#region TEACHPOINTITEMREQUIRE CRUD Operations


		ITEACHPOINTITEMREQUIREService TEACHPOINTITEMREQUIREService { get; }
		IQueryable<TEACHPOINTITEMREQUIRE> TEACHPOINTITEMREQUIREs { get; }
		IQueryable<TEACHPOINTITEMREQUIRE> ReadTEACHPOINTITEMREQUIREs(Expression<Func<TEACHPOINTITEMREQUIRE, bool>> filter, int dummy);
		IEnumerable<TEACHPOINTITEMREQUIREDto> ReadTEACHPOINTITEMREQUIREs();
		IEnumerable<TEACHPOINTITEMREQUIREDto> ReadTEACHPOINTITEMREQUIREs(Expression<Func<TEACHPOINTITEMREQUIRE, bool>> filter);
		IEnumerable<TEACHPOINTITEMREQUIREDto> ReadTEACHPOINTITEMREQUIREs(ISpecification<TEACHPOINTITEMREQUIRE> specification);
		IEnumerable<TEACHPOINTITEMREQUIREDto> ReadTEACHPOINTITEMREQUIREs(IQueryable<TEACHPOINTITEMREQUIRE> query);
		IEnumerable<TEACHPOINTITEMREQUIREDto> ReadTEACHPOINTITEMREQUIREs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<TEACHPOINTITEMREQUIREDto> ReadTEACHPOINTITEMREQUIREs(object[] keyWords);
		IEnumerable<TEACHPOINTITEMREQUIREDto> ReadTEACHPOINTITEMREQUIREsPaged(int startIndex, int pageSize);
		IEnumerable<TEACHPOINTITEMREQUIREDto> ReadTEACHPOINTITEMREQUIREsPaged(IQueryable<TEACHPOINTITEMREQUIRE> source, int pageIndex, int pageSize);
		IEnumerable<TEACHPOINTITEMREQUIREDto> ReadTEACHPOINTITEMREQUIREsPaged(IQueryable<TEACHPOINTITEMREQUIRE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<TEACHPOINTITEMREQUIREDto> ReadTEACHPOINTITEMREQUIREsFiltered(string sortExpression, string filterExpression);
		IEnumerable<TEACHPOINTITEMREQUIREDto> ReadTEACHPOINTITEMREQUIREsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<TEACHPOINTITEMREQUIREDto> ReadTEACHPOINTITEMREQUIREsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<TEACHPOINTITEMREQUIRE, bool>> filter);
		TEACHPOINTITEMREQUIREDto ReadTEACHPOINTITEMREQUIREs(string dtoKey);
		int CountTEACHPOINTITEMREQUIREs();
		int CountTEACHPOINTITEMREQUIREs(string filterExpression);
		int CountTEACHPOINTITEMREQUIREs(Expression<Func<TEACHPOINTITEMREQUIRE, bool>> filter);
		string CreateTEACHPOINTITEMREQUIRE(TEACHPOINTITEMREQUIREDto teachpointitemrequire, bool doSaveChanges = true);
		void UpdateTEACHPOINTITEMREQUIRE(TEACHPOINTITEMREQUIREDto teachpointitemrequire, bool doSaveChanges = true);
		void UpdateTEACHPOINTITEMREQUIREs(IEnumerable<TEACHPOINTITEMREQUIREDto> teachpointitemrequires, bool doSaveChanges = true);
		void DeleteTEACHPOINTITEMREQUIRE(TEACHPOINTITEMREQUIREDto teachpointitemrequire, bool doSaveChanges = true);
		void DeleteTEACHPOINTITEMREQUIREs(IEnumerable<TEACHPOINTITEMREQUIREDto> teachpointitemrequires, bool doSaveChanges = true);
		void SaveTEACHPOINTITEMREQUIRE(TEACHPOINTITEMREQUIREDto teachpointitemrequire, bool doSaveChanges = true);
		void SaveTEACHPOINTITEMREQUIREs(IEnumerable<TEACHPOINTITEMREQUIREDto> teachpointitemrequires, bool doSaveChanges = true);


		#endregion TEACHPOINTITEMREQUIRE CRUD Operations


		#region TEACHPOINTITEM CRUD Operations


		ITEACHPOINTITEMService TEACHPOINTITEMService { get; }
		IQueryable<TEACHPOINTITEM> TEACHPOINTITEMs { get; }
		IQueryable<TEACHPOINTITEM> ReadTEACHPOINTITEMs(Expression<Func<TEACHPOINTITEM, bool>> filter, int dummy);
		IEnumerable<TEACHPOINTITEMDto> ReadTEACHPOINTITEMs();
		IEnumerable<TEACHPOINTITEMDto> ReadTEACHPOINTITEMs(Expression<Func<TEACHPOINTITEM, bool>> filter);
		IEnumerable<TEACHPOINTITEMDto> ReadTEACHPOINTITEMs(ISpecification<TEACHPOINTITEM> specification);
		IEnumerable<TEACHPOINTITEMDto> ReadTEACHPOINTITEMs(IQueryable<TEACHPOINTITEM> query);
		IEnumerable<TEACHPOINTITEMDto> ReadTEACHPOINTITEMs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<TEACHPOINTITEMDto> ReadTEACHPOINTITEMs(object[] keyWords);
		IEnumerable<TEACHPOINTITEMDto> ReadTEACHPOINTITEMsPaged(int startIndex, int pageSize);
		IEnumerable<TEACHPOINTITEMDto> ReadTEACHPOINTITEMsPaged(IQueryable<TEACHPOINTITEM> source, int pageIndex, int pageSize);
		IEnumerable<TEACHPOINTITEMDto> ReadTEACHPOINTITEMsPaged(IQueryable<TEACHPOINTITEM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<TEACHPOINTITEMDto> ReadTEACHPOINTITEMsFiltered(string sortExpression, string filterExpression);
		IEnumerable<TEACHPOINTITEMDto> ReadTEACHPOINTITEMsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<TEACHPOINTITEMDto> ReadTEACHPOINTITEMsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<TEACHPOINTITEM, bool>> filter);
		TEACHPOINTITEMDto ReadTEACHPOINTITEMs(string dtoKey);
		int CountTEACHPOINTITEMs();
		int CountTEACHPOINTITEMs(string filterExpression);
		int CountTEACHPOINTITEMs(Expression<Func<TEACHPOINTITEM, bool>> filter);
		string CreateTEACHPOINTITEM(TEACHPOINTITEMDto teachpointitem, bool doSaveChanges = true);
		void UpdateTEACHPOINTITEM(TEACHPOINTITEMDto teachpointitem, bool doSaveChanges = true);
		void UpdateTEACHPOINTITEMs(IEnumerable<TEACHPOINTITEMDto> teachpointitems, bool doSaveChanges = true);
		void DeleteTEACHPOINTITEM(TEACHPOINTITEMDto teachpointitem, bool doSaveChanges = true);
		void DeleteTEACHPOINTITEMs(IEnumerable<TEACHPOINTITEMDto> teachpointitems, bool doSaveChanges = true);
		void SaveTEACHPOINTITEM(TEACHPOINTITEMDto teachpointitem, bool doSaveChanges = true);
		void SaveTEACHPOINTITEMs(IEnumerable<TEACHPOINTITEMDto> teachpointitems, bool doSaveChanges = true);


		#endregion TEACHPOINTITEM CRUD Operations


		#region TEACHPOINTEMPITEMDATUM CRUD Operations


		ITEACHPOINTEMPITEMDATUMService TEACHPOINTEMPITEMDATUMService { get; }
		IQueryable<TEACHPOINTEMPITEMDATUM> TEACHPOINTEMPITEMDATa { get; }
		IQueryable<TEACHPOINTEMPITEMDATUM> ReadTEACHPOINTEMPITEMDATa(Expression<Func<TEACHPOINTEMPITEMDATUM, bool>> filter, int dummy);
		IEnumerable<TEACHPOINTEMPITEMDATUMDto> ReadTEACHPOINTEMPITEMDATa();
		IEnumerable<TEACHPOINTEMPITEMDATUMDto> ReadTEACHPOINTEMPITEMDATa(Expression<Func<TEACHPOINTEMPITEMDATUM, bool>> filter);
		IEnumerable<TEACHPOINTEMPITEMDATUMDto> ReadTEACHPOINTEMPITEMDATa(ISpecification<TEACHPOINTEMPITEMDATUM> specification);
		IEnumerable<TEACHPOINTEMPITEMDATUMDto> ReadTEACHPOINTEMPITEMDATa(IQueryable<TEACHPOINTEMPITEMDATUM> query);
		IEnumerable<TEACHPOINTEMPITEMDATUMDto> ReadTEACHPOINTEMPITEMDATa(string[] propertyToSearch, object[] keyWords);
		IEnumerable<TEACHPOINTEMPITEMDATUMDto> ReadTEACHPOINTEMPITEMDATa(object[] keyWords);
		IEnumerable<TEACHPOINTEMPITEMDATUMDto> ReadTEACHPOINTEMPITEMDATaPaged(int startIndex, int pageSize);
		IEnumerable<TEACHPOINTEMPITEMDATUMDto> ReadTEACHPOINTEMPITEMDATaPaged(IQueryable<TEACHPOINTEMPITEMDATUM> source, int pageIndex, int pageSize);
		IEnumerable<TEACHPOINTEMPITEMDATUMDto> ReadTEACHPOINTEMPITEMDATaPaged(IQueryable<TEACHPOINTEMPITEMDATUM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<TEACHPOINTEMPITEMDATUMDto> ReadTEACHPOINTEMPITEMDATaFiltered(string sortExpression, string filterExpression);
		IEnumerable<TEACHPOINTEMPITEMDATUMDto> ReadTEACHPOINTEMPITEMDATaPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<TEACHPOINTEMPITEMDATUMDto> ReadTEACHPOINTEMPITEMDATaPagedAndFiltered(int startIndex, int pageSize, Expression<Func<TEACHPOINTEMPITEMDATUM, bool>> filter);
		TEACHPOINTEMPITEMDATUMDto ReadTEACHPOINTEMPITEMDATa(string dtoKey);
		int CountTEACHPOINTEMPITEMDATa();
		int CountTEACHPOINTEMPITEMDATa(string filterExpression);
		int CountTEACHPOINTEMPITEMDATa(Expression<Func<TEACHPOINTEMPITEMDATUM, bool>> filter);
		string CreateTEACHPOINTEMPITEMDATUM(TEACHPOINTEMPITEMDATUMDto teachpointempitemdatum, bool doSaveChanges = true);
		void UpdateTEACHPOINTEMPITEMDATUM(TEACHPOINTEMPITEMDATUMDto teachpointempitemdatum, bool doSaveChanges = true);
		void UpdateTEACHPOINTEMPITEMDATa(IEnumerable<TEACHPOINTEMPITEMDATUMDto> teachpointempitemdata, bool doSaveChanges = true);
		void DeleteTEACHPOINTEMPITEMDATUM(TEACHPOINTEMPITEMDATUMDto teachpointempitemdatum, bool doSaveChanges = true);
		void DeleteTEACHPOINTEMPITEMDATa(IEnumerable<TEACHPOINTEMPITEMDATUMDto> teachpointempitemdata, bool doSaveChanges = true);
		void SaveTEACHPOINTEMPITEMDATUM(TEACHPOINTEMPITEMDATUMDto teachpointempitemdatum, bool doSaveChanges = true);
		void SaveTEACHPOINTEMPITEMDATa(IEnumerable<TEACHPOINTEMPITEMDATUMDto> teachpointempitemdata, bool doSaveChanges = true);


		#endregion TEACHPOINTEMPITEMDATUM CRUD Operations


		#region TEACHPOINTCALCTYPEREF CRUD Operations


		ITEACHPOINTCALCTYPEREFService TEACHPOINTCALCTYPEREFService { get; }
		IQueryable<TEACHPOINTCALCTYPEREF> TEACHPOINTCALCTYPEREFs { get; }
		IQueryable<TEACHPOINTCALCTYPEREF> ReadTEACHPOINTCALCTYPEREFs(Expression<Func<TEACHPOINTCALCTYPEREF, bool>> filter, int dummy);
		IEnumerable<TEACHPOINTCALCTYPEREFDto> ReadTEACHPOINTCALCTYPEREFs();
		IEnumerable<TEACHPOINTCALCTYPEREFDto> ReadTEACHPOINTCALCTYPEREFs(Expression<Func<TEACHPOINTCALCTYPEREF, bool>> filter);
		IEnumerable<TEACHPOINTCALCTYPEREFDto> ReadTEACHPOINTCALCTYPEREFs(ISpecification<TEACHPOINTCALCTYPEREF> specification);
		IEnumerable<TEACHPOINTCALCTYPEREFDto> ReadTEACHPOINTCALCTYPEREFs(IQueryable<TEACHPOINTCALCTYPEREF> query);
		IEnumerable<TEACHPOINTCALCTYPEREFDto> ReadTEACHPOINTCALCTYPEREFs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<TEACHPOINTCALCTYPEREFDto> ReadTEACHPOINTCALCTYPEREFs(object[] keyWords);
		IEnumerable<TEACHPOINTCALCTYPEREFDto> ReadTEACHPOINTCALCTYPEREFsPaged(int startIndex, int pageSize);
		IEnumerable<TEACHPOINTCALCTYPEREFDto> ReadTEACHPOINTCALCTYPEREFsPaged(IQueryable<TEACHPOINTCALCTYPEREF> source, int pageIndex, int pageSize);
		IEnumerable<TEACHPOINTCALCTYPEREFDto> ReadTEACHPOINTCALCTYPEREFsPaged(IQueryable<TEACHPOINTCALCTYPEREF> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<TEACHPOINTCALCTYPEREFDto> ReadTEACHPOINTCALCTYPEREFsFiltered(string sortExpression, string filterExpression);
		IEnumerable<TEACHPOINTCALCTYPEREFDto> ReadTEACHPOINTCALCTYPEREFsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<TEACHPOINTCALCTYPEREFDto> ReadTEACHPOINTCALCTYPEREFsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<TEACHPOINTCALCTYPEREF, bool>> filter);
		TEACHPOINTCALCTYPEREFDto ReadTEACHPOINTCALCTYPEREFs(string dtoKey);
		int CountTEACHPOINTCALCTYPEREFs();
		int CountTEACHPOINTCALCTYPEREFs(string filterExpression);
		int CountTEACHPOINTCALCTYPEREFs(Expression<Func<TEACHPOINTCALCTYPEREF, bool>> filter);
		string CreateTEACHPOINTCALCTYPEREF(TEACHPOINTCALCTYPEREFDto teachpointcalctyperef, bool doSaveChanges = true);
		void UpdateTEACHPOINTCALCTYPEREF(TEACHPOINTCALCTYPEREFDto teachpointcalctyperef, bool doSaveChanges = true);
		void UpdateTEACHPOINTCALCTYPEREFs(IEnumerable<TEACHPOINTCALCTYPEREFDto> teachpointcalctyperefs, bool doSaveChanges = true);
		void DeleteTEACHPOINTCALCTYPEREF(TEACHPOINTCALCTYPEREFDto teachpointcalctyperef, bool doSaveChanges = true);
		void DeleteTEACHPOINTCALCTYPEREFs(IEnumerable<TEACHPOINTCALCTYPEREFDto> teachpointcalctyperefs, bool doSaveChanges = true);
		void SaveTEACHPOINTCALCTYPEREF(TEACHPOINTCALCTYPEREFDto teachpointcalctyperef, bool doSaveChanges = true);
		void SaveTEACHPOINTCALCTYPEREFs(IEnumerable<TEACHPOINTCALCTYPEREFDto> teachpointcalctyperefs, bool doSaveChanges = true);


		#endregion TEACHPOINTCALCTYPEREF CRUD Operations


		#region TEACHPOINTCALCTYPE CRUD Operations


		ITEACHPOINTCALCTYPEService TEACHPOINTCALCTYPEService { get; }
		IQueryable<TEACHPOINTCALCTYPE> TEACHPOINTCALCTYPEs { get; }
		IQueryable<TEACHPOINTCALCTYPE> ReadTEACHPOINTCALCTYPEs(Expression<Func<TEACHPOINTCALCTYPE, bool>> filter, int dummy);
		IEnumerable<TEACHPOINTCALCTYPEDto> ReadTEACHPOINTCALCTYPEs();
		IEnumerable<TEACHPOINTCALCTYPEDto> ReadTEACHPOINTCALCTYPEs(Expression<Func<TEACHPOINTCALCTYPE, bool>> filter);
		IEnumerable<TEACHPOINTCALCTYPEDto> ReadTEACHPOINTCALCTYPEs(ISpecification<TEACHPOINTCALCTYPE> specification);
		IEnumerable<TEACHPOINTCALCTYPEDto> ReadTEACHPOINTCALCTYPEs(IQueryable<TEACHPOINTCALCTYPE> query);
		IEnumerable<TEACHPOINTCALCTYPEDto> ReadTEACHPOINTCALCTYPEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<TEACHPOINTCALCTYPEDto> ReadTEACHPOINTCALCTYPEs(object[] keyWords);
		IEnumerable<TEACHPOINTCALCTYPEDto> ReadTEACHPOINTCALCTYPEsPaged(int startIndex, int pageSize);
		IEnumerable<TEACHPOINTCALCTYPEDto> ReadTEACHPOINTCALCTYPEsPaged(IQueryable<TEACHPOINTCALCTYPE> source, int pageIndex, int pageSize);
		IEnumerable<TEACHPOINTCALCTYPEDto> ReadTEACHPOINTCALCTYPEsPaged(IQueryable<TEACHPOINTCALCTYPE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<TEACHPOINTCALCTYPEDto> ReadTEACHPOINTCALCTYPEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<TEACHPOINTCALCTYPEDto> ReadTEACHPOINTCALCTYPEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<TEACHPOINTCALCTYPEDto> ReadTEACHPOINTCALCTYPEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<TEACHPOINTCALCTYPE, bool>> filter);
		TEACHPOINTCALCTYPEDto ReadTEACHPOINTCALCTYPEs(string dtoKey);
		int CountTEACHPOINTCALCTYPEs();
		int CountTEACHPOINTCALCTYPEs(string filterExpression);
		int CountTEACHPOINTCALCTYPEs(Expression<Func<TEACHPOINTCALCTYPE, bool>> filter);
		string CreateTEACHPOINTCALCTYPE(TEACHPOINTCALCTYPEDto teachpointcalctype, bool doSaveChanges = true);
		void UpdateTEACHPOINTCALCTYPE(TEACHPOINTCALCTYPEDto teachpointcalctype, bool doSaveChanges = true);
		void UpdateTEACHPOINTCALCTYPEs(IEnumerable<TEACHPOINTCALCTYPEDto> teachpointcalctypes, bool doSaveChanges = true);
		void DeleteTEACHPOINTCALCTYPE(TEACHPOINTCALCTYPEDto teachpointcalctype, bool doSaveChanges = true);
		void DeleteTEACHPOINTCALCTYPEs(IEnumerable<TEACHPOINTCALCTYPEDto> teachpointcalctypes, bool doSaveChanges = true);
		void SaveTEACHPOINTCALCTYPE(TEACHPOINTCALCTYPEDto teachpointcalctype, bool doSaveChanges = true);
		void SaveTEACHPOINTCALCTYPEs(IEnumerable<TEACHPOINTCALCTYPEDto> teachpointcalctypes, bool doSaveChanges = true);


		#endregion TEACHPOINTCALCTYPE CRUD Operations


		#region SCORESETTINGSCORETYPE CRUD Operations


		ISCORESETTINGSCORETYPEService SCORESETTINGSCORETYPEService { get; }
		IQueryable<SCORESETTINGSCORETYPE> SCORESETTINGSCORETYPEs { get; }
		IQueryable<SCORESETTINGSCORETYPE> ReadSCORESETTINGSCORETYPEs(Expression<Func<SCORESETTINGSCORETYPE, bool>> filter, int dummy);
		IEnumerable<SCORESETTINGSCORETYPEDto> ReadSCORESETTINGSCORETYPEs();
		IEnumerable<SCORESETTINGSCORETYPEDto> ReadSCORESETTINGSCORETYPEs(Expression<Func<SCORESETTINGSCORETYPE, bool>> filter);
		IEnumerable<SCORESETTINGSCORETYPEDto> ReadSCORESETTINGSCORETYPEs(ISpecification<SCORESETTINGSCORETYPE> specification);
		IEnumerable<SCORESETTINGSCORETYPEDto> ReadSCORESETTINGSCORETYPEs(IQueryable<SCORESETTINGSCORETYPE> query);
		IEnumerable<SCORESETTINGSCORETYPEDto> ReadSCORESETTINGSCORETYPEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<SCORESETTINGSCORETYPEDto> ReadSCORESETTINGSCORETYPEs(object[] keyWords);
		IEnumerable<SCORESETTINGSCORETYPEDto> ReadSCORESETTINGSCORETYPEsPaged(int startIndex, int pageSize);
		IEnumerable<SCORESETTINGSCORETYPEDto> ReadSCORESETTINGSCORETYPEsPaged(IQueryable<SCORESETTINGSCORETYPE> source, int pageIndex, int pageSize);
		IEnumerable<SCORESETTINGSCORETYPEDto> ReadSCORESETTINGSCORETYPEsPaged(IQueryable<SCORESETTINGSCORETYPE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<SCORESETTINGSCORETYPEDto> ReadSCORESETTINGSCORETYPEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<SCORESETTINGSCORETYPEDto> ReadSCORESETTINGSCORETYPEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<SCORESETTINGSCORETYPEDto> ReadSCORESETTINGSCORETYPEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<SCORESETTINGSCORETYPE, bool>> filter);
		SCORESETTINGSCORETYPEDto ReadSCORESETTINGSCORETYPEs(string dtoKey);
		int CountSCORESETTINGSCORETYPEs();
		int CountSCORESETTINGSCORETYPEs(string filterExpression);
		int CountSCORESETTINGSCORETYPEs(Expression<Func<SCORESETTINGSCORETYPE, bool>> filter);
		string CreateSCORESETTINGSCORETYPE(SCORESETTINGSCORETYPEDto scoresettingscoretype, bool doSaveChanges = true);
		void UpdateSCORESETTINGSCORETYPE(SCORESETTINGSCORETYPEDto scoresettingscoretype, bool doSaveChanges = true);
		void UpdateSCORESETTINGSCORETYPEs(IEnumerable<SCORESETTINGSCORETYPEDto> scoresettingscoretypes, bool doSaveChanges = true);
		void DeleteSCORESETTINGSCORETYPE(SCORESETTINGSCORETYPEDto scoresettingscoretype, bool doSaveChanges = true);
		void DeleteSCORESETTINGSCORETYPEs(IEnumerable<SCORESETTINGSCORETYPEDto> scoresettingscoretypes, bool doSaveChanges = true);
		void SaveSCORESETTINGSCORETYPE(SCORESETTINGSCORETYPEDto scoresettingscoretype, bool doSaveChanges = true);
		void SaveSCORESETTINGSCORETYPEs(IEnumerable<SCORESETTINGSCORETYPEDto> scoresettingscoretypes, bool doSaveChanges = true);


		#endregion SCORESETTINGSCORETYPE CRUD Operations


		#region SCORESETTINGJOB CRUD Operations


		ISCORESETTINGJOBService SCORESETTINGJOBService { get; }
		IQueryable<SCORESETTINGJOB> SCORESETTINGJOBs { get; }
		IQueryable<SCORESETTINGJOB> ReadSCORESETTINGJOBs(Expression<Func<SCORESETTINGJOB, bool>> filter, int dummy);
		IEnumerable<SCORESETTINGJOBDto> ReadSCORESETTINGJOBs();
		IEnumerable<SCORESETTINGJOBDto> ReadSCORESETTINGJOBs(Expression<Func<SCORESETTINGJOB, bool>> filter);
		IEnumerable<SCORESETTINGJOBDto> ReadSCORESETTINGJOBs(ISpecification<SCORESETTINGJOB> specification);
		IEnumerable<SCORESETTINGJOBDto> ReadSCORESETTINGJOBs(IQueryable<SCORESETTINGJOB> query);
		IEnumerable<SCORESETTINGJOBDto> ReadSCORESETTINGJOBs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<SCORESETTINGJOBDto> ReadSCORESETTINGJOBs(object[] keyWords);
		IEnumerable<SCORESETTINGJOBDto> ReadSCORESETTINGJOBsPaged(int startIndex, int pageSize);
		IEnumerable<SCORESETTINGJOBDto> ReadSCORESETTINGJOBsPaged(IQueryable<SCORESETTINGJOB> source, int pageIndex, int pageSize);
		IEnumerable<SCORESETTINGJOBDto> ReadSCORESETTINGJOBsPaged(IQueryable<SCORESETTINGJOB> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<SCORESETTINGJOBDto> ReadSCORESETTINGJOBsFiltered(string sortExpression, string filterExpression);
		IEnumerable<SCORESETTINGJOBDto> ReadSCORESETTINGJOBsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<SCORESETTINGJOBDto> ReadSCORESETTINGJOBsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<SCORESETTINGJOB, bool>> filter);
		SCORESETTINGJOBDto ReadSCORESETTINGJOBs(string dtoKey);
		int CountSCORESETTINGJOBs();
		int CountSCORESETTINGJOBs(string filterExpression);
		int CountSCORESETTINGJOBs(Expression<Func<SCORESETTINGJOB, bool>> filter);
		string CreateSCORESETTINGJOB(SCORESETTINGJOBDto scoresettingjob, bool doSaveChanges = true);
		void UpdateSCORESETTINGJOB(SCORESETTINGJOBDto scoresettingjob, bool doSaveChanges = true);
		void UpdateSCORESETTINGJOBs(IEnumerable<SCORESETTINGJOBDto> scoresettingjobs, bool doSaveChanges = true);
		void DeleteSCORESETTINGJOB(SCORESETTINGJOBDto scoresettingjob, bool doSaveChanges = true);
		void DeleteSCORESETTINGJOBs(IEnumerable<SCORESETTINGJOBDto> scoresettingjobs, bool doSaveChanges = true);
		void SaveSCORESETTINGJOB(SCORESETTINGJOBDto scoresettingjob, bool doSaveChanges = true);
		void SaveSCORESETTINGJOBs(IEnumerable<SCORESETTINGJOBDto> scoresettingjobs, bool doSaveChanges = true);


		#endregion SCORESETTINGJOB CRUD Operations


		#region SCORESETTINGDETAIL CRUD Operations


		ISCORESETTINGDETAILService SCORESETTINGDETAILService { get; }
		IQueryable<SCORESETTINGDETAIL> SCORESETTINGDETAILs { get; }
		IQueryable<SCORESETTINGDETAIL> ReadSCORESETTINGDETAILs(Expression<Func<SCORESETTINGDETAIL, bool>> filter, int dummy);
		IEnumerable<SCORESETTINGDETAILDto> ReadSCORESETTINGDETAILs();
		IEnumerable<SCORESETTINGDETAILDto> ReadSCORESETTINGDETAILs(Expression<Func<SCORESETTINGDETAIL, bool>> filter);
		IEnumerable<SCORESETTINGDETAILDto> ReadSCORESETTINGDETAILs(ISpecification<SCORESETTINGDETAIL> specification);
		IEnumerable<SCORESETTINGDETAILDto> ReadSCORESETTINGDETAILs(IQueryable<SCORESETTINGDETAIL> query);
		IEnumerable<SCORESETTINGDETAILDto> ReadSCORESETTINGDETAILs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<SCORESETTINGDETAILDto> ReadSCORESETTINGDETAILs(object[] keyWords);
		IEnumerable<SCORESETTINGDETAILDto> ReadSCORESETTINGDETAILsPaged(int startIndex, int pageSize);
		IEnumerable<SCORESETTINGDETAILDto> ReadSCORESETTINGDETAILsPaged(IQueryable<SCORESETTINGDETAIL> source, int pageIndex, int pageSize);
		IEnumerable<SCORESETTINGDETAILDto> ReadSCORESETTINGDETAILsPaged(IQueryable<SCORESETTINGDETAIL> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<SCORESETTINGDETAILDto> ReadSCORESETTINGDETAILsFiltered(string sortExpression, string filterExpression);
		IEnumerable<SCORESETTINGDETAILDto> ReadSCORESETTINGDETAILsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<SCORESETTINGDETAILDto> ReadSCORESETTINGDETAILsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<SCORESETTINGDETAIL, bool>> filter);
		SCORESETTINGDETAILDto ReadSCORESETTINGDETAILs(string dtoKey);
		int CountSCORESETTINGDETAILs();
		int CountSCORESETTINGDETAILs(string filterExpression);
		int CountSCORESETTINGDETAILs(Expression<Func<SCORESETTINGDETAIL, bool>> filter);
		string CreateSCORESETTINGDETAIL(SCORESETTINGDETAILDto scoresettingdetail, bool doSaveChanges = true);
		void UpdateSCORESETTINGDETAIL(SCORESETTINGDETAILDto scoresettingdetail, bool doSaveChanges = true);
		void UpdateSCORESETTINGDETAILs(IEnumerable<SCORESETTINGDETAILDto> scoresettingdetails, bool doSaveChanges = true);
		void DeleteSCORESETTINGDETAIL(SCORESETTINGDETAILDto scoresettingdetail, bool doSaveChanges = true);
		void DeleteSCORESETTINGDETAILs(IEnumerable<SCORESETTINGDETAILDto> scoresettingdetails, bool doSaveChanges = true);
		void SaveSCORESETTINGDETAIL(SCORESETTINGDETAILDto scoresettingdetail, bool doSaveChanges = true);
		void SaveSCORESETTINGDETAILs(IEnumerable<SCORESETTINGDETAILDto> scoresettingdetails, bool doSaveChanges = true);


		#endregion SCORESETTINGDETAIL CRUD Operations


		#region SCORESETTING CRUD Operations


		ISCORESETTINGService SCORESETTINGService { get; }
		IQueryable<SCORESETTING> SCORESETTINGs { get; }
		IQueryable<SCORESETTING> ReadSCORESETTINGs(Expression<Func<SCORESETTING, bool>> filter, int dummy);
		IEnumerable<SCORESETTINGDto> ReadSCORESETTINGs();
		IEnumerable<SCORESETTINGDto> ReadSCORESETTINGs(Expression<Func<SCORESETTING, bool>> filter);
		IEnumerable<SCORESETTINGDto> ReadSCORESETTINGs(ISpecification<SCORESETTING> specification);
		IEnumerable<SCORESETTINGDto> ReadSCORESETTINGs(IQueryable<SCORESETTING> query);
		IEnumerable<SCORESETTINGDto> ReadSCORESETTINGs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<SCORESETTINGDto> ReadSCORESETTINGs(object[] keyWords);
		IEnumerable<SCORESETTINGDto> ReadSCORESETTINGsPaged(int startIndex, int pageSize);
		IEnumerable<SCORESETTINGDto> ReadSCORESETTINGsPaged(IQueryable<SCORESETTING> source, int pageIndex, int pageSize);
		IEnumerable<SCORESETTINGDto> ReadSCORESETTINGsPaged(IQueryable<SCORESETTING> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<SCORESETTINGDto> ReadSCORESETTINGsFiltered(string sortExpression, string filterExpression);
		IEnumerable<SCORESETTINGDto> ReadSCORESETTINGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<SCORESETTINGDto> ReadSCORESETTINGsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<SCORESETTING, bool>> filter);
		SCORESETTINGDto ReadSCORESETTINGs(string dtoKey);
		int CountSCORESETTINGs();
		int CountSCORESETTINGs(string filterExpression);
		int CountSCORESETTINGs(Expression<Func<SCORESETTING, bool>> filter);
		string CreateSCORESETTING(SCORESETTINGDto scoresetting, bool doSaveChanges = true);
		void UpdateSCORESETTING(SCORESETTINGDto scoresetting, bool doSaveChanges = true);
		void UpdateSCORESETTINGs(IEnumerable<SCORESETTINGDto> scoresettings, bool doSaveChanges = true);
		void DeleteSCORESETTING(SCORESETTINGDto scoresetting, bool doSaveChanges = true);
		void DeleteSCORESETTINGs(IEnumerable<SCORESETTINGDto> scoresettings, bool doSaveChanges = true);
		void SaveSCORESETTING(SCORESETTINGDto scoresetting, bool doSaveChanges = true);
		void SaveSCORESETTINGs(IEnumerable<SCORESETTINGDto> scoresettings, bool doSaveChanges = true);


		#endregion SCORESETTING CRUD Operations


		#region SCOREINSTANCEDETAIL CRUD Operations


		ISCOREINSTANCEDETAILService SCOREINSTANCEDETAILService { get; }
		IQueryable<SCOREINSTANCEDETAIL> SCOREINSTANCEDETAILs { get; }
		IQueryable<SCOREINSTANCEDETAIL> ReadSCOREINSTANCEDETAILs(Expression<Func<SCOREINSTANCEDETAIL, bool>> filter, int dummy);
		IEnumerable<SCOREINSTANCEDETAILDto> ReadSCOREINSTANCEDETAILs();
		IEnumerable<SCOREINSTANCEDETAILDto> ReadSCOREINSTANCEDETAILs(Expression<Func<SCOREINSTANCEDETAIL, bool>> filter);
		IEnumerable<SCOREINSTANCEDETAILDto> ReadSCOREINSTANCEDETAILs(ISpecification<SCOREINSTANCEDETAIL> specification);
		IEnumerable<SCOREINSTANCEDETAILDto> ReadSCOREINSTANCEDETAILs(IQueryable<SCOREINSTANCEDETAIL> query);
		IEnumerable<SCOREINSTANCEDETAILDto> ReadSCOREINSTANCEDETAILs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<SCOREINSTANCEDETAILDto> ReadSCOREINSTANCEDETAILs(object[] keyWords);
		IEnumerable<SCOREINSTANCEDETAILDto> ReadSCOREINSTANCEDETAILsPaged(int startIndex, int pageSize);
		IEnumerable<SCOREINSTANCEDETAILDto> ReadSCOREINSTANCEDETAILsPaged(IQueryable<SCOREINSTANCEDETAIL> source, int pageIndex, int pageSize);
		IEnumerable<SCOREINSTANCEDETAILDto> ReadSCOREINSTANCEDETAILsPaged(IQueryable<SCOREINSTANCEDETAIL> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<SCOREINSTANCEDETAILDto> ReadSCOREINSTANCEDETAILsFiltered(string sortExpression, string filterExpression);
		IEnumerable<SCOREINSTANCEDETAILDto> ReadSCOREINSTANCEDETAILsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<SCOREINSTANCEDETAILDto> ReadSCOREINSTANCEDETAILsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<SCOREINSTANCEDETAIL, bool>> filter);
		SCOREINSTANCEDETAILDto ReadSCOREINSTANCEDETAILs(string dtoKey);
		int CountSCOREINSTANCEDETAILs();
		int CountSCOREINSTANCEDETAILs(string filterExpression);
		int CountSCOREINSTANCEDETAILs(Expression<Func<SCOREINSTANCEDETAIL, bool>> filter);
		string CreateSCOREINSTANCEDETAIL(SCOREINSTANCEDETAILDto scoreinstancedetail, bool doSaveChanges = true);
		void UpdateSCOREINSTANCEDETAIL(SCOREINSTANCEDETAILDto scoreinstancedetail, bool doSaveChanges = true);
		void UpdateSCOREINSTANCEDETAILs(IEnumerable<SCOREINSTANCEDETAILDto> scoreinstancedetails, bool doSaveChanges = true);
		void DeleteSCOREINSTANCEDETAIL(SCOREINSTANCEDETAILDto scoreinstancedetail, bool doSaveChanges = true);
		void DeleteSCOREINSTANCEDETAILs(IEnumerable<SCOREINSTANCEDETAILDto> scoreinstancedetails, bool doSaveChanges = true);
		void SaveSCOREINSTANCEDETAIL(SCOREINSTANCEDETAILDto scoreinstancedetail, bool doSaveChanges = true);
		void SaveSCOREINSTANCEDETAILs(IEnumerable<SCOREINSTANCEDETAILDto> scoreinstancedetails, bool doSaveChanges = true);


		#endregion SCOREINSTANCEDETAIL CRUD Operations


		#region SCOREINSTANCE CRUD Operations


		ISCOREINSTANCEService SCOREINSTANCEService { get; }
		IQueryable<SCOREINSTANCE> SCOREINSTANCEs { get; }
		IQueryable<SCOREINSTANCE> ReadSCOREINSTANCEs(Expression<Func<SCOREINSTANCE, bool>> filter, int dummy);
		IEnumerable<SCOREINSTANCEDto> ReadSCOREINSTANCEs();
		IEnumerable<SCOREINSTANCEDto> ReadSCOREINSTANCEs(Expression<Func<SCOREINSTANCE, bool>> filter);
		IEnumerable<SCOREINSTANCEDto> ReadSCOREINSTANCEs(ISpecification<SCOREINSTANCE> specification);
		IEnumerable<SCOREINSTANCEDto> ReadSCOREINSTANCEs(IQueryable<SCOREINSTANCE> query);
		IEnumerable<SCOREINSTANCEDto> ReadSCOREINSTANCEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<SCOREINSTANCEDto> ReadSCOREINSTANCEs(object[] keyWords);
		IEnumerable<SCOREINSTANCEDto> ReadSCOREINSTANCEsPaged(int startIndex, int pageSize);
		IEnumerable<SCOREINSTANCEDto> ReadSCOREINSTANCEsPaged(IQueryable<SCOREINSTANCE> source, int pageIndex, int pageSize);
		IEnumerable<SCOREINSTANCEDto> ReadSCOREINSTANCEsPaged(IQueryable<SCOREINSTANCE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<SCOREINSTANCEDto> ReadSCOREINSTANCEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<SCOREINSTANCEDto> ReadSCOREINSTANCEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<SCOREINSTANCEDto> ReadSCOREINSTANCEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<SCOREINSTANCE, bool>> filter);
		SCOREINSTANCEDto ReadSCOREINSTANCEs(string dtoKey);
		int CountSCOREINSTANCEs();
		int CountSCOREINSTANCEs(string filterExpression);
		int CountSCOREINSTANCEs(Expression<Func<SCOREINSTANCE, bool>> filter);
		string CreateSCOREINSTANCE(SCOREINSTANCEDto scoreinstance, bool doSaveChanges = true);
		void UpdateSCOREINSTANCE(SCOREINSTANCEDto scoreinstance, bool doSaveChanges = true);
		void UpdateSCOREINSTANCEs(IEnumerable<SCOREINSTANCEDto> scoreinstances, bool doSaveChanges = true);
		void DeleteSCOREINSTANCE(SCOREINSTANCEDto scoreinstance, bool doSaveChanges = true);
		void DeleteSCOREINSTANCEs(IEnumerable<SCOREINSTANCEDto> scoreinstances, bool doSaveChanges = true);
		void SaveSCOREINSTANCE(SCOREINSTANCEDto scoreinstance, bool doSaveChanges = true);
		void SaveSCOREINSTANCEs(IEnumerable<SCOREINSTANCEDto> scoreinstances, bool doSaveChanges = true);


		#endregion SCOREINSTANCE CRUD Operations


		#region SCHEDULERLOG CRUD Operations


		ISCHEDULERLOGService SCHEDULERLOGService { get; }
		IQueryable<SCHEDULERLOG> SCHEDULERLOGs { get; }
		IQueryable<SCHEDULERLOG> ReadSCHEDULERLOGs(Expression<Func<SCHEDULERLOG, bool>> filter, int dummy);
		IEnumerable<SCHEDULERLOGDto> ReadSCHEDULERLOGs();
		IEnumerable<SCHEDULERLOGDto> ReadSCHEDULERLOGs(Expression<Func<SCHEDULERLOG, bool>> filter);
		IEnumerable<SCHEDULERLOGDto> ReadSCHEDULERLOGs(ISpecification<SCHEDULERLOG> specification);
		IEnumerable<SCHEDULERLOGDto> ReadSCHEDULERLOGs(IQueryable<SCHEDULERLOG> query);
		IEnumerable<SCHEDULERLOGDto> ReadSCHEDULERLOGs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<SCHEDULERLOGDto> ReadSCHEDULERLOGs(object[] keyWords);
		IEnumerable<SCHEDULERLOGDto> ReadSCHEDULERLOGsPaged(int startIndex, int pageSize);
		IEnumerable<SCHEDULERLOGDto> ReadSCHEDULERLOGsPaged(IQueryable<SCHEDULERLOG> source, int pageIndex, int pageSize);
		IEnumerable<SCHEDULERLOGDto> ReadSCHEDULERLOGsPaged(IQueryable<SCHEDULERLOG> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<SCHEDULERLOGDto> ReadSCHEDULERLOGsFiltered(string sortExpression, string filterExpression);
		IEnumerable<SCHEDULERLOGDto> ReadSCHEDULERLOGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<SCHEDULERLOGDto> ReadSCHEDULERLOGsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<SCHEDULERLOG, bool>> filter);
		SCHEDULERLOGDto ReadSCHEDULERLOGs(string dtoKey);
		int CountSCHEDULERLOGs();
		int CountSCHEDULERLOGs(string filterExpression);
		int CountSCHEDULERLOGs(Expression<Func<SCHEDULERLOG, bool>> filter);
		string CreateSCHEDULERLOG(SCHEDULERLOGDto schedulerlog, bool doSaveChanges = true);
		void UpdateSCHEDULERLOG(SCHEDULERLOGDto schedulerlog, bool doSaveChanges = true);
		void UpdateSCHEDULERLOGs(IEnumerable<SCHEDULERLOGDto> schedulerlogs, bool doSaveChanges = true);
		void DeleteSCHEDULERLOG(SCHEDULERLOGDto schedulerlog, bool doSaveChanges = true);
		void DeleteSCHEDULERLOGs(IEnumerable<SCHEDULERLOGDto> schedulerlogs, bool doSaveChanges = true);
		void SaveSCHEDULERLOG(SCHEDULERLOGDto schedulerlog, bool doSaveChanges = true);
		void SaveSCHEDULERLOGs(IEnumerable<SCHEDULERLOGDto> schedulerlogs, bool doSaveChanges = true);


		#endregion SCHEDULERLOG CRUD Operations


		#region R分級資料 CRUD Operations


		IR分級資料Service R分級資料Service { get; }
		IQueryable<R分級資料> R分級資料s { get; }
		IQueryable<R分級資料> ReadR分級資料s(Expression<Func<R分級資料, bool>> filter, int dummy);
		IEnumerable<R分級資料Dto> ReadR分級資料s();
		IEnumerable<R分級資料Dto> ReadR分級資料s(Expression<Func<R分級資料, bool>> filter);
		IEnumerable<R分級資料Dto> ReadR分級資料s(ISpecification<R分級資料> specification);
		IEnumerable<R分級資料Dto> ReadR分級資料s(IQueryable<R分級資料> query);
		IEnumerable<R分級資料Dto> ReadR分級資料s(string[] propertyToSearch, object[] keyWords);
		IEnumerable<R分級資料Dto> ReadR分級資料s(object[] keyWords);
		IEnumerable<R分級資料Dto> ReadR分級資料sPaged(int startIndex, int pageSize);
		IEnumerable<R分級資料Dto> ReadR分級資料sPaged(IQueryable<R分級資料> source, int pageIndex, int pageSize);
		IEnumerable<R分級資料Dto> ReadR分級資料sPaged(IQueryable<R分級資料> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<R分級資料Dto> ReadR分級資料sFiltered(string sortExpression, string filterExpression);
		IEnumerable<R分級資料Dto> ReadR分級資料sPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<R分級資料Dto> ReadR分級資料sPagedAndFiltered(int startIndex, int pageSize, Expression<Func<R分級資料, bool>> filter);
		R分級資料Dto ReadR分級資料s(string dtoKey);
		int CountR分級資料s();
		int CountR分級資料s(string filterExpression);
		int CountR分級資料s(Expression<Func<R分級資料, bool>> filter);
		string CreateR分級資料(R分級資料Dto r分級資料, bool doSaveChanges = true);
		void UpdateR分級資料(R分級資料Dto r分級資料, bool doSaveChanges = true);
		void UpdateR分級資料s(IEnumerable<R分級資料Dto> r分級資料s, bool doSaveChanges = true);
		void DeleteR分級資料(R分級資料Dto r分級資料, bool doSaveChanges = true);
		void DeleteR分級資料s(IEnumerable<R分級資料Dto> r分級資料s, bool doSaveChanges = true);
		void SaveR分級資料(R分級資料Dto r分級資料, bool doSaveChanges = true);
		void SaveR分級資料s(IEnumerable<R分級資料Dto> r分級資料s, bool doSaveChanges = true);


		#endregion R分級資料 CRUD Operations


		#region REPORTDATATEMP CRUD Operations


		IREPORTDATATEMPService REPORTDATATEMPService { get; }
		IQueryable<REPORTDATATEMP> REPORTDATATEMPs { get; }
		IQueryable<REPORTDATATEMP> ReadREPORTDATATEMPs(Expression<Func<REPORTDATATEMP, bool>> filter, int dummy);
		IEnumerable<REPORTDATATEMPDto> ReadREPORTDATATEMPs();
		IEnumerable<REPORTDATATEMPDto> ReadREPORTDATATEMPs(Expression<Func<REPORTDATATEMP, bool>> filter);
		IEnumerable<REPORTDATATEMPDto> ReadREPORTDATATEMPs(ISpecification<REPORTDATATEMP> specification);
		IEnumerable<REPORTDATATEMPDto> ReadREPORTDATATEMPs(IQueryable<REPORTDATATEMP> query);
		IEnumerable<REPORTDATATEMPDto> ReadREPORTDATATEMPs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<REPORTDATATEMPDto> ReadREPORTDATATEMPs(object[] keyWords);
		IEnumerable<REPORTDATATEMPDto> ReadREPORTDATATEMPsPaged(int startIndex, int pageSize);
		IEnumerable<REPORTDATATEMPDto> ReadREPORTDATATEMPsPaged(IQueryable<REPORTDATATEMP> source, int pageIndex, int pageSize);
		IEnumerable<REPORTDATATEMPDto> ReadREPORTDATATEMPsPaged(IQueryable<REPORTDATATEMP> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<REPORTDATATEMPDto> ReadREPORTDATATEMPsFiltered(string sortExpression, string filterExpression);
		IEnumerable<REPORTDATATEMPDto> ReadREPORTDATATEMPsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<REPORTDATATEMPDto> ReadREPORTDATATEMPsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<REPORTDATATEMP, bool>> filter);
		REPORTDATATEMPDto ReadREPORTDATATEMPs(string dtoKey);
		int CountREPORTDATATEMPs();
		int CountREPORTDATATEMPs(string filterExpression);
		int CountREPORTDATATEMPs(Expression<Func<REPORTDATATEMP, bool>> filter);
		string CreateREPORTDATATEMP(REPORTDATATEMPDto reportdatatemp, bool doSaveChanges = true);
		void UpdateREPORTDATATEMP(REPORTDATATEMPDto reportdatatemp, bool doSaveChanges = true);
		void UpdateREPORTDATATEMPs(IEnumerable<REPORTDATATEMPDto> reportdatatemps, bool doSaveChanges = true);
		void DeleteREPORTDATATEMP(REPORTDATATEMPDto reportdatatemp, bool doSaveChanges = true);
		void DeleteREPORTDATATEMPs(IEnumerable<REPORTDATATEMPDto> reportdatatemps, bool doSaveChanges = true);
		void SaveREPORTDATATEMP(REPORTDATATEMPDto reportdatatemp, bool doSaveChanges = true);
		void SaveREPORTDATATEMPs(IEnumerable<REPORTDATATEMPDto> reportdatatemps, bool doSaveChanges = true);


		#endregion REPORTDATATEMP CRUD Operations


		#region RECORDTEMPLATE CRUD Operations


		IRECORDTEMPLATEService RECORDTEMPLATEService { get; }
		IQueryable<RECORDTEMPLATE> RECORDTEMPLATEs { get; }
		IQueryable<RECORDTEMPLATE> ReadRECORDTEMPLATEs(Expression<Func<RECORDTEMPLATE, bool>> filter, int dummy);
		IEnumerable<RECORDTEMPLATEDto> ReadRECORDTEMPLATEs();
		IEnumerable<RECORDTEMPLATEDto> ReadRECORDTEMPLATEs(Expression<Func<RECORDTEMPLATE, bool>> filter);
		IEnumerable<RECORDTEMPLATEDto> ReadRECORDTEMPLATEs(ISpecification<RECORDTEMPLATE> specification);
		IEnumerable<RECORDTEMPLATEDto> ReadRECORDTEMPLATEs(IQueryable<RECORDTEMPLATE> query);
		IEnumerable<RECORDTEMPLATEDto> ReadRECORDTEMPLATEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<RECORDTEMPLATEDto> ReadRECORDTEMPLATEs(object[] keyWords);
		IEnumerable<RECORDTEMPLATEDto> ReadRECORDTEMPLATEsPaged(int startIndex, int pageSize);
		IEnumerable<RECORDTEMPLATEDto> ReadRECORDTEMPLATEsPaged(IQueryable<RECORDTEMPLATE> source, int pageIndex, int pageSize);
		IEnumerable<RECORDTEMPLATEDto> ReadRECORDTEMPLATEsPaged(IQueryable<RECORDTEMPLATE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<RECORDTEMPLATEDto> ReadRECORDTEMPLATEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<RECORDTEMPLATEDto> ReadRECORDTEMPLATEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<RECORDTEMPLATEDto> ReadRECORDTEMPLATEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<RECORDTEMPLATE, bool>> filter);
		RECORDTEMPLATEDto ReadRECORDTEMPLATEs(string dtoKey);
		int CountRECORDTEMPLATEs();
		int CountRECORDTEMPLATEs(string filterExpression);
		int CountRECORDTEMPLATEs(Expression<Func<RECORDTEMPLATE, bool>> filter);
		string CreateRECORDTEMPLATE(RECORDTEMPLATEDto recordtemplate, bool doSaveChanges = true);
		void UpdateRECORDTEMPLATE(RECORDTEMPLATEDto recordtemplate, bool doSaveChanges = true);
		void UpdateRECORDTEMPLATEs(IEnumerable<RECORDTEMPLATEDto> recordtemplates, bool doSaveChanges = true);
		void DeleteRECORDTEMPLATE(RECORDTEMPLATEDto recordtemplate, bool doSaveChanges = true);
		void DeleteRECORDTEMPLATEs(IEnumerable<RECORDTEMPLATEDto> recordtemplates, bool doSaveChanges = true);
		void SaveRECORDTEMPLATE(RECORDTEMPLATEDto recordtemplate, bool doSaveChanges = true);
		void SaveRECORDTEMPLATEs(IEnumerable<RECORDTEMPLATEDto> recordtemplates, bool doSaveChanges = true);


		#endregion RECORDTEMPLATE CRUD Operations


		#region RECORDINSVIEWER CRUD Operations


		IRECORDINSVIEWERService RECORDINSVIEWERService { get; }
		IQueryable<RECORDINSVIEWER> RECORDINSVIEWERs { get; }
		IQueryable<RECORDINSVIEWER> ReadRECORDINSVIEWERs(Expression<Func<RECORDINSVIEWER, bool>> filter, int dummy);
		IEnumerable<RECORDINSVIEWERDto> ReadRECORDINSVIEWERs();
		IEnumerable<RECORDINSVIEWERDto> ReadRECORDINSVIEWERs(Expression<Func<RECORDINSVIEWER, bool>> filter);
		IEnumerable<RECORDINSVIEWERDto> ReadRECORDINSVIEWERs(ISpecification<RECORDINSVIEWER> specification);
		IEnumerable<RECORDINSVIEWERDto> ReadRECORDINSVIEWERs(IQueryable<RECORDINSVIEWER> query);
		IEnumerable<RECORDINSVIEWERDto> ReadRECORDINSVIEWERs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<RECORDINSVIEWERDto> ReadRECORDINSVIEWERs(object[] keyWords);
		IEnumerable<RECORDINSVIEWERDto> ReadRECORDINSVIEWERsPaged(int startIndex, int pageSize);
		IEnumerable<RECORDINSVIEWERDto> ReadRECORDINSVIEWERsPaged(IQueryable<RECORDINSVIEWER> source, int pageIndex, int pageSize);
		IEnumerable<RECORDINSVIEWERDto> ReadRECORDINSVIEWERsPaged(IQueryable<RECORDINSVIEWER> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<RECORDINSVIEWERDto> ReadRECORDINSVIEWERsFiltered(string sortExpression, string filterExpression);
		IEnumerable<RECORDINSVIEWERDto> ReadRECORDINSVIEWERsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<RECORDINSVIEWERDto> ReadRECORDINSVIEWERsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<RECORDINSVIEWER, bool>> filter);
		RECORDINSVIEWERDto ReadRECORDINSVIEWERs(string dtoKey);
		int CountRECORDINSVIEWERs();
		int CountRECORDINSVIEWERs(string filterExpression);
		int CountRECORDINSVIEWERs(Expression<Func<RECORDINSVIEWER, bool>> filter);
		string CreateRECORDINSVIEWER(RECORDINSVIEWERDto recordinsviewer, bool doSaveChanges = true);
		void UpdateRECORDINSVIEWER(RECORDINSVIEWERDto recordinsviewer, bool doSaveChanges = true);
		void UpdateRECORDINSVIEWERs(IEnumerable<RECORDINSVIEWERDto> recordinsviewers, bool doSaveChanges = true);
		void DeleteRECORDINSVIEWER(RECORDINSVIEWERDto recordinsviewer, bool doSaveChanges = true);
		void DeleteRECORDINSVIEWERs(IEnumerable<RECORDINSVIEWERDto> recordinsviewers, bool doSaveChanges = true);
		void SaveRECORDINSVIEWER(RECORDINSVIEWERDto recordinsviewer, bool doSaveChanges = true);
		void SaveRECORDINSVIEWERs(IEnumerable<RECORDINSVIEWERDto> recordinsviewers, bool doSaveChanges = true);


		#endregion RECORDINSVIEWER CRUD Operations


		#region RECORDINSTANCEREJECTLOG CRUD Operations


		IRECORDINSTANCEREJECTLOGService RECORDINSTANCEREJECTLOGService { get; }
		IQueryable<RECORDINSTANCEREJECTLOG> RECORDINSTANCEREJECTLOGs { get; }
		IQueryable<RECORDINSTANCEREJECTLOG> ReadRECORDINSTANCEREJECTLOGs(Expression<Func<RECORDINSTANCEREJECTLOG, bool>> filter, int dummy);
		IEnumerable<RECORDINSTANCEREJECTLOGDto> ReadRECORDINSTANCEREJECTLOGs();
		IEnumerable<RECORDINSTANCEREJECTLOGDto> ReadRECORDINSTANCEREJECTLOGs(Expression<Func<RECORDINSTANCEREJECTLOG, bool>> filter);
		IEnumerable<RECORDINSTANCEREJECTLOGDto> ReadRECORDINSTANCEREJECTLOGs(ISpecification<RECORDINSTANCEREJECTLOG> specification);
		IEnumerable<RECORDINSTANCEREJECTLOGDto> ReadRECORDINSTANCEREJECTLOGs(IQueryable<RECORDINSTANCEREJECTLOG> query);
		IEnumerable<RECORDINSTANCEREJECTLOGDto> ReadRECORDINSTANCEREJECTLOGs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<RECORDINSTANCEREJECTLOGDto> ReadRECORDINSTANCEREJECTLOGs(object[] keyWords);
		IEnumerable<RECORDINSTANCEREJECTLOGDto> ReadRECORDINSTANCEREJECTLOGsPaged(int startIndex, int pageSize);
		IEnumerable<RECORDINSTANCEREJECTLOGDto> ReadRECORDINSTANCEREJECTLOGsPaged(IQueryable<RECORDINSTANCEREJECTLOG> source, int pageIndex, int pageSize);
		IEnumerable<RECORDINSTANCEREJECTLOGDto> ReadRECORDINSTANCEREJECTLOGsPaged(IQueryable<RECORDINSTANCEREJECTLOG> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<RECORDINSTANCEREJECTLOGDto> ReadRECORDINSTANCEREJECTLOGsFiltered(string sortExpression, string filterExpression);
		IEnumerable<RECORDINSTANCEREJECTLOGDto> ReadRECORDINSTANCEREJECTLOGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<RECORDINSTANCEREJECTLOGDto> ReadRECORDINSTANCEREJECTLOGsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<RECORDINSTANCEREJECTLOG, bool>> filter);
		RECORDINSTANCEREJECTLOGDto ReadRECORDINSTANCEREJECTLOGs(string dtoKey);
		int CountRECORDINSTANCEREJECTLOGs();
		int CountRECORDINSTANCEREJECTLOGs(string filterExpression);
		int CountRECORDINSTANCEREJECTLOGs(Expression<Func<RECORDINSTANCEREJECTLOG, bool>> filter);
		string CreateRECORDINSTANCEREJECTLOG(RECORDINSTANCEREJECTLOGDto recordinstancerejectlog, bool doSaveChanges = true);
		void UpdateRECORDINSTANCEREJECTLOG(RECORDINSTANCEREJECTLOGDto recordinstancerejectlog, bool doSaveChanges = true);
		void UpdateRECORDINSTANCEREJECTLOGs(IEnumerable<RECORDINSTANCEREJECTLOGDto> recordinstancerejectlogs, bool doSaveChanges = true);
		void DeleteRECORDINSTANCEREJECTLOG(RECORDINSTANCEREJECTLOGDto recordinstancerejectlog, bool doSaveChanges = true);
		void DeleteRECORDINSTANCEREJECTLOGs(IEnumerable<RECORDINSTANCEREJECTLOGDto> recordinstancerejectlogs, bool doSaveChanges = true);
		void SaveRECORDINSTANCEREJECTLOG(RECORDINSTANCEREJECTLOGDto recordinstancerejectlog, bool doSaveChanges = true);
		void SaveRECORDINSTANCEREJECTLOGs(IEnumerable<RECORDINSTANCEREJECTLOGDto> recordinstancerejectlogs, bool doSaveChanges = true);


		#endregion RECORDINSTANCEREJECTLOG CRUD Operations


		#region RECORDINSTANCE CRUD Operations


		IRECORDINSTANCEService RECORDINSTANCEService { get; }
		IQueryable<RECORDINSTANCE> RECORDINSTANCEs { get; }
		IQueryable<RECORDINSTANCE> ReadRECORDINSTANCEs(Expression<Func<RECORDINSTANCE, bool>> filter, int dummy);
		IEnumerable<RECORDINSTANCEDto> ReadRECORDINSTANCEs();
		IEnumerable<RECORDINSTANCEDto> ReadRECORDINSTANCEs(Expression<Func<RECORDINSTANCE, bool>> filter);
		IEnumerable<RECORDINSTANCEDto> ReadRECORDINSTANCEs(ISpecification<RECORDINSTANCE> specification);
		IEnumerable<RECORDINSTANCEDto> ReadRECORDINSTANCEs(IQueryable<RECORDINSTANCE> query);
		IEnumerable<RECORDINSTANCEDto> ReadRECORDINSTANCEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<RECORDINSTANCEDto> ReadRECORDINSTANCEs(object[] keyWords);
		IEnumerable<RECORDINSTANCEDto> ReadRECORDINSTANCEsPaged(int startIndex, int pageSize);
		IEnumerable<RECORDINSTANCEDto> ReadRECORDINSTANCEsPaged(IQueryable<RECORDINSTANCE> source, int pageIndex, int pageSize);
		IEnumerable<RECORDINSTANCEDto> ReadRECORDINSTANCEsPaged(IQueryable<RECORDINSTANCE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<RECORDINSTANCEDto> ReadRECORDINSTANCEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<RECORDINSTANCEDto> ReadRECORDINSTANCEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<RECORDINSTANCEDto> ReadRECORDINSTANCEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<RECORDINSTANCE, bool>> filter);
		RECORDINSTANCEDto ReadRECORDINSTANCEs(string dtoKey);
		int CountRECORDINSTANCEs();
		int CountRECORDINSTANCEs(string filterExpression);
		int CountRECORDINSTANCEs(Expression<Func<RECORDINSTANCE, bool>> filter);
		string CreateRECORDINSTANCE(RECORDINSTANCEDto recordinstance, bool doSaveChanges = true);
		void UpdateRECORDINSTANCE(RECORDINSTANCEDto recordinstance, bool doSaveChanges = true);
		void UpdateRECORDINSTANCEs(IEnumerable<RECORDINSTANCEDto> recordinstances, bool doSaveChanges = true);
		void DeleteRECORDINSTANCE(RECORDINSTANCEDto recordinstance, bool doSaveChanges = true);
		void DeleteRECORDINSTANCEs(IEnumerable<RECORDINSTANCEDto> recordinstances, bool doSaveChanges = true);
		void SaveRECORDINSTANCE(RECORDINSTANCEDto recordinstance, bool doSaveChanges = true);
		void SaveRECORDINSTANCEs(IEnumerable<RECORDINSTANCEDto> recordinstances, bool doSaveChanges = true);


		#endregion RECORDINSTANCE CRUD Operations


		#region RECORDINSSIGNIN CRUD Operations


		IRECORDINSSIGNINService RECORDINSSIGNINService { get; }
		IQueryable<RECORDINSSIGNIN> RECORDINSSIGNINs { get; }
		IQueryable<RECORDINSSIGNIN> ReadRECORDINSSIGNINs(Expression<Func<RECORDINSSIGNIN, bool>> filter, int dummy);
		IEnumerable<RECORDINSSIGNINDto> ReadRECORDINSSIGNINs();
		IEnumerable<RECORDINSSIGNINDto> ReadRECORDINSSIGNINs(Expression<Func<RECORDINSSIGNIN, bool>> filter);
		IEnumerable<RECORDINSSIGNINDto> ReadRECORDINSSIGNINs(ISpecification<RECORDINSSIGNIN> specification);
		IEnumerable<RECORDINSSIGNINDto> ReadRECORDINSSIGNINs(IQueryable<RECORDINSSIGNIN> query);
		IEnumerable<RECORDINSSIGNINDto> ReadRECORDINSSIGNINs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<RECORDINSSIGNINDto> ReadRECORDINSSIGNINs(object[] keyWords);
		IEnumerable<RECORDINSSIGNINDto> ReadRECORDINSSIGNINsPaged(int startIndex, int pageSize);
		IEnumerable<RECORDINSSIGNINDto> ReadRECORDINSSIGNINsPaged(IQueryable<RECORDINSSIGNIN> source, int pageIndex, int pageSize);
		IEnumerable<RECORDINSSIGNINDto> ReadRECORDINSSIGNINsPaged(IQueryable<RECORDINSSIGNIN> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<RECORDINSSIGNINDto> ReadRECORDINSSIGNINsFiltered(string sortExpression, string filterExpression);
		IEnumerable<RECORDINSSIGNINDto> ReadRECORDINSSIGNINsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<RECORDINSSIGNINDto> ReadRECORDINSSIGNINsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<RECORDINSSIGNIN, bool>> filter);
		RECORDINSSIGNINDto ReadRECORDINSSIGNINs(string dtoKey);
		int CountRECORDINSSIGNINs();
		int CountRECORDINSSIGNINs(string filterExpression);
		int CountRECORDINSSIGNINs(Expression<Func<RECORDINSSIGNIN, bool>> filter);
		string CreateRECORDINSSIGNIN(RECORDINSSIGNINDto recordinssignin, bool doSaveChanges = true);
		void UpdateRECORDINSSIGNIN(RECORDINSSIGNINDto recordinssignin, bool doSaveChanges = true);
		void UpdateRECORDINSSIGNINs(IEnumerable<RECORDINSSIGNINDto> recordinssignins, bool doSaveChanges = true);
		void DeleteRECORDINSSIGNIN(RECORDINSSIGNINDto recordinssignin, bool doSaveChanges = true);
		void DeleteRECORDINSSIGNINs(IEnumerable<RECORDINSSIGNINDto> recordinssignins, bool doSaveChanges = true);
		void SaveRECORDINSSIGNIN(RECORDINSSIGNINDto recordinssignin, bool doSaveChanges = true);
		void SaveRECORDINSSIGNINs(IEnumerable<RECORDINSSIGNINDto> recordinssignins, bool doSaveChanges = true);


		#endregion RECORDINSSIGNIN CRUD Operations


		#region RECORDINSREADER CRUD Operations


		IRECORDINSREADERService RECORDINSREADERService { get; }
		IQueryable<RECORDINSREADER> RECORDINSREADERs { get; }
		IQueryable<RECORDINSREADER> ReadRECORDINSREADERs(Expression<Func<RECORDINSREADER, bool>> filter, int dummy);
		IEnumerable<RECORDINSREADERDto> ReadRECORDINSREADERs();
		IEnumerable<RECORDINSREADERDto> ReadRECORDINSREADERs(Expression<Func<RECORDINSREADER, bool>> filter);
		IEnumerable<RECORDINSREADERDto> ReadRECORDINSREADERs(ISpecification<RECORDINSREADER> specification);
		IEnumerable<RECORDINSREADERDto> ReadRECORDINSREADERs(IQueryable<RECORDINSREADER> query);
		IEnumerable<RECORDINSREADERDto> ReadRECORDINSREADERs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<RECORDINSREADERDto> ReadRECORDINSREADERs(object[] keyWords);
		IEnumerable<RECORDINSREADERDto> ReadRECORDINSREADERsPaged(int startIndex, int pageSize);
		IEnumerable<RECORDINSREADERDto> ReadRECORDINSREADERsPaged(IQueryable<RECORDINSREADER> source, int pageIndex, int pageSize);
		IEnumerable<RECORDINSREADERDto> ReadRECORDINSREADERsPaged(IQueryable<RECORDINSREADER> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<RECORDINSREADERDto> ReadRECORDINSREADERsFiltered(string sortExpression, string filterExpression);
		IEnumerable<RECORDINSREADERDto> ReadRECORDINSREADERsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<RECORDINSREADERDto> ReadRECORDINSREADERsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<RECORDINSREADER, bool>> filter);
		RECORDINSREADERDto ReadRECORDINSREADERs(string dtoKey);
		int CountRECORDINSREADERs();
		int CountRECORDINSREADERs(string filterExpression);
		int CountRECORDINSREADERs(Expression<Func<RECORDINSREADER, bool>> filter);
		string CreateRECORDINSREADER(RECORDINSREADERDto recordinsreader, bool doSaveChanges = true);
		void UpdateRECORDINSREADER(RECORDINSREADERDto recordinsreader, bool doSaveChanges = true);
		void UpdateRECORDINSREADERs(IEnumerable<RECORDINSREADERDto> recordinsreaders, bool doSaveChanges = true);
		void DeleteRECORDINSREADER(RECORDINSREADERDto recordinsreader, bool doSaveChanges = true);
		void DeleteRECORDINSREADERs(IEnumerable<RECORDINSREADERDto> recordinsreaders, bool doSaveChanges = true);
		void SaveRECORDINSREADER(RECORDINSREADERDto recordinsreader, bool doSaveChanges = true);
		void SaveRECORDINSREADERs(IEnumerable<RECORDINSREADERDto> recordinsreaders, bool doSaveChanges = true);


		#endregion RECORDINSREADER CRUD Operations


		#region RECORDINSDET CRUD Operations


		IRECORDINSDETService RECORDINSDETService { get; }
		IQueryable<RECORDINSDET> RECORDINSDETs { get; }
		IQueryable<RECORDINSDET> ReadRECORDINSDETs(Expression<Func<RECORDINSDET, bool>> filter, int dummy);
		IEnumerable<RECORDINSDETDto> ReadRECORDINSDETs();
		IEnumerable<RECORDINSDETDto> ReadRECORDINSDETs(Expression<Func<RECORDINSDET, bool>> filter);
		IEnumerable<RECORDINSDETDto> ReadRECORDINSDETs(ISpecification<RECORDINSDET> specification);
		IEnumerable<RECORDINSDETDto> ReadRECORDINSDETs(IQueryable<RECORDINSDET> query);
		IEnumerable<RECORDINSDETDto> ReadRECORDINSDETs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<RECORDINSDETDto> ReadRECORDINSDETs(object[] keyWords);
		IEnumerable<RECORDINSDETDto> ReadRECORDINSDETsPaged(int startIndex, int pageSize);
		IEnumerable<RECORDINSDETDto> ReadRECORDINSDETsPaged(IQueryable<RECORDINSDET> source, int pageIndex, int pageSize);
		IEnumerable<RECORDINSDETDto> ReadRECORDINSDETsPaged(IQueryable<RECORDINSDET> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<RECORDINSDETDto> ReadRECORDINSDETsFiltered(string sortExpression, string filterExpression);
		IEnumerable<RECORDINSDETDto> ReadRECORDINSDETsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<RECORDINSDETDto> ReadRECORDINSDETsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<RECORDINSDET, bool>> filter);
		RECORDINSDETDto ReadRECORDINSDETs(string dtoKey);
		int CountRECORDINSDETs();
		int CountRECORDINSDETs(string filterExpression);
		int CountRECORDINSDETs(Expression<Func<RECORDINSDET, bool>> filter);
		string CreateRECORDINSDET(RECORDINSDETDto recordinsdet, bool doSaveChanges = true);
		void UpdateRECORDINSDET(RECORDINSDETDto recordinsdet, bool doSaveChanges = true);
		void UpdateRECORDINSDETs(IEnumerable<RECORDINSDETDto> recordinsdets, bool doSaveChanges = true);
		void DeleteRECORDINSDET(RECORDINSDETDto recordinsdet, bool doSaveChanges = true);
		void DeleteRECORDINSDETs(IEnumerable<RECORDINSDETDto> recordinsdets, bool doSaveChanges = true);
		void SaveRECORDINSDET(RECORDINSDETDto recordinsdet, bool doSaveChanges = true);
		void SaveRECORDINSDETs(IEnumerable<RECORDINSDETDto> recordinsdets, bool doSaveChanges = true);


		#endregion RECORDINSDET CRUD Operations


		#region RECORDEDUACTREF CRUD Operations


		IRECORDEDUACTREFService RECORDEDUACTREFService { get; }
		IQueryable<RECORDEDUACTREF> RECORDEDUACTREFs { get; }
		IQueryable<RECORDEDUACTREF> ReadRECORDEDUACTREFs(Expression<Func<RECORDEDUACTREF, bool>> filter, int dummy);
		IEnumerable<RECORDEDUACTREFDto> ReadRECORDEDUACTREFs();
		IEnumerable<RECORDEDUACTREFDto> ReadRECORDEDUACTREFs(Expression<Func<RECORDEDUACTREF, bool>> filter);
		IEnumerable<RECORDEDUACTREFDto> ReadRECORDEDUACTREFs(ISpecification<RECORDEDUACTREF> specification);
		IEnumerable<RECORDEDUACTREFDto> ReadRECORDEDUACTREFs(IQueryable<RECORDEDUACTREF> query);
		IEnumerable<RECORDEDUACTREFDto> ReadRECORDEDUACTREFs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<RECORDEDUACTREFDto> ReadRECORDEDUACTREFs(object[] keyWords);
		IEnumerable<RECORDEDUACTREFDto> ReadRECORDEDUACTREFsPaged(int startIndex, int pageSize);
		IEnumerable<RECORDEDUACTREFDto> ReadRECORDEDUACTREFsPaged(IQueryable<RECORDEDUACTREF> source, int pageIndex, int pageSize);
		IEnumerable<RECORDEDUACTREFDto> ReadRECORDEDUACTREFsPaged(IQueryable<RECORDEDUACTREF> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<RECORDEDUACTREFDto> ReadRECORDEDUACTREFsFiltered(string sortExpression, string filterExpression);
		IEnumerable<RECORDEDUACTREFDto> ReadRECORDEDUACTREFsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<RECORDEDUACTREFDto> ReadRECORDEDUACTREFsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<RECORDEDUACTREF, bool>> filter);
		RECORDEDUACTREFDto ReadRECORDEDUACTREFs(string dtoKey);
		int CountRECORDEDUACTREFs();
		int CountRECORDEDUACTREFs(string filterExpression);
		int CountRECORDEDUACTREFs(Expression<Func<RECORDEDUACTREF, bool>> filter);
		string CreateRECORDEDUACTREF(RECORDEDUACTREFDto recordeduactref, bool doSaveChanges = true);
		void UpdateRECORDEDUACTREF(RECORDEDUACTREFDto recordeduactref, bool doSaveChanges = true);
		void UpdateRECORDEDUACTREFs(IEnumerable<RECORDEDUACTREFDto> recordeduactrefs, bool doSaveChanges = true);
		void DeleteRECORDEDUACTREF(RECORDEDUACTREFDto recordeduactref, bool doSaveChanges = true);
		void DeleteRECORDEDUACTREFs(IEnumerable<RECORDEDUACTREFDto> recordeduactrefs, bool doSaveChanges = true);
		void SaveRECORDEDUACTREF(RECORDEDUACTREFDto recordeduactref, bool doSaveChanges = true);
		void SaveRECORDEDUACTREFs(IEnumerable<RECORDEDUACTREFDto> recordeduactrefs, bool doSaveChanges = true);


		#endregion RECORDEDUACTREF CRUD Operations


		#region PSNOPD CRUD Operations


		IPSNOPDService PSNOPDService { get; }
		IQueryable<PSNOPD> PSNOPDs { get; }
		IQueryable<PSNOPD> ReadPSNOPDs(Expression<Func<PSNOPD, bool>> filter, int dummy);
		IEnumerable<PSNOPDDto> ReadPSNOPDs();
		IEnumerable<PSNOPDDto> ReadPSNOPDs(Expression<Func<PSNOPD, bool>> filter);
		IEnumerable<PSNOPDDto> ReadPSNOPDs(ISpecification<PSNOPD> specification);
		IEnumerable<PSNOPDDto> ReadPSNOPDs(IQueryable<PSNOPD> query);
		IEnumerable<PSNOPDDto> ReadPSNOPDs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<PSNOPDDto> ReadPSNOPDs(object[] keyWords);
		IEnumerable<PSNOPDDto> ReadPSNOPDsPaged(int startIndex, int pageSize);
		IEnumerable<PSNOPDDto> ReadPSNOPDsPaged(IQueryable<PSNOPD> source, int pageIndex, int pageSize);
		IEnumerable<PSNOPDDto> ReadPSNOPDsPaged(IQueryable<PSNOPD> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<PSNOPDDto> ReadPSNOPDsFiltered(string sortExpression, string filterExpression);
		IEnumerable<PSNOPDDto> ReadPSNOPDsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<PSNOPDDto> ReadPSNOPDsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<PSNOPD, bool>> filter);
		PSNOPDDto ReadPSNOPDs(string dtoKey);
		int CountPSNOPDs();
		int CountPSNOPDs(string filterExpression);
		int CountPSNOPDs(Expression<Func<PSNOPD, bool>> filter);
		string CreatePSNOPD(PSNOPDDto psnopd, bool doSaveChanges = true);
		void UpdatePSNOPD(PSNOPDDto psnopd, bool doSaveChanges = true);
		void UpdatePSNOPDs(IEnumerable<PSNOPDDto> psnopds, bool doSaveChanges = true);
		void DeletePSNOPD(PSNOPDDto psnopd, bool doSaveChanges = true);
		void DeletePSNOPDs(IEnumerable<PSNOPDDto> psnopds, bool doSaveChanges = true);
		void SavePSNOPD(PSNOPDDto psnopd, bool doSaveChanges = true);
		void SavePSNOPDs(IEnumerable<PSNOPDDto> psnopds, bool doSaveChanges = true);


		#endregion PSNOPD CRUD Operations


		#region PASSPORTSTUDENTAPPLICATIONITEMFAILLOG CRUD Operations


		IPASSPORTSTUDENTAPPLICATIONITEMFAILLOGService PASSPORTSTUDENTAPPLICATIONITEMFAILLOGService { get; }
		IQueryable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOG> PASSPORTSTUDENTAPPLICATIONITEMFAILLOGs { get; }
		IQueryable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOG> ReadPASSPORTSTUDENTAPPLICATIONITEMFAILLOGs(Expression<Func<PASSPORTSTUDENTAPPLICATIONITEMFAILLOG, bool>> filter, int dummy);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto> ReadPASSPORTSTUDENTAPPLICATIONITEMFAILLOGs();
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto> ReadPASSPORTSTUDENTAPPLICATIONITEMFAILLOGs(Expression<Func<PASSPORTSTUDENTAPPLICATIONITEMFAILLOG, bool>> filter);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto> ReadPASSPORTSTUDENTAPPLICATIONITEMFAILLOGs(ISpecification<PASSPORTSTUDENTAPPLICATIONITEMFAILLOG> specification);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto> ReadPASSPORTSTUDENTAPPLICATIONITEMFAILLOGs(IQueryable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOG> query);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto> ReadPASSPORTSTUDENTAPPLICATIONITEMFAILLOGs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto> ReadPASSPORTSTUDENTAPPLICATIONITEMFAILLOGs(object[] keyWords);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto> ReadPASSPORTSTUDENTAPPLICATIONITEMFAILLOGsPaged(int startIndex, int pageSize);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto> ReadPASSPORTSTUDENTAPPLICATIONITEMFAILLOGsPaged(IQueryable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOG> source, int pageIndex, int pageSize);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto> ReadPASSPORTSTUDENTAPPLICATIONITEMFAILLOGsPaged(IQueryable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOG> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto> ReadPASSPORTSTUDENTAPPLICATIONITEMFAILLOGsFiltered(string sortExpression, string filterExpression);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto> ReadPASSPORTSTUDENTAPPLICATIONITEMFAILLOGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto> ReadPASSPORTSTUDENTAPPLICATIONITEMFAILLOGsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<PASSPORTSTUDENTAPPLICATIONITEMFAILLOG, bool>> filter);
		PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto ReadPASSPORTSTUDENTAPPLICATIONITEMFAILLOGs(string dtoKey);
		int CountPASSPORTSTUDENTAPPLICATIONITEMFAILLOGs();
		int CountPASSPORTSTUDENTAPPLICATIONITEMFAILLOGs(string filterExpression);
		int CountPASSPORTSTUDENTAPPLICATIONITEMFAILLOGs(Expression<Func<PASSPORTSTUDENTAPPLICATIONITEMFAILLOG, bool>> filter);
		string CreatePASSPORTSTUDENTAPPLICATIONITEMFAILLOG(PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto passportstudentapplicationitemfaillog, bool doSaveChanges = true);
		void UpdatePASSPORTSTUDENTAPPLICATIONITEMFAILLOG(PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto passportstudentapplicationitemfaillog, bool doSaveChanges = true);
		void UpdatePASSPORTSTUDENTAPPLICATIONITEMFAILLOGs(IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto> passportstudentapplicationitemfaillogs, bool doSaveChanges = true);
		void DeletePASSPORTSTUDENTAPPLICATIONITEMFAILLOG(PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto passportstudentapplicationitemfaillog, bool doSaveChanges = true);
		void DeletePASSPORTSTUDENTAPPLICATIONITEMFAILLOGs(IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto> passportstudentapplicationitemfaillogs, bool doSaveChanges = true);
		void SavePASSPORTSTUDENTAPPLICATIONITEMFAILLOG(PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto passportstudentapplicationitemfaillog, bool doSaveChanges = true);
		void SavePASSPORTSTUDENTAPPLICATIONITEMFAILLOGs(IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto> passportstudentapplicationitemfaillogs, bool doSaveChanges = true);


		#endregion PASSPORTSTUDENTAPPLICATIONITEMFAILLOG CRUD Operations


		#region PASSPORTSTUDENTAPPLICATIONITEM_BK2 CRUD Operations


		IPASSPORTSTUDENTAPPLICATIONITEM_BK2Service PASSPORTSTUDENTAPPLICATIONITEM_BK2Service { get; }
		IQueryable<PASSPORTSTUDENTAPPLICATIONITEM_BK2> PASSPORTSTUDENTAPPLICATIONITEM_BK2 { get; }
		IQueryable<PASSPORTSTUDENTAPPLICATIONITEM_BK2> ReadPASSPORTSTUDENTAPPLICATIONITEM_BK2(Expression<Func<PASSPORTSTUDENTAPPLICATIONITEM_BK2, bool>> filter, int dummy);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BK2();
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BK2(Expression<Func<PASSPORTSTUDENTAPPLICATIONITEM_BK2, bool>> filter);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BK2(ISpecification<PASSPORTSTUDENTAPPLICATIONITEM_BK2> specification);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BK2(IQueryable<PASSPORTSTUDENTAPPLICATIONITEM_BK2> query);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BK2(string[] propertyToSearch, object[] keyWords);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BK2(object[] keyWords);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BK2Paged(int startIndex, int pageSize);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BK2Paged(IQueryable<PASSPORTSTUDENTAPPLICATIONITEM_BK2> source, int pageIndex, int pageSize);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BK2Paged(IQueryable<PASSPORTSTUDENTAPPLICATIONITEM_BK2> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BK2Filtered(string sortExpression, string filterExpression);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BK2PagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BK2PagedAndFiltered(int startIndex, int pageSize, Expression<Func<PASSPORTSTUDENTAPPLICATIONITEM_BK2, bool>> filter);
		PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto ReadPASSPORTSTUDENTAPPLICATIONITEM_BK2(string dtoKey);
		int CountPASSPORTSTUDENTAPPLICATIONITEM_BK2();
		int CountPASSPORTSTUDENTAPPLICATIONITEM_BK2(string filterExpression);
		int CountPASSPORTSTUDENTAPPLICATIONITEM_BK2(Expression<Func<PASSPORTSTUDENTAPPLICATIONITEM_BK2, bool>> filter);
		string CreatePASSPORTSTUDENTAPPLICATIONITEM_BK2(PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto passportstudentapplicationitem_bk2, bool doSaveChanges = true);
		void UpdatePASSPORTSTUDENTAPPLICATIONITEM_BK2(PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto passportstudentapplicationitem_bk2, bool doSaveChanges = true);
		void UpdatePASSPORTSTUDENTAPPLICATIONITEM_BK2(IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto> passportstudentapplicationitem_bk2, bool doSaveChanges = true);
		void DeletePASSPORTSTUDENTAPPLICATIONITEM_BK2(PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto passportstudentapplicationitem_bk2, bool doSaveChanges = true);
		void DeletePASSPORTSTUDENTAPPLICATIONITEM_BK2(IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto> passportstudentapplicationitem_bk2, bool doSaveChanges = true);
		void SavePASSPORTSTUDENTAPPLICATIONITEM_BK2(PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto passportstudentapplicationitem_bk2, bool doSaveChanges = true);
		void SavePASSPORTSTUDENTAPPLICATIONITEM_BK2(IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto> passportstudentapplicationitem_bk2, bool doSaveChanges = true);


		#endregion PASSPORTSTUDENTAPPLICATIONITEM_BK2 CRUD Operations


		#region PASSPORTSTUDENTAPPLICATIONITEM_BK CRUD Operations


		IPASSPORTSTUDENTAPPLICATIONITEM_BKService PASSPORTSTUDENTAPPLICATIONITEM_BKService { get; }
		IQueryable<PASSPORTSTUDENTAPPLICATIONITEM_BK> PASSPORTSTUDENTAPPLICATIONITEM_BKs { get; }
		IQueryable<PASSPORTSTUDENTAPPLICATIONITEM_BK> ReadPASSPORTSTUDENTAPPLICATIONITEM_BKs(Expression<Func<PASSPORTSTUDENTAPPLICATIONITEM_BK, bool>> filter, int dummy);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BKDto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BKs();
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BKDto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BKs(Expression<Func<PASSPORTSTUDENTAPPLICATIONITEM_BK, bool>> filter);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BKDto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BKs(ISpecification<PASSPORTSTUDENTAPPLICATIONITEM_BK> specification);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BKDto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BKs(IQueryable<PASSPORTSTUDENTAPPLICATIONITEM_BK> query);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BKDto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BKs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BKDto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BKs(object[] keyWords);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BKDto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BKsPaged(int startIndex, int pageSize);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BKDto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BKsPaged(IQueryable<PASSPORTSTUDENTAPPLICATIONITEM_BK> source, int pageIndex, int pageSize);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BKDto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BKsPaged(IQueryable<PASSPORTSTUDENTAPPLICATIONITEM_BK> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BKDto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BKsFiltered(string sortExpression, string filterExpression);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BKDto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BKsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BKDto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BKsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<PASSPORTSTUDENTAPPLICATIONITEM_BK, bool>> filter);
		PASSPORTSTUDENTAPPLICATIONITEM_BKDto ReadPASSPORTSTUDENTAPPLICATIONITEM_BKs(string dtoKey);
		int CountPASSPORTSTUDENTAPPLICATIONITEM_BKs();
		int CountPASSPORTSTUDENTAPPLICATIONITEM_BKs(string filterExpression);
		int CountPASSPORTSTUDENTAPPLICATIONITEM_BKs(Expression<Func<PASSPORTSTUDENTAPPLICATIONITEM_BK, bool>> filter);
		string CreatePASSPORTSTUDENTAPPLICATIONITEM_BK(PASSPORTSTUDENTAPPLICATIONITEM_BKDto passportstudentapplicationitem_bk, bool doSaveChanges = true);
		void UpdatePASSPORTSTUDENTAPPLICATIONITEM_BK(PASSPORTSTUDENTAPPLICATIONITEM_BKDto passportstudentapplicationitem_bk, bool doSaveChanges = true);
		void UpdatePASSPORTSTUDENTAPPLICATIONITEM_BKs(IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BKDto> passportstudentapplicationitem_bks, bool doSaveChanges = true);
		void DeletePASSPORTSTUDENTAPPLICATIONITEM_BK(PASSPORTSTUDENTAPPLICATIONITEM_BKDto passportstudentapplicationitem_bk, bool doSaveChanges = true);
		void DeletePASSPORTSTUDENTAPPLICATIONITEM_BKs(IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BKDto> passportstudentapplicationitem_bks, bool doSaveChanges = true);
		void SavePASSPORTSTUDENTAPPLICATIONITEM_BK(PASSPORTSTUDENTAPPLICATIONITEM_BKDto passportstudentapplicationitem_bk, bool doSaveChanges = true);
		void SavePASSPORTSTUDENTAPPLICATIONITEM_BKs(IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BKDto> passportstudentapplicationitem_bks, bool doSaveChanges = true);


		#endregion PASSPORTSTUDENTAPPLICATIONITEM_BK CRUD Operations


		#region PASSPORTSTUDENTAPPLICATIONITEM CRUD Operations


		IPASSPORTSTUDENTAPPLICATIONITEMService PASSPORTSTUDENTAPPLICATIONITEMService { get; }
		IQueryable<PASSPORTSTUDENTAPPLICATIONITEM> PASSPORTSTUDENTAPPLICATIONITEMs { get; }
		IQueryable<PASSPORTSTUDENTAPPLICATIONITEM> ReadPASSPORTSTUDENTAPPLICATIONITEMs(Expression<Func<PASSPORTSTUDENTAPPLICATIONITEM, bool>> filter, int dummy);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMDto> ReadPASSPORTSTUDENTAPPLICATIONITEMs();
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMDto> ReadPASSPORTSTUDENTAPPLICATIONITEMs(Expression<Func<PASSPORTSTUDENTAPPLICATIONITEM, bool>> filter);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMDto> ReadPASSPORTSTUDENTAPPLICATIONITEMs(ISpecification<PASSPORTSTUDENTAPPLICATIONITEM> specification);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMDto> ReadPASSPORTSTUDENTAPPLICATIONITEMs(IQueryable<PASSPORTSTUDENTAPPLICATIONITEM> query);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMDto> ReadPASSPORTSTUDENTAPPLICATIONITEMs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMDto> ReadPASSPORTSTUDENTAPPLICATIONITEMs(object[] keyWords);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMDto> ReadPASSPORTSTUDENTAPPLICATIONITEMsPaged(int startIndex, int pageSize);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMDto> ReadPASSPORTSTUDENTAPPLICATIONITEMsPaged(IQueryable<PASSPORTSTUDENTAPPLICATIONITEM> source, int pageIndex, int pageSize);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMDto> ReadPASSPORTSTUDENTAPPLICATIONITEMsPaged(IQueryable<PASSPORTSTUDENTAPPLICATIONITEM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMDto> ReadPASSPORTSTUDENTAPPLICATIONITEMsFiltered(string sortExpression, string filterExpression);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMDto> ReadPASSPORTSTUDENTAPPLICATIONITEMsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMDto> ReadPASSPORTSTUDENTAPPLICATIONITEMsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<PASSPORTSTUDENTAPPLICATIONITEM, bool>> filter);
		PASSPORTSTUDENTAPPLICATIONITEMDto ReadPASSPORTSTUDENTAPPLICATIONITEMs(string dtoKey);
		int CountPASSPORTSTUDENTAPPLICATIONITEMs();
		int CountPASSPORTSTUDENTAPPLICATIONITEMs(string filterExpression);
		int CountPASSPORTSTUDENTAPPLICATIONITEMs(Expression<Func<PASSPORTSTUDENTAPPLICATIONITEM, bool>> filter);
		string CreatePASSPORTSTUDENTAPPLICATIONITEM(PASSPORTSTUDENTAPPLICATIONITEMDto passportstudentapplicationitem, bool doSaveChanges = true);
		void UpdatePASSPORTSTUDENTAPPLICATIONITEM(PASSPORTSTUDENTAPPLICATIONITEMDto passportstudentapplicationitem, bool doSaveChanges = true);
		void UpdatePASSPORTSTUDENTAPPLICATIONITEMs(IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMDto> passportstudentapplicationitems, bool doSaveChanges = true);
		void DeletePASSPORTSTUDENTAPPLICATIONITEM(PASSPORTSTUDENTAPPLICATIONITEMDto passportstudentapplicationitem, bool doSaveChanges = true);
		void DeletePASSPORTSTUDENTAPPLICATIONITEMs(IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMDto> passportstudentapplicationitems, bool doSaveChanges = true);
		void SavePASSPORTSTUDENTAPPLICATIONITEM(PASSPORTSTUDENTAPPLICATIONITEMDto passportstudentapplicationitem, bool doSaveChanges = true);
		void SavePASSPORTSTUDENTAPPLICATIONITEMs(IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMDto> passportstudentapplicationitems, bool doSaveChanges = true);


		#endregion PASSPORTSTUDENTAPPLICATIONITEM CRUD Operations


		#region PASSPORTSPECIALLIST CRUD Operations


		IPASSPORTSPECIALLISTService PASSPORTSPECIALLISTService { get; }
		IQueryable<PASSPORTSPECIALLIST> PASSPORTSPECIALLISTs { get; }
		IQueryable<PASSPORTSPECIALLIST> ReadPASSPORTSPECIALLISTs(Expression<Func<PASSPORTSPECIALLIST, bool>> filter, int dummy);
		IEnumerable<PASSPORTSPECIALLISTDto> ReadPASSPORTSPECIALLISTs();
		IEnumerable<PASSPORTSPECIALLISTDto> ReadPASSPORTSPECIALLISTs(Expression<Func<PASSPORTSPECIALLIST, bool>> filter);
		IEnumerable<PASSPORTSPECIALLISTDto> ReadPASSPORTSPECIALLISTs(ISpecification<PASSPORTSPECIALLIST> specification);
		IEnumerable<PASSPORTSPECIALLISTDto> ReadPASSPORTSPECIALLISTs(IQueryable<PASSPORTSPECIALLIST> query);
		IEnumerable<PASSPORTSPECIALLISTDto> ReadPASSPORTSPECIALLISTs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<PASSPORTSPECIALLISTDto> ReadPASSPORTSPECIALLISTs(object[] keyWords);
		IEnumerable<PASSPORTSPECIALLISTDto> ReadPASSPORTSPECIALLISTsPaged(int startIndex, int pageSize);
		IEnumerable<PASSPORTSPECIALLISTDto> ReadPASSPORTSPECIALLISTsPaged(IQueryable<PASSPORTSPECIALLIST> source, int pageIndex, int pageSize);
		IEnumerable<PASSPORTSPECIALLISTDto> ReadPASSPORTSPECIALLISTsPaged(IQueryable<PASSPORTSPECIALLIST> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<PASSPORTSPECIALLISTDto> ReadPASSPORTSPECIALLISTsFiltered(string sortExpression, string filterExpression);
		IEnumerable<PASSPORTSPECIALLISTDto> ReadPASSPORTSPECIALLISTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<PASSPORTSPECIALLISTDto> ReadPASSPORTSPECIALLISTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<PASSPORTSPECIALLIST, bool>> filter);
		PASSPORTSPECIALLISTDto ReadPASSPORTSPECIALLISTs(string dtoKey);
		int CountPASSPORTSPECIALLISTs();
		int CountPASSPORTSPECIALLISTs(string filterExpression);
		int CountPASSPORTSPECIALLISTs(Expression<Func<PASSPORTSPECIALLIST, bool>> filter);
		string CreatePASSPORTSPECIALLIST(PASSPORTSPECIALLISTDto passportspeciallist, bool doSaveChanges = true);
		void UpdatePASSPORTSPECIALLIST(PASSPORTSPECIALLISTDto passportspeciallist, bool doSaveChanges = true);
		void UpdatePASSPORTSPECIALLISTs(IEnumerable<PASSPORTSPECIALLISTDto> passportspeciallists, bool doSaveChanges = true);
		void DeletePASSPORTSPECIALLIST(PASSPORTSPECIALLISTDto passportspeciallist, bool doSaveChanges = true);
		void DeletePASSPORTSPECIALLISTs(IEnumerable<PASSPORTSPECIALLISTDto> passportspeciallists, bool doSaveChanges = true);
		void SavePASSPORTSPECIALLIST(PASSPORTSPECIALLISTDto passportspeciallist, bool doSaveChanges = true);
		void SavePASSPORTSPECIALLISTs(IEnumerable<PASSPORTSPECIALLISTDto> passportspeciallists, bool doSaveChanges = true);


		#endregion PASSPORTSPECIALLIST CRUD Operations


		#region PASSPORTJOBTITLEITEM_BK CRUD Operations


		IPASSPORTJOBTITLEITEM_BKService PASSPORTJOBTITLEITEM_BKService { get; }
		IQueryable<PASSPORTJOBTITLEITEM_BK> PASSPORTJOBTITLEITEM_BKs { get; }
		IQueryable<PASSPORTJOBTITLEITEM_BK> ReadPASSPORTJOBTITLEITEM_BKs(Expression<Func<PASSPORTJOBTITLEITEM_BK, bool>> filter, int dummy);
		IEnumerable<PASSPORTJOBTITLEITEM_BKDto> ReadPASSPORTJOBTITLEITEM_BKs();
		IEnumerable<PASSPORTJOBTITLEITEM_BKDto> ReadPASSPORTJOBTITLEITEM_BKs(Expression<Func<PASSPORTJOBTITLEITEM_BK, bool>> filter);
		IEnumerable<PASSPORTJOBTITLEITEM_BKDto> ReadPASSPORTJOBTITLEITEM_BKs(ISpecification<PASSPORTJOBTITLEITEM_BK> specification);
		IEnumerable<PASSPORTJOBTITLEITEM_BKDto> ReadPASSPORTJOBTITLEITEM_BKs(IQueryable<PASSPORTJOBTITLEITEM_BK> query);
		IEnumerable<PASSPORTJOBTITLEITEM_BKDto> ReadPASSPORTJOBTITLEITEM_BKs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<PASSPORTJOBTITLEITEM_BKDto> ReadPASSPORTJOBTITLEITEM_BKs(object[] keyWords);
		IEnumerable<PASSPORTJOBTITLEITEM_BKDto> ReadPASSPORTJOBTITLEITEM_BKsPaged(int startIndex, int pageSize);
		IEnumerable<PASSPORTJOBTITLEITEM_BKDto> ReadPASSPORTJOBTITLEITEM_BKsPaged(IQueryable<PASSPORTJOBTITLEITEM_BK> source, int pageIndex, int pageSize);
		IEnumerable<PASSPORTJOBTITLEITEM_BKDto> ReadPASSPORTJOBTITLEITEM_BKsPaged(IQueryable<PASSPORTJOBTITLEITEM_BK> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<PASSPORTJOBTITLEITEM_BKDto> ReadPASSPORTJOBTITLEITEM_BKsFiltered(string sortExpression, string filterExpression);
		IEnumerable<PASSPORTJOBTITLEITEM_BKDto> ReadPASSPORTJOBTITLEITEM_BKsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<PASSPORTJOBTITLEITEM_BKDto> ReadPASSPORTJOBTITLEITEM_BKsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<PASSPORTJOBTITLEITEM_BK, bool>> filter);
		PASSPORTJOBTITLEITEM_BKDto ReadPASSPORTJOBTITLEITEM_BKs(string dtoKey);
		int CountPASSPORTJOBTITLEITEM_BKs();
		int CountPASSPORTJOBTITLEITEM_BKs(string filterExpression);
		int CountPASSPORTJOBTITLEITEM_BKs(Expression<Func<PASSPORTJOBTITLEITEM_BK, bool>> filter);
		string CreatePASSPORTJOBTITLEITEM_BK(PASSPORTJOBTITLEITEM_BKDto passportjobtitleitem_bk, bool doSaveChanges = true);
		void UpdatePASSPORTJOBTITLEITEM_BK(PASSPORTJOBTITLEITEM_BKDto passportjobtitleitem_bk, bool doSaveChanges = true);
		void UpdatePASSPORTJOBTITLEITEM_BKs(IEnumerable<PASSPORTJOBTITLEITEM_BKDto> passportjobtitleitem_bks, bool doSaveChanges = true);
		void DeletePASSPORTJOBTITLEITEM_BK(PASSPORTJOBTITLEITEM_BKDto passportjobtitleitem_bk, bool doSaveChanges = true);
		void DeletePASSPORTJOBTITLEITEM_BKs(IEnumerable<PASSPORTJOBTITLEITEM_BKDto> passportjobtitleitem_bks, bool doSaveChanges = true);
		void SavePASSPORTJOBTITLEITEM_BK(PASSPORTJOBTITLEITEM_BKDto passportjobtitleitem_bk, bool doSaveChanges = true);
		void SavePASSPORTJOBTITLEITEM_BKs(IEnumerable<PASSPORTJOBTITLEITEM_BKDto> passportjobtitleitem_bks, bool doSaveChanges = true);


		#endregion PASSPORTJOBTITLEITEM_BK CRUD Operations


		#region PASSPORTJOBTITLEITEM CRUD Operations


		IPASSPORTJOBTITLEITEMService PASSPORTJOBTITLEITEMService { get; }
		IQueryable<PASSPORTJOBTITLEITEM> PASSPORTJOBTITLEITEMs { get; }
		IQueryable<PASSPORTJOBTITLEITEM> ReadPASSPORTJOBTITLEITEMs(Expression<Func<PASSPORTJOBTITLEITEM, bool>> filter, int dummy);
		IEnumerable<PASSPORTJOBTITLEITEMDto> ReadPASSPORTJOBTITLEITEMs();
		IEnumerable<PASSPORTJOBTITLEITEMDto> ReadPASSPORTJOBTITLEITEMs(Expression<Func<PASSPORTJOBTITLEITEM, bool>> filter);
		IEnumerable<PASSPORTJOBTITLEITEMDto> ReadPASSPORTJOBTITLEITEMs(ISpecification<PASSPORTJOBTITLEITEM> specification);
		IEnumerable<PASSPORTJOBTITLEITEMDto> ReadPASSPORTJOBTITLEITEMs(IQueryable<PASSPORTJOBTITLEITEM> query);
		IEnumerable<PASSPORTJOBTITLEITEMDto> ReadPASSPORTJOBTITLEITEMs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<PASSPORTJOBTITLEITEMDto> ReadPASSPORTJOBTITLEITEMs(object[] keyWords);
		IEnumerable<PASSPORTJOBTITLEITEMDto> ReadPASSPORTJOBTITLEITEMsPaged(int startIndex, int pageSize);
		IEnumerable<PASSPORTJOBTITLEITEMDto> ReadPASSPORTJOBTITLEITEMsPaged(IQueryable<PASSPORTJOBTITLEITEM> source, int pageIndex, int pageSize);
		IEnumerable<PASSPORTJOBTITLEITEMDto> ReadPASSPORTJOBTITLEITEMsPaged(IQueryable<PASSPORTJOBTITLEITEM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<PASSPORTJOBTITLEITEMDto> ReadPASSPORTJOBTITLEITEMsFiltered(string sortExpression, string filterExpression);
		IEnumerable<PASSPORTJOBTITLEITEMDto> ReadPASSPORTJOBTITLEITEMsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<PASSPORTJOBTITLEITEMDto> ReadPASSPORTJOBTITLEITEMsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<PASSPORTJOBTITLEITEM, bool>> filter);
		PASSPORTJOBTITLEITEMDto ReadPASSPORTJOBTITLEITEMs(string dtoKey);
		int CountPASSPORTJOBTITLEITEMs();
		int CountPASSPORTJOBTITLEITEMs(string filterExpression);
		int CountPASSPORTJOBTITLEITEMs(Expression<Func<PASSPORTJOBTITLEITEM, bool>> filter);
		string CreatePASSPORTJOBTITLEITEM(PASSPORTJOBTITLEITEMDto passportjobtitleitem, bool doSaveChanges = true);
		void UpdatePASSPORTJOBTITLEITEM(PASSPORTJOBTITLEITEMDto passportjobtitleitem, bool doSaveChanges = true);
		void UpdatePASSPORTJOBTITLEITEMs(IEnumerable<PASSPORTJOBTITLEITEMDto> passportjobtitleitems, bool doSaveChanges = true);
		void DeletePASSPORTJOBTITLEITEM(PASSPORTJOBTITLEITEMDto passportjobtitleitem, bool doSaveChanges = true);
		void DeletePASSPORTJOBTITLEITEMs(IEnumerable<PASSPORTJOBTITLEITEMDto> passportjobtitleitems, bool doSaveChanges = true);
		void SavePASSPORTJOBTITLEITEM(PASSPORTJOBTITLEITEMDto passportjobtitleitem, bool doSaveChanges = true);
		void SavePASSPORTJOBTITLEITEMs(IEnumerable<PASSPORTJOBTITLEITEMDto> passportjobtitleitems, bool doSaveChanges = true);


		#endregion PASSPORTJOBTITLEITEM CRUD Operations


		#region PASSPORTJOBFINALMAN CRUD Operations


		IPASSPORTJOBFINALMANService PASSPORTJOBFINALMANService { get; }
		IQueryable<PASSPORTJOBFINALMAN> PASSPORTJOBFINALMen { get; }
		IQueryable<PASSPORTJOBFINALMAN> ReadPASSPORTJOBFINALMen(Expression<Func<PASSPORTJOBFINALMAN, bool>> filter, int dummy);
		IEnumerable<PASSPORTJOBFINALMANDto> ReadPASSPORTJOBFINALMen();
		IEnumerable<PASSPORTJOBFINALMANDto> ReadPASSPORTJOBFINALMen(Expression<Func<PASSPORTJOBFINALMAN, bool>> filter);
		IEnumerable<PASSPORTJOBFINALMANDto> ReadPASSPORTJOBFINALMen(ISpecification<PASSPORTJOBFINALMAN> specification);
		IEnumerable<PASSPORTJOBFINALMANDto> ReadPASSPORTJOBFINALMen(IQueryable<PASSPORTJOBFINALMAN> query);
		IEnumerable<PASSPORTJOBFINALMANDto> ReadPASSPORTJOBFINALMen(string[] propertyToSearch, object[] keyWords);
		IEnumerable<PASSPORTJOBFINALMANDto> ReadPASSPORTJOBFINALMen(object[] keyWords);
		IEnumerable<PASSPORTJOBFINALMANDto> ReadPASSPORTJOBFINALMenPaged(int startIndex, int pageSize);
		IEnumerable<PASSPORTJOBFINALMANDto> ReadPASSPORTJOBFINALMenPaged(IQueryable<PASSPORTJOBFINALMAN> source, int pageIndex, int pageSize);
		IEnumerable<PASSPORTJOBFINALMANDto> ReadPASSPORTJOBFINALMenPaged(IQueryable<PASSPORTJOBFINALMAN> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<PASSPORTJOBFINALMANDto> ReadPASSPORTJOBFINALMenFiltered(string sortExpression, string filterExpression);
		IEnumerable<PASSPORTJOBFINALMANDto> ReadPASSPORTJOBFINALMenPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<PASSPORTJOBFINALMANDto> ReadPASSPORTJOBFINALMenPagedAndFiltered(int startIndex, int pageSize, Expression<Func<PASSPORTJOBFINALMAN, bool>> filter);
		PASSPORTJOBFINALMANDto ReadPASSPORTJOBFINALMen(string dtoKey);
		int CountPASSPORTJOBFINALMen();
		int CountPASSPORTJOBFINALMen(string filterExpression);
		int CountPASSPORTJOBFINALMen(Expression<Func<PASSPORTJOBFINALMAN, bool>> filter);
		string CreatePASSPORTJOBFINALMAN(PASSPORTJOBFINALMANDto passportjobfinalman, bool doSaveChanges = true);
		void UpdatePASSPORTJOBFINALMAN(PASSPORTJOBFINALMANDto passportjobfinalman, bool doSaveChanges = true);
		void UpdatePASSPORTJOBFINALMen(IEnumerable<PASSPORTJOBFINALMANDto> passportjobfinalmen, bool doSaveChanges = true);
		void DeletePASSPORTJOBFINALMAN(PASSPORTJOBFINALMANDto passportjobfinalman, bool doSaveChanges = true);
		void DeletePASSPORTJOBFINALMen(IEnumerable<PASSPORTJOBFINALMANDto> passportjobfinalmen, bool doSaveChanges = true);
		void SavePASSPORTJOBFINALMAN(PASSPORTJOBFINALMANDto passportjobfinalman, bool doSaveChanges = true);
		void SavePASSPORTJOBFINALMen(IEnumerable<PASSPORTJOBFINALMANDto> passportjobfinalmen, bool doSaveChanges = true);


		#endregion PASSPORTJOBFINALMAN CRUD Operations


		#region PASSPORTDOCGRADE CRUD Operations


		IPASSPORTDOCGRADEService PASSPORTDOCGRADEService { get; }
		IQueryable<PASSPORTDOCGRADE> PASSPORTDOCGRADEs { get; }
		IQueryable<PASSPORTDOCGRADE> ReadPASSPORTDOCGRADEs(Expression<Func<PASSPORTDOCGRADE, bool>> filter, int dummy);
		IEnumerable<PASSPORTDOCGRADEDto> ReadPASSPORTDOCGRADEs();
		IEnumerable<PASSPORTDOCGRADEDto> ReadPASSPORTDOCGRADEs(Expression<Func<PASSPORTDOCGRADE, bool>> filter);
		IEnumerable<PASSPORTDOCGRADEDto> ReadPASSPORTDOCGRADEs(ISpecification<PASSPORTDOCGRADE> specification);
		IEnumerable<PASSPORTDOCGRADEDto> ReadPASSPORTDOCGRADEs(IQueryable<PASSPORTDOCGRADE> query);
		IEnumerable<PASSPORTDOCGRADEDto> ReadPASSPORTDOCGRADEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<PASSPORTDOCGRADEDto> ReadPASSPORTDOCGRADEs(object[] keyWords);
		IEnumerable<PASSPORTDOCGRADEDto> ReadPASSPORTDOCGRADEsPaged(int startIndex, int pageSize);
		IEnumerable<PASSPORTDOCGRADEDto> ReadPASSPORTDOCGRADEsPaged(IQueryable<PASSPORTDOCGRADE> source, int pageIndex, int pageSize);
		IEnumerable<PASSPORTDOCGRADEDto> ReadPASSPORTDOCGRADEsPaged(IQueryable<PASSPORTDOCGRADE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<PASSPORTDOCGRADEDto> ReadPASSPORTDOCGRADEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<PASSPORTDOCGRADEDto> ReadPASSPORTDOCGRADEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<PASSPORTDOCGRADEDto> ReadPASSPORTDOCGRADEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<PASSPORTDOCGRADE, bool>> filter);
		PASSPORTDOCGRADEDto ReadPASSPORTDOCGRADEs(string dtoKey);
		int CountPASSPORTDOCGRADEs();
		int CountPASSPORTDOCGRADEs(string filterExpression);
		int CountPASSPORTDOCGRADEs(Expression<Func<PASSPORTDOCGRADE, bool>> filter);
		string CreatePASSPORTDOCGRADE(PASSPORTDOCGRADEDto passportdocgrade, bool doSaveChanges = true);
		void UpdatePASSPORTDOCGRADE(PASSPORTDOCGRADEDto passportdocgrade, bool doSaveChanges = true);
		void UpdatePASSPORTDOCGRADEs(IEnumerable<PASSPORTDOCGRADEDto> passportdocgrades, bool doSaveChanges = true);
		void DeletePASSPORTDOCGRADE(PASSPORTDOCGRADEDto passportdocgrade, bool doSaveChanges = true);
		void DeletePASSPORTDOCGRADEs(IEnumerable<PASSPORTDOCGRADEDto> passportdocgrades, bool doSaveChanges = true);
		void SavePASSPORTDOCGRADE(PASSPORTDOCGRADEDto passportdocgrade, bool doSaveChanges = true);
		void SavePASSPORTDOCGRADEs(IEnumerable<PASSPORTDOCGRADEDto> passportdocgrades, bool doSaveChanges = true);


		#endregion PASSPORTDOCGRADE CRUD Operations


		#region PASSPORTCHECKITEM CRUD Operations


		IPASSPORTCHECKITEMService PASSPORTCHECKITEMService { get; }
		IQueryable<PASSPORTCHECKITEM> PASSPORTCHECKITEMs { get; }
		IQueryable<PASSPORTCHECKITEM> ReadPASSPORTCHECKITEMs(Expression<Func<PASSPORTCHECKITEM, bool>> filter, int dummy);
		IEnumerable<PASSPORTCHECKITEMDto> ReadPASSPORTCHECKITEMs();
		IEnumerable<PASSPORTCHECKITEMDto> ReadPASSPORTCHECKITEMs(Expression<Func<PASSPORTCHECKITEM, bool>> filter);
		IEnumerable<PASSPORTCHECKITEMDto> ReadPASSPORTCHECKITEMs(ISpecification<PASSPORTCHECKITEM> specification);
		IEnumerable<PASSPORTCHECKITEMDto> ReadPASSPORTCHECKITEMs(IQueryable<PASSPORTCHECKITEM> query);
		IEnumerable<PASSPORTCHECKITEMDto> ReadPASSPORTCHECKITEMs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<PASSPORTCHECKITEMDto> ReadPASSPORTCHECKITEMs(object[] keyWords);
		IEnumerable<PASSPORTCHECKITEMDto> ReadPASSPORTCHECKITEMsPaged(int startIndex, int pageSize);
		IEnumerable<PASSPORTCHECKITEMDto> ReadPASSPORTCHECKITEMsPaged(IQueryable<PASSPORTCHECKITEM> source, int pageIndex, int pageSize);
		IEnumerable<PASSPORTCHECKITEMDto> ReadPASSPORTCHECKITEMsPaged(IQueryable<PASSPORTCHECKITEM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<PASSPORTCHECKITEMDto> ReadPASSPORTCHECKITEMsFiltered(string sortExpression, string filterExpression);
		IEnumerable<PASSPORTCHECKITEMDto> ReadPASSPORTCHECKITEMsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<PASSPORTCHECKITEMDto> ReadPASSPORTCHECKITEMsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<PASSPORTCHECKITEM, bool>> filter);
		PASSPORTCHECKITEMDto ReadPASSPORTCHECKITEMs(string dtoKey);
		int CountPASSPORTCHECKITEMs();
		int CountPASSPORTCHECKITEMs(string filterExpression);
		int CountPASSPORTCHECKITEMs(Expression<Func<PASSPORTCHECKITEM, bool>> filter);
		string CreatePASSPORTCHECKITEM(PASSPORTCHECKITEMDto passportcheckitem, bool doSaveChanges = true);
		void UpdatePASSPORTCHECKITEM(PASSPORTCHECKITEMDto passportcheckitem, bool doSaveChanges = true);
		void UpdatePASSPORTCHECKITEMs(IEnumerable<PASSPORTCHECKITEMDto> passportcheckitems, bool doSaveChanges = true);
		void DeletePASSPORTCHECKITEM(PASSPORTCHECKITEMDto passportcheckitem, bool doSaveChanges = true);
		void DeletePASSPORTCHECKITEMs(IEnumerable<PASSPORTCHECKITEMDto> passportcheckitems, bool doSaveChanges = true);
		void SavePASSPORTCHECKITEM(PASSPORTCHECKITEMDto passportcheckitem, bool doSaveChanges = true);
		void SavePASSPORTCHECKITEMs(IEnumerable<PASSPORTCHECKITEMDto> passportcheckitems, bool doSaveChanges = true);


		#endregion PASSPORTCHECKITEM CRUD Operations


		#region OSCECERT CRUD Operations


		IOSCECERTService OSCECERTService { get; }
		IQueryable<OSCECERT> OSCECERTs { get; }
		IQueryable<OSCECERT> ReadOSCECERTs(Expression<Func<OSCECERT, bool>> filter, int dummy);
		IEnumerable<OSCECERTDto> ReadOSCECERTs();
		IEnumerable<OSCECERTDto> ReadOSCECERTs(Expression<Func<OSCECERT, bool>> filter);
		IEnumerable<OSCECERTDto> ReadOSCECERTs(ISpecification<OSCECERT> specification);
		IEnumerable<OSCECERTDto> ReadOSCECERTs(IQueryable<OSCECERT> query);
		IEnumerable<OSCECERTDto> ReadOSCECERTs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<OSCECERTDto> ReadOSCECERTs(object[] keyWords);
		IEnumerable<OSCECERTDto> ReadOSCECERTsPaged(int startIndex, int pageSize);
		IEnumerable<OSCECERTDto> ReadOSCECERTsPaged(IQueryable<OSCECERT> source, int pageIndex, int pageSize);
		IEnumerable<OSCECERTDto> ReadOSCECERTsPaged(IQueryable<OSCECERT> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<OSCECERTDto> ReadOSCECERTsFiltered(string sortExpression, string filterExpression);
		IEnumerable<OSCECERTDto> ReadOSCECERTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<OSCECERTDto> ReadOSCECERTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<OSCECERT, bool>> filter);
		OSCECERTDto ReadOSCECERTs(string dtoKey);
		int CountOSCECERTs();
		int CountOSCECERTs(string filterExpression);
		int CountOSCECERTs(Expression<Func<OSCECERT, bool>> filter);
		string CreateOSCECERT(OSCECERTDto oscecert, bool doSaveChanges = true);
		void UpdateOSCECERT(OSCECERTDto oscecert, bool doSaveChanges = true);
		void UpdateOSCECERTs(IEnumerable<OSCECERTDto> oscecerts, bool doSaveChanges = true);
		void DeleteOSCECERT(OSCECERTDto oscecert, bool doSaveChanges = true);
		void DeleteOSCECERTs(IEnumerable<OSCECERTDto> oscecerts, bool doSaveChanges = true);
		void SaveOSCECERT(OSCECERTDto oscecert, bool doSaveChanges = true);
		void SaveOSCECERTs(IEnumerable<OSCECERTDto> oscecerts, bool doSaveChanges = true);


		#endregion OSCECERT CRUD Operations


		#region OSCEBLOCKTIME CRUD Operations


		IOSCEBLOCKTIMEService OSCEBLOCKTIMEService { get; }
		IQueryable<OSCEBLOCKTIME> OSCEBLOCKTIMEs { get; }
		IQueryable<OSCEBLOCKTIME> ReadOSCEBLOCKTIMEs(Expression<Func<OSCEBLOCKTIME, bool>> filter, int dummy);
		IEnumerable<OSCEBLOCKTIMEDto> ReadOSCEBLOCKTIMEs();
		IEnumerable<OSCEBLOCKTIMEDto> ReadOSCEBLOCKTIMEs(Expression<Func<OSCEBLOCKTIME, bool>> filter);
		IEnumerable<OSCEBLOCKTIMEDto> ReadOSCEBLOCKTIMEs(ISpecification<OSCEBLOCKTIME> specification);
		IEnumerable<OSCEBLOCKTIMEDto> ReadOSCEBLOCKTIMEs(IQueryable<OSCEBLOCKTIME> query);
		IEnumerable<OSCEBLOCKTIMEDto> ReadOSCEBLOCKTIMEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<OSCEBLOCKTIMEDto> ReadOSCEBLOCKTIMEs(object[] keyWords);
		IEnumerable<OSCEBLOCKTIMEDto> ReadOSCEBLOCKTIMEsPaged(int startIndex, int pageSize);
		IEnumerable<OSCEBLOCKTIMEDto> ReadOSCEBLOCKTIMEsPaged(IQueryable<OSCEBLOCKTIME> source, int pageIndex, int pageSize);
		IEnumerable<OSCEBLOCKTIMEDto> ReadOSCEBLOCKTIMEsPaged(IQueryable<OSCEBLOCKTIME> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<OSCEBLOCKTIMEDto> ReadOSCEBLOCKTIMEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<OSCEBLOCKTIMEDto> ReadOSCEBLOCKTIMEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<OSCEBLOCKTIMEDto> ReadOSCEBLOCKTIMEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<OSCEBLOCKTIME, bool>> filter);
		OSCEBLOCKTIMEDto ReadOSCEBLOCKTIMEs(string dtoKey);
		int CountOSCEBLOCKTIMEs();
		int CountOSCEBLOCKTIMEs(string filterExpression);
		int CountOSCEBLOCKTIMEs(Expression<Func<OSCEBLOCKTIME, bool>> filter);
		string CreateOSCEBLOCKTIME(OSCEBLOCKTIMEDto osceblocktime, bool doSaveChanges = true);
		void UpdateOSCEBLOCKTIME(OSCEBLOCKTIMEDto osceblocktime, bool doSaveChanges = true);
		void UpdateOSCEBLOCKTIMEs(IEnumerable<OSCEBLOCKTIMEDto> osceblocktimes, bool doSaveChanges = true);
		void DeleteOSCEBLOCKTIME(OSCEBLOCKTIMEDto osceblocktime, bool doSaveChanges = true);
		void DeleteOSCEBLOCKTIMEs(IEnumerable<OSCEBLOCKTIMEDto> osceblocktimes, bool doSaveChanges = true);
		void SaveOSCEBLOCKTIME(OSCEBLOCKTIMEDto osceblocktime, bool doSaveChanges = true);
		void SaveOSCEBLOCKTIMEs(IEnumerable<OSCEBLOCKTIMEDto> osceblocktimes, bool doSaveChanges = true);


		#endregion OSCEBLOCKTIME CRUD Operations


		#region NURSELIST CRUD Operations


		INURSELISTService NURSELISTService { get; }
		IQueryable<NURSELIST> NURSELISTs { get; }
		IQueryable<NURSELIST> ReadNURSELISTs(Expression<Func<NURSELIST, bool>> filter, int dummy);
		IEnumerable<NURSELISTDto> ReadNURSELISTs();
		IEnumerable<NURSELISTDto> ReadNURSELISTs(Expression<Func<NURSELIST, bool>> filter);
		IEnumerable<NURSELISTDto> ReadNURSELISTs(ISpecification<NURSELIST> specification);
		IEnumerable<NURSELISTDto> ReadNURSELISTs(IQueryable<NURSELIST> query);
		IEnumerable<NURSELISTDto> ReadNURSELISTs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<NURSELISTDto> ReadNURSELISTs(object[] keyWords);
		IEnumerable<NURSELISTDto> ReadNURSELISTsPaged(int startIndex, int pageSize);
		IEnumerable<NURSELISTDto> ReadNURSELISTsPaged(IQueryable<NURSELIST> source, int pageIndex, int pageSize);
		IEnumerable<NURSELISTDto> ReadNURSELISTsPaged(IQueryable<NURSELIST> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<NURSELISTDto> ReadNURSELISTsFiltered(string sortExpression, string filterExpression);
		IEnumerable<NURSELISTDto> ReadNURSELISTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<NURSELISTDto> ReadNURSELISTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<NURSELIST, bool>> filter);
		NURSELISTDto ReadNURSELISTs(string dtoKey);
		int CountNURSELISTs();
		int CountNURSELISTs(string filterExpression);
		int CountNURSELISTs(Expression<Func<NURSELIST, bool>> filter);
		string CreateNURSELIST(NURSELISTDto nurselist, bool doSaveChanges = true);
		void UpdateNURSELIST(NURSELISTDto nurselist, bool doSaveChanges = true);
		void UpdateNURSELISTs(IEnumerable<NURSELISTDto> nurselists, bool doSaveChanges = true);
		void DeleteNURSELIST(NURSELISTDto nurselist, bool doSaveChanges = true);
		void DeleteNURSELISTs(IEnumerable<NURSELISTDto> nurselists, bool doSaveChanges = true);
		void SaveNURSELIST(NURSELISTDto nurselist, bool doSaveChanges = true);
		void SaveNURSELISTs(IEnumerable<NURSELISTDto> nurselists, bool doSaveChanges = true);


		#endregion NURSELIST CRUD Operations


		#region NNOTEITEM CRUD Operations


		INNOTEITEMService NNOTEITEMService { get; }
		IQueryable<NNOTEITEM> NNOTEITEMs { get; }
		IQueryable<NNOTEITEM> ReadNNOTEITEMs(Expression<Func<NNOTEITEM, bool>> filter, int dummy);
		IEnumerable<NNOTEITEMDto> ReadNNOTEITEMs();
		IEnumerable<NNOTEITEMDto> ReadNNOTEITEMs(Expression<Func<NNOTEITEM, bool>> filter);
		IEnumerable<NNOTEITEMDto> ReadNNOTEITEMs(ISpecification<NNOTEITEM> specification);
		IEnumerable<NNOTEITEMDto> ReadNNOTEITEMs(IQueryable<NNOTEITEM> query);
		IEnumerable<NNOTEITEMDto> ReadNNOTEITEMs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<NNOTEITEMDto> ReadNNOTEITEMs(object[] keyWords);
		IEnumerable<NNOTEITEMDto> ReadNNOTEITEMsPaged(int startIndex, int pageSize);
		IEnumerable<NNOTEITEMDto> ReadNNOTEITEMsPaged(IQueryable<NNOTEITEM> source, int pageIndex, int pageSize);
		IEnumerable<NNOTEITEMDto> ReadNNOTEITEMsPaged(IQueryable<NNOTEITEM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<NNOTEITEMDto> ReadNNOTEITEMsFiltered(string sortExpression, string filterExpression);
		IEnumerable<NNOTEITEMDto> ReadNNOTEITEMsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<NNOTEITEMDto> ReadNNOTEITEMsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<NNOTEITEM, bool>> filter);
		NNOTEITEMDto ReadNNOTEITEMs(string dtoKey);
		int CountNNOTEITEMs();
		int CountNNOTEITEMs(string filterExpression);
		int CountNNOTEITEMs(Expression<Func<NNOTEITEM, bool>> filter);
		string CreateNNOTEITEM(NNOTEITEMDto nnoteitem, bool doSaveChanges = true);
		void UpdateNNOTEITEM(NNOTEITEMDto nnoteitem, bool doSaveChanges = true);
		void UpdateNNOTEITEMs(IEnumerable<NNOTEITEMDto> nnoteitems, bool doSaveChanges = true);
		void DeleteNNOTEITEM(NNOTEITEMDto nnoteitem, bool doSaveChanges = true);
		void DeleteNNOTEITEMs(IEnumerable<NNOTEITEMDto> nnoteitems, bool doSaveChanges = true);
		void SaveNNOTEITEM(NNOTEITEMDto nnoteitem, bool doSaveChanges = true);
		void SaveNNOTEITEMs(IEnumerable<NNOTEITEMDto> nnoteitems, bool doSaveChanges = true);


		#endregion NNOTEITEM CRUD Operations


		#region NNOTE CRUD Operations


		INNOTEService NNOTEService { get; }
		IQueryable<NNOTE> NNOTEs { get; }
		IQueryable<NNOTE> ReadNNOTEs(Expression<Func<NNOTE, bool>> filter, int dummy);
		IEnumerable<NNOTEDto> ReadNNOTEs();
		IEnumerable<NNOTEDto> ReadNNOTEs(Expression<Func<NNOTE, bool>> filter);
		IEnumerable<NNOTEDto> ReadNNOTEs(ISpecification<NNOTE> specification);
		IEnumerable<NNOTEDto> ReadNNOTEs(IQueryable<NNOTE> query);
		IEnumerable<NNOTEDto> ReadNNOTEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<NNOTEDto> ReadNNOTEs(object[] keyWords);
		IEnumerable<NNOTEDto> ReadNNOTEsPaged(int startIndex, int pageSize);
		IEnumerable<NNOTEDto> ReadNNOTEsPaged(IQueryable<NNOTE> source, int pageIndex, int pageSize);
		IEnumerable<NNOTEDto> ReadNNOTEsPaged(IQueryable<NNOTE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<NNOTEDto> ReadNNOTEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<NNOTEDto> ReadNNOTEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<NNOTEDto> ReadNNOTEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<NNOTE, bool>> filter);
		NNOTEDto ReadNNOTEs(string dtoKey);
		int CountNNOTEs();
		int CountNNOTEs(string filterExpression);
		int CountNNOTEs(Expression<Func<NNOTE, bool>> filter);
		string CreateNNOTE(NNOTEDto nnote, bool doSaveChanges = true);
		void UpdateNNOTE(NNOTEDto nnote, bool doSaveChanges = true);
		void UpdateNNOTEs(IEnumerable<NNOTEDto> nnotes, bool doSaveChanges = true);
		void DeleteNNOTE(NNOTEDto nnote, bool doSaveChanges = true);
		void DeleteNNOTEs(IEnumerable<NNOTEDto> nnotes, bool doSaveChanges = true);
		void SaveNNOTE(NNOTEDto nnote, bool doSaveChanges = true);
		void SaveNNOTEs(IEnumerable<NNOTEDto> nnotes, bool doSaveChanges = true);


		#endregion NNOTE CRUD Operations


		#region NEWSVIEWTARGET CRUD Operations


		INEWSVIEWTARGETService NEWSVIEWTARGETService { get; }
		IQueryable<NEWSVIEWTARGET> NEWSVIEWTARGETs { get; }
		IQueryable<NEWSVIEWTARGET> ReadNEWSVIEWTARGETs(Expression<Func<NEWSVIEWTARGET, bool>> filter, int dummy);
		IEnumerable<NEWSVIEWTARGETDto> ReadNEWSVIEWTARGETs();
		IEnumerable<NEWSVIEWTARGETDto> ReadNEWSVIEWTARGETs(Expression<Func<NEWSVIEWTARGET, bool>> filter);
		IEnumerable<NEWSVIEWTARGETDto> ReadNEWSVIEWTARGETs(ISpecification<NEWSVIEWTARGET> specification);
		IEnumerable<NEWSVIEWTARGETDto> ReadNEWSVIEWTARGETs(IQueryable<NEWSVIEWTARGET> query);
		IEnumerable<NEWSVIEWTARGETDto> ReadNEWSVIEWTARGETs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<NEWSVIEWTARGETDto> ReadNEWSVIEWTARGETs(object[] keyWords);
		IEnumerable<NEWSVIEWTARGETDto> ReadNEWSVIEWTARGETsPaged(int startIndex, int pageSize);
		IEnumerable<NEWSVIEWTARGETDto> ReadNEWSVIEWTARGETsPaged(IQueryable<NEWSVIEWTARGET> source, int pageIndex, int pageSize);
		IEnumerable<NEWSVIEWTARGETDto> ReadNEWSVIEWTARGETsPaged(IQueryable<NEWSVIEWTARGET> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<NEWSVIEWTARGETDto> ReadNEWSVIEWTARGETsFiltered(string sortExpression, string filterExpression);
		IEnumerable<NEWSVIEWTARGETDto> ReadNEWSVIEWTARGETsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<NEWSVIEWTARGETDto> ReadNEWSVIEWTARGETsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<NEWSVIEWTARGET, bool>> filter);
		NEWSVIEWTARGETDto ReadNEWSVIEWTARGETs(string dtoKey);
		int CountNEWSVIEWTARGETs();
		int CountNEWSVIEWTARGETs(string filterExpression);
		int CountNEWSVIEWTARGETs(Expression<Func<NEWSVIEWTARGET, bool>> filter);
		string CreateNEWSVIEWTARGET(NEWSVIEWTARGETDto newsviewtarget, bool doSaveChanges = true);
		void UpdateNEWSVIEWTARGET(NEWSVIEWTARGETDto newsviewtarget, bool doSaveChanges = true);
		void UpdateNEWSVIEWTARGETs(IEnumerable<NEWSVIEWTARGETDto> newsviewtargets, bool doSaveChanges = true);
		void DeleteNEWSVIEWTARGET(NEWSVIEWTARGETDto newsviewtarget, bool doSaveChanges = true);
		void DeleteNEWSVIEWTARGETs(IEnumerable<NEWSVIEWTARGETDto> newsviewtargets, bool doSaveChanges = true);
		void SaveNEWSVIEWTARGET(NEWSVIEWTARGETDto newsviewtarget, bool doSaveChanges = true);
		void SaveNEWSVIEWTARGETs(IEnumerable<NEWSVIEWTARGETDto> newsviewtargets, bool doSaveChanges = true);


		#endregion NEWSVIEWTARGET CRUD Operations


		#region NEWS_ATTACHMENT CRUD Operations


		INEWS_ATTACHMENTService NEWS_ATTACHMENTService { get; }
		IQueryable<NEWS_ATTACHMENT> NEWS_ATTACHMENTs { get; }
		IQueryable<NEWS_ATTACHMENT> ReadNEWS_ATTACHMENTs(Expression<Func<NEWS_ATTACHMENT, bool>> filter, int dummy);
		IEnumerable<NEWS_ATTACHMENTDto> ReadNEWS_ATTACHMENTs();
		IEnumerable<NEWS_ATTACHMENTDto> ReadNEWS_ATTACHMENTs(Expression<Func<NEWS_ATTACHMENT, bool>> filter);
		IEnumerable<NEWS_ATTACHMENTDto> ReadNEWS_ATTACHMENTs(ISpecification<NEWS_ATTACHMENT> specification);
		IEnumerable<NEWS_ATTACHMENTDto> ReadNEWS_ATTACHMENTs(IQueryable<NEWS_ATTACHMENT> query);
		IEnumerable<NEWS_ATTACHMENTDto> ReadNEWS_ATTACHMENTs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<NEWS_ATTACHMENTDto> ReadNEWS_ATTACHMENTs(object[] keyWords);
		IEnumerable<NEWS_ATTACHMENTDto> ReadNEWS_ATTACHMENTsPaged(int startIndex, int pageSize);
		IEnumerable<NEWS_ATTACHMENTDto> ReadNEWS_ATTACHMENTsPaged(IQueryable<NEWS_ATTACHMENT> source, int pageIndex, int pageSize);
		IEnumerable<NEWS_ATTACHMENTDto> ReadNEWS_ATTACHMENTsPaged(IQueryable<NEWS_ATTACHMENT> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<NEWS_ATTACHMENTDto> ReadNEWS_ATTACHMENTsFiltered(string sortExpression, string filterExpression);
		IEnumerable<NEWS_ATTACHMENTDto> ReadNEWS_ATTACHMENTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<NEWS_ATTACHMENTDto> ReadNEWS_ATTACHMENTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<NEWS_ATTACHMENT, bool>> filter);
		NEWS_ATTACHMENTDto ReadNEWS_ATTACHMENTs(string dtoKey);
		int CountNEWS_ATTACHMENTs();
		int CountNEWS_ATTACHMENTs(string filterExpression);
		int CountNEWS_ATTACHMENTs(Expression<Func<NEWS_ATTACHMENT, bool>> filter);
		string CreateNEWS_ATTACHMENT(NEWS_ATTACHMENTDto news_attachment, bool doSaveChanges = true);
		void UpdateNEWS_ATTACHMENT(NEWS_ATTACHMENTDto news_attachment, bool doSaveChanges = true);
		void UpdateNEWS_ATTACHMENTs(IEnumerable<NEWS_ATTACHMENTDto> news_attachments, bool doSaveChanges = true);
		void DeleteNEWS_ATTACHMENT(NEWS_ATTACHMENTDto news_attachment, bool doSaveChanges = true);
		void DeleteNEWS_ATTACHMENTs(IEnumerable<NEWS_ATTACHMENTDto> news_attachments, bool doSaveChanges = true);
		void SaveNEWS_ATTACHMENT(NEWS_ATTACHMENTDto news_attachment, bool doSaveChanges = true);
		void SaveNEWS_ATTACHMENTs(IEnumerable<NEWS_ATTACHMENTDto> news_attachments, bool doSaveChanges = true);


		#endregion NEWS_ATTACHMENT CRUD Operations


		#region NEWS CRUD Operations


		INEWSService NEWSService { get; }
		IQueryable<NEWS> NEWS { get; }
		IQueryable<NEWS> ReadNEWS(Expression<Func<NEWS, bool>> filter, int dummy);
		IEnumerable<NEWSDto> ReadNEWS();
		IEnumerable<NEWSDto> ReadNEWS(Expression<Func<NEWS, bool>> filter);
		IEnumerable<NEWSDto> ReadNEWS(ISpecification<NEWS> specification);
		IEnumerable<NEWSDto> ReadNEWS(IQueryable<NEWS> query);
		IEnumerable<NEWSDto> ReadNEWS(string[] propertyToSearch, object[] keyWords);
		IEnumerable<NEWSDto> ReadNEWS(object[] keyWords);
		IEnumerable<NEWSDto> ReadNEWSPaged(int startIndex, int pageSize);
		IEnumerable<NEWSDto> ReadNEWSPaged(IQueryable<NEWS> source, int pageIndex, int pageSize);
		IEnumerable<NEWSDto> ReadNEWSPaged(IQueryable<NEWS> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<NEWSDto> ReadNEWSFiltered(string sortExpression, string filterExpression);
		IEnumerable<NEWSDto> ReadNEWSPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<NEWSDto> ReadNEWSPagedAndFiltered(int startIndex, int pageSize, Expression<Func<NEWS, bool>> filter);
		NEWSDto ReadNEWS(string dtoKey);
		int CountNEWS();
		int CountNEWS(string filterExpression);
		int CountNEWS(Expression<Func<NEWS, bool>> filter);
		string CreateNEWS(NEWSDto news, bool doSaveChanges = true);
		void UpdateNEWS(NEWSDto news, bool doSaveChanges = true);
		void UpdateNEWS(IEnumerable<NEWSDto> news, bool doSaveChanges = true);
		void DeleteNEWS(NEWSDto news, bool doSaveChanges = true);
		void DeleteNEWS(IEnumerable<NEWSDto> news, bool doSaveChanges = true);
		void SaveNEWS(NEWSDto news, bool doSaveChanges = true);
		void SaveNEWS(IEnumerable<NEWSDto> news, bool doSaveChanges = true);


		#endregion NEWS CRUD Operations


		#region MYLISTDET CRUD Operations


		IMYLISTDETService MYLISTDETService { get; }
		IQueryable<MYLISTDET> MYLISTDETs { get; }
		IQueryable<MYLISTDET> ReadMYLISTDETs(Expression<Func<MYLISTDET, bool>> filter, int dummy);
		IEnumerable<MYLISTDETDto> ReadMYLISTDETs();
		IEnumerable<MYLISTDETDto> ReadMYLISTDETs(Expression<Func<MYLISTDET, bool>> filter);
		IEnumerable<MYLISTDETDto> ReadMYLISTDETs(ISpecification<MYLISTDET> specification);
		IEnumerable<MYLISTDETDto> ReadMYLISTDETs(IQueryable<MYLISTDET> query);
		IEnumerable<MYLISTDETDto> ReadMYLISTDETs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<MYLISTDETDto> ReadMYLISTDETs(object[] keyWords);
		IEnumerable<MYLISTDETDto> ReadMYLISTDETsPaged(int startIndex, int pageSize);
		IEnumerable<MYLISTDETDto> ReadMYLISTDETsPaged(IQueryable<MYLISTDET> source, int pageIndex, int pageSize);
		IEnumerable<MYLISTDETDto> ReadMYLISTDETsPaged(IQueryable<MYLISTDET> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<MYLISTDETDto> ReadMYLISTDETsFiltered(string sortExpression, string filterExpression);
		IEnumerable<MYLISTDETDto> ReadMYLISTDETsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<MYLISTDETDto> ReadMYLISTDETsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<MYLISTDET, bool>> filter);
		MYLISTDETDto ReadMYLISTDETs(string dtoKey);
		int CountMYLISTDETs();
		int CountMYLISTDETs(string filterExpression);
		int CountMYLISTDETs(Expression<Func<MYLISTDET, bool>> filter);
		string CreateMYLISTDET(MYLISTDETDto mylistdet, bool doSaveChanges = true);
		void UpdateMYLISTDET(MYLISTDETDto mylistdet, bool doSaveChanges = true);
		void UpdateMYLISTDETs(IEnumerable<MYLISTDETDto> mylistdets, bool doSaveChanges = true);
		void DeleteMYLISTDET(MYLISTDETDto mylistdet, bool doSaveChanges = true);
		void DeleteMYLISTDETs(IEnumerable<MYLISTDETDto> mylistdets, bool doSaveChanges = true);
		void SaveMYLISTDET(MYLISTDETDto mylistdet, bool doSaveChanges = true);
		void SaveMYLISTDETs(IEnumerable<MYLISTDETDto> mylistdets, bool doSaveChanges = true);


		#endregion MYLISTDET CRUD Operations


		#region MYLIST CRUD Operations


		IMYLISTService MYLISTService { get; }
		IQueryable<MYLIST> MYLISTs { get; }
		IQueryable<MYLIST> ReadMYLISTs(Expression<Func<MYLIST, bool>> filter, int dummy);
		IEnumerable<MYLISTDto> ReadMYLISTs();
		IEnumerable<MYLISTDto> ReadMYLISTs(Expression<Func<MYLIST, bool>> filter);
		IEnumerable<MYLISTDto> ReadMYLISTs(ISpecification<MYLIST> specification);
		IEnumerable<MYLISTDto> ReadMYLISTs(IQueryable<MYLIST> query);
		IEnumerable<MYLISTDto> ReadMYLISTs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<MYLISTDto> ReadMYLISTs(object[] keyWords);
		IEnumerable<MYLISTDto> ReadMYLISTsPaged(int startIndex, int pageSize);
		IEnumerable<MYLISTDto> ReadMYLISTsPaged(IQueryable<MYLIST> source, int pageIndex, int pageSize);
		IEnumerable<MYLISTDto> ReadMYLISTsPaged(IQueryable<MYLIST> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<MYLISTDto> ReadMYLISTsFiltered(string sortExpression, string filterExpression);
		IEnumerable<MYLISTDto> ReadMYLISTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<MYLISTDto> ReadMYLISTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<MYLIST, bool>> filter);
		MYLISTDto ReadMYLISTs(string dtoKey);
		int CountMYLISTs();
		int CountMYLISTs(string filterExpression);
		int CountMYLISTs(Expression<Func<MYLIST, bool>> filter);
		string CreateMYLIST(MYLISTDto mylist, bool doSaveChanges = true);
		void UpdateMYLIST(MYLISTDto mylist, bool doSaveChanges = true);
		void UpdateMYLISTs(IEnumerable<MYLISTDto> mylists, bool doSaveChanges = true);
		void DeleteMYLIST(MYLISTDto mylist, bool doSaveChanges = true);
		void DeleteMYLISTs(IEnumerable<MYLISTDto> mylists, bool doSaveChanges = true);
		void SaveMYLIST(MYLISTDto mylist, bool doSaveChanges = true);
		void SaveMYLISTs(IEnumerable<MYLISTDto> mylists, bool doSaveChanges = true);


		#endregion MYLIST CRUD Operations


		#region MONTHLYTEACHPOINTCALCDATUM CRUD Operations


		IMONTHLYTEACHPOINTCALCDATUMService MONTHLYTEACHPOINTCALCDATUMService { get; }
		IQueryable<MONTHLYTEACHPOINTCALCDATUM> MONTHLYTEACHPOINTCALCDATa { get; }
		IQueryable<MONTHLYTEACHPOINTCALCDATUM> ReadMONTHLYTEACHPOINTCALCDATa(Expression<Func<MONTHLYTEACHPOINTCALCDATUM, bool>> filter, int dummy);
		IEnumerable<MONTHLYTEACHPOINTCALCDATUMDto> ReadMONTHLYTEACHPOINTCALCDATa();
		IEnumerable<MONTHLYTEACHPOINTCALCDATUMDto> ReadMONTHLYTEACHPOINTCALCDATa(Expression<Func<MONTHLYTEACHPOINTCALCDATUM, bool>> filter);
		IEnumerable<MONTHLYTEACHPOINTCALCDATUMDto> ReadMONTHLYTEACHPOINTCALCDATa(ISpecification<MONTHLYTEACHPOINTCALCDATUM> specification);
		IEnumerable<MONTHLYTEACHPOINTCALCDATUMDto> ReadMONTHLYTEACHPOINTCALCDATa(IQueryable<MONTHLYTEACHPOINTCALCDATUM> query);
		IEnumerable<MONTHLYTEACHPOINTCALCDATUMDto> ReadMONTHLYTEACHPOINTCALCDATa(string[] propertyToSearch, object[] keyWords);
		IEnumerable<MONTHLYTEACHPOINTCALCDATUMDto> ReadMONTHLYTEACHPOINTCALCDATa(object[] keyWords);
		IEnumerable<MONTHLYTEACHPOINTCALCDATUMDto> ReadMONTHLYTEACHPOINTCALCDATaPaged(int startIndex, int pageSize);
		IEnumerable<MONTHLYTEACHPOINTCALCDATUMDto> ReadMONTHLYTEACHPOINTCALCDATaPaged(IQueryable<MONTHLYTEACHPOINTCALCDATUM> source, int pageIndex, int pageSize);
		IEnumerable<MONTHLYTEACHPOINTCALCDATUMDto> ReadMONTHLYTEACHPOINTCALCDATaPaged(IQueryable<MONTHLYTEACHPOINTCALCDATUM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<MONTHLYTEACHPOINTCALCDATUMDto> ReadMONTHLYTEACHPOINTCALCDATaFiltered(string sortExpression, string filterExpression);
		IEnumerable<MONTHLYTEACHPOINTCALCDATUMDto> ReadMONTHLYTEACHPOINTCALCDATaPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<MONTHLYTEACHPOINTCALCDATUMDto> ReadMONTHLYTEACHPOINTCALCDATaPagedAndFiltered(int startIndex, int pageSize, Expression<Func<MONTHLYTEACHPOINTCALCDATUM, bool>> filter);
		MONTHLYTEACHPOINTCALCDATUMDto ReadMONTHLYTEACHPOINTCALCDATa(string dtoKey);
		int CountMONTHLYTEACHPOINTCALCDATa();
		int CountMONTHLYTEACHPOINTCALCDATa(string filterExpression);
		int CountMONTHLYTEACHPOINTCALCDATa(Expression<Func<MONTHLYTEACHPOINTCALCDATUM, bool>> filter);
		string CreateMONTHLYTEACHPOINTCALCDATUM(MONTHLYTEACHPOINTCALCDATUMDto monthlyteachpointcalcdatum, bool doSaveChanges = true);
		void UpdateMONTHLYTEACHPOINTCALCDATUM(MONTHLYTEACHPOINTCALCDATUMDto monthlyteachpointcalcdatum, bool doSaveChanges = true);
		void UpdateMONTHLYTEACHPOINTCALCDATa(IEnumerable<MONTHLYTEACHPOINTCALCDATUMDto> monthlyteachpointcalcdata, bool doSaveChanges = true);
		void DeleteMONTHLYTEACHPOINTCALCDATUM(MONTHLYTEACHPOINTCALCDATUMDto monthlyteachpointcalcdatum, bool doSaveChanges = true);
		void DeleteMONTHLYTEACHPOINTCALCDATa(IEnumerable<MONTHLYTEACHPOINTCALCDATUMDto> monthlyteachpointcalcdata, bool doSaveChanges = true);
		void SaveMONTHLYTEACHPOINTCALCDATUM(MONTHLYTEACHPOINTCALCDATUMDto monthlyteachpointcalcdatum, bool doSaveChanges = true);
		void SaveMONTHLYTEACHPOINTCALCDATa(IEnumerable<MONTHLYTEACHPOINTCALCDATUMDto> monthlyteachpointcalcdata, bool doSaveChanges = true);


		#endregion MONTHLYTEACHPOINTCALCDATUM CRUD Operations


		#region MESSAGEBOARD CRUD Operations


		IMESSAGEBOARDService MESSAGEBOARDService { get; }
		IQueryable<MESSAGEBOARD> MESSAGEBOARDs { get; }
		IQueryable<MESSAGEBOARD> ReadMESSAGEBOARDs(Expression<Func<MESSAGEBOARD, bool>> filter, int dummy);
		IEnumerable<MESSAGEBOARDDto> ReadMESSAGEBOARDs();
		IEnumerable<MESSAGEBOARDDto> ReadMESSAGEBOARDs(Expression<Func<MESSAGEBOARD, bool>> filter);
		IEnumerable<MESSAGEBOARDDto> ReadMESSAGEBOARDs(ISpecification<MESSAGEBOARD> specification);
		IEnumerable<MESSAGEBOARDDto> ReadMESSAGEBOARDs(IQueryable<MESSAGEBOARD> query);
		IEnumerable<MESSAGEBOARDDto> ReadMESSAGEBOARDs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<MESSAGEBOARDDto> ReadMESSAGEBOARDs(object[] keyWords);
		IEnumerable<MESSAGEBOARDDto> ReadMESSAGEBOARDsPaged(int startIndex, int pageSize);
		IEnumerable<MESSAGEBOARDDto> ReadMESSAGEBOARDsPaged(IQueryable<MESSAGEBOARD> source, int pageIndex, int pageSize);
		IEnumerable<MESSAGEBOARDDto> ReadMESSAGEBOARDsPaged(IQueryable<MESSAGEBOARD> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<MESSAGEBOARDDto> ReadMESSAGEBOARDsFiltered(string sortExpression, string filterExpression);
		IEnumerable<MESSAGEBOARDDto> ReadMESSAGEBOARDsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<MESSAGEBOARDDto> ReadMESSAGEBOARDsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<MESSAGEBOARD, bool>> filter);
		MESSAGEBOARDDto ReadMESSAGEBOARDs(string dtoKey);
		int CountMESSAGEBOARDs();
		int CountMESSAGEBOARDs(string filterExpression);
		int CountMESSAGEBOARDs(Expression<Func<MESSAGEBOARD, bool>> filter);
		string CreateMESSAGEBOARD(MESSAGEBOARDDto messageboard, bool doSaveChanges = true);
		void UpdateMESSAGEBOARD(MESSAGEBOARDDto messageboard, bool doSaveChanges = true);
		void UpdateMESSAGEBOARDs(IEnumerable<MESSAGEBOARDDto> messageboards, bool doSaveChanges = true);
		void DeleteMESSAGEBOARD(MESSAGEBOARDDto messageboard, bool doSaveChanges = true);
		void DeleteMESSAGEBOARDs(IEnumerable<MESSAGEBOARDDto> messageboards, bool doSaveChanges = true);
		void SaveMESSAGEBOARD(MESSAGEBOARDDto messageboard, bool doSaveChanges = true);
		void SaveMESSAGEBOARDs(IEnumerable<MESSAGEBOARDDto> messageboards, bool doSaveChanges = true);


		#endregion MESSAGEBOARD CRUD Operations


		#region MEMBER_BK CRUD Operations


		IMEMBER_BKService MEMBER_BKService { get; }
		IQueryable<MEMBER_BK> MEMBER_BKs { get; }
		IQueryable<MEMBER_BK> ReadMEMBER_BKs(Expression<Func<MEMBER_BK, bool>> filter, int dummy);
		IEnumerable<MEMBER_BKDto> ReadMEMBER_BKs();
		IEnumerable<MEMBER_BKDto> ReadMEMBER_BKs(Expression<Func<MEMBER_BK, bool>> filter);
		IEnumerable<MEMBER_BKDto> ReadMEMBER_BKs(ISpecification<MEMBER_BK> specification);
		IEnumerable<MEMBER_BKDto> ReadMEMBER_BKs(IQueryable<MEMBER_BK> query);
		IEnumerable<MEMBER_BKDto> ReadMEMBER_BKs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<MEMBER_BKDto> ReadMEMBER_BKs(object[] keyWords);
		IEnumerable<MEMBER_BKDto> ReadMEMBER_BKsPaged(int startIndex, int pageSize);
		IEnumerable<MEMBER_BKDto> ReadMEMBER_BKsPaged(IQueryable<MEMBER_BK> source, int pageIndex, int pageSize);
		IEnumerable<MEMBER_BKDto> ReadMEMBER_BKsPaged(IQueryable<MEMBER_BK> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<MEMBER_BKDto> ReadMEMBER_BKsFiltered(string sortExpression, string filterExpression);
		IEnumerable<MEMBER_BKDto> ReadMEMBER_BKsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<MEMBER_BKDto> ReadMEMBER_BKsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<MEMBER_BK, bool>> filter);
		MEMBER_BKDto ReadMEMBER_BKs(string dtoKey);
		int CountMEMBER_BKs();
		int CountMEMBER_BKs(string filterExpression);
		int CountMEMBER_BKs(Expression<Func<MEMBER_BK, bool>> filter);
		string CreateMEMBER_BK(MEMBER_BKDto member_bk, bool doSaveChanges = true);
		void UpdateMEMBER_BK(MEMBER_BKDto member_bk, bool doSaveChanges = true);
		void UpdateMEMBER_BKs(IEnumerable<MEMBER_BKDto> member_bks, bool doSaveChanges = true);
		void DeleteMEMBER_BK(MEMBER_BKDto member_bk, bool doSaveChanges = true);
		void DeleteMEMBER_BKs(IEnumerable<MEMBER_BKDto> member_bks, bool doSaveChanges = true);
		void SaveMEMBER_BK(MEMBER_BKDto member_bk, bool doSaveChanges = true);
		void SaveMEMBER_BKs(IEnumerable<MEMBER_BKDto> member_bks, bool doSaveChanges = true);


		#endregion MEMBER_BK CRUD Operations


		#region MEMBER CRUD Operations


		IMEMBERService MEMBERService { get; }
		IQueryable<MEMBER> MEMBERs { get; }
		IQueryable<MEMBER> ReadMEMBERs(Expression<Func<MEMBER, bool>> filter, int dummy);
		IEnumerable<MEMBERDto> ReadMEMBERs();
		IEnumerable<MEMBERDto> ReadMEMBERs(Expression<Func<MEMBER, bool>> filter);
		IEnumerable<MEMBERDto> ReadMEMBERs(ISpecification<MEMBER> specification);
		IEnumerable<MEMBERDto> ReadMEMBERs(IQueryable<MEMBER> query);
		IEnumerable<MEMBERDto> ReadMEMBERs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<MEMBERDto> ReadMEMBERs(object[] keyWords);
		IEnumerable<MEMBERDto> ReadMEMBERsPaged(int startIndex, int pageSize);
		IEnumerable<MEMBERDto> ReadMEMBERsPaged(IQueryable<MEMBER> source, int pageIndex, int pageSize);
		IEnumerable<MEMBERDto> ReadMEMBERsPaged(IQueryable<MEMBER> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<MEMBERDto> ReadMEMBERsFiltered(string sortExpression, string filterExpression);
		IEnumerable<MEMBERDto> ReadMEMBERsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<MEMBERDto> ReadMEMBERsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<MEMBER, bool>> filter);
		MEMBERDto ReadMEMBERs(string dtoKey);
		int CountMEMBERs();
		int CountMEMBERs(string filterExpression);
		int CountMEMBERs(Expression<Func<MEMBER, bool>> filter);
		string CreateMEMBER(MEMBERDto member, bool doSaveChanges = true);
		void UpdateMEMBER(MEMBERDto member, bool doSaveChanges = true);
		void UpdateMEMBERs(IEnumerable<MEMBERDto> members, bool doSaveChanges = true);
		void DeleteMEMBER(MEMBERDto member, bool doSaveChanges = true);
		void DeleteMEMBERs(IEnumerable<MEMBERDto> members, bool doSaveChanges = true);
		void SaveMEMBER(MEMBERDto member, bool doSaveChanges = true);
		void SaveMEMBERs(IEnumerable<MEMBERDto> members, bool doSaveChanges = true);


		#endregion MEMBER CRUD Operations


		#region MEDICALVOTELIST CRUD Operations


		IMEDICALVOTELISTService MEDICALVOTELISTService { get; }
		IQueryable<MEDICALVOTELIST> MEDICALVOTELISTs { get; }
		IQueryable<MEDICALVOTELIST> ReadMEDICALVOTELISTs(Expression<Func<MEDICALVOTELIST, bool>> filter, int dummy);
		IEnumerable<MEDICALVOTELISTDto> ReadMEDICALVOTELISTs();
		IEnumerable<MEDICALVOTELISTDto> ReadMEDICALVOTELISTs(Expression<Func<MEDICALVOTELIST, bool>> filter);
		IEnumerable<MEDICALVOTELISTDto> ReadMEDICALVOTELISTs(ISpecification<MEDICALVOTELIST> specification);
		IEnumerable<MEDICALVOTELISTDto> ReadMEDICALVOTELISTs(IQueryable<MEDICALVOTELIST> query);
		IEnumerable<MEDICALVOTELISTDto> ReadMEDICALVOTELISTs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<MEDICALVOTELISTDto> ReadMEDICALVOTELISTs(object[] keyWords);
		IEnumerable<MEDICALVOTELISTDto> ReadMEDICALVOTELISTsPaged(int startIndex, int pageSize);
		IEnumerable<MEDICALVOTELISTDto> ReadMEDICALVOTELISTsPaged(IQueryable<MEDICALVOTELIST> source, int pageIndex, int pageSize);
		IEnumerable<MEDICALVOTELISTDto> ReadMEDICALVOTELISTsPaged(IQueryable<MEDICALVOTELIST> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<MEDICALVOTELISTDto> ReadMEDICALVOTELISTsFiltered(string sortExpression, string filterExpression);
		IEnumerable<MEDICALVOTELISTDto> ReadMEDICALVOTELISTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<MEDICALVOTELISTDto> ReadMEDICALVOTELISTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<MEDICALVOTELIST, bool>> filter);
		MEDICALVOTELISTDto ReadMEDICALVOTELISTs(string dtoKey);
		int CountMEDICALVOTELISTs();
		int CountMEDICALVOTELISTs(string filterExpression);
		int CountMEDICALVOTELISTs(Expression<Func<MEDICALVOTELIST, bool>> filter);
		string CreateMEDICALVOTELIST(MEDICALVOTELISTDto medicalvotelist, bool doSaveChanges = true);
		void UpdateMEDICALVOTELIST(MEDICALVOTELISTDto medicalvotelist, bool doSaveChanges = true);
		void UpdateMEDICALVOTELISTs(IEnumerable<MEDICALVOTELISTDto> medicalvotelists, bool doSaveChanges = true);
		void DeleteMEDICALVOTELIST(MEDICALVOTELISTDto medicalvotelist, bool doSaveChanges = true);
		void DeleteMEDICALVOTELISTs(IEnumerable<MEDICALVOTELISTDto> medicalvotelists, bool doSaveChanges = true);
		void SaveMEDICALVOTELIST(MEDICALVOTELISTDto medicalvotelist, bool doSaveChanges = true);
		void SaveMEDICALVOTELISTs(IEnumerable<MEDICALVOTELISTDto> medicalvotelists, bool doSaveChanges = true);


		#endregion MEDICALVOTELIST CRUD Operations


		#region MEDICALTEACHPOINT CRUD Operations


		IMEDICALTEACHPOINTService MEDICALTEACHPOINTService { get; }
		IQueryable<MEDICALTEACHPOINT> MEDICALTEACHPOINTs { get; }
		IQueryable<MEDICALTEACHPOINT> ReadMEDICALTEACHPOINTs(Expression<Func<MEDICALTEACHPOINT, bool>> filter, int dummy);
		IEnumerable<MEDICALTEACHPOINTDto> ReadMEDICALTEACHPOINTs();
		IEnumerable<MEDICALTEACHPOINTDto> ReadMEDICALTEACHPOINTs(Expression<Func<MEDICALTEACHPOINT, bool>> filter);
		IEnumerable<MEDICALTEACHPOINTDto> ReadMEDICALTEACHPOINTs(ISpecification<MEDICALTEACHPOINT> specification);
		IEnumerable<MEDICALTEACHPOINTDto> ReadMEDICALTEACHPOINTs(IQueryable<MEDICALTEACHPOINT> query);
		IEnumerable<MEDICALTEACHPOINTDto> ReadMEDICALTEACHPOINTs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<MEDICALTEACHPOINTDto> ReadMEDICALTEACHPOINTs(object[] keyWords);
		IEnumerable<MEDICALTEACHPOINTDto> ReadMEDICALTEACHPOINTsPaged(int startIndex, int pageSize);
		IEnumerable<MEDICALTEACHPOINTDto> ReadMEDICALTEACHPOINTsPaged(IQueryable<MEDICALTEACHPOINT> source, int pageIndex, int pageSize);
		IEnumerable<MEDICALTEACHPOINTDto> ReadMEDICALTEACHPOINTsPaged(IQueryable<MEDICALTEACHPOINT> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<MEDICALTEACHPOINTDto> ReadMEDICALTEACHPOINTsFiltered(string sortExpression, string filterExpression);
		IEnumerable<MEDICALTEACHPOINTDto> ReadMEDICALTEACHPOINTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<MEDICALTEACHPOINTDto> ReadMEDICALTEACHPOINTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<MEDICALTEACHPOINT, bool>> filter);
		MEDICALTEACHPOINTDto ReadMEDICALTEACHPOINTs(string dtoKey);
		int CountMEDICALTEACHPOINTs();
		int CountMEDICALTEACHPOINTs(string filterExpression);
		int CountMEDICALTEACHPOINTs(Expression<Func<MEDICALTEACHPOINT, bool>> filter);
		string CreateMEDICALTEACHPOINT(MEDICALTEACHPOINTDto medicalteachpoint, bool doSaveChanges = true);
		void UpdateMEDICALTEACHPOINT(MEDICALTEACHPOINTDto medicalteachpoint, bool doSaveChanges = true);
		void UpdateMEDICALTEACHPOINTs(IEnumerable<MEDICALTEACHPOINTDto> medicalteachpoints, bool doSaveChanges = true);
		void DeleteMEDICALTEACHPOINT(MEDICALTEACHPOINTDto medicalteachpoint, bool doSaveChanges = true);
		void DeleteMEDICALTEACHPOINTs(IEnumerable<MEDICALTEACHPOINTDto> medicalteachpoints, bool doSaveChanges = true);
		void SaveMEDICALTEACHPOINT(MEDICALTEACHPOINTDto medicalteachpoint, bool doSaveChanges = true);
		void SaveMEDICALTEACHPOINTs(IEnumerable<MEDICALTEACHPOINTDto> medicalteachpoints, bool doSaveChanges = true);


		#endregion MEDICALTEACHPOINT CRUD Operations


		#region LOGINLOG CRUD Operations


		ILOGINLOGService LOGINLOGService { get; }
		IQueryable<LOGINLOG> LOGINLOGs { get; }
		IQueryable<LOGINLOG> ReadLOGINLOGs(Expression<Func<LOGINLOG, bool>> filter, int dummy);
		IEnumerable<LOGINLOGDto> ReadLOGINLOGs();
		IEnumerable<LOGINLOGDto> ReadLOGINLOGs(Expression<Func<LOGINLOG, bool>> filter);
		IEnumerable<LOGINLOGDto> ReadLOGINLOGs(ISpecification<LOGINLOG> specification);
		IEnumerable<LOGINLOGDto> ReadLOGINLOGs(IQueryable<LOGINLOG> query);
		IEnumerable<LOGINLOGDto> ReadLOGINLOGs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<LOGINLOGDto> ReadLOGINLOGs(object[] keyWords);
		IEnumerable<LOGINLOGDto> ReadLOGINLOGsPaged(int startIndex, int pageSize);
		IEnumerable<LOGINLOGDto> ReadLOGINLOGsPaged(IQueryable<LOGINLOG> source, int pageIndex, int pageSize);
		IEnumerable<LOGINLOGDto> ReadLOGINLOGsPaged(IQueryable<LOGINLOG> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<LOGINLOGDto> ReadLOGINLOGsFiltered(string sortExpression, string filterExpression);
		IEnumerable<LOGINLOGDto> ReadLOGINLOGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<LOGINLOGDto> ReadLOGINLOGsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<LOGINLOG, bool>> filter);
		LOGINLOGDto ReadLOGINLOGs(string dtoKey);
		int CountLOGINLOGs();
		int CountLOGINLOGs(string filterExpression);
		int CountLOGINLOGs(Expression<Func<LOGINLOG, bool>> filter);
		string CreateLOGINLOG(LOGINLOGDto loginlog, bool doSaveChanges = true);
		void UpdateLOGINLOG(LOGINLOGDto loginlog, bool doSaveChanges = true);
		void UpdateLOGINLOGs(IEnumerable<LOGINLOGDto> loginlogs, bool doSaveChanges = true);
		void DeleteLOGINLOG(LOGINLOGDto loginlog, bool doSaveChanges = true);
		void DeleteLOGINLOGs(IEnumerable<LOGINLOGDto> loginlogs, bool doSaveChanges = true);
		void SaveLOGINLOG(LOGINLOGDto loginlog, bool doSaveChanges = true);
		void SaveLOGINLOGs(IEnumerable<LOGINLOGDto> loginlogs, bool doSaveChanges = true);


		#endregion LOGINLOG CRUD Operations


		#region JOBFORMSETTING CRUD Operations


		IJOBFORMSETTINGService JOBFORMSETTINGService { get; }
		IQueryable<JOBFORMSETTING> JOBFORMSETTINGs { get; }
		IQueryable<JOBFORMSETTING> ReadJOBFORMSETTINGs(Expression<Func<JOBFORMSETTING, bool>> filter, int dummy);
		IEnumerable<JOBFORMSETTINGDto> ReadJOBFORMSETTINGs();
		IEnumerable<JOBFORMSETTINGDto> ReadJOBFORMSETTINGs(Expression<Func<JOBFORMSETTING, bool>> filter);
		IEnumerable<JOBFORMSETTINGDto> ReadJOBFORMSETTINGs(ISpecification<JOBFORMSETTING> specification);
		IEnumerable<JOBFORMSETTINGDto> ReadJOBFORMSETTINGs(IQueryable<JOBFORMSETTING> query);
		IEnumerable<JOBFORMSETTINGDto> ReadJOBFORMSETTINGs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<JOBFORMSETTINGDto> ReadJOBFORMSETTINGs(object[] keyWords);
		IEnumerable<JOBFORMSETTINGDto> ReadJOBFORMSETTINGsPaged(int startIndex, int pageSize);
		IEnumerable<JOBFORMSETTINGDto> ReadJOBFORMSETTINGsPaged(IQueryable<JOBFORMSETTING> source, int pageIndex, int pageSize);
		IEnumerable<JOBFORMSETTINGDto> ReadJOBFORMSETTINGsPaged(IQueryable<JOBFORMSETTING> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<JOBFORMSETTINGDto> ReadJOBFORMSETTINGsFiltered(string sortExpression, string filterExpression);
		IEnumerable<JOBFORMSETTINGDto> ReadJOBFORMSETTINGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<JOBFORMSETTINGDto> ReadJOBFORMSETTINGsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<JOBFORMSETTING, bool>> filter);
		JOBFORMSETTINGDto ReadJOBFORMSETTINGs(string dtoKey);
		int CountJOBFORMSETTINGs();
		int CountJOBFORMSETTINGs(string filterExpression);
		int CountJOBFORMSETTINGs(Expression<Func<JOBFORMSETTING, bool>> filter);
		string CreateJOBFORMSETTING(JOBFORMSETTINGDto jobformsetting, bool doSaveChanges = true);
		void UpdateJOBFORMSETTING(JOBFORMSETTINGDto jobformsetting, bool doSaveChanges = true);
		void UpdateJOBFORMSETTINGs(IEnumerable<JOBFORMSETTINGDto> jobformsettings, bool doSaveChanges = true);
		void DeleteJOBFORMSETTING(JOBFORMSETTINGDto jobformsetting, bool doSaveChanges = true);
		void DeleteJOBFORMSETTINGs(IEnumerable<JOBFORMSETTINGDto> jobformsettings, bool doSaveChanges = true);
		void SaveJOBFORMSETTING(JOBFORMSETTINGDto jobformsetting, bool doSaveChanges = true);
		void SaveJOBFORMSETTINGs(IEnumerable<JOBFORMSETTINGDto> jobformsettings, bool doSaveChanges = true);


		#endregion JOBFORMSETTING CRUD Operations


		#region IMPORTTEMP CRUD Operations


		IIMPORTTEMPService IMPORTTEMPService { get; }
		IQueryable<IMPORTTEMP> IMPORTTEMPs { get; }
		IQueryable<IMPORTTEMP> ReadIMPORTTEMPs(Expression<Func<IMPORTTEMP, bool>> filter, int dummy);
		IEnumerable<IMPORTTEMPDto> ReadIMPORTTEMPs();
		IEnumerable<IMPORTTEMPDto> ReadIMPORTTEMPs(Expression<Func<IMPORTTEMP, bool>> filter);
		IEnumerable<IMPORTTEMPDto> ReadIMPORTTEMPs(ISpecification<IMPORTTEMP> specification);
		IEnumerable<IMPORTTEMPDto> ReadIMPORTTEMPs(IQueryable<IMPORTTEMP> query);
		IEnumerable<IMPORTTEMPDto> ReadIMPORTTEMPs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<IMPORTTEMPDto> ReadIMPORTTEMPs(object[] keyWords);
		IEnumerable<IMPORTTEMPDto> ReadIMPORTTEMPsPaged(int startIndex, int pageSize);
		IEnumerable<IMPORTTEMPDto> ReadIMPORTTEMPsPaged(IQueryable<IMPORTTEMP> source, int pageIndex, int pageSize);
		IEnumerable<IMPORTTEMPDto> ReadIMPORTTEMPsPaged(IQueryable<IMPORTTEMP> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<IMPORTTEMPDto> ReadIMPORTTEMPsFiltered(string sortExpression, string filterExpression);
		IEnumerable<IMPORTTEMPDto> ReadIMPORTTEMPsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<IMPORTTEMPDto> ReadIMPORTTEMPsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<IMPORTTEMP, bool>> filter);
		IMPORTTEMPDto ReadIMPORTTEMPs(string dtoKey);
		int CountIMPORTTEMPs();
		int CountIMPORTTEMPs(string filterExpression);
		int CountIMPORTTEMPs(Expression<Func<IMPORTTEMP, bool>> filter);
		string CreateIMPORTTEMP(IMPORTTEMPDto importtemp, bool doSaveChanges = true);
		void UpdateIMPORTTEMP(IMPORTTEMPDto importtemp, bool doSaveChanges = true);
		void UpdateIMPORTTEMPs(IEnumerable<IMPORTTEMPDto> importtemps, bool doSaveChanges = true);
		void DeleteIMPORTTEMP(IMPORTTEMPDto importtemp, bool doSaveChanges = true);
		void DeleteIMPORTTEMPs(IEnumerable<IMPORTTEMPDto> importtemps, bool doSaveChanges = true);
		void SaveIMPORTTEMP(IMPORTTEMPDto importtemp, bool doSaveChanges = true);
		void SaveIMPORTTEMPs(IEnumerable<IMPORTTEMPDto> importtemps, bool doSaveChanges = true);


		#endregion IMPORTTEMP CRUD Operations


		#region IKASA_UPLOADFILE CRUD Operations


		IIKASA_UPLOADFILEService IKASA_UPLOADFILEService { get; }
		IQueryable<IKASA_UPLOADFILE> IKASA_UPLOADFILEs { get; }
		IQueryable<IKASA_UPLOADFILE> ReadIKASA_UPLOADFILEs(Expression<Func<IKASA_UPLOADFILE, bool>> filter, int dummy);
		IEnumerable<IKASA_UPLOADFILEDto> ReadIKASA_UPLOADFILEs();
		IEnumerable<IKASA_UPLOADFILEDto> ReadIKASA_UPLOADFILEs(Expression<Func<IKASA_UPLOADFILE, bool>> filter);
		IEnumerable<IKASA_UPLOADFILEDto> ReadIKASA_UPLOADFILEs(ISpecification<IKASA_UPLOADFILE> specification);
		IEnumerable<IKASA_UPLOADFILEDto> ReadIKASA_UPLOADFILEs(IQueryable<IKASA_UPLOADFILE> query);
		IEnumerable<IKASA_UPLOADFILEDto> ReadIKASA_UPLOADFILEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<IKASA_UPLOADFILEDto> ReadIKASA_UPLOADFILEs(object[] keyWords);
		IEnumerable<IKASA_UPLOADFILEDto> ReadIKASA_UPLOADFILEsPaged(int startIndex, int pageSize);
		IEnumerable<IKASA_UPLOADFILEDto> ReadIKASA_UPLOADFILEsPaged(IQueryable<IKASA_UPLOADFILE> source, int pageIndex, int pageSize);
		IEnumerable<IKASA_UPLOADFILEDto> ReadIKASA_UPLOADFILEsPaged(IQueryable<IKASA_UPLOADFILE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<IKASA_UPLOADFILEDto> ReadIKASA_UPLOADFILEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<IKASA_UPLOADFILEDto> ReadIKASA_UPLOADFILEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<IKASA_UPLOADFILEDto> ReadIKASA_UPLOADFILEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<IKASA_UPLOADFILE, bool>> filter);
		IKASA_UPLOADFILEDto ReadIKASA_UPLOADFILEs(string dtoKey);
		int CountIKASA_UPLOADFILEs();
		int CountIKASA_UPLOADFILEs(string filterExpression);
		int CountIKASA_UPLOADFILEs(Expression<Func<IKASA_UPLOADFILE, bool>> filter);
		string CreateIKASA_UPLOADFILE(IKASA_UPLOADFILEDto ikasa_uploadfile, bool doSaveChanges = true);
		void UpdateIKASA_UPLOADFILE(IKASA_UPLOADFILEDto ikasa_uploadfile, bool doSaveChanges = true);
		void UpdateIKASA_UPLOADFILEs(IEnumerable<IKASA_UPLOADFILEDto> ikasa_uploadfiles, bool doSaveChanges = true);
		void DeleteIKASA_UPLOADFILE(IKASA_UPLOADFILEDto ikasa_uploadfile, bool doSaveChanges = true);
		void DeleteIKASA_UPLOADFILEs(IEnumerable<IKASA_UPLOADFILEDto> ikasa_uploadfiles, bool doSaveChanges = true);
		void SaveIKASA_UPLOADFILE(IKASA_UPLOADFILEDto ikasa_uploadfile, bool doSaveChanges = true);
		void SaveIKASA_UPLOADFILEs(IEnumerable<IKASA_UPLOADFILEDto> ikasa_uploadfiles, bool doSaveChanges = true);


		#endregion IKASA_UPLOADFILE CRUD Operations


		#region IKASA_OSCEEXAMSTAGE CRUD Operations


		IIKASA_OSCEEXAMSTAGEService IKASA_OSCEEXAMSTAGEService { get; }
		IQueryable<IKASA_OSCEEXAMSTAGE> IKASA_OSCEEXAMSTAGEs { get; }
		IQueryable<IKASA_OSCEEXAMSTAGE> ReadIKASA_OSCEEXAMSTAGEs(Expression<Func<IKASA_OSCEEXAMSTAGE, bool>> filter, int dummy);
		IEnumerable<IKASA_OSCEEXAMSTAGEDto> ReadIKASA_OSCEEXAMSTAGEs();
		IEnumerable<IKASA_OSCEEXAMSTAGEDto> ReadIKASA_OSCEEXAMSTAGEs(Expression<Func<IKASA_OSCEEXAMSTAGE, bool>> filter);
		IEnumerable<IKASA_OSCEEXAMSTAGEDto> ReadIKASA_OSCEEXAMSTAGEs(ISpecification<IKASA_OSCEEXAMSTAGE> specification);
		IEnumerable<IKASA_OSCEEXAMSTAGEDto> ReadIKASA_OSCEEXAMSTAGEs(IQueryable<IKASA_OSCEEXAMSTAGE> query);
		IEnumerable<IKASA_OSCEEXAMSTAGEDto> ReadIKASA_OSCEEXAMSTAGEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<IKASA_OSCEEXAMSTAGEDto> ReadIKASA_OSCEEXAMSTAGEs(object[] keyWords);
		IEnumerable<IKASA_OSCEEXAMSTAGEDto> ReadIKASA_OSCEEXAMSTAGEsPaged(int startIndex, int pageSize);
		IEnumerable<IKASA_OSCEEXAMSTAGEDto> ReadIKASA_OSCEEXAMSTAGEsPaged(IQueryable<IKASA_OSCEEXAMSTAGE> source, int pageIndex, int pageSize);
		IEnumerable<IKASA_OSCEEXAMSTAGEDto> ReadIKASA_OSCEEXAMSTAGEsPaged(IQueryable<IKASA_OSCEEXAMSTAGE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<IKASA_OSCEEXAMSTAGEDto> ReadIKASA_OSCEEXAMSTAGEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<IKASA_OSCEEXAMSTAGEDto> ReadIKASA_OSCEEXAMSTAGEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<IKASA_OSCEEXAMSTAGEDto> ReadIKASA_OSCEEXAMSTAGEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<IKASA_OSCEEXAMSTAGE, bool>> filter);
		IKASA_OSCEEXAMSTAGEDto ReadIKASA_OSCEEXAMSTAGEs(string dtoKey);
		int CountIKASA_OSCEEXAMSTAGEs();
		int CountIKASA_OSCEEXAMSTAGEs(string filterExpression);
		int CountIKASA_OSCEEXAMSTAGEs(Expression<Func<IKASA_OSCEEXAMSTAGE, bool>> filter);
		string CreateIKASA_OSCEEXAMSTAGE(IKASA_OSCEEXAMSTAGEDto ikasa_osceexamstage, bool doSaveChanges = true);
		void UpdateIKASA_OSCEEXAMSTAGE(IKASA_OSCEEXAMSTAGEDto ikasa_osceexamstage, bool doSaveChanges = true);
		void UpdateIKASA_OSCEEXAMSTAGEs(IEnumerable<IKASA_OSCEEXAMSTAGEDto> ikasa_osceexamstages, bool doSaveChanges = true);
		void DeleteIKASA_OSCEEXAMSTAGE(IKASA_OSCEEXAMSTAGEDto ikasa_osceexamstage, bool doSaveChanges = true);
		void DeleteIKASA_OSCEEXAMSTAGEs(IEnumerable<IKASA_OSCEEXAMSTAGEDto> ikasa_osceexamstages, bool doSaveChanges = true);
		void SaveIKASA_OSCEEXAMSTAGE(IKASA_OSCEEXAMSTAGEDto ikasa_osceexamstage, bool doSaveChanges = true);
		void SaveIKASA_OSCEEXAMSTAGEs(IEnumerable<IKASA_OSCEEXAMSTAGEDto> ikasa_osceexamstages, bool doSaveChanges = true);


		#endregion IKASA_OSCEEXAMSTAGE CRUD Operations


		#region IKASA_OSCEEXAMSCORE CRUD Operations


		IIKASA_OSCEEXAMSCOREService IKASA_OSCEEXAMSCOREService { get; }
		IQueryable<IKASA_OSCEEXAMSCORE> IKASA_OSCEEXAMSCOREs { get; }
		IQueryable<IKASA_OSCEEXAMSCORE> ReadIKASA_OSCEEXAMSCOREs(Expression<Func<IKASA_OSCEEXAMSCORE, bool>> filter, int dummy);
		IEnumerable<IKASA_OSCEEXAMSCOREDto> ReadIKASA_OSCEEXAMSCOREs();
		IEnumerable<IKASA_OSCEEXAMSCOREDto> ReadIKASA_OSCEEXAMSCOREs(Expression<Func<IKASA_OSCEEXAMSCORE, bool>> filter);
		IEnumerable<IKASA_OSCEEXAMSCOREDto> ReadIKASA_OSCEEXAMSCOREs(ISpecification<IKASA_OSCEEXAMSCORE> specification);
		IEnumerable<IKASA_OSCEEXAMSCOREDto> ReadIKASA_OSCEEXAMSCOREs(IQueryable<IKASA_OSCEEXAMSCORE> query);
		IEnumerable<IKASA_OSCEEXAMSCOREDto> ReadIKASA_OSCEEXAMSCOREs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<IKASA_OSCEEXAMSCOREDto> ReadIKASA_OSCEEXAMSCOREs(object[] keyWords);
		IEnumerable<IKASA_OSCEEXAMSCOREDto> ReadIKASA_OSCEEXAMSCOREsPaged(int startIndex, int pageSize);
		IEnumerable<IKASA_OSCEEXAMSCOREDto> ReadIKASA_OSCEEXAMSCOREsPaged(IQueryable<IKASA_OSCEEXAMSCORE> source, int pageIndex, int pageSize);
		IEnumerable<IKASA_OSCEEXAMSCOREDto> ReadIKASA_OSCEEXAMSCOREsPaged(IQueryable<IKASA_OSCEEXAMSCORE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<IKASA_OSCEEXAMSCOREDto> ReadIKASA_OSCEEXAMSCOREsFiltered(string sortExpression, string filterExpression);
		IEnumerable<IKASA_OSCEEXAMSCOREDto> ReadIKASA_OSCEEXAMSCOREsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<IKASA_OSCEEXAMSCOREDto> ReadIKASA_OSCEEXAMSCOREsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<IKASA_OSCEEXAMSCORE, bool>> filter);
		IKASA_OSCEEXAMSCOREDto ReadIKASA_OSCEEXAMSCOREs(string dtoKey);
		int CountIKASA_OSCEEXAMSCOREs();
		int CountIKASA_OSCEEXAMSCOREs(string filterExpression);
		int CountIKASA_OSCEEXAMSCOREs(Expression<Func<IKASA_OSCEEXAMSCORE, bool>> filter);
		string CreateIKASA_OSCEEXAMSCORE(IKASA_OSCEEXAMSCOREDto ikasa_osceexamscore, bool doSaveChanges = true);
		void UpdateIKASA_OSCEEXAMSCORE(IKASA_OSCEEXAMSCOREDto ikasa_osceexamscore, bool doSaveChanges = true);
		void UpdateIKASA_OSCEEXAMSCOREs(IEnumerable<IKASA_OSCEEXAMSCOREDto> ikasa_osceexamscores, bool doSaveChanges = true);
		void DeleteIKASA_OSCEEXAMSCORE(IKASA_OSCEEXAMSCOREDto ikasa_osceexamscore, bool doSaveChanges = true);
		void DeleteIKASA_OSCEEXAMSCOREs(IEnumerable<IKASA_OSCEEXAMSCOREDto> ikasa_osceexamscores, bool doSaveChanges = true);
		void SaveIKASA_OSCEEXAMSCORE(IKASA_OSCEEXAMSCOREDto ikasa_osceexamscore, bool doSaveChanges = true);
		void SaveIKASA_OSCEEXAMSCOREs(IEnumerable<IKASA_OSCEEXAMSCOREDto> ikasa_osceexamscores, bool doSaveChanges = true);


		#endregion IKASA_OSCEEXAMSCORE CRUD Operations


		#region IKASA_OSCEEXAM CRUD Operations


		IIKASA_OSCEEXAMService IKASA_OSCEEXAMService { get; }
		IQueryable<IKASA_OSCEEXAM> IKASA_OSCEEXAMs { get; }
		IQueryable<IKASA_OSCEEXAM> ReadIKASA_OSCEEXAMs(Expression<Func<IKASA_OSCEEXAM, bool>> filter, int dummy);
		IEnumerable<IKASA_OSCEEXAMDto> ReadIKASA_OSCEEXAMs();
		IEnumerable<IKASA_OSCEEXAMDto> ReadIKASA_OSCEEXAMs(Expression<Func<IKASA_OSCEEXAM, bool>> filter);
		IEnumerable<IKASA_OSCEEXAMDto> ReadIKASA_OSCEEXAMs(ISpecification<IKASA_OSCEEXAM> specification);
		IEnumerable<IKASA_OSCEEXAMDto> ReadIKASA_OSCEEXAMs(IQueryable<IKASA_OSCEEXAM> query);
		IEnumerable<IKASA_OSCEEXAMDto> ReadIKASA_OSCEEXAMs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<IKASA_OSCEEXAMDto> ReadIKASA_OSCEEXAMs(object[] keyWords);
		IEnumerable<IKASA_OSCEEXAMDto> ReadIKASA_OSCEEXAMsPaged(int startIndex, int pageSize);
		IEnumerable<IKASA_OSCEEXAMDto> ReadIKASA_OSCEEXAMsPaged(IQueryable<IKASA_OSCEEXAM> source, int pageIndex, int pageSize);
		IEnumerable<IKASA_OSCEEXAMDto> ReadIKASA_OSCEEXAMsPaged(IQueryable<IKASA_OSCEEXAM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<IKASA_OSCEEXAMDto> ReadIKASA_OSCEEXAMsFiltered(string sortExpression, string filterExpression);
		IEnumerable<IKASA_OSCEEXAMDto> ReadIKASA_OSCEEXAMsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<IKASA_OSCEEXAMDto> ReadIKASA_OSCEEXAMsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<IKASA_OSCEEXAM, bool>> filter);
		IKASA_OSCEEXAMDto ReadIKASA_OSCEEXAMs(string dtoKey);
		int CountIKASA_OSCEEXAMs();
		int CountIKASA_OSCEEXAMs(string filterExpression);
		int CountIKASA_OSCEEXAMs(Expression<Func<IKASA_OSCEEXAM, bool>> filter);
		string CreateIKASA_OSCEEXAM(IKASA_OSCEEXAMDto ikasa_osceexam, bool doSaveChanges = true);
		void UpdateIKASA_OSCEEXAM(IKASA_OSCEEXAMDto ikasa_osceexam, bool doSaveChanges = true);
		void UpdateIKASA_OSCEEXAMs(IEnumerable<IKASA_OSCEEXAMDto> ikasa_osceexams, bool doSaveChanges = true);
		void DeleteIKASA_OSCEEXAM(IKASA_OSCEEXAMDto ikasa_osceexam, bool doSaveChanges = true);
		void DeleteIKASA_OSCEEXAMs(IEnumerable<IKASA_OSCEEXAMDto> ikasa_osceexams, bool doSaveChanges = true);
		void SaveIKASA_OSCEEXAM(IKASA_OSCEEXAMDto ikasa_osceexam, bool doSaveChanges = true);
		void SaveIKASA_OSCEEXAMs(IEnumerable<IKASA_OSCEEXAMDto> ikasa_osceexams, bool doSaveChanges = true);


		#endregion IKASA_OSCEEXAM CRUD Operations


		#region IKASA_MENUREF CRUD Operations


		IIKASA_MENUREFService IKASA_MENUREFService { get; }
		IQueryable<IKASA_MENUREF> IKASA_MENUREFs { get; }
		IQueryable<IKASA_MENUREF> ReadIKASA_MENUREFs(Expression<Func<IKASA_MENUREF, bool>> filter, int dummy);
		IEnumerable<IKASA_MENUREFDto> ReadIKASA_MENUREFs();
		IEnumerable<IKASA_MENUREFDto> ReadIKASA_MENUREFs(Expression<Func<IKASA_MENUREF, bool>> filter);
		IEnumerable<IKASA_MENUREFDto> ReadIKASA_MENUREFs(ISpecification<IKASA_MENUREF> specification);
		IEnumerable<IKASA_MENUREFDto> ReadIKASA_MENUREFs(IQueryable<IKASA_MENUREF> query);
		IEnumerable<IKASA_MENUREFDto> ReadIKASA_MENUREFs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<IKASA_MENUREFDto> ReadIKASA_MENUREFs(object[] keyWords);
		IEnumerable<IKASA_MENUREFDto> ReadIKASA_MENUREFsPaged(int startIndex, int pageSize);
		IEnumerable<IKASA_MENUREFDto> ReadIKASA_MENUREFsPaged(IQueryable<IKASA_MENUREF> source, int pageIndex, int pageSize);
		IEnumerable<IKASA_MENUREFDto> ReadIKASA_MENUREFsPaged(IQueryable<IKASA_MENUREF> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<IKASA_MENUREFDto> ReadIKASA_MENUREFsFiltered(string sortExpression, string filterExpression);
		IEnumerable<IKASA_MENUREFDto> ReadIKASA_MENUREFsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<IKASA_MENUREFDto> ReadIKASA_MENUREFsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<IKASA_MENUREF, bool>> filter);
		IKASA_MENUREFDto ReadIKASA_MENUREFs(string dtoKey);
		int CountIKASA_MENUREFs();
		int CountIKASA_MENUREFs(string filterExpression);
		int CountIKASA_MENUREFs(Expression<Func<IKASA_MENUREF, bool>> filter);
		string CreateIKASA_MENUREF(IKASA_MENUREFDto ikasa_menuref, bool doSaveChanges = true);
		void UpdateIKASA_MENUREF(IKASA_MENUREFDto ikasa_menuref, bool doSaveChanges = true);
		void UpdateIKASA_MENUREFs(IEnumerable<IKASA_MENUREFDto> ikasa_menurefs, bool doSaveChanges = true);
		void DeleteIKASA_MENUREF(IKASA_MENUREFDto ikasa_menuref, bool doSaveChanges = true);
		void DeleteIKASA_MENUREFs(IEnumerable<IKASA_MENUREFDto> ikasa_menurefs, bool doSaveChanges = true);
		void SaveIKASA_MENUREF(IKASA_MENUREFDto ikasa_menuref, bool doSaveChanges = true);
		void SaveIKASA_MENUREFs(IEnumerable<IKASA_MENUREFDto> ikasa_menurefs, bool doSaveChanges = true);


		#endregion IKASA_MENUREF CRUD Operations


		#region IKASA_MENUPARAM CRUD Operations


		IIKASA_MENUPARAMService IKASA_MENUPARAMService { get; }
		IQueryable<IKASA_MENUPARAM> IKASA_MENUPARAMs { get; }
		IQueryable<IKASA_MENUPARAM> ReadIKASA_MENUPARAMs(Expression<Func<IKASA_MENUPARAM, bool>> filter, int dummy);
		IEnumerable<IKASA_MENUPARAMDto> ReadIKASA_MENUPARAMs();
		IEnumerable<IKASA_MENUPARAMDto> ReadIKASA_MENUPARAMs(Expression<Func<IKASA_MENUPARAM, bool>> filter);
		IEnumerable<IKASA_MENUPARAMDto> ReadIKASA_MENUPARAMs(ISpecification<IKASA_MENUPARAM> specification);
		IEnumerable<IKASA_MENUPARAMDto> ReadIKASA_MENUPARAMs(IQueryable<IKASA_MENUPARAM> query);
		IEnumerable<IKASA_MENUPARAMDto> ReadIKASA_MENUPARAMs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<IKASA_MENUPARAMDto> ReadIKASA_MENUPARAMs(object[] keyWords);
		IEnumerable<IKASA_MENUPARAMDto> ReadIKASA_MENUPARAMsPaged(int startIndex, int pageSize);
		IEnumerable<IKASA_MENUPARAMDto> ReadIKASA_MENUPARAMsPaged(IQueryable<IKASA_MENUPARAM> source, int pageIndex, int pageSize);
		IEnumerable<IKASA_MENUPARAMDto> ReadIKASA_MENUPARAMsPaged(IQueryable<IKASA_MENUPARAM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<IKASA_MENUPARAMDto> ReadIKASA_MENUPARAMsFiltered(string sortExpression, string filterExpression);
		IEnumerable<IKASA_MENUPARAMDto> ReadIKASA_MENUPARAMsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<IKASA_MENUPARAMDto> ReadIKASA_MENUPARAMsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<IKASA_MENUPARAM, bool>> filter);
		IKASA_MENUPARAMDto ReadIKASA_MENUPARAMs(string dtoKey);
		int CountIKASA_MENUPARAMs();
		int CountIKASA_MENUPARAMs(string filterExpression);
		int CountIKASA_MENUPARAMs(Expression<Func<IKASA_MENUPARAM, bool>> filter);
		string CreateIKASA_MENUPARAM(IKASA_MENUPARAMDto ikasa_menuparam, bool doSaveChanges = true);
		void UpdateIKASA_MENUPARAM(IKASA_MENUPARAMDto ikasa_menuparam, bool doSaveChanges = true);
		void UpdateIKASA_MENUPARAMs(IEnumerable<IKASA_MENUPARAMDto> ikasa_menuparams, bool doSaveChanges = true);
		void DeleteIKASA_MENUPARAM(IKASA_MENUPARAMDto ikasa_menuparam, bool doSaveChanges = true);
		void DeleteIKASA_MENUPARAMs(IEnumerable<IKASA_MENUPARAMDto> ikasa_menuparams, bool doSaveChanges = true);
		void SaveIKASA_MENUPARAM(IKASA_MENUPARAMDto ikasa_menuparam, bool doSaveChanges = true);
		void SaveIKASA_MENUPARAMs(IEnumerable<IKASA_MENUPARAMDto> ikasa_menuparams, bool doSaveChanges = true);


		#endregion IKASA_MENUPARAM CRUD Operations


		#region IKASA_MENU CRUD Operations


		IIKASA_MENUService IKASA_MENUService { get; }
		IQueryable<IKASA_MENU> IKASA_MENUs { get; }
		IQueryable<IKASA_MENU> ReadIKASA_MENUs(Expression<Func<IKASA_MENU, bool>> filter, int dummy);
		IEnumerable<IKASA_MENUDto> ReadIKASA_MENUs();
		IEnumerable<IKASA_MENUDto> ReadIKASA_MENUs(Expression<Func<IKASA_MENU, bool>> filter);
		IEnumerable<IKASA_MENUDto> ReadIKASA_MENUs(ISpecification<IKASA_MENU> specification);
		IEnumerable<IKASA_MENUDto> ReadIKASA_MENUs(IQueryable<IKASA_MENU> query);
		IEnumerable<IKASA_MENUDto> ReadIKASA_MENUs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<IKASA_MENUDto> ReadIKASA_MENUs(object[] keyWords);
		IEnumerable<IKASA_MENUDto> ReadIKASA_MENUsPaged(int startIndex, int pageSize);
		IEnumerable<IKASA_MENUDto> ReadIKASA_MENUsPaged(IQueryable<IKASA_MENU> source, int pageIndex, int pageSize);
		IEnumerable<IKASA_MENUDto> ReadIKASA_MENUsPaged(IQueryable<IKASA_MENU> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<IKASA_MENUDto> ReadIKASA_MENUsFiltered(string sortExpression, string filterExpression);
		IEnumerable<IKASA_MENUDto> ReadIKASA_MENUsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<IKASA_MENUDto> ReadIKASA_MENUsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<IKASA_MENU, bool>> filter);
		IKASA_MENUDto ReadIKASA_MENUs(string dtoKey);
		int CountIKASA_MENUs();
		int CountIKASA_MENUs(string filterExpression);
		int CountIKASA_MENUs(Expression<Func<IKASA_MENU, bool>> filter);
		string CreateIKASA_MENU(IKASA_MENUDto ikasa_menu, bool doSaveChanges = true);
		void UpdateIKASA_MENU(IKASA_MENUDto ikasa_menu, bool doSaveChanges = true);
		void UpdateIKASA_MENUs(IEnumerable<IKASA_MENUDto> ikasa_menus, bool doSaveChanges = true);
		void DeleteIKASA_MENU(IKASA_MENUDto ikasa_menu, bool doSaveChanges = true);
		void DeleteIKASA_MENUs(IEnumerable<IKASA_MENUDto> ikasa_menus, bool doSaveChanges = true);
		void SaveIKASA_MENU(IKASA_MENUDto ikasa_menu, bool doSaveChanges = true);
		void SaveIKASA_MENUs(IEnumerable<IKASA_MENUDto> ikasa_menus, bool doSaveChanges = true);


		#endregion IKASA_MENU CRUD Operations


		#region IKASA_IPDDATACOUNT CRUD Operations


		IIKASA_IPDDATACOUNTService IKASA_IPDDATACOUNTService { get; }
		IQueryable<IKASA_IPDDATACOUNT> IKASA_IPDDATACOUNTs { get; }
		IQueryable<IKASA_IPDDATACOUNT> ReadIKASA_IPDDATACOUNTs(Expression<Func<IKASA_IPDDATACOUNT, bool>> filter, int dummy);
		IEnumerable<IKASA_IPDDATACOUNTDto> ReadIKASA_IPDDATACOUNTs();
		IEnumerable<IKASA_IPDDATACOUNTDto> ReadIKASA_IPDDATACOUNTs(Expression<Func<IKASA_IPDDATACOUNT, bool>> filter);
		IEnumerable<IKASA_IPDDATACOUNTDto> ReadIKASA_IPDDATACOUNTs(ISpecification<IKASA_IPDDATACOUNT> specification);
		IEnumerable<IKASA_IPDDATACOUNTDto> ReadIKASA_IPDDATACOUNTs(IQueryable<IKASA_IPDDATACOUNT> query);
		IEnumerable<IKASA_IPDDATACOUNTDto> ReadIKASA_IPDDATACOUNTs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<IKASA_IPDDATACOUNTDto> ReadIKASA_IPDDATACOUNTs(object[] keyWords);
		IEnumerable<IKASA_IPDDATACOUNTDto> ReadIKASA_IPDDATACOUNTsPaged(int startIndex, int pageSize);
		IEnumerable<IKASA_IPDDATACOUNTDto> ReadIKASA_IPDDATACOUNTsPaged(IQueryable<IKASA_IPDDATACOUNT> source, int pageIndex, int pageSize);
		IEnumerable<IKASA_IPDDATACOUNTDto> ReadIKASA_IPDDATACOUNTsPaged(IQueryable<IKASA_IPDDATACOUNT> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<IKASA_IPDDATACOUNTDto> ReadIKASA_IPDDATACOUNTsFiltered(string sortExpression, string filterExpression);
		IEnumerable<IKASA_IPDDATACOUNTDto> ReadIKASA_IPDDATACOUNTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<IKASA_IPDDATACOUNTDto> ReadIKASA_IPDDATACOUNTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<IKASA_IPDDATACOUNT, bool>> filter);
		IKASA_IPDDATACOUNTDto ReadIKASA_IPDDATACOUNTs(string dtoKey);
		int CountIKASA_IPDDATACOUNTs();
		int CountIKASA_IPDDATACOUNTs(string filterExpression);
		int CountIKASA_IPDDATACOUNTs(Expression<Func<IKASA_IPDDATACOUNT, bool>> filter);
		string CreateIKASA_IPDDATACOUNT(IKASA_IPDDATACOUNTDto ikasa_ipddatacount, bool doSaveChanges = true);
		void UpdateIKASA_IPDDATACOUNT(IKASA_IPDDATACOUNTDto ikasa_ipddatacount, bool doSaveChanges = true);
		void UpdateIKASA_IPDDATACOUNTs(IEnumerable<IKASA_IPDDATACOUNTDto> ikasa_ipddatacounts, bool doSaveChanges = true);
		void DeleteIKASA_IPDDATACOUNT(IKASA_IPDDATACOUNTDto ikasa_ipddatacount, bool doSaveChanges = true);
		void DeleteIKASA_IPDDATACOUNTs(IEnumerable<IKASA_IPDDATACOUNTDto> ikasa_ipddatacounts, bool doSaveChanges = true);
		void SaveIKASA_IPDDATACOUNT(IKASA_IPDDATACOUNTDto ikasa_ipddatacount, bool doSaveChanges = true);
		void SaveIKASA_IPDDATACOUNTs(IEnumerable<IKASA_IPDDATACOUNTDto> ikasa_ipddatacounts, bool doSaveChanges = true);


		#endregion IKASA_IPDDATACOUNT CRUD Operations


		#region IKASA_ERCASE_EVALDET CRUD Operations


		IIKASA_ERCASE_EVALDETService IKASA_ERCASE_EVALDETService { get; }
		IQueryable<IKASA_ERCASE_EVALDET> IKASA_ERCASE_EVALDETs { get; }
		IQueryable<IKASA_ERCASE_EVALDET> ReadIKASA_ERCASE_EVALDETs(Expression<Func<IKASA_ERCASE_EVALDET, bool>> filter, int dummy);
		IEnumerable<IKASA_ERCASE_EVALDETDto> ReadIKASA_ERCASE_EVALDETs();
		IEnumerable<IKASA_ERCASE_EVALDETDto> ReadIKASA_ERCASE_EVALDETs(Expression<Func<IKASA_ERCASE_EVALDET, bool>> filter);
		IEnumerable<IKASA_ERCASE_EVALDETDto> ReadIKASA_ERCASE_EVALDETs(ISpecification<IKASA_ERCASE_EVALDET> specification);
		IEnumerable<IKASA_ERCASE_EVALDETDto> ReadIKASA_ERCASE_EVALDETs(IQueryable<IKASA_ERCASE_EVALDET> query);
		IEnumerable<IKASA_ERCASE_EVALDETDto> ReadIKASA_ERCASE_EVALDETs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<IKASA_ERCASE_EVALDETDto> ReadIKASA_ERCASE_EVALDETs(object[] keyWords);
		IEnumerable<IKASA_ERCASE_EVALDETDto> ReadIKASA_ERCASE_EVALDETsPaged(int startIndex, int pageSize);
		IEnumerable<IKASA_ERCASE_EVALDETDto> ReadIKASA_ERCASE_EVALDETsPaged(IQueryable<IKASA_ERCASE_EVALDET> source, int pageIndex, int pageSize);
		IEnumerable<IKASA_ERCASE_EVALDETDto> ReadIKASA_ERCASE_EVALDETsPaged(IQueryable<IKASA_ERCASE_EVALDET> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<IKASA_ERCASE_EVALDETDto> ReadIKASA_ERCASE_EVALDETsFiltered(string sortExpression, string filterExpression);
		IEnumerable<IKASA_ERCASE_EVALDETDto> ReadIKASA_ERCASE_EVALDETsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<IKASA_ERCASE_EVALDETDto> ReadIKASA_ERCASE_EVALDETsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<IKASA_ERCASE_EVALDET, bool>> filter);
		IKASA_ERCASE_EVALDETDto ReadIKASA_ERCASE_EVALDETs(string dtoKey);
		int CountIKASA_ERCASE_EVALDETs();
		int CountIKASA_ERCASE_EVALDETs(string filterExpression);
		int CountIKASA_ERCASE_EVALDETs(Expression<Func<IKASA_ERCASE_EVALDET, bool>> filter);
		string CreateIKASA_ERCASE_EVALDET(IKASA_ERCASE_EVALDETDto ikasa_ercase_evaldet, bool doSaveChanges = true);
		void UpdateIKASA_ERCASE_EVALDET(IKASA_ERCASE_EVALDETDto ikasa_ercase_evaldet, bool doSaveChanges = true);
		void UpdateIKASA_ERCASE_EVALDETs(IEnumerable<IKASA_ERCASE_EVALDETDto> ikasa_ercase_evaldets, bool doSaveChanges = true);
		void DeleteIKASA_ERCASE_EVALDET(IKASA_ERCASE_EVALDETDto ikasa_ercase_evaldet, bool doSaveChanges = true);
		void DeleteIKASA_ERCASE_EVALDETs(IEnumerable<IKASA_ERCASE_EVALDETDto> ikasa_ercase_evaldets, bool doSaveChanges = true);
		void SaveIKASA_ERCASE_EVALDET(IKASA_ERCASE_EVALDETDto ikasa_ercase_evaldet, bool doSaveChanges = true);
		void SaveIKASA_ERCASE_EVALDETs(IEnumerable<IKASA_ERCASE_EVALDETDto> ikasa_ercase_evaldets, bool doSaveChanges = true);


		#endregion IKASA_ERCASE_EVALDET CRUD Operations


		#region IKASA_ERCASE_EVAL CRUD Operations


		IIKASA_ERCASE_EVALService IKASA_ERCASE_EVALService { get; }
		IQueryable<IKASA_ERCASE_EVAL> IKASA_ERCASE_EVALs { get; }
		IQueryable<IKASA_ERCASE_EVAL> ReadIKASA_ERCASE_EVALs(Expression<Func<IKASA_ERCASE_EVAL, bool>> filter, int dummy);
		IEnumerable<IKASA_ERCASE_EVALDto> ReadIKASA_ERCASE_EVALs();
		IEnumerable<IKASA_ERCASE_EVALDto> ReadIKASA_ERCASE_EVALs(Expression<Func<IKASA_ERCASE_EVAL, bool>> filter);
		IEnumerable<IKASA_ERCASE_EVALDto> ReadIKASA_ERCASE_EVALs(ISpecification<IKASA_ERCASE_EVAL> specification);
		IEnumerable<IKASA_ERCASE_EVALDto> ReadIKASA_ERCASE_EVALs(IQueryable<IKASA_ERCASE_EVAL> query);
		IEnumerable<IKASA_ERCASE_EVALDto> ReadIKASA_ERCASE_EVALs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<IKASA_ERCASE_EVALDto> ReadIKASA_ERCASE_EVALs(object[] keyWords);
		IEnumerable<IKASA_ERCASE_EVALDto> ReadIKASA_ERCASE_EVALsPaged(int startIndex, int pageSize);
		IEnumerable<IKASA_ERCASE_EVALDto> ReadIKASA_ERCASE_EVALsPaged(IQueryable<IKASA_ERCASE_EVAL> source, int pageIndex, int pageSize);
		IEnumerable<IKASA_ERCASE_EVALDto> ReadIKASA_ERCASE_EVALsPaged(IQueryable<IKASA_ERCASE_EVAL> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<IKASA_ERCASE_EVALDto> ReadIKASA_ERCASE_EVALsFiltered(string sortExpression, string filterExpression);
		IEnumerable<IKASA_ERCASE_EVALDto> ReadIKASA_ERCASE_EVALsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<IKASA_ERCASE_EVALDto> ReadIKASA_ERCASE_EVALsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<IKASA_ERCASE_EVAL, bool>> filter);
		IKASA_ERCASE_EVALDto ReadIKASA_ERCASE_EVALs(string dtoKey);
		int CountIKASA_ERCASE_EVALs();
		int CountIKASA_ERCASE_EVALs(string filterExpression);
		int CountIKASA_ERCASE_EVALs(Expression<Func<IKASA_ERCASE_EVAL, bool>> filter);
		string CreateIKASA_ERCASE_EVAL(IKASA_ERCASE_EVALDto ikasa_ercase_eval, bool doSaveChanges = true);
		void UpdateIKASA_ERCASE_EVAL(IKASA_ERCASE_EVALDto ikasa_ercase_eval, bool doSaveChanges = true);
		void UpdateIKASA_ERCASE_EVALs(IEnumerable<IKASA_ERCASE_EVALDto> ikasa_ercase_evals, bool doSaveChanges = true);
		void DeleteIKASA_ERCASE_EVAL(IKASA_ERCASE_EVALDto ikasa_ercase_eval, bool doSaveChanges = true);
		void DeleteIKASA_ERCASE_EVALs(IEnumerable<IKASA_ERCASE_EVALDto> ikasa_ercase_evals, bool doSaveChanges = true);
		void SaveIKASA_ERCASE_EVAL(IKASA_ERCASE_EVALDto ikasa_ercase_eval, bool doSaveChanges = true);
		void SaveIKASA_ERCASE_EVALs(IEnumerable<IKASA_ERCASE_EVALDto> ikasa_ercase_evals, bool doSaveChanges = true);


		#endregion IKASA_ERCASE_EVAL CRUD Operations


		#region IKASA_ERCASE CRUD Operations


		IIKASA_ERCASEService IKASA_ERCASEService { get; }
		IQueryable<IKASA_ERCASE> IKASA_ERCASEs { get; }
		IQueryable<IKASA_ERCASE> ReadIKASA_ERCASEs(Expression<Func<IKASA_ERCASE, bool>> filter, int dummy);
		IEnumerable<IKASA_ERCASEDto> ReadIKASA_ERCASEs();
		IEnumerable<IKASA_ERCASEDto> ReadIKASA_ERCASEs(Expression<Func<IKASA_ERCASE, bool>> filter);
		IEnumerable<IKASA_ERCASEDto> ReadIKASA_ERCASEs(ISpecification<IKASA_ERCASE> specification);
		IEnumerable<IKASA_ERCASEDto> ReadIKASA_ERCASEs(IQueryable<IKASA_ERCASE> query);
		IEnumerable<IKASA_ERCASEDto> ReadIKASA_ERCASEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<IKASA_ERCASEDto> ReadIKASA_ERCASEs(object[] keyWords);
		IEnumerable<IKASA_ERCASEDto> ReadIKASA_ERCASEsPaged(int startIndex, int pageSize);
		IEnumerable<IKASA_ERCASEDto> ReadIKASA_ERCASEsPaged(IQueryable<IKASA_ERCASE> source, int pageIndex, int pageSize);
		IEnumerable<IKASA_ERCASEDto> ReadIKASA_ERCASEsPaged(IQueryable<IKASA_ERCASE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<IKASA_ERCASEDto> ReadIKASA_ERCASEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<IKASA_ERCASEDto> ReadIKASA_ERCASEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<IKASA_ERCASEDto> ReadIKASA_ERCASEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<IKASA_ERCASE, bool>> filter);
		IKASA_ERCASEDto ReadIKASA_ERCASEs(string dtoKey);
		int CountIKASA_ERCASEs();
		int CountIKASA_ERCASEs(string filterExpression);
		int CountIKASA_ERCASEs(Expression<Func<IKASA_ERCASE, bool>> filter);
		string CreateIKASA_ERCASE(IKASA_ERCASEDto ikasa_ercase, bool doSaveChanges = true);
		void UpdateIKASA_ERCASE(IKASA_ERCASEDto ikasa_ercase, bool doSaveChanges = true);
		void UpdateIKASA_ERCASEs(IEnumerable<IKASA_ERCASEDto> ikasa_ercases, bool doSaveChanges = true);
		void DeleteIKASA_ERCASE(IKASA_ERCASEDto ikasa_ercase, bool doSaveChanges = true);
		void DeleteIKASA_ERCASEs(IEnumerable<IKASA_ERCASEDto> ikasa_ercases, bool doSaveChanges = true);
		void SaveIKASA_ERCASE(IKASA_ERCASEDto ikasa_ercase, bool doSaveChanges = true);
		void SaveIKASA_ERCASEs(IEnumerable<IKASA_ERCASEDto> ikasa_ercases, bool doSaveChanges = true);


		#endregion IKASA_ERCASE CRUD Operations


		#region IKASA_ACTUPLOADFILE CRUD Operations


		IIKASA_ACTUPLOADFILEService IKASA_ACTUPLOADFILEService { get; }
		IQueryable<IKASA_ACTUPLOADFILE> IKASA_ACTUPLOADFILEs { get; }
		IQueryable<IKASA_ACTUPLOADFILE> ReadIKASA_ACTUPLOADFILEs(Expression<Func<IKASA_ACTUPLOADFILE, bool>> filter, int dummy);
		IEnumerable<IKASA_ACTUPLOADFILEDto> ReadIKASA_ACTUPLOADFILEs();
		IEnumerable<IKASA_ACTUPLOADFILEDto> ReadIKASA_ACTUPLOADFILEs(Expression<Func<IKASA_ACTUPLOADFILE, bool>> filter);
		IEnumerable<IKASA_ACTUPLOADFILEDto> ReadIKASA_ACTUPLOADFILEs(ISpecification<IKASA_ACTUPLOADFILE> specification);
		IEnumerable<IKASA_ACTUPLOADFILEDto> ReadIKASA_ACTUPLOADFILEs(IQueryable<IKASA_ACTUPLOADFILE> query);
		IEnumerable<IKASA_ACTUPLOADFILEDto> ReadIKASA_ACTUPLOADFILEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<IKASA_ACTUPLOADFILEDto> ReadIKASA_ACTUPLOADFILEs(object[] keyWords);
		IEnumerable<IKASA_ACTUPLOADFILEDto> ReadIKASA_ACTUPLOADFILEsPaged(int startIndex, int pageSize);
		IEnumerable<IKASA_ACTUPLOADFILEDto> ReadIKASA_ACTUPLOADFILEsPaged(IQueryable<IKASA_ACTUPLOADFILE> source, int pageIndex, int pageSize);
		IEnumerable<IKASA_ACTUPLOADFILEDto> ReadIKASA_ACTUPLOADFILEsPaged(IQueryable<IKASA_ACTUPLOADFILE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<IKASA_ACTUPLOADFILEDto> ReadIKASA_ACTUPLOADFILEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<IKASA_ACTUPLOADFILEDto> ReadIKASA_ACTUPLOADFILEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<IKASA_ACTUPLOADFILEDto> ReadIKASA_ACTUPLOADFILEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<IKASA_ACTUPLOADFILE, bool>> filter);
		IKASA_ACTUPLOADFILEDto ReadIKASA_ACTUPLOADFILEs(string dtoKey);
		int CountIKASA_ACTUPLOADFILEs();
		int CountIKASA_ACTUPLOADFILEs(string filterExpression);
		int CountIKASA_ACTUPLOADFILEs(Expression<Func<IKASA_ACTUPLOADFILE, bool>> filter);
		string CreateIKASA_ACTUPLOADFILE(IKASA_ACTUPLOADFILEDto ikasa_actuploadfile, bool doSaveChanges = true);
		void UpdateIKASA_ACTUPLOADFILE(IKASA_ACTUPLOADFILEDto ikasa_actuploadfile, bool doSaveChanges = true);
		void UpdateIKASA_ACTUPLOADFILEs(IEnumerable<IKASA_ACTUPLOADFILEDto> ikasa_actuploadfiles, bool doSaveChanges = true);
		void DeleteIKASA_ACTUPLOADFILE(IKASA_ACTUPLOADFILEDto ikasa_actuploadfile, bool doSaveChanges = true);
		void DeleteIKASA_ACTUPLOADFILEs(IEnumerable<IKASA_ACTUPLOADFILEDto> ikasa_actuploadfiles, bool doSaveChanges = true);
		void SaveIKASA_ACTUPLOADFILE(IKASA_ACTUPLOADFILEDto ikasa_actuploadfile, bool doSaveChanges = true);
		void SaveIKASA_ACTUPLOADFILEs(IEnumerable<IKASA_ACTUPLOADFILEDto> ikasa_actuploadfiles, bool doSaveChanges = true);


		#endregion IKASA_ACTUPLOADFILE CRUD Operations


		#region HEALTEACHTIMERATE CRUD Operations


		IHEALTEACHTIMERATEService HEALTEACHTIMERATEService { get; }
		IQueryable<HEALTEACHTIMERATE> HEALTEACHTIMERATEs { get; }
		IQueryable<HEALTEACHTIMERATE> ReadHEALTEACHTIMERATEs(Expression<Func<HEALTEACHTIMERATE, bool>> filter, int dummy);
		IEnumerable<HEALTEACHTIMERATEDto> ReadHEALTEACHTIMERATEs();
		IEnumerable<HEALTEACHTIMERATEDto> ReadHEALTEACHTIMERATEs(Expression<Func<HEALTEACHTIMERATE, bool>> filter);
		IEnumerable<HEALTEACHTIMERATEDto> ReadHEALTEACHTIMERATEs(ISpecification<HEALTEACHTIMERATE> specification);
		IEnumerable<HEALTEACHTIMERATEDto> ReadHEALTEACHTIMERATEs(IQueryable<HEALTEACHTIMERATE> query);
		IEnumerable<HEALTEACHTIMERATEDto> ReadHEALTEACHTIMERATEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<HEALTEACHTIMERATEDto> ReadHEALTEACHTIMERATEs(object[] keyWords);
		IEnumerable<HEALTEACHTIMERATEDto> ReadHEALTEACHTIMERATEsPaged(int startIndex, int pageSize);
		IEnumerable<HEALTEACHTIMERATEDto> ReadHEALTEACHTIMERATEsPaged(IQueryable<HEALTEACHTIMERATE> source, int pageIndex, int pageSize);
		IEnumerable<HEALTEACHTIMERATEDto> ReadHEALTEACHTIMERATEsPaged(IQueryable<HEALTEACHTIMERATE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<HEALTEACHTIMERATEDto> ReadHEALTEACHTIMERATEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<HEALTEACHTIMERATEDto> ReadHEALTEACHTIMERATEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<HEALTEACHTIMERATEDto> ReadHEALTEACHTIMERATEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<HEALTEACHTIMERATE, bool>> filter);
		HEALTEACHTIMERATEDto ReadHEALTEACHTIMERATEs(string dtoKey);
		int CountHEALTEACHTIMERATEs();
		int CountHEALTEACHTIMERATEs(string filterExpression);
		int CountHEALTEACHTIMERATEs(Expression<Func<HEALTEACHTIMERATE, bool>> filter);
		string CreateHEALTEACHTIMERATE(HEALTEACHTIMERATEDto healteachtimerate, bool doSaveChanges = true);
		void UpdateHEALTEACHTIMERATE(HEALTEACHTIMERATEDto healteachtimerate, bool doSaveChanges = true);
		void UpdateHEALTEACHTIMERATEs(IEnumerable<HEALTEACHTIMERATEDto> healteachtimerates, bool doSaveChanges = true);
		void DeleteHEALTEACHTIMERATE(HEALTEACHTIMERATEDto healteachtimerate, bool doSaveChanges = true);
		void DeleteHEALTEACHTIMERATEs(IEnumerable<HEALTEACHTIMERATEDto> healteachtimerates, bool doSaveChanges = true);
		void SaveHEALTEACHTIMERATE(HEALTEACHTIMERATEDto healteachtimerate, bool doSaveChanges = true);
		void SaveHEALTEACHTIMERATEs(IEnumerable<HEALTEACHTIMERATEDto> healteachtimerates, bool doSaveChanges = true);


		#endregion HEALTEACHTIMERATE CRUD Operations


		#region HEALTEACHTIME CRUD Operations


		IHEALTEACHTIMEService HEALTEACHTIMEService { get; }
		IQueryable<HEALTEACHTIME> HEALTEACHTIMEs { get; }
		IQueryable<HEALTEACHTIME> ReadHEALTEACHTIMEs(Expression<Func<HEALTEACHTIME, bool>> filter, int dummy);
		IEnumerable<HEALTEACHTIMEDto> ReadHEALTEACHTIMEs();
		IEnumerable<HEALTEACHTIMEDto> ReadHEALTEACHTIMEs(Expression<Func<HEALTEACHTIME, bool>> filter);
		IEnumerable<HEALTEACHTIMEDto> ReadHEALTEACHTIMEs(ISpecification<HEALTEACHTIME> specification);
		IEnumerable<HEALTEACHTIMEDto> ReadHEALTEACHTIMEs(IQueryable<HEALTEACHTIME> query);
		IEnumerable<HEALTEACHTIMEDto> ReadHEALTEACHTIMEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<HEALTEACHTIMEDto> ReadHEALTEACHTIMEs(object[] keyWords);
		IEnumerable<HEALTEACHTIMEDto> ReadHEALTEACHTIMEsPaged(int startIndex, int pageSize);
		IEnumerable<HEALTEACHTIMEDto> ReadHEALTEACHTIMEsPaged(IQueryable<HEALTEACHTIME> source, int pageIndex, int pageSize);
		IEnumerable<HEALTEACHTIMEDto> ReadHEALTEACHTIMEsPaged(IQueryable<HEALTEACHTIME> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<HEALTEACHTIMEDto> ReadHEALTEACHTIMEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<HEALTEACHTIMEDto> ReadHEALTEACHTIMEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<HEALTEACHTIMEDto> ReadHEALTEACHTIMEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<HEALTEACHTIME, bool>> filter);
		HEALTEACHTIMEDto ReadHEALTEACHTIMEs(string dtoKey);
		int CountHEALTEACHTIMEs();
		int CountHEALTEACHTIMEs(string filterExpression);
		int CountHEALTEACHTIMEs(Expression<Func<HEALTEACHTIME, bool>> filter);
		string CreateHEALTEACHTIME(HEALTEACHTIMEDto healteachtime, bool doSaveChanges = true);
		void UpdateHEALTEACHTIME(HEALTEACHTIMEDto healteachtime, bool doSaveChanges = true);
		void UpdateHEALTEACHTIMEs(IEnumerable<HEALTEACHTIMEDto> healteachtimes, bool doSaveChanges = true);
		void DeleteHEALTEACHTIME(HEALTEACHTIMEDto healteachtime, bool doSaveChanges = true);
		void DeleteHEALTEACHTIMEs(IEnumerable<HEALTEACHTIMEDto> healteachtimes, bool doSaveChanges = true);
		void SaveHEALTEACHTIME(HEALTEACHTIMEDto healteachtime, bool doSaveChanges = true);
		void SaveHEALTEACHTIMEs(IEnumerable<HEALTEACHTIMEDto> healteachtimes, bool doSaveChanges = true);


		#endregion HEALTEACHTIME CRUD Operations


		#region GOODVSDATADE CRUD Operations


		IGOODVSDATADEService GOODVSDATADEService { get; }
		IQueryable<GOODVSDATADE> GOODVSDATADEs { get; }
		IQueryable<GOODVSDATADE> ReadGOODVSDATADEs(Expression<Func<GOODVSDATADE, bool>> filter, int dummy);
		IEnumerable<GOODVSDATADEDto> ReadGOODVSDATADEs();
		IEnumerable<GOODVSDATADEDto> ReadGOODVSDATADEs(Expression<Func<GOODVSDATADE, bool>> filter);
		IEnumerable<GOODVSDATADEDto> ReadGOODVSDATADEs(ISpecification<GOODVSDATADE> specification);
		IEnumerable<GOODVSDATADEDto> ReadGOODVSDATADEs(IQueryable<GOODVSDATADE> query);
		IEnumerable<GOODVSDATADEDto> ReadGOODVSDATADEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<GOODVSDATADEDto> ReadGOODVSDATADEs(object[] keyWords);
		IEnumerable<GOODVSDATADEDto> ReadGOODVSDATADEsPaged(int startIndex, int pageSize);
		IEnumerable<GOODVSDATADEDto> ReadGOODVSDATADEsPaged(IQueryable<GOODVSDATADE> source, int pageIndex, int pageSize);
		IEnumerable<GOODVSDATADEDto> ReadGOODVSDATADEsPaged(IQueryable<GOODVSDATADE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<GOODVSDATADEDto> ReadGOODVSDATADEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<GOODVSDATADEDto> ReadGOODVSDATADEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<GOODVSDATADEDto> ReadGOODVSDATADEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<GOODVSDATADE, bool>> filter);
		GOODVSDATADEDto ReadGOODVSDATADEs(string dtoKey);
		int CountGOODVSDATADEs();
		int CountGOODVSDATADEs(string filterExpression);
		int CountGOODVSDATADEs(Expression<Func<GOODVSDATADE, bool>> filter);
		string CreateGOODVSDATADE(GOODVSDATADEDto goodvsdatade, bool doSaveChanges = true);
		void UpdateGOODVSDATADE(GOODVSDATADEDto goodvsdatade, bool doSaveChanges = true);
		void UpdateGOODVSDATADEs(IEnumerable<GOODVSDATADEDto> goodvsdatades, bool doSaveChanges = true);
		void DeleteGOODVSDATADE(GOODVSDATADEDto goodvsdatade, bool doSaveChanges = true);
		void DeleteGOODVSDATADEs(IEnumerable<GOODVSDATADEDto> goodvsdatades, bool doSaveChanges = true);
		void SaveGOODVSDATADE(GOODVSDATADEDto goodvsdatade, bool doSaveChanges = true);
		void SaveGOODVSDATADEs(IEnumerable<GOODVSDATADEDto> goodvsdatades, bool doSaveChanges = true);


		#endregion GOODVSDATADE CRUD Operations


		#region GOODVSDATUM CRUD Operations


		IGOODVSDATUMService GOODVSDATUMService { get; }
		IQueryable<GOODVSDATUM> GOODVSDATa { get; }
		IQueryable<GOODVSDATUM> ReadGOODVSDATa(Expression<Func<GOODVSDATUM, bool>> filter, int dummy);
		IEnumerable<GOODVSDATUMDto> ReadGOODVSDATa();
		IEnumerable<GOODVSDATUMDto> ReadGOODVSDATa(Expression<Func<GOODVSDATUM, bool>> filter);
		IEnumerable<GOODVSDATUMDto> ReadGOODVSDATa(ISpecification<GOODVSDATUM> specification);
		IEnumerable<GOODVSDATUMDto> ReadGOODVSDATa(IQueryable<GOODVSDATUM> query);
		IEnumerable<GOODVSDATUMDto> ReadGOODVSDATa(string[] propertyToSearch, object[] keyWords);
		IEnumerable<GOODVSDATUMDto> ReadGOODVSDATa(object[] keyWords);
		IEnumerable<GOODVSDATUMDto> ReadGOODVSDATaPaged(int startIndex, int pageSize);
		IEnumerable<GOODVSDATUMDto> ReadGOODVSDATaPaged(IQueryable<GOODVSDATUM> source, int pageIndex, int pageSize);
		IEnumerable<GOODVSDATUMDto> ReadGOODVSDATaPaged(IQueryable<GOODVSDATUM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<GOODVSDATUMDto> ReadGOODVSDATaFiltered(string sortExpression, string filterExpression);
		IEnumerable<GOODVSDATUMDto> ReadGOODVSDATaPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<GOODVSDATUMDto> ReadGOODVSDATaPagedAndFiltered(int startIndex, int pageSize, Expression<Func<GOODVSDATUM, bool>> filter);
		GOODVSDATUMDto ReadGOODVSDATa(string dtoKey);
		int CountGOODVSDATa();
		int CountGOODVSDATa(string filterExpression);
		int CountGOODVSDATa(Expression<Func<GOODVSDATUM, bool>> filter);
		string CreateGOODVSDATUM(GOODVSDATUMDto goodvsdatum, bool doSaveChanges = true);
		void UpdateGOODVSDATUM(GOODVSDATUMDto goodvsdatum, bool doSaveChanges = true);
		void UpdateGOODVSDATa(IEnumerable<GOODVSDATUMDto> goodvsdata, bool doSaveChanges = true);
		void DeleteGOODVSDATUM(GOODVSDATUMDto goodvsdatum, bool doSaveChanges = true);
		void DeleteGOODVSDATa(IEnumerable<GOODVSDATUMDto> goodvsdata, bool doSaveChanges = true);
		void SaveGOODVSDATUM(GOODVSDATUMDto goodvsdatum, bool doSaveChanges = true);
		void SaveGOODVSDATa(IEnumerable<GOODVSDATUMDto> goodvsdata, bool doSaveChanges = true);


		#endregion GOODVSDATUM CRUD Operations


		#region FORMCATEGORYREF CRUD Operations


		IFORMCATEGORYREFService FORMCATEGORYREFService { get; }
		IQueryable<FORMCATEGORYREF> FORMCATEGORYREFs { get; }
		IQueryable<FORMCATEGORYREF> ReadFORMCATEGORYREFs(Expression<Func<FORMCATEGORYREF, bool>> filter, int dummy);
		IEnumerable<FORMCATEGORYREFDto> ReadFORMCATEGORYREFs();
		IEnumerable<FORMCATEGORYREFDto> ReadFORMCATEGORYREFs(Expression<Func<FORMCATEGORYREF, bool>> filter);
		IEnumerable<FORMCATEGORYREFDto> ReadFORMCATEGORYREFs(ISpecification<FORMCATEGORYREF> specification);
		IEnumerable<FORMCATEGORYREFDto> ReadFORMCATEGORYREFs(IQueryable<FORMCATEGORYREF> query);
		IEnumerable<FORMCATEGORYREFDto> ReadFORMCATEGORYREFs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORMCATEGORYREFDto> ReadFORMCATEGORYREFs(object[] keyWords);
		IEnumerable<FORMCATEGORYREFDto> ReadFORMCATEGORYREFsPaged(int startIndex, int pageSize);
		IEnumerable<FORMCATEGORYREFDto> ReadFORMCATEGORYREFsPaged(IQueryable<FORMCATEGORYREF> source, int pageIndex, int pageSize);
		IEnumerable<FORMCATEGORYREFDto> ReadFORMCATEGORYREFsPaged(IQueryable<FORMCATEGORYREF> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORMCATEGORYREFDto> ReadFORMCATEGORYREFsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORMCATEGORYREFDto> ReadFORMCATEGORYREFsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORMCATEGORYREFDto> ReadFORMCATEGORYREFsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORMCATEGORYREF, bool>> filter);
		FORMCATEGORYREFDto ReadFORMCATEGORYREFs(string dtoKey);
		int CountFORMCATEGORYREFs();
		int CountFORMCATEGORYREFs(string filterExpression);
		int CountFORMCATEGORYREFs(Expression<Func<FORMCATEGORYREF, bool>> filter);
		string CreateFORMCATEGORYREF(FORMCATEGORYREFDto formcategoryref, bool doSaveChanges = true);
		void UpdateFORMCATEGORYREF(FORMCATEGORYREFDto formcategoryref, bool doSaveChanges = true);
		void UpdateFORMCATEGORYREFs(IEnumerable<FORMCATEGORYREFDto> formcategoryrefs, bool doSaveChanges = true);
		void DeleteFORMCATEGORYREF(FORMCATEGORYREFDto formcategoryref, bool doSaveChanges = true);
		void DeleteFORMCATEGORYREFs(IEnumerable<FORMCATEGORYREFDto> formcategoryrefs, bool doSaveChanges = true);
		void SaveFORMCATEGORYREF(FORMCATEGORYREFDto formcategoryref, bool doSaveChanges = true);
		void SaveFORMCATEGORYREFs(IEnumerable<FORMCATEGORYREFDto> formcategoryrefs, bool doSaveChanges = true);


		#endregion FORMCATEGORYREF CRUD Operations


		#region FORMCATEGORY CRUD Operations


		IFORMCATEGORYService FORMCATEGORYService { get; }
		IQueryable<FORMCATEGORY> FORMCATEGORies { get; }
		IQueryable<FORMCATEGORY> ReadFORMCATEGORies(Expression<Func<FORMCATEGORY, bool>> filter, int dummy);
		IEnumerable<FORMCATEGORYDto> ReadFORMCATEGORies();
		IEnumerable<FORMCATEGORYDto> ReadFORMCATEGORies(Expression<Func<FORMCATEGORY, bool>> filter);
		IEnumerable<FORMCATEGORYDto> ReadFORMCATEGORies(ISpecification<FORMCATEGORY> specification);
		IEnumerable<FORMCATEGORYDto> ReadFORMCATEGORies(IQueryable<FORMCATEGORY> query);
		IEnumerable<FORMCATEGORYDto> ReadFORMCATEGORies(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORMCATEGORYDto> ReadFORMCATEGORies(object[] keyWords);
		IEnumerable<FORMCATEGORYDto> ReadFORMCATEGORiesPaged(int startIndex, int pageSize);
		IEnumerable<FORMCATEGORYDto> ReadFORMCATEGORiesPaged(IQueryable<FORMCATEGORY> source, int pageIndex, int pageSize);
		IEnumerable<FORMCATEGORYDto> ReadFORMCATEGORiesPaged(IQueryable<FORMCATEGORY> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORMCATEGORYDto> ReadFORMCATEGORiesFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORMCATEGORYDto> ReadFORMCATEGORiesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORMCATEGORYDto> ReadFORMCATEGORiesPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORMCATEGORY, bool>> filter);
		FORMCATEGORYDto ReadFORMCATEGORies(string dtoKey);
		int CountFORMCATEGORies();
		int CountFORMCATEGORies(string filterExpression);
		int CountFORMCATEGORies(Expression<Func<FORMCATEGORY, bool>> filter);
		string CreateFORMCATEGORY(FORMCATEGORYDto formcategory, bool doSaveChanges = true);
		void UpdateFORMCATEGORY(FORMCATEGORYDto formcategory, bool doSaveChanges = true);
		void UpdateFORMCATEGORies(IEnumerable<FORMCATEGORYDto> formcategories, bool doSaveChanges = true);
		void DeleteFORMCATEGORY(FORMCATEGORYDto formcategory, bool doSaveChanges = true);
		void DeleteFORMCATEGORies(IEnumerable<FORMCATEGORYDto> formcategories, bool doSaveChanges = true);
		void SaveFORMCATEGORY(FORMCATEGORYDto formcategory, bool doSaveChanges = true);
		void SaveFORMCATEGORies(IEnumerable<FORMCATEGORYDto> formcategories, bool doSaveChanges = true);


		#endregion FORMCATEGORY CRUD Operations


		#region FORM_TODO_LIST CRUD Operations


		IFORM_TODO_LISTService FORM_TODO_LISTService { get; }
		IQueryable<FORM_TODO_LIST> FORM_TODO_LISTs { get; }
		IQueryable<FORM_TODO_LIST> ReadFORM_TODO_LISTs(Expression<Func<FORM_TODO_LIST, bool>> filter, int dummy);
		IEnumerable<FORM_TODO_LISTDto> ReadFORM_TODO_LISTs();
		IEnumerable<FORM_TODO_LISTDto> ReadFORM_TODO_LISTs(Expression<Func<FORM_TODO_LIST, bool>> filter);
		IEnumerable<FORM_TODO_LISTDto> ReadFORM_TODO_LISTs(ISpecification<FORM_TODO_LIST> specification);
		IEnumerable<FORM_TODO_LISTDto> ReadFORM_TODO_LISTs(IQueryable<FORM_TODO_LIST> query);
		IEnumerable<FORM_TODO_LISTDto> ReadFORM_TODO_LISTs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORM_TODO_LISTDto> ReadFORM_TODO_LISTs(object[] keyWords);
		IEnumerable<FORM_TODO_LISTDto> ReadFORM_TODO_LISTsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_TODO_LISTDto> ReadFORM_TODO_LISTsPaged(IQueryable<FORM_TODO_LIST> source, int pageIndex, int pageSize);
		IEnumerable<FORM_TODO_LISTDto> ReadFORM_TODO_LISTsPaged(IQueryable<FORM_TODO_LIST> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORM_TODO_LISTDto> ReadFORM_TODO_LISTsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_TODO_LISTDto> ReadFORM_TODO_LISTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORM_TODO_LISTDto> ReadFORM_TODO_LISTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TODO_LIST, bool>> filter);
		FORM_TODO_LISTDto ReadFORM_TODO_LISTs(string dtoKey);
		int CountFORM_TODO_LISTs();
		int CountFORM_TODO_LISTs(string filterExpression);
		int CountFORM_TODO_LISTs(Expression<Func<FORM_TODO_LIST, bool>> filter);
		string CreateFORM_TODO_LIST(FORM_TODO_LISTDto form_todo_list, bool doSaveChanges = true);
		void UpdateFORM_TODO_LIST(FORM_TODO_LISTDto form_todo_list, bool doSaveChanges = true);
		void UpdateFORM_TODO_LISTs(IEnumerable<FORM_TODO_LISTDto> form_todo_lists, bool doSaveChanges = true);
		void DeleteFORM_TODO_LIST(FORM_TODO_LISTDto form_todo_list, bool doSaveChanges = true);
		void DeleteFORM_TODO_LISTs(IEnumerable<FORM_TODO_LISTDto> form_todo_lists, bool doSaveChanges = true);
		void SaveFORM_TODO_LIST(FORM_TODO_LISTDto form_todo_list, bool doSaveChanges = true);
		void SaveFORM_TODO_LISTs(IEnumerable<FORM_TODO_LISTDto> form_todo_lists, bool doSaveChanges = true);


		#endregion FORM_TODO_LIST CRUD Operations


		#region FORM_TEMPLATES_BK CRUD Operations


		IFORM_TEMPLATES_BKService FORM_TEMPLATES_BKService { get; }
		IQueryable<FORM_TEMPLATES_BK> FORM_TEMPLATES_BKs { get; }
		IQueryable<FORM_TEMPLATES_BK> ReadFORM_TEMPLATES_BKs(Expression<Func<FORM_TEMPLATES_BK, bool>> filter, int dummy);
		IEnumerable<FORM_TEMPLATES_BKDto> ReadFORM_TEMPLATES_BKs();
		IEnumerable<FORM_TEMPLATES_BKDto> ReadFORM_TEMPLATES_BKs(Expression<Func<FORM_TEMPLATES_BK, bool>> filter);
		IEnumerable<FORM_TEMPLATES_BKDto> ReadFORM_TEMPLATES_BKs(ISpecification<FORM_TEMPLATES_BK> specification);
		IEnumerable<FORM_TEMPLATES_BKDto> ReadFORM_TEMPLATES_BKs(IQueryable<FORM_TEMPLATES_BK> query);
		IEnumerable<FORM_TEMPLATES_BKDto> ReadFORM_TEMPLATES_BKs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORM_TEMPLATES_BKDto> ReadFORM_TEMPLATES_BKs(object[] keyWords);
		IEnumerable<FORM_TEMPLATES_BKDto> ReadFORM_TEMPLATES_BKsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_TEMPLATES_BKDto> ReadFORM_TEMPLATES_BKsPaged(IQueryable<FORM_TEMPLATES_BK> source, int pageIndex, int pageSize);
		IEnumerable<FORM_TEMPLATES_BKDto> ReadFORM_TEMPLATES_BKsPaged(IQueryable<FORM_TEMPLATES_BK> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORM_TEMPLATES_BKDto> ReadFORM_TEMPLATES_BKsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATES_BKDto> ReadFORM_TEMPLATES_BKsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATES_BKDto> ReadFORM_TEMPLATES_BKsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATES_BK, bool>> filter);
		FORM_TEMPLATES_BKDto ReadFORM_TEMPLATES_BKs(string dtoKey);
		int CountFORM_TEMPLATES_BKs();
		int CountFORM_TEMPLATES_BKs(string filterExpression);
		int CountFORM_TEMPLATES_BKs(Expression<Func<FORM_TEMPLATES_BK, bool>> filter);
		string CreateFORM_TEMPLATES_BK(FORM_TEMPLATES_BKDto form_templates_bk, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATES_BK(FORM_TEMPLATES_BKDto form_templates_bk, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATES_BKs(IEnumerable<FORM_TEMPLATES_BKDto> form_templates_bks, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATES_BK(FORM_TEMPLATES_BKDto form_templates_bk, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATES_BKs(IEnumerable<FORM_TEMPLATES_BKDto> form_templates_bks, bool doSaveChanges = true);
		void SaveFORM_TEMPLATES_BK(FORM_TEMPLATES_BKDto form_templates_bk, bool doSaveChanges = true);
		void SaveFORM_TEMPLATES_BKs(IEnumerable<FORM_TEMPLATES_BKDto> form_templates_bks, bool doSaveChanges = true);


		#endregion FORM_TEMPLATES_BK CRUD Operations


		#region FORM_TEMPLATE CRUD Operations


		IFORM_TEMPLATEService FORM_TEMPLATEService { get; }
		IQueryable<FORM_TEMPLATE> FORM_TEMPLATEs { get; }
		IQueryable<FORM_TEMPLATE> ReadFORM_TEMPLATEs(Expression<Func<FORM_TEMPLATE, bool>> filter, int dummy);
		IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEs();
		IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEs(Expression<Func<FORM_TEMPLATE, bool>> filter);
		IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEs(ISpecification<FORM_TEMPLATE> specification);
		IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEs(IQueryable<FORM_TEMPLATE> query);
		IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEs(object[] keyWords);
		IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEsPaged(IQueryable<FORM_TEMPLATE> source, int pageIndex, int pageSize);
		IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEsPaged(IQueryable<FORM_TEMPLATE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATE, bool>> filter);
		FORM_TEMPLATEDto ReadFORM_TEMPLATEs(string dtoKey);
		int CountFORM_TEMPLATEs();
		int CountFORM_TEMPLATEs(string filterExpression);
		int CountFORM_TEMPLATEs(Expression<Func<FORM_TEMPLATE, bool>> filter);
		string CreateFORM_TEMPLATE(FORM_TEMPLATEDto form_template, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE(FORM_TEMPLATEDto form_template, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATEs(IEnumerable<FORM_TEMPLATEDto> form_templates, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE(FORM_TEMPLATEDto form_template, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATEs(IEnumerable<FORM_TEMPLATEDto> form_templates, bool doSaveChanges = true);
		void SaveFORM_TEMPLATE(FORM_TEMPLATEDto form_template, bool doSaveChanges = true);
		void SaveFORM_TEMPLATEs(IEnumerable<FORM_TEMPLATEDto> form_templates, bool doSaveChanges = true);


		#endregion FORM_TEMPLATE CRUD Operations


		#region FORM_TEMPLATE_SUBMIT_SQL CRUD Operations


		IFORM_TEMPLATE_SUBMIT_SQLService FORM_TEMPLATE_SUBMIT_SQLService { get; }
		IQueryable<FORM_TEMPLATE_SUBMIT_SQL> FORM_TEMPLATE_SUBMIT_SQLs { get; }
		IQueryable<FORM_TEMPLATE_SUBMIT_SQL> ReadFORM_TEMPLATE_SUBMIT_SQLs(Expression<Func<FORM_TEMPLATE_SUBMIT_SQL, bool>> filter, int dummy);
		IEnumerable<FORM_TEMPLATE_SUBMIT_SQLDto> ReadFORM_TEMPLATE_SUBMIT_SQLs();
		IEnumerable<FORM_TEMPLATE_SUBMIT_SQLDto> ReadFORM_TEMPLATE_SUBMIT_SQLs(Expression<Func<FORM_TEMPLATE_SUBMIT_SQL, bool>> filter);
		IEnumerable<FORM_TEMPLATE_SUBMIT_SQLDto> ReadFORM_TEMPLATE_SUBMIT_SQLs(ISpecification<FORM_TEMPLATE_SUBMIT_SQL> specification);
		IEnumerable<FORM_TEMPLATE_SUBMIT_SQLDto> ReadFORM_TEMPLATE_SUBMIT_SQLs(IQueryable<FORM_TEMPLATE_SUBMIT_SQL> query);
		IEnumerable<FORM_TEMPLATE_SUBMIT_SQLDto> ReadFORM_TEMPLATE_SUBMIT_SQLs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORM_TEMPLATE_SUBMIT_SQLDto> ReadFORM_TEMPLATE_SUBMIT_SQLs(object[] keyWords);
		IEnumerable<FORM_TEMPLATE_SUBMIT_SQLDto> ReadFORM_TEMPLATE_SUBMIT_SQLsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_SUBMIT_SQLDto> ReadFORM_TEMPLATE_SUBMIT_SQLsPaged(IQueryable<FORM_TEMPLATE_SUBMIT_SQL> source, int pageIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_SUBMIT_SQLDto> ReadFORM_TEMPLATE_SUBMIT_SQLsPaged(IQueryable<FORM_TEMPLATE_SUBMIT_SQL> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORM_TEMPLATE_SUBMIT_SQLDto> ReadFORM_TEMPLATE_SUBMIT_SQLsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_SUBMIT_SQLDto> ReadFORM_TEMPLATE_SUBMIT_SQLsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_SUBMIT_SQLDto> ReadFORM_TEMPLATE_SUBMIT_SQLsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATE_SUBMIT_SQL, bool>> filter);
		FORM_TEMPLATE_SUBMIT_SQLDto ReadFORM_TEMPLATE_SUBMIT_SQLs(string dtoKey);
		int CountFORM_TEMPLATE_SUBMIT_SQLs();
		int CountFORM_TEMPLATE_SUBMIT_SQLs(string filterExpression);
		int CountFORM_TEMPLATE_SUBMIT_SQLs(Expression<Func<FORM_TEMPLATE_SUBMIT_SQL, bool>> filter);
		string CreateFORM_TEMPLATE_SUBMIT_SQL(FORM_TEMPLATE_SUBMIT_SQLDto form_template_submit_sql, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_SUBMIT_SQL(FORM_TEMPLATE_SUBMIT_SQLDto form_template_submit_sql, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_SUBMIT_SQLs(IEnumerable<FORM_TEMPLATE_SUBMIT_SQLDto> form_template_submit_sqls, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_SUBMIT_SQL(FORM_TEMPLATE_SUBMIT_SQLDto form_template_submit_sql, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_SUBMIT_SQLs(IEnumerable<FORM_TEMPLATE_SUBMIT_SQLDto> form_template_submit_sqls, bool doSaveChanges = true);
		void SaveFORM_TEMPLATE_SUBMIT_SQL(FORM_TEMPLATE_SUBMIT_SQLDto form_template_submit_sql, bool doSaveChanges = true);
		void SaveFORM_TEMPLATE_SUBMIT_SQLs(IEnumerable<FORM_TEMPLATE_SUBMIT_SQLDto> form_template_submit_sqls, bool doSaveChanges = true);


		#endregion FORM_TEMPLATE_SUBMIT_SQL CRUD Operations


		#region FORM_TEMPLATE_SQL CRUD Operations


		IFORM_TEMPLATE_SQLService FORM_TEMPLATE_SQLService { get; }
		IQueryable<FORM_TEMPLATE_SQL> FORM_TEMPLATE_SQLs { get; }
		IQueryable<FORM_TEMPLATE_SQL> ReadFORM_TEMPLATE_SQLs(Expression<Func<FORM_TEMPLATE_SQL, bool>> filter, int dummy);
		IEnumerable<FORM_TEMPLATE_SQLDto> ReadFORM_TEMPLATE_SQLs();
		IEnumerable<FORM_TEMPLATE_SQLDto> ReadFORM_TEMPLATE_SQLs(Expression<Func<FORM_TEMPLATE_SQL, bool>> filter);
		IEnumerable<FORM_TEMPLATE_SQLDto> ReadFORM_TEMPLATE_SQLs(ISpecification<FORM_TEMPLATE_SQL> specification);
		IEnumerable<FORM_TEMPLATE_SQLDto> ReadFORM_TEMPLATE_SQLs(IQueryable<FORM_TEMPLATE_SQL> query);
		IEnumerable<FORM_TEMPLATE_SQLDto> ReadFORM_TEMPLATE_SQLs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORM_TEMPLATE_SQLDto> ReadFORM_TEMPLATE_SQLs(object[] keyWords);
		IEnumerable<FORM_TEMPLATE_SQLDto> ReadFORM_TEMPLATE_SQLsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_SQLDto> ReadFORM_TEMPLATE_SQLsPaged(IQueryable<FORM_TEMPLATE_SQL> source, int pageIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_SQLDto> ReadFORM_TEMPLATE_SQLsPaged(IQueryable<FORM_TEMPLATE_SQL> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORM_TEMPLATE_SQLDto> ReadFORM_TEMPLATE_SQLsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_SQLDto> ReadFORM_TEMPLATE_SQLsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_SQLDto> ReadFORM_TEMPLATE_SQLsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATE_SQL, bool>> filter);
		FORM_TEMPLATE_SQLDto ReadFORM_TEMPLATE_SQLs(string dtoKey);
		int CountFORM_TEMPLATE_SQLs();
		int CountFORM_TEMPLATE_SQLs(string filterExpression);
		int CountFORM_TEMPLATE_SQLs(Expression<Func<FORM_TEMPLATE_SQL, bool>> filter);
		string CreateFORM_TEMPLATE_SQL(FORM_TEMPLATE_SQLDto form_template_sql, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_SQL(FORM_TEMPLATE_SQLDto form_template_sql, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_SQLs(IEnumerable<FORM_TEMPLATE_SQLDto> form_template_sqls, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_SQL(FORM_TEMPLATE_SQLDto form_template_sql, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_SQLs(IEnumerable<FORM_TEMPLATE_SQLDto> form_template_sqls, bool doSaveChanges = true);
		void SaveFORM_TEMPLATE_SQL(FORM_TEMPLATE_SQLDto form_template_sql, bool doSaveChanges = true);
		void SaveFORM_TEMPLATE_SQLs(IEnumerable<FORM_TEMPLATE_SQLDto> form_template_sqls, bool doSaveChanges = true);


		#endregion FORM_TEMPLATE_SQL CRUD Operations


		#region FORM_TEMPLATE_SINGLE CRUD Operations


		IFORM_TEMPLATE_SINGLEService FORM_TEMPLATE_SINGLEService { get; }
		IQueryable<FORM_TEMPLATE_SINGLE> FORM_TEMPLATE_SINGLEs { get; }
		IQueryable<FORM_TEMPLATE_SINGLE> ReadFORM_TEMPLATE_SINGLEs(Expression<Func<FORM_TEMPLATE_SINGLE, bool>> filter, int dummy);
		IEnumerable<FORM_TEMPLATE_SINGLEDto> ReadFORM_TEMPLATE_SINGLEs();
		IEnumerable<FORM_TEMPLATE_SINGLEDto> ReadFORM_TEMPLATE_SINGLEs(Expression<Func<FORM_TEMPLATE_SINGLE, bool>> filter);
		IEnumerable<FORM_TEMPLATE_SINGLEDto> ReadFORM_TEMPLATE_SINGLEs(ISpecification<FORM_TEMPLATE_SINGLE> specification);
		IEnumerable<FORM_TEMPLATE_SINGLEDto> ReadFORM_TEMPLATE_SINGLEs(IQueryable<FORM_TEMPLATE_SINGLE> query);
		IEnumerable<FORM_TEMPLATE_SINGLEDto> ReadFORM_TEMPLATE_SINGLEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORM_TEMPLATE_SINGLEDto> ReadFORM_TEMPLATE_SINGLEs(object[] keyWords);
		IEnumerable<FORM_TEMPLATE_SINGLEDto> ReadFORM_TEMPLATE_SINGLEsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_SINGLEDto> ReadFORM_TEMPLATE_SINGLEsPaged(IQueryable<FORM_TEMPLATE_SINGLE> source, int pageIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_SINGLEDto> ReadFORM_TEMPLATE_SINGLEsPaged(IQueryable<FORM_TEMPLATE_SINGLE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORM_TEMPLATE_SINGLEDto> ReadFORM_TEMPLATE_SINGLEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_SINGLEDto> ReadFORM_TEMPLATE_SINGLEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_SINGLEDto> ReadFORM_TEMPLATE_SINGLEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATE_SINGLE, bool>> filter);
		FORM_TEMPLATE_SINGLEDto ReadFORM_TEMPLATE_SINGLEs(string dtoKey);
		int CountFORM_TEMPLATE_SINGLEs();
		int CountFORM_TEMPLATE_SINGLEs(string filterExpression);
		int CountFORM_TEMPLATE_SINGLEs(Expression<Func<FORM_TEMPLATE_SINGLE, bool>> filter);
		string CreateFORM_TEMPLATE_SINGLE(FORM_TEMPLATE_SINGLEDto form_template_single, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_SINGLE(FORM_TEMPLATE_SINGLEDto form_template_single, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_SINGLEs(IEnumerable<FORM_TEMPLATE_SINGLEDto> form_template_singles, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_SINGLE(FORM_TEMPLATE_SINGLEDto form_template_single, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_SINGLEs(IEnumerable<FORM_TEMPLATE_SINGLEDto> form_template_singles, bool doSaveChanges = true);
		void SaveFORM_TEMPLATE_SINGLE(FORM_TEMPLATE_SINGLEDto form_template_single, bool doSaveChanges = true);
		void SaveFORM_TEMPLATE_SINGLEs(IEnumerable<FORM_TEMPLATE_SINGLEDto> form_template_singles, bool doSaveChanges = true);


		#endregion FORM_TEMPLATE_SINGLE CRUD Operations


		#region FORM_TEMPLATE_SCRIPT CRUD Operations


		IFORM_TEMPLATE_SCRIPTService FORM_TEMPLATE_SCRIPTService { get; }
		IQueryable<FORM_TEMPLATE_SCRIPT> FORM_TEMPLATE_SCRIPTs { get; }
		IQueryable<FORM_TEMPLATE_SCRIPT> ReadFORM_TEMPLATE_SCRIPTs(Expression<Func<FORM_TEMPLATE_SCRIPT, bool>> filter, int dummy);
		IEnumerable<FORM_TEMPLATE_SCRIPTDto> ReadFORM_TEMPLATE_SCRIPTs();
		IEnumerable<FORM_TEMPLATE_SCRIPTDto> ReadFORM_TEMPLATE_SCRIPTs(Expression<Func<FORM_TEMPLATE_SCRIPT, bool>> filter);
		IEnumerable<FORM_TEMPLATE_SCRIPTDto> ReadFORM_TEMPLATE_SCRIPTs(ISpecification<FORM_TEMPLATE_SCRIPT> specification);
		IEnumerable<FORM_TEMPLATE_SCRIPTDto> ReadFORM_TEMPLATE_SCRIPTs(IQueryable<FORM_TEMPLATE_SCRIPT> query);
		IEnumerable<FORM_TEMPLATE_SCRIPTDto> ReadFORM_TEMPLATE_SCRIPTs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORM_TEMPLATE_SCRIPTDto> ReadFORM_TEMPLATE_SCRIPTs(object[] keyWords);
		IEnumerable<FORM_TEMPLATE_SCRIPTDto> ReadFORM_TEMPLATE_SCRIPTsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_SCRIPTDto> ReadFORM_TEMPLATE_SCRIPTsPaged(IQueryable<FORM_TEMPLATE_SCRIPT> source, int pageIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_SCRIPTDto> ReadFORM_TEMPLATE_SCRIPTsPaged(IQueryable<FORM_TEMPLATE_SCRIPT> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORM_TEMPLATE_SCRIPTDto> ReadFORM_TEMPLATE_SCRIPTsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_SCRIPTDto> ReadFORM_TEMPLATE_SCRIPTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_SCRIPTDto> ReadFORM_TEMPLATE_SCRIPTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATE_SCRIPT, bool>> filter);
		FORM_TEMPLATE_SCRIPTDto ReadFORM_TEMPLATE_SCRIPTs(string dtoKey);
		int CountFORM_TEMPLATE_SCRIPTs();
		int CountFORM_TEMPLATE_SCRIPTs(string filterExpression);
		int CountFORM_TEMPLATE_SCRIPTs(Expression<Func<FORM_TEMPLATE_SCRIPT, bool>> filter);
		string CreateFORM_TEMPLATE_SCRIPT(FORM_TEMPLATE_SCRIPTDto form_template_script, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_SCRIPT(FORM_TEMPLATE_SCRIPTDto form_template_script, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_SCRIPTs(IEnumerable<FORM_TEMPLATE_SCRIPTDto> form_template_scripts, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_SCRIPT(FORM_TEMPLATE_SCRIPTDto form_template_script, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_SCRIPTs(IEnumerable<FORM_TEMPLATE_SCRIPTDto> form_template_scripts, bool doSaveChanges = true);
		void SaveFORM_TEMPLATE_SCRIPT(FORM_TEMPLATE_SCRIPTDto form_template_script, bool doSaveChanges = true);
		void SaveFORM_TEMPLATE_SCRIPTs(IEnumerable<FORM_TEMPLATE_SCRIPTDto> form_template_scripts, bool doSaveChanges = true);


		#endregion FORM_TEMPLATE_SCRIPT CRUD Operations


		#region FORM_TEMPLATE_PERMISSION CRUD Operations


		IFORM_TEMPLATE_PERMISSIONService FORM_TEMPLATE_PERMISSIONService { get; }
		IQueryable<FORM_TEMPLATE_PERMISSION> FORM_TEMPLATE_PERMISSIONs { get; }
		IQueryable<FORM_TEMPLATE_PERMISSION> ReadFORM_TEMPLATE_PERMISSIONs(Expression<Func<FORM_TEMPLATE_PERMISSION, bool>> filter, int dummy);
		IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONs();
		IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONs(Expression<Func<FORM_TEMPLATE_PERMISSION, bool>> filter);
		IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONs(ISpecification<FORM_TEMPLATE_PERMISSION> specification);
		IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONs(IQueryable<FORM_TEMPLATE_PERMISSION> query);
		IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONs(object[] keyWords);
		IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONsPaged(IQueryable<FORM_TEMPLATE_PERMISSION> source, int pageIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONsPaged(IQueryable<FORM_TEMPLATE_PERMISSION> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATE_PERMISSION, bool>> filter);
		FORM_TEMPLATE_PERMISSIONDto ReadFORM_TEMPLATE_PERMISSIONs(string dtoKey);
		int CountFORM_TEMPLATE_PERMISSIONs();
		int CountFORM_TEMPLATE_PERMISSIONs(string filterExpression);
		int CountFORM_TEMPLATE_PERMISSIONs(Expression<Func<FORM_TEMPLATE_PERMISSION, bool>> filter);
		string CreateFORM_TEMPLATE_PERMISSION(FORM_TEMPLATE_PERMISSIONDto form_template_permission, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_PERMISSION(FORM_TEMPLATE_PERMISSIONDto form_template_permission, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_PERMISSIONs(IEnumerable<FORM_TEMPLATE_PERMISSIONDto> form_template_permissions, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_PERMISSION(FORM_TEMPLATE_PERMISSIONDto form_template_permission, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_PERMISSIONs(IEnumerable<FORM_TEMPLATE_PERMISSIONDto> form_template_permissions, bool doSaveChanges = true);
		void SaveFORM_TEMPLATE_PERMISSION(FORM_TEMPLATE_PERMISSIONDto form_template_permission, bool doSaveChanges = true);
		void SaveFORM_TEMPLATE_PERMISSIONs(IEnumerable<FORM_TEMPLATE_PERMISSIONDto> form_template_permissions, bool doSaveChanges = true);


		#endregion FORM_TEMPLATE_PERMISSION CRUD Operations


		#region FORM_TEMPLATE_NECESSARY CRUD Operations


		IFORM_TEMPLATE_NECESSARYService FORM_TEMPLATE_NECESSARYService { get; }
		IQueryable<FORM_TEMPLATE_NECESSARY> FORM_TEMPLATE_NECESSARies { get; }
		IQueryable<FORM_TEMPLATE_NECESSARY> ReadFORM_TEMPLATE_NECESSARies(Expression<Func<FORM_TEMPLATE_NECESSARY, bool>> filter, int dummy);
		IEnumerable<FORM_TEMPLATE_NECESSARYDto> ReadFORM_TEMPLATE_NECESSARies();
		IEnumerable<FORM_TEMPLATE_NECESSARYDto> ReadFORM_TEMPLATE_NECESSARies(Expression<Func<FORM_TEMPLATE_NECESSARY, bool>> filter);
		IEnumerable<FORM_TEMPLATE_NECESSARYDto> ReadFORM_TEMPLATE_NECESSARies(ISpecification<FORM_TEMPLATE_NECESSARY> specification);
		IEnumerable<FORM_TEMPLATE_NECESSARYDto> ReadFORM_TEMPLATE_NECESSARies(IQueryable<FORM_TEMPLATE_NECESSARY> query);
		IEnumerable<FORM_TEMPLATE_NECESSARYDto> ReadFORM_TEMPLATE_NECESSARies(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORM_TEMPLATE_NECESSARYDto> ReadFORM_TEMPLATE_NECESSARies(object[] keyWords);
		IEnumerable<FORM_TEMPLATE_NECESSARYDto> ReadFORM_TEMPLATE_NECESSARiesPaged(int startIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_NECESSARYDto> ReadFORM_TEMPLATE_NECESSARiesPaged(IQueryable<FORM_TEMPLATE_NECESSARY> source, int pageIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_NECESSARYDto> ReadFORM_TEMPLATE_NECESSARiesPaged(IQueryable<FORM_TEMPLATE_NECESSARY> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORM_TEMPLATE_NECESSARYDto> ReadFORM_TEMPLATE_NECESSARiesFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_NECESSARYDto> ReadFORM_TEMPLATE_NECESSARiesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_NECESSARYDto> ReadFORM_TEMPLATE_NECESSARiesPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATE_NECESSARY, bool>> filter);
		FORM_TEMPLATE_NECESSARYDto ReadFORM_TEMPLATE_NECESSARies(string dtoKey);
		int CountFORM_TEMPLATE_NECESSARies();
		int CountFORM_TEMPLATE_NECESSARies(string filterExpression);
		int CountFORM_TEMPLATE_NECESSARies(Expression<Func<FORM_TEMPLATE_NECESSARY, bool>> filter);
		string CreateFORM_TEMPLATE_NECESSARY(FORM_TEMPLATE_NECESSARYDto form_template_necessary, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_NECESSARY(FORM_TEMPLATE_NECESSARYDto form_template_necessary, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_NECESSARies(IEnumerable<FORM_TEMPLATE_NECESSARYDto> form_template_necessaries, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_NECESSARY(FORM_TEMPLATE_NECESSARYDto form_template_necessary, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_NECESSARies(IEnumerable<FORM_TEMPLATE_NECESSARYDto> form_template_necessaries, bool doSaveChanges = true);
		void SaveFORM_TEMPLATE_NECESSARY(FORM_TEMPLATE_NECESSARYDto form_template_necessary, bool doSaveChanges = true);
		void SaveFORM_TEMPLATE_NECESSARies(IEnumerable<FORM_TEMPLATE_NECESSARYDto> form_template_necessaries, bool doSaveChanges = true);


		#endregion FORM_TEMPLATE_NECESSARY CRUD Operations


		#region FORM_TEMPLATE_LIBRARY_OPTION CRUD Operations


		IFORM_TEMPLATE_LIBRARY_OPTIONService FORM_TEMPLATE_LIBRARY_OPTIONService { get; }
		IQueryable<FORM_TEMPLATE_LIBRARY_OPTION> FORM_TEMPLATE_LIBRARY_OPTIONs { get; }
		IQueryable<FORM_TEMPLATE_LIBRARY_OPTION> ReadFORM_TEMPLATE_LIBRARY_OPTIONs(Expression<Func<FORM_TEMPLATE_LIBRARY_OPTION, bool>> filter, int dummy);
		IEnumerable<FORM_TEMPLATE_LIBRARY_OPTIONDto> ReadFORM_TEMPLATE_LIBRARY_OPTIONs();
		IEnumerable<FORM_TEMPLATE_LIBRARY_OPTIONDto> ReadFORM_TEMPLATE_LIBRARY_OPTIONs(Expression<Func<FORM_TEMPLATE_LIBRARY_OPTION, bool>> filter);
		IEnumerable<FORM_TEMPLATE_LIBRARY_OPTIONDto> ReadFORM_TEMPLATE_LIBRARY_OPTIONs(ISpecification<FORM_TEMPLATE_LIBRARY_OPTION> specification);
		IEnumerable<FORM_TEMPLATE_LIBRARY_OPTIONDto> ReadFORM_TEMPLATE_LIBRARY_OPTIONs(IQueryable<FORM_TEMPLATE_LIBRARY_OPTION> query);
		IEnumerable<FORM_TEMPLATE_LIBRARY_OPTIONDto> ReadFORM_TEMPLATE_LIBRARY_OPTIONs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORM_TEMPLATE_LIBRARY_OPTIONDto> ReadFORM_TEMPLATE_LIBRARY_OPTIONs(object[] keyWords);
		IEnumerable<FORM_TEMPLATE_LIBRARY_OPTIONDto> ReadFORM_TEMPLATE_LIBRARY_OPTIONsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_LIBRARY_OPTIONDto> ReadFORM_TEMPLATE_LIBRARY_OPTIONsPaged(IQueryable<FORM_TEMPLATE_LIBRARY_OPTION> source, int pageIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_LIBRARY_OPTIONDto> ReadFORM_TEMPLATE_LIBRARY_OPTIONsPaged(IQueryable<FORM_TEMPLATE_LIBRARY_OPTION> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORM_TEMPLATE_LIBRARY_OPTIONDto> ReadFORM_TEMPLATE_LIBRARY_OPTIONsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_LIBRARY_OPTIONDto> ReadFORM_TEMPLATE_LIBRARY_OPTIONsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_LIBRARY_OPTIONDto> ReadFORM_TEMPLATE_LIBRARY_OPTIONsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATE_LIBRARY_OPTION, bool>> filter);
		FORM_TEMPLATE_LIBRARY_OPTIONDto ReadFORM_TEMPLATE_LIBRARY_OPTIONs(string dtoKey);
		int CountFORM_TEMPLATE_LIBRARY_OPTIONs();
		int CountFORM_TEMPLATE_LIBRARY_OPTIONs(string filterExpression);
		int CountFORM_TEMPLATE_LIBRARY_OPTIONs(Expression<Func<FORM_TEMPLATE_LIBRARY_OPTION, bool>> filter);
		string CreateFORM_TEMPLATE_LIBRARY_OPTION(FORM_TEMPLATE_LIBRARY_OPTIONDto form_template_library_option, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_LIBRARY_OPTION(FORM_TEMPLATE_LIBRARY_OPTIONDto form_template_library_option, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_LIBRARY_OPTIONs(IEnumerable<FORM_TEMPLATE_LIBRARY_OPTIONDto> form_template_library_options, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_LIBRARY_OPTION(FORM_TEMPLATE_LIBRARY_OPTIONDto form_template_library_option, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_LIBRARY_OPTIONs(IEnumerable<FORM_TEMPLATE_LIBRARY_OPTIONDto> form_template_library_options, bool doSaveChanges = true);
		void SaveFORM_TEMPLATE_LIBRARY_OPTION(FORM_TEMPLATE_LIBRARY_OPTIONDto form_template_library_option, bool doSaveChanges = true);
		void SaveFORM_TEMPLATE_LIBRARY_OPTIONs(IEnumerable<FORM_TEMPLATE_LIBRARY_OPTIONDto> form_template_library_options, bool doSaveChanges = true);


		#endregion FORM_TEMPLATE_LIBRARY_OPTION CRUD Operations


		#region FORM_TEMPLATE_LIBRARY CRUD Operations


		IFORM_TEMPLATE_LIBRARYService FORM_TEMPLATE_LIBRARYService { get; }
		IQueryable<FORM_TEMPLATE_LIBRARY> FORM_TEMPLATE_LIBRARies { get; }
		IQueryable<FORM_TEMPLATE_LIBRARY> ReadFORM_TEMPLATE_LIBRARies(Expression<Func<FORM_TEMPLATE_LIBRARY, bool>> filter, int dummy);
		IEnumerable<FORM_TEMPLATE_LIBRARYDto> ReadFORM_TEMPLATE_LIBRARies();
		IEnumerable<FORM_TEMPLATE_LIBRARYDto> ReadFORM_TEMPLATE_LIBRARies(Expression<Func<FORM_TEMPLATE_LIBRARY, bool>> filter);
		IEnumerable<FORM_TEMPLATE_LIBRARYDto> ReadFORM_TEMPLATE_LIBRARies(ISpecification<FORM_TEMPLATE_LIBRARY> specification);
		IEnumerable<FORM_TEMPLATE_LIBRARYDto> ReadFORM_TEMPLATE_LIBRARies(IQueryable<FORM_TEMPLATE_LIBRARY> query);
		IEnumerable<FORM_TEMPLATE_LIBRARYDto> ReadFORM_TEMPLATE_LIBRARies(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORM_TEMPLATE_LIBRARYDto> ReadFORM_TEMPLATE_LIBRARies(object[] keyWords);
		IEnumerable<FORM_TEMPLATE_LIBRARYDto> ReadFORM_TEMPLATE_LIBRARiesPaged(int startIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_LIBRARYDto> ReadFORM_TEMPLATE_LIBRARiesPaged(IQueryable<FORM_TEMPLATE_LIBRARY> source, int pageIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_LIBRARYDto> ReadFORM_TEMPLATE_LIBRARiesPaged(IQueryable<FORM_TEMPLATE_LIBRARY> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORM_TEMPLATE_LIBRARYDto> ReadFORM_TEMPLATE_LIBRARiesFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_LIBRARYDto> ReadFORM_TEMPLATE_LIBRARiesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_LIBRARYDto> ReadFORM_TEMPLATE_LIBRARiesPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATE_LIBRARY, bool>> filter);
		FORM_TEMPLATE_LIBRARYDto ReadFORM_TEMPLATE_LIBRARies(string dtoKey);
		int CountFORM_TEMPLATE_LIBRARies();
		int CountFORM_TEMPLATE_LIBRARies(string filterExpression);
		int CountFORM_TEMPLATE_LIBRARies(Expression<Func<FORM_TEMPLATE_LIBRARY, bool>> filter);
		string CreateFORM_TEMPLATE_LIBRARY(FORM_TEMPLATE_LIBRARYDto form_template_library, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_LIBRARY(FORM_TEMPLATE_LIBRARYDto form_template_library, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_LIBRARies(IEnumerable<FORM_TEMPLATE_LIBRARYDto> form_template_libraries, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_LIBRARY(FORM_TEMPLATE_LIBRARYDto form_template_library, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_LIBRARies(IEnumerable<FORM_TEMPLATE_LIBRARYDto> form_template_libraries, bool doSaveChanges = true);
		void SaveFORM_TEMPLATE_LIBRARY(FORM_TEMPLATE_LIBRARYDto form_template_library, bool doSaveChanges = true);
		void SaveFORM_TEMPLATE_LIBRARies(IEnumerable<FORM_TEMPLATE_LIBRARYDto> form_template_libraries, bool doSaveChanges = true);


		#endregion FORM_TEMPLATE_LIBRARY CRUD Operations


		#region FORM_TEMPLATE_IMAGE CRUD Operations


		IFORM_TEMPLATE_IMAGEService FORM_TEMPLATE_IMAGEService { get; }
		IQueryable<FORM_TEMPLATE_IMAGE> FORM_TEMPLATE_IMAGEs { get; }
		IQueryable<FORM_TEMPLATE_IMAGE> ReadFORM_TEMPLATE_IMAGEs(Expression<Func<FORM_TEMPLATE_IMAGE, bool>> filter, int dummy);
		IEnumerable<FORM_TEMPLATE_IMAGEDto> ReadFORM_TEMPLATE_IMAGEs();
		IEnumerable<FORM_TEMPLATE_IMAGEDto> ReadFORM_TEMPLATE_IMAGEs(Expression<Func<FORM_TEMPLATE_IMAGE, bool>> filter);
		IEnumerable<FORM_TEMPLATE_IMAGEDto> ReadFORM_TEMPLATE_IMAGEs(ISpecification<FORM_TEMPLATE_IMAGE> specification);
		IEnumerable<FORM_TEMPLATE_IMAGEDto> ReadFORM_TEMPLATE_IMAGEs(IQueryable<FORM_TEMPLATE_IMAGE> query);
		IEnumerable<FORM_TEMPLATE_IMAGEDto> ReadFORM_TEMPLATE_IMAGEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORM_TEMPLATE_IMAGEDto> ReadFORM_TEMPLATE_IMAGEs(object[] keyWords);
		IEnumerable<FORM_TEMPLATE_IMAGEDto> ReadFORM_TEMPLATE_IMAGEsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_IMAGEDto> ReadFORM_TEMPLATE_IMAGEsPaged(IQueryable<FORM_TEMPLATE_IMAGE> source, int pageIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_IMAGEDto> ReadFORM_TEMPLATE_IMAGEsPaged(IQueryable<FORM_TEMPLATE_IMAGE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORM_TEMPLATE_IMAGEDto> ReadFORM_TEMPLATE_IMAGEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_IMAGEDto> ReadFORM_TEMPLATE_IMAGEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_IMAGEDto> ReadFORM_TEMPLATE_IMAGEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATE_IMAGE, bool>> filter);
		FORM_TEMPLATE_IMAGEDto ReadFORM_TEMPLATE_IMAGEs(string dtoKey);
		int CountFORM_TEMPLATE_IMAGEs();
		int CountFORM_TEMPLATE_IMAGEs(string filterExpression);
		int CountFORM_TEMPLATE_IMAGEs(Expression<Func<FORM_TEMPLATE_IMAGE, bool>> filter);
		string CreateFORM_TEMPLATE_IMAGE(FORM_TEMPLATE_IMAGEDto form_template_image, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_IMAGE(FORM_TEMPLATE_IMAGEDto form_template_image, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_IMAGEs(IEnumerable<FORM_TEMPLATE_IMAGEDto> form_template_images, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_IMAGE(FORM_TEMPLATE_IMAGEDto form_template_image, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_IMAGEs(IEnumerable<FORM_TEMPLATE_IMAGEDto> form_template_images, bool doSaveChanges = true);
		void SaveFORM_TEMPLATE_IMAGE(FORM_TEMPLATE_IMAGEDto form_template_image, bool doSaveChanges = true);
		void SaveFORM_TEMPLATE_IMAGEs(IEnumerable<FORM_TEMPLATE_IMAGEDto> form_template_images, bool doSaveChanges = true);


		#endregion FORM_TEMPLATE_IMAGE CRUD Operations


		#region FORM_TEMPLATE_GROUPS_BK CRUD Operations


		IFORM_TEMPLATE_GROUPS_BKService FORM_TEMPLATE_GROUPS_BKService { get; }
		IQueryable<FORM_TEMPLATE_GROUPS_BK> FORM_TEMPLATE_GROUPS_BKs { get; }
		IQueryable<FORM_TEMPLATE_GROUPS_BK> ReadFORM_TEMPLATE_GROUPS_BKs(Expression<Func<FORM_TEMPLATE_GROUPS_BK, bool>> filter, int dummy);
		IEnumerable<FORM_TEMPLATE_GROUPS_BKDto> ReadFORM_TEMPLATE_GROUPS_BKs();
		IEnumerable<FORM_TEMPLATE_GROUPS_BKDto> ReadFORM_TEMPLATE_GROUPS_BKs(Expression<Func<FORM_TEMPLATE_GROUPS_BK, bool>> filter);
		IEnumerable<FORM_TEMPLATE_GROUPS_BKDto> ReadFORM_TEMPLATE_GROUPS_BKs(ISpecification<FORM_TEMPLATE_GROUPS_BK> specification);
		IEnumerable<FORM_TEMPLATE_GROUPS_BKDto> ReadFORM_TEMPLATE_GROUPS_BKs(IQueryable<FORM_TEMPLATE_GROUPS_BK> query);
		IEnumerable<FORM_TEMPLATE_GROUPS_BKDto> ReadFORM_TEMPLATE_GROUPS_BKs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORM_TEMPLATE_GROUPS_BKDto> ReadFORM_TEMPLATE_GROUPS_BKs(object[] keyWords);
		IEnumerable<FORM_TEMPLATE_GROUPS_BKDto> ReadFORM_TEMPLATE_GROUPS_BKsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_GROUPS_BKDto> ReadFORM_TEMPLATE_GROUPS_BKsPaged(IQueryable<FORM_TEMPLATE_GROUPS_BK> source, int pageIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_GROUPS_BKDto> ReadFORM_TEMPLATE_GROUPS_BKsPaged(IQueryable<FORM_TEMPLATE_GROUPS_BK> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORM_TEMPLATE_GROUPS_BKDto> ReadFORM_TEMPLATE_GROUPS_BKsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_GROUPS_BKDto> ReadFORM_TEMPLATE_GROUPS_BKsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_GROUPS_BKDto> ReadFORM_TEMPLATE_GROUPS_BKsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATE_GROUPS_BK, bool>> filter);
		FORM_TEMPLATE_GROUPS_BKDto ReadFORM_TEMPLATE_GROUPS_BKs(string dtoKey);
		int CountFORM_TEMPLATE_GROUPS_BKs();
		int CountFORM_TEMPLATE_GROUPS_BKs(string filterExpression);
		int CountFORM_TEMPLATE_GROUPS_BKs(Expression<Func<FORM_TEMPLATE_GROUPS_BK, bool>> filter);
		string CreateFORM_TEMPLATE_GROUPS_BK(FORM_TEMPLATE_GROUPS_BKDto form_template_groups_bk, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_GROUPS_BK(FORM_TEMPLATE_GROUPS_BKDto form_template_groups_bk, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_GROUPS_BKs(IEnumerable<FORM_TEMPLATE_GROUPS_BKDto> form_template_groups_bks, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_GROUPS_BK(FORM_TEMPLATE_GROUPS_BKDto form_template_groups_bk, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_GROUPS_BKs(IEnumerable<FORM_TEMPLATE_GROUPS_BKDto> form_template_groups_bks, bool doSaveChanges = true);
		void SaveFORM_TEMPLATE_GROUPS_BK(FORM_TEMPLATE_GROUPS_BKDto form_template_groups_bk, bool doSaveChanges = true);
		void SaveFORM_TEMPLATE_GROUPS_BKs(IEnumerable<FORM_TEMPLATE_GROUPS_BKDto> form_template_groups_bks, bool doSaveChanges = true);


		#endregion FORM_TEMPLATE_GROUPS_BK CRUD Operations


		#region FORM_TEMPLATE_GROUP CRUD Operations


		IFORM_TEMPLATE_GROUPService FORM_TEMPLATE_GROUPService { get; }
		IQueryable<FORM_TEMPLATE_GROUP> FORM_TEMPLATE_GROUPs { get; }
		IQueryable<FORM_TEMPLATE_GROUP> ReadFORM_TEMPLATE_GROUPs(Expression<Func<FORM_TEMPLATE_GROUP, bool>> filter, int dummy);
		IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPs();
		IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPs(Expression<Func<FORM_TEMPLATE_GROUP, bool>> filter);
		IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPs(ISpecification<FORM_TEMPLATE_GROUP> specification);
		IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPs(IQueryable<FORM_TEMPLATE_GROUP> query);
		IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPs(object[] keyWords);
		IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPsPaged(IQueryable<FORM_TEMPLATE_GROUP> source, int pageIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPsPaged(IQueryable<FORM_TEMPLATE_GROUP> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATE_GROUP, bool>> filter);
		FORM_TEMPLATE_GROUPDto ReadFORM_TEMPLATE_GROUPs(string dtoKey);
		int CountFORM_TEMPLATE_GROUPs();
		int CountFORM_TEMPLATE_GROUPs(string filterExpression);
		int CountFORM_TEMPLATE_GROUPs(Expression<Func<FORM_TEMPLATE_GROUP, bool>> filter);
		string CreateFORM_TEMPLATE_GROUP(FORM_TEMPLATE_GROUPDto form_template_group, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_GROUP(FORM_TEMPLATE_GROUPDto form_template_group, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_GROUPs(IEnumerable<FORM_TEMPLATE_GROUPDto> form_template_groups, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_GROUP(FORM_TEMPLATE_GROUPDto form_template_group, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_GROUPs(IEnumerable<FORM_TEMPLATE_GROUPDto> form_template_groups, bool doSaveChanges = true);
		void SaveFORM_TEMPLATE_GROUP(FORM_TEMPLATE_GROUPDto form_template_group, bool doSaveChanges = true);
		void SaveFORM_TEMPLATE_GROUPs(IEnumerable<FORM_TEMPLATE_GROUPDto> form_template_groups, bool doSaveChanges = true);


		#endregion FORM_TEMPLATE_GROUP CRUD Operations


		#region FORM_TEMPLATE_EXPRESSION CRUD Operations


		IFORM_TEMPLATE_EXPRESSIONService FORM_TEMPLATE_EXPRESSIONService { get; }
		IQueryable<FORM_TEMPLATE_EXPRESSION> FORM_TEMPLATE_EXPRESSIONs { get; }
		IQueryable<FORM_TEMPLATE_EXPRESSION> ReadFORM_TEMPLATE_EXPRESSIONs(Expression<Func<FORM_TEMPLATE_EXPRESSION, bool>> filter, int dummy);
		IEnumerable<FORM_TEMPLATE_EXPRESSIONDto> ReadFORM_TEMPLATE_EXPRESSIONs();
		IEnumerable<FORM_TEMPLATE_EXPRESSIONDto> ReadFORM_TEMPLATE_EXPRESSIONs(Expression<Func<FORM_TEMPLATE_EXPRESSION, bool>> filter);
		IEnumerable<FORM_TEMPLATE_EXPRESSIONDto> ReadFORM_TEMPLATE_EXPRESSIONs(ISpecification<FORM_TEMPLATE_EXPRESSION> specification);
		IEnumerable<FORM_TEMPLATE_EXPRESSIONDto> ReadFORM_TEMPLATE_EXPRESSIONs(IQueryable<FORM_TEMPLATE_EXPRESSION> query);
		IEnumerable<FORM_TEMPLATE_EXPRESSIONDto> ReadFORM_TEMPLATE_EXPRESSIONs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORM_TEMPLATE_EXPRESSIONDto> ReadFORM_TEMPLATE_EXPRESSIONs(object[] keyWords);
		IEnumerable<FORM_TEMPLATE_EXPRESSIONDto> ReadFORM_TEMPLATE_EXPRESSIONsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_EXPRESSIONDto> ReadFORM_TEMPLATE_EXPRESSIONsPaged(IQueryable<FORM_TEMPLATE_EXPRESSION> source, int pageIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_EXPRESSIONDto> ReadFORM_TEMPLATE_EXPRESSIONsPaged(IQueryable<FORM_TEMPLATE_EXPRESSION> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORM_TEMPLATE_EXPRESSIONDto> ReadFORM_TEMPLATE_EXPRESSIONsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_EXPRESSIONDto> ReadFORM_TEMPLATE_EXPRESSIONsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_EXPRESSIONDto> ReadFORM_TEMPLATE_EXPRESSIONsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATE_EXPRESSION, bool>> filter);
		FORM_TEMPLATE_EXPRESSIONDto ReadFORM_TEMPLATE_EXPRESSIONs(string dtoKey);
		int CountFORM_TEMPLATE_EXPRESSIONs();
		int CountFORM_TEMPLATE_EXPRESSIONs(string filterExpression);
		int CountFORM_TEMPLATE_EXPRESSIONs(Expression<Func<FORM_TEMPLATE_EXPRESSION, bool>> filter);
		string CreateFORM_TEMPLATE_EXPRESSION(FORM_TEMPLATE_EXPRESSIONDto form_template_expression, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_EXPRESSION(FORM_TEMPLATE_EXPRESSIONDto form_template_expression, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_EXPRESSIONs(IEnumerable<FORM_TEMPLATE_EXPRESSIONDto> form_template_expressions, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_EXPRESSION(FORM_TEMPLATE_EXPRESSIONDto form_template_expression, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_EXPRESSIONs(IEnumerable<FORM_TEMPLATE_EXPRESSIONDto> form_template_expressions, bool doSaveChanges = true);
		void SaveFORM_TEMPLATE_EXPRESSION(FORM_TEMPLATE_EXPRESSIONDto form_template_expression, bool doSaveChanges = true);
		void SaveFORM_TEMPLATE_EXPRESSIONs(IEnumerable<FORM_TEMPLATE_EXPRESSIONDto> form_template_expressions, bool doSaveChanges = true);


		#endregion FORM_TEMPLATE_EXPRESSION CRUD Operations


		#region FORM_TEMPLATE_ELEMENTS_BK CRUD Operations


		IFORM_TEMPLATE_ELEMENTS_BKService FORM_TEMPLATE_ELEMENTS_BKService { get; }
		IQueryable<FORM_TEMPLATE_ELEMENTS_BK> FORM_TEMPLATE_ELEMENTS_BKs { get; }
		IQueryable<FORM_TEMPLATE_ELEMENTS_BK> ReadFORM_TEMPLATE_ELEMENTS_BKs(Expression<Func<FORM_TEMPLATE_ELEMENTS_BK, bool>> filter, int dummy);
		IEnumerable<FORM_TEMPLATE_ELEMENTS_BKDto> ReadFORM_TEMPLATE_ELEMENTS_BKs();
		IEnumerable<FORM_TEMPLATE_ELEMENTS_BKDto> ReadFORM_TEMPLATE_ELEMENTS_BKs(Expression<Func<FORM_TEMPLATE_ELEMENTS_BK, bool>> filter);
		IEnumerable<FORM_TEMPLATE_ELEMENTS_BKDto> ReadFORM_TEMPLATE_ELEMENTS_BKs(ISpecification<FORM_TEMPLATE_ELEMENTS_BK> specification);
		IEnumerable<FORM_TEMPLATE_ELEMENTS_BKDto> ReadFORM_TEMPLATE_ELEMENTS_BKs(IQueryable<FORM_TEMPLATE_ELEMENTS_BK> query);
		IEnumerable<FORM_TEMPLATE_ELEMENTS_BKDto> ReadFORM_TEMPLATE_ELEMENTS_BKs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORM_TEMPLATE_ELEMENTS_BKDto> ReadFORM_TEMPLATE_ELEMENTS_BKs(object[] keyWords);
		IEnumerable<FORM_TEMPLATE_ELEMENTS_BKDto> ReadFORM_TEMPLATE_ELEMENTS_BKsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_ELEMENTS_BKDto> ReadFORM_TEMPLATE_ELEMENTS_BKsPaged(IQueryable<FORM_TEMPLATE_ELEMENTS_BK> source, int pageIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_ELEMENTS_BKDto> ReadFORM_TEMPLATE_ELEMENTS_BKsPaged(IQueryable<FORM_TEMPLATE_ELEMENTS_BK> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORM_TEMPLATE_ELEMENTS_BKDto> ReadFORM_TEMPLATE_ELEMENTS_BKsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_ELEMENTS_BKDto> ReadFORM_TEMPLATE_ELEMENTS_BKsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_ELEMENTS_BKDto> ReadFORM_TEMPLATE_ELEMENTS_BKsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATE_ELEMENTS_BK, bool>> filter);
		FORM_TEMPLATE_ELEMENTS_BKDto ReadFORM_TEMPLATE_ELEMENTS_BKs(string dtoKey);
		int CountFORM_TEMPLATE_ELEMENTS_BKs();
		int CountFORM_TEMPLATE_ELEMENTS_BKs(string filterExpression);
		int CountFORM_TEMPLATE_ELEMENTS_BKs(Expression<Func<FORM_TEMPLATE_ELEMENTS_BK, bool>> filter);
		string CreateFORM_TEMPLATE_ELEMENTS_BK(FORM_TEMPLATE_ELEMENTS_BKDto form_template_elements_bk, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_ELEMENTS_BK(FORM_TEMPLATE_ELEMENTS_BKDto form_template_elements_bk, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_ELEMENTS_BKs(IEnumerable<FORM_TEMPLATE_ELEMENTS_BKDto> form_template_elements_bks, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_ELEMENTS_BK(FORM_TEMPLATE_ELEMENTS_BKDto form_template_elements_bk, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_ELEMENTS_BKs(IEnumerable<FORM_TEMPLATE_ELEMENTS_BKDto> form_template_elements_bks, bool doSaveChanges = true);
		void SaveFORM_TEMPLATE_ELEMENTS_BK(FORM_TEMPLATE_ELEMENTS_BKDto form_template_elements_bk, bool doSaveChanges = true);
		void SaveFORM_TEMPLATE_ELEMENTS_BKs(IEnumerable<FORM_TEMPLATE_ELEMENTS_BKDto> form_template_elements_bks, bool doSaveChanges = true);


		#endregion FORM_TEMPLATE_ELEMENTS_BK CRUD Operations


		#region FORM_TEMPLATE_ELEMENT CRUD Operations


		IFORM_TEMPLATE_ELEMENTService FORM_TEMPLATE_ELEMENTService { get; }
		IQueryable<FORM_TEMPLATE_ELEMENT> FORM_TEMPLATE_ELEMENTs { get; }
		IQueryable<FORM_TEMPLATE_ELEMENT> ReadFORM_TEMPLATE_ELEMENTs(Expression<Func<FORM_TEMPLATE_ELEMENT, bool>> filter, int dummy);
		IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTs();
		IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTs(Expression<Func<FORM_TEMPLATE_ELEMENT, bool>> filter);
		IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTs(ISpecification<FORM_TEMPLATE_ELEMENT> specification);
		IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTs(IQueryable<FORM_TEMPLATE_ELEMENT> query);
		IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTs(object[] keyWords);
		IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTsPaged(IQueryable<FORM_TEMPLATE_ELEMENT> source, int pageIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTsPaged(IQueryable<FORM_TEMPLATE_ELEMENT> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATE_ELEMENT, bool>> filter);
		FORM_TEMPLATE_ELEMENTDto ReadFORM_TEMPLATE_ELEMENTs(string dtoKey);
		int CountFORM_TEMPLATE_ELEMENTs();
		int CountFORM_TEMPLATE_ELEMENTs(string filterExpression);
		int CountFORM_TEMPLATE_ELEMENTs(Expression<Func<FORM_TEMPLATE_ELEMENT, bool>> filter);
		string CreateFORM_TEMPLATE_ELEMENT(FORM_TEMPLATE_ELEMENTDto form_template_element, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_ELEMENT(FORM_TEMPLATE_ELEMENTDto form_template_element, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_ELEMENTs(IEnumerable<FORM_TEMPLATE_ELEMENTDto> form_template_elements, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_ELEMENT(FORM_TEMPLATE_ELEMENTDto form_template_element, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_ELEMENTs(IEnumerable<FORM_TEMPLATE_ELEMENTDto> form_template_elements, bool doSaveChanges = true);
		void SaveFORM_TEMPLATE_ELEMENT(FORM_TEMPLATE_ELEMENTDto form_template_element, bool doSaveChanges = true);
		void SaveFORM_TEMPLATE_ELEMENTs(IEnumerable<FORM_TEMPLATE_ELEMENTDto> form_template_elements, bool doSaveChanges = true);


		#endregion FORM_TEMPLATE_ELEMENT CRUD Operations


		#region FORM_TEMPLATE_ELEMENT_READONLY CRUD Operations


		IFORM_TEMPLATE_ELEMENT_READONLYService FORM_TEMPLATE_ELEMENT_READONLYService { get; }
		IQueryable<FORM_TEMPLATE_ELEMENT_READONLY> FORM_TEMPLATE_ELEMENT_READONLies { get; }
		IQueryable<FORM_TEMPLATE_ELEMENT_READONLY> ReadFORM_TEMPLATE_ELEMENT_READONLies(Expression<Func<FORM_TEMPLATE_ELEMENT_READONLY, bool>> filter, int dummy);
		IEnumerable<FORM_TEMPLATE_ELEMENT_READONLYDto> ReadFORM_TEMPLATE_ELEMENT_READONLies();
		IEnumerable<FORM_TEMPLATE_ELEMENT_READONLYDto> ReadFORM_TEMPLATE_ELEMENT_READONLies(Expression<Func<FORM_TEMPLATE_ELEMENT_READONLY, bool>> filter);
		IEnumerable<FORM_TEMPLATE_ELEMENT_READONLYDto> ReadFORM_TEMPLATE_ELEMENT_READONLies(ISpecification<FORM_TEMPLATE_ELEMENT_READONLY> specification);
		IEnumerable<FORM_TEMPLATE_ELEMENT_READONLYDto> ReadFORM_TEMPLATE_ELEMENT_READONLies(IQueryable<FORM_TEMPLATE_ELEMENT_READONLY> query);
		IEnumerable<FORM_TEMPLATE_ELEMENT_READONLYDto> ReadFORM_TEMPLATE_ELEMENT_READONLies(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORM_TEMPLATE_ELEMENT_READONLYDto> ReadFORM_TEMPLATE_ELEMENT_READONLies(object[] keyWords);
		IEnumerable<FORM_TEMPLATE_ELEMENT_READONLYDto> ReadFORM_TEMPLATE_ELEMENT_READONLiesPaged(int startIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_ELEMENT_READONLYDto> ReadFORM_TEMPLATE_ELEMENT_READONLiesPaged(IQueryable<FORM_TEMPLATE_ELEMENT_READONLY> source, int pageIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_ELEMENT_READONLYDto> ReadFORM_TEMPLATE_ELEMENT_READONLiesPaged(IQueryable<FORM_TEMPLATE_ELEMENT_READONLY> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORM_TEMPLATE_ELEMENT_READONLYDto> ReadFORM_TEMPLATE_ELEMENT_READONLiesFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_ELEMENT_READONLYDto> ReadFORM_TEMPLATE_ELEMENT_READONLiesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_ELEMENT_READONLYDto> ReadFORM_TEMPLATE_ELEMENT_READONLiesPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATE_ELEMENT_READONLY, bool>> filter);
		FORM_TEMPLATE_ELEMENT_READONLYDto ReadFORM_TEMPLATE_ELEMENT_READONLies(string dtoKey);
		int CountFORM_TEMPLATE_ELEMENT_READONLies();
		int CountFORM_TEMPLATE_ELEMENT_READONLies(string filterExpression);
		int CountFORM_TEMPLATE_ELEMENT_READONLies(Expression<Func<FORM_TEMPLATE_ELEMENT_READONLY, bool>> filter);
		string CreateFORM_TEMPLATE_ELEMENT_READONLY(FORM_TEMPLATE_ELEMENT_READONLYDto form_template_element_readonly, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_ELEMENT_READONLY(FORM_TEMPLATE_ELEMENT_READONLYDto form_template_element_readonly, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_ELEMENT_READONLies(IEnumerable<FORM_TEMPLATE_ELEMENT_READONLYDto> form_template_element_readonlies, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_ELEMENT_READONLY(FORM_TEMPLATE_ELEMENT_READONLYDto form_template_element_readonly, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_ELEMENT_READONLies(IEnumerable<FORM_TEMPLATE_ELEMENT_READONLYDto> form_template_element_readonlies, bool doSaveChanges = true);
		void SaveFORM_TEMPLATE_ELEMENT_READONLY(FORM_TEMPLATE_ELEMENT_READONLYDto form_template_element_readonly, bool doSaveChanges = true);
		void SaveFORM_TEMPLATE_ELEMENT_READONLies(IEnumerable<FORM_TEMPLATE_ELEMENT_READONLYDto> form_template_element_readonlies, bool doSaveChanges = true);


		#endregion FORM_TEMPLATE_ELEMENT_READONLY CRUD Operations


		#region FORM_TEMPLATE_DYNAMIC_ELEMENT CRUD Operations


		IFORM_TEMPLATE_DYNAMIC_ELEMENTService FORM_TEMPLATE_DYNAMIC_ELEMENTService { get; }
		IQueryable<FORM_TEMPLATE_DYNAMIC_ELEMENT> FORM_TEMPLATE_DYNAMIC_ELEMENTs { get; }
		IQueryable<FORM_TEMPLATE_DYNAMIC_ELEMENT> ReadFORM_TEMPLATE_DYNAMIC_ELEMENTs(Expression<Func<FORM_TEMPLATE_DYNAMIC_ELEMENT, bool>> filter, int dummy);
		IEnumerable<FORM_TEMPLATE_DYNAMIC_ELEMENTDto> ReadFORM_TEMPLATE_DYNAMIC_ELEMENTs();
		IEnumerable<FORM_TEMPLATE_DYNAMIC_ELEMENTDto> ReadFORM_TEMPLATE_DYNAMIC_ELEMENTs(Expression<Func<FORM_TEMPLATE_DYNAMIC_ELEMENT, bool>> filter);
		IEnumerable<FORM_TEMPLATE_DYNAMIC_ELEMENTDto> ReadFORM_TEMPLATE_DYNAMIC_ELEMENTs(ISpecification<FORM_TEMPLATE_DYNAMIC_ELEMENT> specification);
		IEnumerable<FORM_TEMPLATE_DYNAMIC_ELEMENTDto> ReadFORM_TEMPLATE_DYNAMIC_ELEMENTs(IQueryable<FORM_TEMPLATE_DYNAMIC_ELEMENT> query);
		IEnumerable<FORM_TEMPLATE_DYNAMIC_ELEMENTDto> ReadFORM_TEMPLATE_DYNAMIC_ELEMENTs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORM_TEMPLATE_DYNAMIC_ELEMENTDto> ReadFORM_TEMPLATE_DYNAMIC_ELEMENTs(object[] keyWords);
		IEnumerable<FORM_TEMPLATE_DYNAMIC_ELEMENTDto> ReadFORM_TEMPLATE_DYNAMIC_ELEMENTsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_DYNAMIC_ELEMENTDto> ReadFORM_TEMPLATE_DYNAMIC_ELEMENTsPaged(IQueryable<FORM_TEMPLATE_DYNAMIC_ELEMENT> source, int pageIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_DYNAMIC_ELEMENTDto> ReadFORM_TEMPLATE_DYNAMIC_ELEMENTsPaged(IQueryable<FORM_TEMPLATE_DYNAMIC_ELEMENT> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORM_TEMPLATE_DYNAMIC_ELEMENTDto> ReadFORM_TEMPLATE_DYNAMIC_ELEMENTsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_DYNAMIC_ELEMENTDto> ReadFORM_TEMPLATE_DYNAMIC_ELEMENTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_DYNAMIC_ELEMENTDto> ReadFORM_TEMPLATE_DYNAMIC_ELEMENTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATE_DYNAMIC_ELEMENT, bool>> filter);
		FORM_TEMPLATE_DYNAMIC_ELEMENTDto ReadFORM_TEMPLATE_DYNAMIC_ELEMENTs(string dtoKey);
		int CountFORM_TEMPLATE_DYNAMIC_ELEMENTs();
		int CountFORM_TEMPLATE_DYNAMIC_ELEMENTs(string filterExpression);
		int CountFORM_TEMPLATE_DYNAMIC_ELEMENTs(Expression<Func<FORM_TEMPLATE_DYNAMIC_ELEMENT, bool>> filter);
		string CreateFORM_TEMPLATE_DYNAMIC_ELEMENT(FORM_TEMPLATE_DYNAMIC_ELEMENTDto form_template_dynamic_element, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_DYNAMIC_ELEMENT(FORM_TEMPLATE_DYNAMIC_ELEMENTDto form_template_dynamic_element, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_DYNAMIC_ELEMENTs(IEnumerable<FORM_TEMPLATE_DYNAMIC_ELEMENTDto> form_template_dynamic_elements, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_DYNAMIC_ELEMENT(FORM_TEMPLATE_DYNAMIC_ELEMENTDto form_template_dynamic_element, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_DYNAMIC_ELEMENTs(IEnumerable<FORM_TEMPLATE_DYNAMIC_ELEMENTDto> form_template_dynamic_elements, bool doSaveChanges = true);
		void SaveFORM_TEMPLATE_DYNAMIC_ELEMENT(FORM_TEMPLATE_DYNAMIC_ELEMENTDto form_template_dynamic_element, bool doSaveChanges = true);
		void SaveFORM_TEMPLATE_DYNAMIC_ELEMENTs(IEnumerable<FORM_TEMPLATE_DYNAMIC_ELEMENTDto> form_template_dynamic_elements, bool doSaveChanges = true);


		#endregion FORM_TEMPLATE_DYNAMIC_ELEMENT CRUD Operations


		#region FORM_OPTION_TYPE CRUD Operations


		IFORM_OPTION_TYPEService FORM_OPTION_TYPEService { get; }
		IQueryable<FORM_OPTION_TYPE> FORM_OPTION_TYPEs { get; }
		IQueryable<FORM_OPTION_TYPE> ReadFORM_OPTION_TYPEs(Expression<Func<FORM_OPTION_TYPE, bool>> filter, int dummy);
		IEnumerable<FORM_OPTION_TYPEDto> ReadFORM_OPTION_TYPEs();
		IEnumerable<FORM_OPTION_TYPEDto> ReadFORM_OPTION_TYPEs(Expression<Func<FORM_OPTION_TYPE, bool>> filter);
		IEnumerable<FORM_OPTION_TYPEDto> ReadFORM_OPTION_TYPEs(ISpecification<FORM_OPTION_TYPE> specification);
		IEnumerable<FORM_OPTION_TYPEDto> ReadFORM_OPTION_TYPEs(IQueryable<FORM_OPTION_TYPE> query);
		IEnumerable<FORM_OPTION_TYPEDto> ReadFORM_OPTION_TYPEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORM_OPTION_TYPEDto> ReadFORM_OPTION_TYPEs(object[] keyWords);
		IEnumerable<FORM_OPTION_TYPEDto> ReadFORM_OPTION_TYPEsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_OPTION_TYPEDto> ReadFORM_OPTION_TYPEsPaged(IQueryable<FORM_OPTION_TYPE> source, int pageIndex, int pageSize);
		IEnumerable<FORM_OPTION_TYPEDto> ReadFORM_OPTION_TYPEsPaged(IQueryable<FORM_OPTION_TYPE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORM_OPTION_TYPEDto> ReadFORM_OPTION_TYPEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_OPTION_TYPEDto> ReadFORM_OPTION_TYPEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORM_OPTION_TYPEDto> ReadFORM_OPTION_TYPEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_OPTION_TYPE, bool>> filter);
		FORM_OPTION_TYPEDto ReadFORM_OPTION_TYPEs(string dtoKey);
		int CountFORM_OPTION_TYPEs();
		int CountFORM_OPTION_TYPEs(string filterExpression);
		int CountFORM_OPTION_TYPEs(Expression<Func<FORM_OPTION_TYPE, bool>> filter);
		string CreateFORM_OPTION_TYPE(FORM_OPTION_TYPEDto form_option_type, bool doSaveChanges = true);
		void UpdateFORM_OPTION_TYPE(FORM_OPTION_TYPEDto form_option_type, bool doSaveChanges = true);
		void UpdateFORM_OPTION_TYPEs(IEnumerable<FORM_OPTION_TYPEDto> form_option_types, bool doSaveChanges = true);
		void DeleteFORM_OPTION_TYPE(FORM_OPTION_TYPEDto form_option_type, bool doSaveChanges = true);
		void DeleteFORM_OPTION_TYPEs(IEnumerable<FORM_OPTION_TYPEDto> form_option_types, bool doSaveChanges = true);
		void SaveFORM_OPTION_TYPE(FORM_OPTION_TYPEDto form_option_type, bool doSaveChanges = true);
		void SaveFORM_OPTION_TYPEs(IEnumerable<FORM_OPTION_TYPEDto> form_option_types, bool doSaveChanges = true);


		#endregion FORM_OPTION_TYPE CRUD Operations


		#region FORM_INSTANCES_DELLOG CRUD Operations


		IFORM_INSTANCES_DELLOGService FORM_INSTANCES_DELLOGService { get; }
		IQueryable<FORM_INSTANCES_DELLOG> FORM_INSTANCES_DELLOGs { get; }
		IQueryable<FORM_INSTANCES_DELLOG> ReadFORM_INSTANCES_DELLOGs(Expression<Func<FORM_INSTANCES_DELLOG, bool>> filter, int dummy);
		IEnumerable<FORM_INSTANCES_DELLOGDto> ReadFORM_INSTANCES_DELLOGs();
		IEnumerable<FORM_INSTANCES_DELLOGDto> ReadFORM_INSTANCES_DELLOGs(Expression<Func<FORM_INSTANCES_DELLOG, bool>> filter);
		IEnumerable<FORM_INSTANCES_DELLOGDto> ReadFORM_INSTANCES_DELLOGs(ISpecification<FORM_INSTANCES_DELLOG> specification);
		IEnumerable<FORM_INSTANCES_DELLOGDto> ReadFORM_INSTANCES_DELLOGs(IQueryable<FORM_INSTANCES_DELLOG> query);
		IEnumerable<FORM_INSTANCES_DELLOGDto> ReadFORM_INSTANCES_DELLOGs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORM_INSTANCES_DELLOGDto> ReadFORM_INSTANCES_DELLOGs(object[] keyWords);
		IEnumerable<FORM_INSTANCES_DELLOGDto> ReadFORM_INSTANCES_DELLOGsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_INSTANCES_DELLOGDto> ReadFORM_INSTANCES_DELLOGsPaged(IQueryable<FORM_INSTANCES_DELLOG> source, int pageIndex, int pageSize);
		IEnumerable<FORM_INSTANCES_DELLOGDto> ReadFORM_INSTANCES_DELLOGsPaged(IQueryable<FORM_INSTANCES_DELLOG> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORM_INSTANCES_DELLOGDto> ReadFORM_INSTANCES_DELLOGsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_INSTANCES_DELLOGDto> ReadFORM_INSTANCES_DELLOGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORM_INSTANCES_DELLOGDto> ReadFORM_INSTANCES_DELLOGsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_INSTANCES_DELLOG, bool>> filter);
		FORM_INSTANCES_DELLOGDto ReadFORM_INSTANCES_DELLOGs(string dtoKey);
		int CountFORM_INSTANCES_DELLOGs();
		int CountFORM_INSTANCES_DELLOGs(string filterExpression);
		int CountFORM_INSTANCES_DELLOGs(Expression<Func<FORM_INSTANCES_DELLOG, bool>> filter);
		string CreateFORM_INSTANCES_DELLOG(FORM_INSTANCES_DELLOGDto form_instances_dellog, bool doSaveChanges = true);
		void UpdateFORM_INSTANCES_DELLOG(FORM_INSTANCES_DELLOGDto form_instances_dellog, bool doSaveChanges = true);
		void UpdateFORM_INSTANCES_DELLOGs(IEnumerable<FORM_INSTANCES_DELLOGDto> form_instances_dellogs, bool doSaveChanges = true);
		void DeleteFORM_INSTANCES_DELLOG(FORM_INSTANCES_DELLOGDto form_instances_dellog, bool doSaveChanges = true);
		void DeleteFORM_INSTANCES_DELLOGs(IEnumerable<FORM_INSTANCES_DELLOGDto> form_instances_dellogs, bool doSaveChanges = true);
		void SaveFORM_INSTANCES_DELLOG(FORM_INSTANCES_DELLOGDto form_instances_dellog, bool doSaveChanges = true);
		void SaveFORM_INSTANCES_DELLOGs(IEnumerable<FORM_INSTANCES_DELLOGDto> form_instances_dellogs, bool doSaveChanges = true);


		#endregion FORM_INSTANCES_DELLOG CRUD Operations


		#region FORM_INSTANCES_BK CRUD Operations


		IFORM_INSTANCES_BKService FORM_INSTANCES_BKService { get; }
		IQueryable<FORM_INSTANCES_BK> FORM_INSTANCES_BKs { get; }
		IQueryable<FORM_INSTANCES_BK> ReadFORM_INSTANCES_BKs(Expression<Func<FORM_INSTANCES_BK, bool>> filter, int dummy);
		IEnumerable<FORM_INSTANCES_BKDto> ReadFORM_INSTANCES_BKs();
		IEnumerable<FORM_INSTANCES_BKDto> ReadFORM_INSTANCES_BKs(Expression<Func<FORM_INSTANCES_BK, bool>> filter);
		IEnumerable<FORM_INSTANCES_BKDto> ReadFORM_INSTANCES_BKs(ISpecification<FORM_INSTANCES_BK> specification);
		IEnumerable<FORM_INSTANCES_BKDto> ReadFORM_INSTANCES_BKs(IQueryable<FORM_INSTANCES_BK> query);
		IEnumerable<FORM_INSTANCES_BKDto> ReadFORM_INSTANCES_BKs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORM_INSTANCES_BKDto> ReadFORM_INSTANCES_BKs(object[] keyWords);
		IEnumerable<FORM_INSTANCES_BKDto> ReadFORM_INSTANCES_BKsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_INSTANCES_BKDto> ReadFORM_INSTANCES_BKsPaged(IQueryable<FORM_INSTANCES_BK> source, int pageIndex, int pageSize);
		IEnumerable<FORM_INSTANCES_BKDto> ReadFORM_INSTANCES_BKsPaged(IQueryable<FORM_INSTANCES_BK> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORM_INSTANCES_BKDto> ReadFORM_INSTANCES_BKsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_INSTANCES_BKDto> ReadFORM_INSTANCES_BKsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORM_INSTANCES_BKDto> ReadFORM_INSTANCES_BKsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_INSTANCES_BK, bool>> filter);
		FORM_INSTANCES_BKDto ReadFORM_INSTANCES_BKs(string dtoKey);
		int CountFORM_INSTANCES_BKs();
		int CountFORM_INSTANCES_BKs(string filterExpression);
		int CountFORM_INSTANCES_BKs(Expression<Func<FORM_INSTANCES_BK, bool>> filter);
		string CreateFORM_INSTANCES_BK(FORM_INSTANCES_BKDto form_instances_bk, bool doSaveChanges = true);
		void UpdateFORM_INSTANCES_BK(FORM_INSTANCES_BKDto form_instances_bk, bool doSaveChanges = true);
		void UpdateFORM_INSTANCES_BKs(IEnumerable<FORM_INSTANCES_BKDto> form_instances_bks, bool doSaveChanges = true);
		void DeleteFORM_INSTANCES_BK(FORM_INSTANCES_BKDto form_instances_bk, bool doSaveChanges = true);
		void DeleteFORM_INSTANCES_BKs(IEnumerable<FORM_INSTANCES_BKDto> form_instances_bks, bool doSaveChanges = true);
		void SaveFORM_INSTANCES_BK(FORM_INSTANCES_BKDto form_instances_bk, bool doSaveChanges = true);
		void SaveFORM_INSTANCES_BKs(IEnumerable<FORM_INSTANCES_BKDto> form_instances_bks, bool doSaveChanges = true);


		#endregion FORM_INSTANCES_BK CRUD Operations


		#region FORM_INSTANCE CRUD Operations


		IFORM_INSTANCEService FORM_INSTANCEService { get; }
		IQueryable<FORM_INSTANCE> FORM_INSTANCEs { get; }
		IQueryable<FORM_INSTANCE> ReadFORM_INSTANCEs(Expression<Func<FORM_INSTANCE, bool>> filter, int dummy);
		IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEs();
		IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEs(Expression<Func<FORM_INSTANCE, bool>> filter);
		IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEs(ISpecification<FORM_INSTANCE> specification);
		IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEs(IQueryable<FORM_INSTANCE> query);
		IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEs(object[] keyWords);
		IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEsPaged(IQueryable<FORM_INSTANCE> source, int pageIndex, int pageSize);
		IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEsPaged(IQueryable<FORM_INSTANCE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_INSTANCE, bool>> filter);
		FORM_INSTANCEDto ReadFORM_INSTANCEs(string dtoKey);
		int CountFORM_INSTANCEs();
		int CountFORM_INSTANCEs(string filterExpression);
		int CountFORM_INSTANCEs(Expression<Func<FORM_INSTANCE, bool>> filter);
		string CreateFORM_INSTANCE(FORM_INSTANCEDto form_instance, bool doSaveChanges = true);
		void UpdateFORM_INSTANCE(FORM_INSTANCEDto form_instance, bool doSaveChanges = true);
		void UpdateFORM_INSTANCEs(IEnumerable<FORM_INSTANCEDto> form_instances, bool doSaveChanges = true);
		void DeleteFORM_INSTANCE(FORM_INSTANCEDto form_instance, bool doSaveChanges = true);
		void DeleteFORM_INSTANCEs(IEnumerable<FORM_INSTANCEDto> form_instances, bool doSaveChanges = true);
		void SaveFORM_INSTANCE(FORM_INSTANCEDto form_instance, bool doSaveChanges = true);
		void SaveFORM_INSTANCEs(IEnumerable<FORM_INSTANCEDto> form_instances, bool doSaveChanges = true);


		#endregion FORM_INSTANCE CRUD Operations


		#region FORM_INSTANCE_TRANSLOG CRUD Operations


		IFORM_INSTANCE_TRANSLOGService FORM_INSTANCE_TRANSLOGService { get; }
		IQueryable<FORM_INSTANCE_TRANSLOG> FORM_INSTANCE_TRANSLOGs { get; }
		IQueryable<FORM_INSTANCE_TRANSLOG> ReadFORM_INSTANCE_TRANSLOGs(Expression<Func<FORM_INSTANCE_TRANSLOG, bool>> filter, int dummy);
		IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGs();
		IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGs(Expression<Func<FORM_INSTANCE_TRANSLOG, bool>> filter);
		IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGs(ISpecification<FORM_INSTANCE_TRANSLOG> specification);
		IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGs(IQueryable<FORM_INSTANCE_TRANSLOG> query);
		IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGs(object[] keyWords);
		IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGsPaged(IQueryable<FORM_INSTANCE_TRANSLOG> source, int pageIndex, int pageSize);
		IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGsPaged(IQueryable<FORM_INSTANCE_TRANSLOG> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_INSTANCE_TRANSLOG, bool>> filter);
		FORM_INSTANCE_TRANSLOGDto ReadFORM_INSTANCE_TRANSLOGs(string dtoKey);
		int CountFORM_INSTANCE_TRANSLOGs();
		int CountFORM_INSTANCE_TRANSLOGs(string filterExpression);
		int CountFORM_INSTANCE_TRANSLOGs(Expression<Func<FORM_INSTANCE_TRANSLOG, bool>> filter);
		string CreateFORM_INSTANCE_TRANSLOG(FORM_INSTANCE_TRANSLOGDto form_instance_translog, bool doSaveChanges = true);
		void UpdateFORM_INSTANCE_TRANSLOG(FORM_INSTANCE_TRANSLOGDto form_instance_translog, bool doSaveChanges = true);
		void UpdateFORM_INSTANCE_TRANSLOGs(IEnumerable<FORM_INSTANCE_TRANSLOGDto> form_instance_translogs, bool doSaveChanges = true);
		void DeleteFORM_INSTANCE_TRANSLOG(FORM_INSTANCE_TRANSLOGDto form_instance_translog, bool doSaveChanges = true);
		void DeleteFORM_INSTANCE_TRANSLOGs(IEnumerable<FORM_INSTANCE_TRANSLOGDto> form_instance_translogs, bool doSaveChanges = true);
		void SaveFORM_INSTANCE_TRANSLOG(FORM_INSTANCE_TRANSLOGDto form_instance_translog, bool doSaveChanges = true);
		void SaveFORM_INSTANCE_TRANSLOGs(IEnumerable<FORM_INSTANCE_TRANSLOGDto> form_instance_translogs, bool doSaveChanges = true);


		#endregion FORM_INSTANCE_TRANSLOG CRUD Operations


		#region FORM_INSTANCE_TARGETS_DELLOG CRUD Operations


		IFORM_INSTANCE_TARGETS_DELLOGService FORM_INSTANCE_TARGETS_DELLOGService { get; }
		IQueryable<FORM_INSTANCE_TARGETS_DELLOG> FORM_INSTANCE_TARGETS_DELLOGs { get; }
		IQueryable<FORM_INSTANCE_TARGETS_DELLOG> ReadFORM_INSTANCE_TARGETS_DELLOGs(Expression<Func<FORM_INSTANCE_TARGETS_DELLOG, bool>> filter, int dummy);
		IEnumerable<FORM_INSTANCE_TARGETS_DELLOGDto> ReadFORM_INSTANCE_TARGETS_DELLOGs();
		IEnumerable<FORM_INSTANCE_TARGETS_DELLOGDto> ReadFORM_INSTANCE_TARGETS_DELLOGs(Expression<Func<FORM_INSTANCE_TARGETS_DELLOG, bool>> filter);
		IEnumerable<FORM_INSTANCE_TARGETS_DELLOGDto> ReadFORM_INSTANCE_TARGETS_DELLOGs(ISpecification<FORM_INSTANCE_TARGETS_DELLOG> specification);
		IEnumerable<FORM_INSTANCE_TARGETS_DELLOGDto> ReadFORM_INSTANCE_TARGETS_DELLOGs(IQueryable<FORM_INSTANCE_TARGETS_DELLOG> query);
		IEnumerable<FORM_INSTANCE_TARGETS_DELLOGDto> ReadFORM_INSTANCE_TARGETS_DELLOGs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORM_INSTANCE_TARGETS_DELLOGDto> ReadFORM_INSTANCE_TARGETS_DELLOGs(object[] keyWords);
		IEnumerable<FORM_INSTANCE_TARGETS_DELLOGDto> ReadFORM_INSTANCE_TARGETS_DELLOGsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_INSTANCE_TARGETS_DELLOGDto> ReadFORM_INSTANCE_TARGETS_DELLOGsPaged(IQueryable<FORM_INSTANCE_TARGETS_DELLOG> source, int pageIndex, int pageSize);
		IEnumerable<FORM_INSTANCE_TARGETS_DELLOGDto> ReadFORM_INSTANCE_TARGETS_DELLOGsPaged(IQueryable<FORM_INSTANCE_TARGETS_DELLOG> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORM_INSTANCE_TARGETS_DELLOGDto> ReadFORM_INSTANCE_TARGETS_DELLOGsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_INSTANCE_TARGETS_DELLOGDto> ReadFORM_INSTANCE_TARGETS_DELLOGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORM_INSTANCE_TARGETS_DELLOGDto> ReadFORM_INSTANCE_TARGETS_DELLOGsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_INSTANCE_TARGETS_DELLOG, bool>> filter);
		FORM_INSTANCE_TARGETS_DELLOGDto ReadFORM_INSTANCE_TARGETS_DELLOGs(string dtoKey);
		int CountFORM_INSTANCE_TARGETS_DELLOGs();
		int CountFORM_INSTANCE_TARGETS_DELLOGs(string filterExpression);
		int CountFORM_INSTANCE_TARGETS_DELLOGs(Expression<Func<FORM_INSTANCE_TARGETS_DELLOG, bool>> filter);
		string CreateFORM_INSTANCE_TARGETS_DELLOG(FORM_INSTANCE_TARGETS_DELLOGDto form_instance_targets_dellog, bool doSaveChanges = true);
		void UpdateFORM_INSTANCE_TARGETS_DELLOG(FORM_INSTANCE_TARGETS_DELLOGDto form_instance_targets_dellog, bool doSaveChanges = true);
		void UpdateFORM_INSTANCE_TARGETS_DELLOGs(IEnumerable<FORM_INSTANCE_TARGETS_DELLOGDto> form_instance_targets_dellogs, bool doSaveChanges = true);
		void DeleteFORM_INSTANCE_TARGETS_DELLOG(FORM_INSTANCE_TARGETS_DELLOGDto form_instance_targets_dellog, bool doSaveChanges = true);
		void DeleteFORM_INSTANCE_TARGETS_DELLOGs(IEnumerable<FORM_INSTANCE_TARGETS_DELLOGDto> form_instance_targets_dellogs, bool doSaveChanges = true);
		void SaveFORM_INSTANCE_TARGETS_DELLOG(FORM_INSTANCE_TARGETS_DELLOGDto form_instance_targets_dellog, bool doSaveChanges = true);
		void SaveFORM_INSTANCE_TARGETS_DELLOGs(IEnumerable<FORM_INSTANCE_TARGETS_DELLOGDto> form_instance_targets_dellogs, bool doSaveChanges = true);


		#endregion FORM_INSTANCE_TARGETS_DELLOG CRUD Operations


		#region FORM_INSTANCE_TARGETS_BK CRUD Operations


		IFORM_INSTANCE_TARGETS_BKService FORM_INSTANCE_TARGETS_BKService { get; }
		IQueryable<FORM_INSTANCE_TARGETS_BK> FORM_INSTANCE_TARGETS_BKs { get; }
		IQueryable<FORM_INSTANCE_TARGETS_BK> ReadFORM_INSTANCE_TARGETS_BKs(Expression<Func<FORM_INSTANCE_TARGETS_BK, bool>> filter, int dummy);
		IEnumerable<FORM_INSTANCE_TARGETS_BKDto> ReadFORM_INSTANCE_TARGETS_BKs();
		IEnumerable<FORM_INSTANCE_TARGETS_BKDto> ReadFORM_INSTANCE_TARGETS_BKs(Expression<Func<FORM_INSTANCE_TARGETS_BK, bool>> filter);
		IEnumerable<FORM_INSTANCE_TARGETS_BKDto> ReadFORM_INSTANCE_TARGETS_BKs(ISpecification<FORM_INSTANCE_TARGETS_BK> specification);
		IEnumerable<FORM_INSTANCE_TARGETS_BKDto> ReadFORM_INSTANCE_TARGETS_BKs(IQueryable<FORM_INSTANCE_TARGETS_BK> query);
		IEnumerable<FORM_INSTANCE_TARGETS_BKDto> ReadFORM_INSTANCE_TARGETS_BKs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORM_INSTANCE_TARGETS_BKDto> ReadFORM_INSTANCE_TARGETS_BKs(object[] keyWords);
		IEnumerable<FORM_INSTANCE_TARGETS_BKDto> ReadFORM_INSTANCE_TARGETS_BKsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_INSTANCE_TARGETS_BKDto> ReadFORM_INSTANCE_TARGETS_BKsPaged(IQueryable<FORM_INSTANCE_TARGETS_BK> source, int pageIndex, int pageSize);
		IEnumerable<FORM_INSTANCE_TARGETS_BKDto> ReadFORM_INSTANCE_TARGETS_BKsPaged(IQueryable<FORM_INSTANCE_TARGETS_BK> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORM_INSTANCE_TARGETS_BKDto> ReadFORM_INSTANCE_TARGETS_BKsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_INSTANCE_TARGETS_BKDto> ReadFORM_INSTANCE_TARGETS_BKsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORM_INSTANCE_TARGETS_BKDto> ReadFORM_INSTANCE_TARGETS_BKsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_INSTANCE_TARGETS_BK, bool>> filter);
		FORM_INSTANCE_TARGETS_BKDto ReadFORM_INSTANCE_TARGETS_BKs(string dtoKey);
		int CountFORM_INSTANCE_TARGETS_BKs();
		int CountFORM_INSTANCE_TARGETS_BKs(string filterExpression);
		int CountFORM_INSTANCE_TARGETS_BKs(Expression<Func<FORM_INSTANCE_TARGETS_BK, bool>> filter);
		string CreateFORM_INSTANCE_TARGETS_BK(FORM_INSTANCE_TARGETS_BKDto form_instance_targets_bk, bool doSaveChanges = true);
		void UpdateFORM_INSTANCE_TARGETS_BK(FORM_INSTANCE_TARGETS_BKDto form_instance_targets_bk, bool doSaveChanges = true);
		void UpdateFORM_INSTANCE_TARGETS_BKs(IEnumerable<FORM_INSTANCE_TARGETS_BKDto> form_instance_targets_bks, bool doSaveChanges = true);
		void DeleteFORM_INSTANCE_TARGETS_BK(FORM_INSTANCE_TARGETS_BKDto form_instance_targets_bk, bool doSaveChanges = true);
		void DeleteFORM_INSTANCE_TARGETS_BKs(IEnumerable<FORM_INSTANCE_TARGETS_BKDto> form_instance_targets_bks, bool doSaveChanges = true);
		void SaveFORM_INSTANCE_TARGETS_BK(FORM_INSTANCE_TARGETS_BKDto form_instance_targets_bk, bool doSaveChanges = true);
		void SaveFORM_INSTANCE_TARGETS_BKs(IEnumerable<FORM_INSTANCE_TARGETS_BKDto> form_instance_targets_bks, bool doSaveChanges = true);


		#endregion FORM_INSTANCE_TARGETS_BK CRUD Operations


		#region FORM_INSTANCE_TARGET CRUD Operations


		IFORM_INSTANCE_TARGETService FORM_INSTANCE_TARGETService { get; }
		IQueryable<FORM_INSTANCE_TARGET> FORM_INSTANCE_TARGETs { get; }
		IQueryable<FORM_INSTANCE_TARGET> ReadFORM_INSTANCE_TARGETs(Expression<Func<FORM_INSTANCE_TARGET, bool>> filter, int dummy);
		IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETs();
		IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETs(Expression<Func<FORM_INSTANCE_TARGET, bool>> filter);
		IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETs(ISpecification<FORM_INSTANCE_TARGET> specification);
		IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETs(IQueryable<FORM_INSTANCE_TARGET> query);
		IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETs(object[] keyWords);
		IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETsPaged(IQueryable<FORM_INSTANCE_TARGET> source, int pageIndex, int pageSize);
		IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETsPaged(IQueryable<FORM_INSTANCE_TARGET> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_INSTANCE_TARGET, bool>> filter);
		FORM_INSTANCE_TARGETDto ReadFORM_INSTANCE_TARGETs(string dtoKey);
		int CountFORM_INSTANCE_TARGETs();
		int CountFORM_INSTANCE_TARGETs(string filterExpression);
		int CountFORM_INSTANCE_TARGETs(Expression<Func<FORM_INSTANCE_TARGET, bool>> filter);
		string CreateFORM_INSTANCE_TARGET(FORM_INSTANCE_TARGETDto form_instance_target, bool doSaveChanges = true);
		void UpdateFORM_INSTANCE_TARGET(FORM_INSTANCE_TARGETDto form_instance_target, bool doSaveChanges = true);
		void UpdateFORM_INSTANCE_TARGETs(IEnumerable<FORM_INSTANCE_TARGETDto> form_instance_targets, bool doSaveChanges = true);
		void DeleteFORM_INSTANCE_TARGET(FORM_INSTANCE_TARGETDto form_instance_target, bool doSaveChanges = true);
		void DeleteFORM_INSTANCE_TARGETs(IEnumerable<FORM_INSTANCE_TARGETDto> form_instance_targets, bool doSaveChanges = true);
		void SaveFORM_INSTANCE_TARGET(FORM_INSTANCE_TARGETDto form_instance_target, bool doSaveChanges = true);
		void SaveFORM_INSTANCE_TARGETs(IEnumerable<FORM_INSTANCE_TARGETDto> form_instance_targets, bool doSaveChanges = true);


		#endregion FORM_INSTANCE_TARGET CRUD Operations


		#region FORM_INSTANCE_RETURN_LOG CRUD Operations


		IFORM_INSTANCE_RETURN_LOGService FORM_INSTANCE_RETURN_LOGService { get; }
		IQueryable<FORM_INSTANCE_RETURN_LOG> FORM_INSTANCE_RETURN_LOGs { get; }
		IQueryable<FORM_INSTANCE_RETURN_LOG> ReadFORM_INSTANCE_RETURN_LOGs(Expression<Func<FORM_INSTANCE_RETURN_LOG, bool>> filter, int dummy);
		IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGs();
		IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGs(Expression<Func<FORM_INSTANCE_RETURN_LOG, bool>> filter);
		IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGs(ISpecification<FORM_INSTANCE_RETURN_LOG> specification);
		IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGs(IQueryable<FORM_INSTANCE_RETURN_LOG> query);
		IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGs(object[] keyWords);
		IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGsPaged(IQueryable<FORM_INSTANCE_RETURN_LOG> source, int pageIndex, int pageSize);
		IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGsPaged(IQueryable<FORM_INSTANCE_RETURN_LOG> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_INSTANCE_RETURN_LOG, bool>> filter);
		FORM_INSTANCE_RETURN_LOGDto ReadFORM_INSTANCE_RETURN_LOGs(string dtoKey);
		int CountFORM_INSTANCE_RETURN_LOGs();
		int CountFORM_INSTANCE_RETURN_LOGs(string filterExpression);
		int CountFORM_INSTANCE_RETURN_LOGs(Expression<Func<FORM_INSTANCE_RETURN_LOG, bool>> filter);
		string CreateFORM_INSTANCE_RETURN_LOG(FORM_INSTANCE_RETURN_LOGDto form_instance_return_log, bool doSaveChanges = true);
		void UpdateFORM_INSTANCE_RETURN_LOG(FORM_INSTANCE_RETURN_LOGDto form_instance_return_log, bool doSaveChanges = true);
		void UpdateFORM_INSTANCE_RETURN_LOGs(IEnumerable<FORM_INSTANCE_RETURN_LOGDto> form_instance_return_logs, bool doSaveChanges = true);
		void DeleteFORM_INSTANCE_RETURN_LOG(FORM_INSTANCE_RETURN_LOGDto form_instance_return_log, bool doSaveChanges = true);
		void DeleteFORM_INSTANCE_RETURN_LOGs(IEnumerable<FORM_INSTANCE_RETURN_LOGDto> form_instance_return_logs, bool doSaveChanges = true);
		void SaveFORM_INSTANCE_RETURN_LOG(FORM_INSTANCE_RETURN_LOGDto form_instance_return_log, bool doSaveChanges = true);
		void SaveFORM_INSTANCE_RETURN_LOGs(IEnumerable<FORM_INSTANCE_RETURN_LOGDto> form_instance_return_logs, bool doSaveChanges = true);


		#endregion FORM_INSTANCE_RETURN_LOG CRUD Operations


		#region FORM_INSTANCE_EXPRESSIONS_BK CRUD Operations


		IFORM_INSTANCE_EXPRESSIONS_BKService FORM_INSTANCE_EXPRESSIONS_BKService { get; }
		IQueryable<FORM_INSTANCE_EXPRESSIONS_BK> FORM_INSTANCE_EXPRESSIONS_BKs { get; }
		IQueryable<FORM_INSTANCE_EXPRESSIONS_BK> ReadFORM_INSTANCE_EXPRESSIONS_BKs(Expression<Func<FORM_INSTANCE_EXPRESSIONS_BK, bool>> filter, int dummy);
		IEnumerable<FORM_INSTANCE_EXPRESSIONS_BKDto> ReadFORM_INSTANCE_EXPRESSIONS_BKs();
		IEnumerable<FORM_INSTANCE_EXPRESSIONS_BKDto> ReadFORM_INSTANCE_EXPRESSIONS_BKs(Expression<Func<FORM_INSTANCE_EXPRESSIONS_BK, bool>> filter);
		IEnumerable<FORM_INSTANCE_EXPRESSIONS_BKDto> ReadFORM_INSTANCE_EXPRESSIONS_BKs(ISpecification<FORM_INSTANCE_EXPRESSIONS_BK> specification);
		IEnumerable<FORM_INSTANCE_EXPRESSIONS_BKDto> ReadFORM_INSTANCE_EXPRESSIONS_BKs(IQueryable<FORM_INSTANCE_EXPRESSIONS_BK> query);
		IEnumerable<FORM_INSTANCE_EXPRESSIONS_BKDto> ReadFORM_INSTANCE_EXPRESSIONS_BKs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORM_INSTANCE_EXPRESSIONS_BKDto> ReadFORM_INSTANCE_EXPRESSIONS_BKs(object[] keyWords);
		IEnumerable<FORM_INSTANCE_EXPRESSIONS_BKDto> ReadFORM_INSTANCE_EXPRESSIONS_BKsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_INSTANCE_EXPRESSIONS_BKDto> ReadFORM_INSTANCE_EXPRESSIONS_BKsPaged(IQueryable<FORM_INSTANCE_EXPRESSIONS_BK> source, int pageIndex, int pageSize);
		IEnumerable<FORM_INSTANCE_EXPRESSIONS_BKDto> ReadFORM_INSTANCE_EXPRESSIONS_BKsPaged(IQueryable<FORM_INSTANCE_EXPRESSIONS_BK> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORM_INSTANCE_EXPRESSIONS_BKDto> ReadFORM_INSTANCE_EXPRESSIONS_BKsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_INSTANCE_EXPRESSIONS_BKDto> ReadFORM_INSTANCE_EXPRESSIONS_BKsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORM_INSTANCE_EXPRESSIONS_BKDto> ReadFORM_INSTANCE_EXPRESSIONS_BKsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_INSTANCE_EXPRESSIONS_BK, bool>> filter);
		FORM_INSTANCE_EXPRESSIONS_BKDto ReadFORM_INSTANCE_EXPRESSIONS_BKs(string dtoKey);
		int CountFORM_INSTANCE_EXPRESSIONS_BKs();
		int CountFORM_INSTANCE_EXPRESSIONS_BKs(string filterExpression);
		int CountFORM_INSTANCE_EXPRESSIONS_BKs(Expression<Func<FORM_INSTANCE_EXPRESSIONS_BK, bool>> filter);
		string CreateFORM_INSTANCE_EXPRESSIONS_BK(FORM_INSTANCE_EXPRESSIONS_BKDto form_instance_expressions_bk, bool doSaveChanges = true);
		void UpdateFORM_INSTANCE_EXPRESSIONS_BK(FORM_INSTANCE_EXPRESSIONS_BKDto form_instance_expressions_bk, bool doSaveChanges = true);
		void UpdateFORM_INSTANCE_EXPRESSIONS_BKs(IEnumerable<FORM_INSTANCE_EXPRESSIONS_BKDto> form_instance_expressions_bks, bool doSaveChanges = true);
		void DeleteFORM_INSTANCE_EXPRESSIONS_BK(FORM_INSTANCE_EXPRESSIONS_BKDto form_instance_expressions_bk, bool doSaveChanges = true);
		void DeleteFORM_INSTANCE_EXPRESSIONS_BKs(IEnumerable<FORM_INSTANCE_EXPRESSIONS_BKDto> form_instance_expressions_bks, bool doSaveChanges = true);
		void SaveFORM_INSTANCE_EXPRESSIONS_BK(FORM_INSTANCE_EXPRESSIONS_BKDto form_instance_expressions_bk, bool doSaveChanges = true);
		void SaveFORM_INSTANCE_EXPRESSIONS_BKs(IEnumerable<FORM_INSTANCE_EXPRESSIONS_BKDto> form_instance_expressions_bks, bool doSaveChanges = true);


		#endregion FORM_INSTANCE_EXPRESSIONS_BK CRUD Operations


		#region FORM_INSTANCE_EXPRESSION CRUD Operations


		IFORM_INSTANCE_EXPRESSIONService FORM_INSTANCE_EXPRESSIONService { get; }
		IQueryable<FORM_INSTANCE_EXPRESSION> FORM_INSTANCE_EXPRESSIONs { get; }
		IQueryable<FORM_INSTANCE_EXPRESSION> ReadFORM_INSTANCE_EXPRESSIONs(Expression<Func<FORM_INSTANCE_EXPRESSION, bool>> filter, int dummy);
		IEnumerable<FORM_INSTANCE_EXPRESSIONDto> ReadFORM_INSTANCE_EXPRESSIONs();
		IEnumerable<FORM_INSTANCE_EXPRESSIONDto> ReadFORM_INSTANCE_EXPRESSIONs(Expression<Func<FORM_INSTANCE_EXPRESSION, bool>> filter);
		IEnumerable<FORM_INSTANCE_EXPRESSIONDto> ReadFORM_INSTANCE_EXPRESSIONs(ISpecification<FORM_INSTANCE_EXPRESSION> specification);
		IEnumerable<FORM_INSTANCE_EXPRESSIONDto> ReadFORM_INSTANCE_EXPRESSIONs(IQueryable<FORM_INSTANCE_EXPRESSION> query);
		IEnumerable<FORM_INSTANCE_EXPRESSIONDto> ReadFORM_INSTANCE_EXPRESSIONs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORM_INSTANCE_EXPRESSIONDto> ReadFORM_INSTANCE_EXPRESSIONs(object[] keyWords);
		IEnumerable<FORM_INSTANCE_EXPRESSIONDto> ReadFORM_INSTANCE_EXPRESSIONsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_INSTANCE_EXPRESSIONDto> ReadFORM_INSTANCE_EXPRESSIONsPaged(IQueryable<FORM_INSTANCE_EXPRESSION> source, int pageIndex, int pageSize);
		IEnumerable<FORM_INSTANCE_EXPRESSIONDto> ReadFORM_INSTANCE_EXPRESSIONsPaged(IQueryable<FORM_INSTANCE_EXPRESSION> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORM_INSTANCE_EXPRESSIONDto> ReadFORM_INSTANCE_EXPRESSIONsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_INSTANCE_EXPRESSIONDto> ReadFORM_INSTANCE_EXPRESSIONsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORM_INSTANCE_EXPRESSIONDto> ReadFORM_INSTANCE_EXPRESSIONsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_INSTANCE_EXPRESSION, bool>> filter);
		FORM_INSTANCE_EXPRESSIONDto ReadFORM_INSTANCE_EXPRESSIONs(string dtoKey);
		int CountFORM_INSTANCE_EXPRESSIONs();
		int CountFORM_INSTANCE_EXPRESSIONs(string filterExpression);
		int CountFORM_INSTANCE_EXPRESSIONs(Expression<Func<FORM_INSTANCE_EXPRESSION, bool>> filter);
		string CreateFORM_INSTANCE_EXPRESSION(FORM_INSTANCE_EXPRESSIONDto form_instance_expression, bool doSaveChanges = true);
		void UpdateFORM_INSTANCE_EXPRESSION(FORM_INSTANCE_EXPRESSIONDto form_instance_expression, bool doSaveChanges = true);
		void UpdateFORM_INSTANCE_EXPRESSIONs(IEnumerable<FORM_INSTANCE_EXPRESSIONDto> form_instance_expressions, bool doSaveChanges = true);
		void DeleteFORM_INSTANCE_EXPRESSION(FORM_INSTANCE_EXPRESSIONDto form_instance_expression, bool doSaveChanges = true);
		void DeleteFORM_INSTANCE_EXPRESSIONs(IEnumerable<FORM_INSTANCE_EXPRESSIONDto> form_instance_expressions, bool doSaveChanges = true);
		void SaveFORM_INSTANCE_EXPRESSION(FORM_INSTANCE_EXPRESSIONDto form_instance_expression, bool doSaveChanges = true);
		void SaveFORM_INSTANCE_EXPRESSIONs(IEnumerable<FORM_INSTANCE_EXPRESSIONDto> form_instance_expressions, bool doSaveChanges = true);


		#endregion FORM_INSTANCE_EXPRESSION CRUD Operations


		#region FORM_INSTANCE_ELEMENTS_BK CRUD Operations


		IFORM_INSTANCE_ELEMENTS_BKService FORM_INSTANCE_ELEMENTS_BKService { get; }
		IQueryable<FORM_INSTANCE_ELEMENTS_BK> FORM_INSTANCE_ELEMENTS_BKs { get; }
		IQueryable<FORM_INSTANCE_ELEMENTS_BK> ReadFORM_INSTANCE_ELEMENTS_BKs(Expression<Func<FORM_INSTANCE_ELEMENTS_BK, bool>> filter, int dummy);
		IEnumerable<FORM_INSTANCE_ELEMENTS_BKDto> ReadFORM_INSTANCE_ELEMENTS_BKs();
		IEnumerable<FORM_INSTANCE_ELEMENTS_BKDto> ReadFORM_INSTANCE_ELEMENTS_BKs(Expression<Func<FORM_INSTANCE_ELEMENTS_BK, bool>> filter);
		IEnumerable<FORM_INSTANCE_ELEMENTS_BKDto> ReadFORM_INSTANCE_ELEMENTS_BKs(ISpecification<FORM_INSTANCE_ELEMENTS_BK> specification);
		IEnumerable<FORM_INSTANCE_ELEMENTS_BKDto> ReadFORM_INSTANCE_ELEMENTS_BKs(IQueryable<FORM_INSTANCE_ELEMENTS_BK> query);
		IEnumerable<FORM_INSTANCE_ELEMENTS_BKDto> ReadFORM_INSTANCE_ELEMENTS_BKs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORM_INSTANCE_ELEMENTS_BKDto> ReadFORM_INSTANCE_ELEMENTS_BKs(object[] keyWords);
		IEnumerable<FORM_INSTANCE_ELEMENTS_BKDto> ReadFORM_INSTANCE_ELEMENTS_BKsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_INSTANCE_ELEMENTS_BKDto> ReadFORM_INSTANCE_ELEMENTS_BKsPaged(IQueryable<FORM_INSTANCE_ELEMENTS_BK> source, int pageIndex, int pageSize);
		IEnumerable<FORM_INSTANCE_ELEMENTS_BKDto> ReadFORM_INSTANCE_ELEMENTS_BKsPaged(IQueryable<FORM_INSTANCE_ELEMENTS_BK> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORM_INSTANCE_ELEMENTS_BKDto> ReadFORM_INSTANCE_ELEMENTS_BKsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_INSTANCE_ELEMENTS_BKDto> ReadFORM_INSTANCE_ELEMENTS_BKsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORM_INSTANCE_ELEMENTS_BKDto> ReadFORM_INSTANCE_ELEMENTS_BKsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_INSTANCE_ELEMENTS_BK, bool>> filter);
		FORM_INSTANCE_ELEMENTS_BKDto ReadFORM_INSTANCE_ELEMENTS_BKs(string dtoKey);
		int CountFORM_INSTANCE_ELEMENTS_BKs();
		int CountFORM_INSTANCE_ELEMENTS_BKs(string filterExpression);
		int CountFORM_INSTANCE_ELEMENTS_BKs(Expression<Func<FORM_INSTANCE_ELEMENTS_BK, bool>> filter);
		string CreateFORM_INSTANCE_ELEMENTS_BK(FORM_INSTANCE_ELEMENTS_BKDto form_instance_elements_bk, bool doSaveChanges = true);
		void UpdateFORM_INSTANCE_ELEMENTS_BK(FORM_INSTANCE_ELEMENTS_BKDto form_instance_elements_bk, bool doSaveChanges = true);
		void UpdateFORM_INSTANCE_ELEMENTS_BKs(IEnumerable<FORM_INSTANCE_ELEMENTS_BKDto> form_instance_elements_bks, bool doSaveChanges = true);
		void DeleteFORM_INSTANCE_ELEMENTS_BK(FORM_INSTANCE_ELEMENTS_BKDto form_instance_elements_bk, bool doSaveChanges = true);
		void DeleteFORM_INSTANCE_ELEMENTS_BKs(IEnumerable<FORM_INSTANCE_ELEMENTS_BKDto> form_instance_elements_bks, bool doSaveChanges = true);
		void SaveFORM_INSTANCE_ELEMENTS_BK(FORM_INSTANCE_ELEMENTS_BKDto form_instance_elements_bk, bool doSaveChanges = true);
		void SaveFORM_INSTANCE_ELEMENTS_BKs(IEnumerable<FORM_INSTANCE_ELEMENTS_BKDto> form_instance_elements_bks, bool doSaveChanges = true);


		#endregion FORM_INSTANCE_ELEMENTS_BK CRUD Operations


		#region FORM_INSTANCE_ELEMENT CRUD Operations


		IFORM_INSTANCE_ELEMENTService FORM_INSTANCE_ELEMENTService { get; }
		IQueryable<FORM_INSTANCE_ELEMENT> FORM_INSTANCE_ELEMENTs { get; }
		IQueryable<FORM_INSTANCE_ELEMENT> ReadFORM_INSTANCE_ELEMENTs(Expression<Func<FORM_INSTANCE_ELEMENT, bool>> filter, int dummy);
		IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTs();
		IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTs(Expression<Func<FORM_INSTANCE_ELEMENT, bool>> filter);
		IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTs(ISpecification<FORM_INSTANCE_ELEMENT> specification);
		IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTs(IQueryable<FORM_INSTANCE_ELEMENT> query);
		IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTs(object[] keyWords);
		IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTsPaged(IQueryable<FORM_INSTANCE_ELEMENT> source, int pageIndex, int pageSize);
		IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTsPaged(IQueryable<FORM_INSTANCE_ELEMENT> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_INSTANCE_ELEMENT, bool>> filter);
		FORM_INSTANCE_ELEMENTDto ReadFORM_INSTANCE_ELEMENTs(string dtoKey);
		int CountFORM_INSTANCE_ELEMENTs();
		int CountFORM_INSTANCE_ELEMENTs(string filterExpression);
		int CountFORM_INSTANCE_ELEMENTs(Expression<Func<FORM_INSTANCE_ELEMENT, bool>> filter);
		string CreateFORM_INSTANCE_ELEMENT(FORM_INSTANCE_ELEMENTDto form_instance_element, bool doSaveChanges = true);
		void UpdateFORM_INSTANCE_ELEMENT(FORM_INSTANCE_ELEMENTDto form_instance_element, bool doSaveChanges = true);
		void UpdateFORM_INSTANCE_ELEMENTs(IEnumerable<FORM_INSTANCE_ELEMENTDto> form_instance_elements, bool doSaveChanges = true);
		void DeleteFORM_INSTANCE_ELEMENT(FORM_INSTANCE_ELEMENTDto form_instance_element, bool doSaveChanges = true);
		void DeleteFORM_INSTANCE_ELEMENTs(IEnumerable<FORM_INSTANCE_ELEMENTDto> form_instance_elements, bool doSaveChanges = true);
		void SaveFORM_INSTANCE_ELEMENT(FORM_INSTANCE_ELEMENTDto form_instance_element, bool doSaveChanges = true);
		void SaveFORM_INSTANCE_ELEMENTs(IEnumerable<FORM_INSTANCE_ELEMENTDto> form_instance_elements, bool doSaveChanges = true);


		#endregion FORM_INSTANCE_ELEMENT CRUD Operations


		#region FORM_INSTANCE_BLOCK CRUD Operations


		IFORM_INSTANCE_BLOCKService FORM_INSTANCE_BLOCKService { get; }
		IQueryable<FORM_INSTANCE_BLOCK> FORM_INSTANCE_BLOCKs { get; }
		IQueryable<FORM_INSTANCE_BLOCK> ReadFORM_INSTANCE_BLOCKs(Expression<Func<FORM_INSTANCE_BLOCK, bool>> filter, int dummy);
		IEnumerable<FORM_INSTANCE_BLOCKDto> ReadFORM_INSTANCE_BLOCKs();
		IEnumerable<FORM_INSTANCE_BLOCKDto> ReadFORM_INSTANCE_BLOCKs(Expression<Func<FORM_INSTANCE_BLOCK, bool>> filter);
		IEnumerable<FORM_INSTANCE_BLOCKDto> ReadFORM_INSTANCE_BLOCKs(ISpecification<FORM_INSTANCE_BLOCK> specification);
		IEnumerable<FORM_INSTANCE_BLOCKDto> ReadFORM_INSTANCE_BLOCKs(IQueryable<FORM_INSTANCE_BLOCK> query);
		IEnumerable<FORM_INSTANCE_BLOCKDto> ReadFORM_INSTANCE_BLOCKs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORM_INSTANCE_BLOCKDto> ReadFORM_INSTANCE_BLOCKs(object[] keyWords);
		IEnumerable<FORM_INSTANCE_BLOCKDto> ReadFORM_INSTANCE_BLOCKsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_INSTANCE_BLOCKDto> ReadFORM_INSTANCE_BLOCKsPaged(IQueryable<FORM_INSTANCE_BLOCK> source, int pageIndex, int pageSize);
		IEnumerable<FORM_INSTANCE_BLOCKDto> ReadFORM_INSTANCE_BLOCKsPaged(IQueryable<FORM_INSTANCE_BLOCK> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORM_INSTANCE_BLOCKDto> ReadFORM_INSTANCE_BLOCKsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_INSTANCE_BLOCKDto> ReadFORM_INSTANCE_BLOCKsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORM_INSTANCE_BLOCKDto> ReadFORM_INSTANCE_BLOCKsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_INSTANCE_BLOCK, bool>> filter);
		FORM_INSTANCE_BLOCKDto ReadFORM_INSTANCE_BLOCKs(string dtoKey);
		int CountFORM_INSTANCE_BLOCKs();
		int CountFORM_INSTANCE_BLOCKs(string filterExpression);
		int CountFORM_INSTANCE_BLOCKs(Expression<Func<FORM_INSTANCE_BLOCK, bool>> filter);
		string CreateFORM_INSTANCE_BLOCK(FORM_INSTANCE_BLOCKDto form_instance_block, bool doSaveChanges = true);
		void UpdateFORM_INSTANCE_BLOCK(FORM_INSTANCE_BLOCKDto form_instance_block, bool doSaveChanges = true);
		void UpdateFORM_INSTANCE_BLOCKs(IEnumerable<FORM_INSTANCE_BLOCKDto> form_instance_blocks, bool doSaveChanges = true);
		void DeleteFORM_INSTANCE_BLOCK(FORM_INSTANCE_BLOCKDto form_instance_block, bool doSaveChanges = true);
		void DeleteFORM_INSTANCE_BLOCKs(IEnumerable<FORM_INSTANCE_BLOCKDto> form_instance_blocks, bool doSaveChanges = true);
		void SaveFORM_INSTANCE_BLOCK(FORM_INSTANCE_BLOCKDto form_instance_block, bool doSaveChanges = true);
		void SaveFORM_INSTANCE_BLOCKs(IEnumerable<FORM_INSTANCE_BLOCKDto> form_instance_blocks, bool doSaveChanges = true);


		#endregion FORM_INSTANCE_BLOCK CRUD Operations


		#region FORM_INSTANCE_ATTACHMENT CRUD Operations


		IFORM_INSTANCE_ATTACHMENTService FORM_INSTANCE_ATTACHMENTService { get; }
		IQueryable<FORM_INSTANCE_ATTACHMENT> FORM_INSTANCE_ATTACHMENTs { get; }
		IQueryable<FORM_INSTANCE_ATTACHMENT> ReadFORM_INSTANCE_ATTACHMENTs(Expression<Func<FORM_INSTANCE_ATTACHMENT, bool>> filter, int dummy);
		IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTs();
		IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTs(Expression<Func<FORM_INSTANCE_ATTACHMENT, bool>> filter);
		IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTs(ISpecification<FORM_INSTANCE_ATTACHMENT> specification);
		IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTs(IQueryable<FORM_INSTANCE_ATTACHMENT> query);
		IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTs(object[] keyWords);
		IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTsPaged(IQueryable<FORM_INSTANCE_ATTACHMENT> source, int pageIndex, int pageSize);
		IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTsPaged(IQueryable<FORM_INSTANCE_ATTACHMENT> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_INSTANCE_ATTACHMENT, bool>> filter);
		FORM_INSTANCE_ATTACHMENTDto ReadFORM_INSTANCE_ATTACHMENTs(string dtoKey);
		int CountFORM_INSTANCE_ATTACHMENTs();
		int CountFORM_INSTANCE_ATTACHMENTs(string filterExpression);
		int CountFORM_INSTANCE_ATTACHMENTs(Expression<Func<FORM_INSTANCE_ATTACHMENT, bool>> filter);
		string CreateFORM_INSTANCE_ATTACHMENT(FORM_INSTANCE_ATTACHMENTDto form_instance_attachment, bool doSaveChanges = true);
		void UpdateFORM_INSTANCE_ATTACHMENT(FORM_INSTANCE_ATTACHMENTDto form_instance_attachment, bool doSaveChanges = true);
		void UpdateFORM_INSTANCE_ATTACHMENTs(IEnumerable<FORM_INSTANCE_ATTACHMENTDto> form_instance_attachments, bool doSaveChanges = true);
		void DeleteFORM_INSTANCE_ATTACHMENT(FORM_INSTANCE_ATTACHMENTDto form_instance_attachment, bool doSaveChanges = true);
		void DeleteFORM_INSTANCE_ATTACHMENTs(IEnumerable<FORM_INSTANCE_ATTACHMENTDto> form_instance_attachments, bool doSaveChanges = true);
		void SaveFORM_INSTANCE_ATTACHMENT(FORM_INSTANCE_ATTACHMENTDto form_instance_attachment, bool doSaveChanges = true);
		void SaveFORM_INSTANCE_ATTACHMENTs(IEnumerable<FORM_INSTANCE_ATTACHMENTDto> form_instance_attachments, bool doSaveChanges = true);


		#endregion FORM_INSTANCE_ATTACHMENT CRUD Operations


		#region FIXMEMBERDATUM CRUD Operations


		IFIXMEMBERDATUMService FIXMEMBERDATUMService { get; }
		IQueryable<FIXMEMBERDATUM> FIXMEMBERDATa { get; }
		IQueryable<FIXMEMBERDATUM> ReadFIXMEMBERDATa(Expression<Func<FIXMEMBERDATUM, bool>> filter, int dummy);
		IEnumerable<FIXMEMBERDATUMDto> ReadFIXMEMBERDATa();
		IEnumerable<FIXMEMBERDATUMDto> ReadFIXMEMBERDATa(Expression<Func<FIXMEMBERDATUM, bool>> filter);
		IEnumerable<FIXMEMBERDATUMDto> ReadFIXMEMBERDATa(ISpecification<FIXMEMBERDATUM> specification);
		IEnumerable<FIXMEMBERDATUMDto> ReadFIXMEMBERDATa(IQueryable<FIXMEMBERDATUM> query);
		IEnumerable<FIXMEMBERDATUMDto> ReadFIXMEMBERDATa(string[] propertyToSearch, object[] keyWords);
		IEnumerable<FIXMEMBERDATUMDto> ReadFIXMEMBERDATa(object[] keyWords);
		IEnumerable<FIXMEMBERDATUMDto> ReadFIXMEMBERDATaPaged(int startIndex, int pageSize);
		IEnumerable<FIXMEMBERDATUMDto> ReadFIXMEMBERDATaPaged(IQueryable<FIXMEMBERDATUM> source, int pageIndex, int pageSize);
		IEnumerable<FIXMEMBERDATUMDto> ReadFIXMEMBERDATaPaged(IQueryable<FIXMEMBERDATUM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<FIXMEMBERDATUMDto> ReadFIXMEMBERDATaFiltered(string sortExpression, string filterExpression);
		IEnumerable<FIXMEMBERDATUMDto> ReadFIXMEMBERDATaPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<FIXMEMBERDATUMDto> ReadFIXMEMBERDATaPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FIXMEMBERDATUM, bool>> filter);
		FIXMEMBERDATUMDto ReadFIXMEMBERDATa(string dtoKey);
		int CountFIXMEMBERDATa();
		int CountFIXMEMBERDATa(string filterExpression);
		int CountFIXMEMBERDATa(Expression<Func<FIXMEMBERDATUM, bool>> filter);
		string CreateFIXMEMBERDATUM(FIXMEMBERDATUMDto fixmemberdatum, bool doSaveChanges = true);
		void UpdateFIXMEMBERDATUM(FIXMEMBERDATUMDto fixmemberdatum, bool doSaveChanges = true);
		void UpdateFIXMEMBERDATa(IEnumerable<FIXMEMBERDATUMDto> fixmemberdata, bool doSaveChanges = true);
		void DeleteFIXMEMBERDATUM(FIXMEMBERDATUMDto fixmemberdatum, bool doSaveChanges = true);
		void DeleteFIXMEMBERDATa(IEnumerable<FIXMEMBERDATUMDto> fixmemberdata, bool doSaveChanges = true);
		void SaveFIXMEMBERDATUM(FIXMEMBERDATUMDto fixmemberdatum, bool doSaveChanges = true);
		void SaveFIXMEMBERDATa(IEnumerable<FIXMEMBERDATUMDto> fixmemberdata, bool doSaveChanges = true);


		#endregion FIXMEMBERDATUM CRUD Operations


		#region ELEARNINGITEM CRUD Operations


		IELEARNINGITEMService ELEARNINGITEMService { get; }
		IQueryable<ELEARNINGITEM> ELEARNINGITEMs { get; }
		IQueryable<ELEARNINGITEM> ReadELEARNINGITEMs(Expression<Func<ELEARNINGITEM, bool>> filter, int dummy);
		IEnumerable<ELEARNINGITEMDto> ReadELEARNINGITEMs();
		IEnumerable<ELEARNINGITEMDto> ReadELEARNINGITEMs(Expression<Func<ELEARNINGITEM, bool>> filter);
		IEnumerable<ELEARNINGITEMDto> ReadELEARNINGITEMs(ISpecification<ELEARNINGITEM> specification);
		IEnumerable<ELEARNINGITEMDto> ReadELEARNINGITEMs(IQueryable<ELEARNINGITEM> query);
		IEnumerable<ELEARNINGITEMDto> ReadELEARNINGITEMs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<ELEARNINGITEMDto> ReadELEARNINGITEMs(object[] keyWords);
		IEnumerable<ELEARNINGITEMDto> ReadELEARNINGITEMsPaged(int startIndex, int pageSize);
		IEnumerable<ELEARNINGITEMDto> ReadELEARNINGITEMsPaged(IQueryable<ELEARNINGITEM> source, int pageIndex, int pageSize);
		IEnumerable<ELEARNINGITEMDto> ReadELEARNINGITEMsPaged(IQueryable<ELEARNINGITEM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<ELEARNINGITEMDto> ReadELEARNINGITEMsFiltered(string sortExpression, string filterExpression);
		IEnumerable<ELEARNINGITEMDto> ReadELEARNINGITEMsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<ELEARNINGITEMDto> ReadELEARNINGITEMsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<ELEARNINGITEM, bool>> filter);
		ELEARNINGITEMDto ReadELEARNINGITEMs(string dtoKey);
		int CountELEARNINGITEMs();
		int CountELEARNINGITEMs(string filterExpression);
		int CountELEARNINGITEMs(Expression<Func<ELEARNINGITEM, bool>> filter);
		string CreateELEARNINGITEM(ELEARNINGITEMDto elearningitem, bool doSaveChanges = true);
		void UpdateELEARNINGITEM(ELEARNINGITEMDto elearningitem, bool doSaveChanges = true);
		void UpdateELEARNINGITEMs(IEnumerable<ELEARNINGITEMDto> elearningitems, bool doSaveChanges = true);
		void DeleteELEARNINGITEM(ELEARNINGITEMDto elearningitem, bool doSaveChanges = true);
		void DeleteELEARNINGITEMs(IEnumerable<ELEARNINGITEMDto> elearningitems, bool doSaveChanges = true);
		void SaveELEARNINGITEM(ELEARNINGITEMDto elearningitem, bool doSaveChanges = true);
		void SaveELEARNINGITEMs(IEnumerable<ELEARNINGITEMDto> elearningitems, bool doSaveChanges = true);


		#endregion ELEARNINGITEM CRUD Operations


		#region ELEARNINGEMPITEMLOG CRUD Operations


		IELEARNINGEMPITEMLOGService ELEARNINGEMPITEMLOGService { get; }
		IQueryable<ELEARNINGEMPITEMLOG> ELEARNINGEMPITEMLOGs { get; }
		IQueryable<ELEARNINGEMPITEMLOG> ReadELEARNINGEMPITEMLOGs(Expression<Func<ELEARNINGEMPITEMLOG, bool>> filter, int dummy);
		IEnumerable<ELEARNINGEMPITEMLOGDto> ReadELEARNINGEMPITEMLOGs();
		IEnumerable<ELEARNINGEMPITEMLOGDto> ReadELEARNINGEMPITEMLOGs(Expression<Func<ELEARNINGEMPITEMLOG, bool>> filter);
		IEnumerable<ELEARNINGEMPITEMLOGDto> ReadELEARNINGEMPITEMLOGs(ISpecification<ELEARNINGEMPITEMLOG> specification);
		IEnumerable<ELEARNINGEMPITEMLOGDto> ReadELEARNINGEMPITEMLOGs(IQueryable<ELEARNINGEMPITEMLOG> query);
		IEnumerable<ELEARNINGEMPITEMLOGDto> ReadELEARNINGEMPITEMLOGs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<ELEARNINGEMPITEMLOGDto> ReadELEARNINGEMPITEMLOGs(object[] keyWords);
		IEnumerable<ELEARNINGEMPITEMLOGDto> ReadELEARNINGEMPITEMLOGsPaged(int startIndex, int pageSize);
		IEnumerable<ELEARNINGEMPITEMLOGDto> ReadELEARNINGEMPITEMLOGsPaged(IQueryable<ELEARNINGEMPITEMLOG> source, int pageIndex, int pageSize);
		IEnumerable<ELEARNINGEMPITEMLOGDto> ReadELEARNINGEMPITEMLOGsPaged(IQueryable<ELEARNINGEMPITEMLOG> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<ELEARNINGEMPITEMLOGDto> ReadELEARNINGEMPITEMLOGsFiltered(string sortExpression, string filterExpression);
		IEnumerable<ELEARNINGEMPITEMLOGDto> ReadELEARNINGEMPITEMLOGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<ELEARNINGEMPITEMLOGDto> ReadELEARNINGEMPITEMLOGsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<ELEARNINGEMPITEMLOG, bool>> filter);
		ELEARNINGEMPITEMLOGDto ReadELEARNINGEMPITEMLOGs(string dtoKey);
		int CountELEARNINGEMPITEMLOGs();
		int CountELEARNINGEMPITEMLOGs(string filterExpression);
		int CountELEARNINGEMPITEMLOGs(Expression<Func<ELEARNINGEMPITEMLOG, bool>> filter);
		string CreateELEARNINGEMPITEMLOG(ELEARNINGEMPITEMLOGDto elearningempitemlog, bool doSaveChanges = true);
		void UpdateELEARNINGEMPITEMLOG(ELEARNINGEMPITEMLOGDto elearningempitemlog, bool doSaveChanges = true);
		void UpdateELEARNINGEMPITEMLOGs(IEnumerable<ELEARNINGEMPITEMLOGDto> elearningempitemlogs, bool doSaveChanges = true);
		void DeleteELEARNINGEMPITEMLOG(ELEARNINGEMPITEMLOGDto elearningempitemlog, bool doSaveChanges = true);
		void DeleteELEARNINGEMPITEMLOGs(IEnumerable<ELEARNINGEMPITEMLOGDto> elearningempitemlogs, bool doSaveChanges = true);
		void SaveELEARNINGEMPITEMLOG(ELEARNINGEMPITEMLOGDto elearningempitemlog, bool doSaveChanges = true);
		void SaveELEARNINGEMPITEMLOGs(IEnumerable<ELEARNINGEMPITEMLOGDto> elearningempitemlogs, bool doSaveChanges = true);


		#endregion ELEARNINGEMPITEMLOG CRUD Operations


		#region ELEARNINGEMPITEM CRUD Operations


		IELEARNINGEMPITEMService ELEARNINGEMPITEMService { get; }
		IQueryable<ELEARNINGEMPITEM> ELEARNINGEMPITEMs { get; }
		IQueryable<ELEARNINGEMPITEM> ReadELEARNINGEMPITEMs(Expression<Func<ELEARNINGEMPITEM, bool>> filter, int dummy);
		IEnumerable<ELEARNINGEMPITEMDto> ReadELEARNINGEMPITEMs();
		IEnumerable<ELEARNINGEMPITEMDto> ReadELEARNINGEMPITEMs(Expression<Func<ELEARNINGEMPITEM, bool>> filter);
		IEnumerable<ELEARNINGEMPITEMDto> ReadELEARNINGEMPITEMs(ISpecification<ELEARNINGEMPITEM> specification);
		IEnumerable<ELEARNINGEMPITEMDto> ReadELEARNINGEMPITEMs(IQueryable<ELEARNINGEMPITEM> query);
		IEnumerable<ELEARNINGEMPITEMDto> ReadELEARNINGEMPITEMs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<ELEARNINGEMPITEMDto> ReadELEARNINGEMPITEMs(object[] keyWords);
		IEnumerable<ELEARNINGEMPITEMDto> ReadELEARNINGEMPITEMsPaged(int startIndex, int pageSize);
		IEnumerable<ELEARNINGEMPITEMDto> ReadELEARNINGEMPITEMsPaged(IQueryable<ELEARNINGEMPITEM> source, int pageIndex, int pageSize);
		IEnumerable<ELEARNINGEMPITEMDto> ReadELEARNINGEMPITEMsPaged(IQueryable<ELEARNINGEMPITEM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<ELEARNINGEMPITEMDto> ReadELEARNINGEMPITEMsFiltered(string sortExpression, string filterExpression);
		IEnumerable<ELEARNINGEMPITEMDto> ReadELEARNINGEMPITEMsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<ELEARNINGEMPITEMDto> ReadELEARNINGEMPITEMsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<ELEARNINGEMPITEM, bool>> filter);
		ELEARNINGEMPITEMDto ReadELEARNINGEMPITEMs(string dtoKey);
		int CountELEARNINGEMPITEMs();
		int CountELEARNINGEMPITEMs(string filterExpression);
		int CountELEARNINGEMPITEMs(Expression<Func<ELEARNINGEMPITEM, bool>> filter);
		string CreateELEARNINGEMPITEM(ELEARNINGEMPITEMDto elearningempitem, bool doSaveChanges = true);
		void UpdateELEARNINGEMPITEM(ELEARNINGEMPITEMDto elearningempitem, bool doSaveChanges = true);
		void UpdateELEARNINGEMPITEMs(IEnumerable<ELEARNINGEMPITEMDto> elearningempitems, bool doSaveChanges = true);
		void DeleteELEARNINGEMPITEM(ELEARNINGEMPITEMDto elearningempitem, bool doSaveChanges = true);
		void DeleteELEARNINGEMPITEMs(IEnumerable<ELEARNINGEMPITEMDto> elearningempitems, bool doSaveChanges = true);
		void SaveELEARNINGEMPITEM(ELEARNINGEMPITEMDto elearningempitem, bool doSaveChanges = true);
		void SaveELEARNINGEMPITEMs(IEnumerable<ELEARNINGEMPITEMDto> elearningempitems, bool doSaveChanges = true);


		#endregion ELEARNINGEMPITEM CRUD Operations


		#region ELEARNINGCLASS CRUD Operations


		IELEARNINGCLASSService ELEARNINGCLASSService { get; }
		IQueryable<ELEARNINGCLASS> ELEARNINGCLASSes { get; }
		IQueryable<ELEARNINGCLASS> ReadELEARNINGCLASSes(Expression<Func<ELEARNINGCLASS, bool>> filter, int dummy);
		IEnumerable<ELEARNINGCLASSDto> ReadELEARNINGCLASSes();
		IEnumerable<ELEARNINGCLASSDto> ReadELEARNINGCLASSes(Expression<Func<ELEARNINGCLASS, bool>> filter);
		IEnumerable<ELEARNINGCLASSDto> ReadELEARNINGCLASSes(ISpecification<ELEARNINGCLASS> specification);
		IEnumerable<ELEARNINGCLASSDto> ReadELEARNINGCLASSes(IQueryable<ELEARNINGCLASS> query);
		IEnumerable<ELEARNINGCLASSDto> ReadELEARNINGCLASSes(string[] propertyToSearch, object[] keyWords);
		IEnumerable<ELEARNINGCLASSDto> ReadELEARNINGCLASSes(object[] keyWords);
		IEnumerable<ELEARNINGCLASSDto> ReadELEARNINGCLASSesPaged(int startIndex, int pageSize);
		IEnumerable<ELEARNINGCLASSDto> ReadELEARNINGCLASSesPaged(IQueryable<ELEARNINGCLASS> source, int pageIndex, int pageSize);
		IEnumerable<ELEARNINGCLASSDto> ReadELEARNINGCLASSesPaged(IQueryable<ELEARNINGCLASS> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<ELEARNINGCLASSDto> ReadELEARNINGCLASSesFiltered(string sortExpression, string filterExpression);
		IEnumerable<ELEARNINGCLASSDto> ReadELEARNINGCLASSesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<ELEARNINGCLASSDto> ReadELEARNINGCLASSesPagedAndFiltered(int startIndex, int pageSize, Expression<Func<ELEARNINGCLASS, bool>> filter);
		ELEARNINGCLASSDto ReadELEARNINGCLASSes(string dtoKey);
		int CountELEARNINGCLASSes();
		int CountELEARNINGCLASSes(string filterExpression);
		int CountELEARNINGCLASSes(Expression<Func<ELEARNINGCLASS, bool>> filter);
		string CreateELEARNINGCLASS(ELEARNINGCLASSDto elearningclass, bool doSaveChanges = true);
		void UpdateELEARNINGCLASS(ELEARNINGCLASSDto elearningclass, bool doSaveChanges = true);
		void UpdateELEARNINGCLASSes(IEnumerable<ELEARNINGCLASSDto> elearningclasses, bool doSaveChanges = true);
		void DeleteELEARNINGCLASS(ELEARNINGCLASSDto elearningclass, bool doSaveChanges = true);
		void DeleteELEARNINGCLASSes(IEnumerable<ELEARNINGCLASSDto> elearningclasses, bool doSaveChanges = true);
		void SaveELEARNINGCLASS(ELEARNINGCLASSDto elearningclass, bool doSaveChanges = true);
		void SaveELEARNINGCLASSes(IEnumerable<ELEARNINGCLASSDto> elearningclasses, bool doSaveChanges = true);


		#endregion ELEARNINGCLASS CRUD Operations


		#region ELEARNINGBOOKING CRUD Operations


		IELEARNINGBOOKINGService ELEARNINGBOOKINGService { get; }
		IQueryable<ELEARNINGBOOKING> ELEARNINGBOOKINGs { get; }
		IQueryable<ELEARNINGBOOKING> ReadELEARNINGBOOKINGs(Expression<Func<ELEARNINGBOOKING, bool>> filter, int dummy);
		IEnumerable<ELEARNINGBOOKINGDto> ReadELEARNINGBOOKINGs();
		IEnumerable<ELEARNINGBOOKINGDto> ReadELEARNINGBOOKINGs(Expression<Func<ELEARNINGBOOKING, bool>> filter);
		IEnumerable<ELEARNINGBOOKINGDto> ReadELEARNINGBOOKINGs(ISpecification<ELEARNINGBOOKING> specification);
		IEnumerable<ELEARNINGBOOKINGDto> ReadELEARNINGBOOKINGs(IQueryable<ELEARNINGBOOKING> query);
		IEnumerable<ELEARNINGBOOKINGDto> ReadELEARNINGBOOKINGs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<ELEARNINGBOOKINGDto> ReadELEARNINGBOOKINGs(object[] keyWords);
		IEnumerable<ELEARNINGBOOKINGDto> ReadELEARNINGBOOKINGsPaged(int startIndex, int pageSize);
		IEnumerable<ELEARNINGBOOKINGDto> ReadELEARNINGBOOKINGsPaged(IQueryable<ELEARNINGBOOKING> source, int pageIndex, int pageSize);
		IEnumerable<ELEARNINGBOOKINGDto> ReadELEARNINGBOOKINGsPaged(IQueryable<ELEARNINGBOOKING> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<ELEARNINGBOOKINGDto> ReadELEARNINGBOOKINGsFiltered(string sortExpression, string filterExpression);
		IEnumerable<ELEARNINGBOOKINGDto> ReadELEARNINGBOOKINGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<ELEARNINGBOOKINGDto> ReadELEARNINGBOOKINGsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<ELEARNINGBOOKING, bool>> filter);
		ELEARNINGBOOKINGDto ReadELEARNINGBOOKINGs(string dtoKey);
		int CountELEARNINGBOOKINGs();
		int CountELEARNINGBOOKINGs(string filterExpression);
		int CountELEARNINGBOOKINGs(Expression<Func<ELEARNINGBOOKING, bool>> filter);
		string CreateELEARNINGBOOKING(ELEARNINGBOOKINGDto elearningbooking, bool doSaveChanges = true);
		void UpdateELEARNINGBOOKING(ELEARNINGBOOKINGDto elearningbooking, bool doSaveChanges = true);
		void UpdateELEARNINGBOOKINGs(IEnumerable<ELEARNINGBOOKINGDto> elearningbookings, bool doSaveChanges = true);
		void DeleteELEARNINGBOOKING(ELEARNINGBOOKINGDto elearningbooking, bool doSaveChanges = true);
		void DeleteELEARNINGBOOKINGs(IEnumerable<ELEARNINGBOOKINGDto> elearningbookings, bool doSaveChanges = true);
		void SaveELEARNINGBOOKING(ELEARNINGBOOKINGDto elearningbooking, bool doSaveChanges = true);
		void SaveELEARNINGBOOKINGs(IEnumerable<ELEARNINGBOOKINGDto> elearningbookings, bool doSaveChanges = true);


		#endregion ELEARNINGBOOKING CRUD Operations


		#region EDUTERMFORMREQTEMPLATEDET CRUD Operations


		IEDUTERMFORMREQTEMPLATEDETService EDUTERMFORMREQTEMPLATEDETService { get; }
		IQueryable<EDUTERMFORMREQTEMPLATEDET> EDUTERMFORMREQTEMPLATEDETs { get; }
		IQueryable<EDUTERMFORMREQTEMPLATEDET> ReadEDUTERMFORMREQTEMPLATEDETs(Expression<Func<EDUTERMFORMREQTEMPLATEDET, bool>> filter, int dummy);
		IEnumerable<EDUTERMFORMREQTEMPLATEDETDto> ReadEDUTERMFORMREQTEMPLATEDETs();
		IEnumerable<EDUTERMFORMREQTEMPLATEDETDto> ReadEDUTERMFORMREQTEMPLATEDETs(Expression<Func<EDUTERMFORMREQTEMPLATEDET, bool>> filter);
		IEnumerable<EDUTERMFORMREQTEMPLATEDETDto> ReadEDUTERMFORMREQTEMPLATEDETs(ISpecification<EDUTERMFORMREQTEMPLATEDET> specification);
		IEnumerable<EDUTERMFORMREQTEMPLATEDETDto> ReadEDUTERMFORMREQTEMPLATEDETs(IQueryable<EDUTERMFORMREQTEMPLATEDET> query);
		IEnumerable<EDUTERMFORMREQTEMPLATEDETDto> ReadEDUTERMFORMREQTEMPLATEDETs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUTERMFORMREQTEMPLATEDETDto> ReadEDUTERMFORMREQTEMPLATEDETs(object[] keyWords);
		IEnumerable<EDUTERMFORMREQTEMPLATEDETDto> ReadEDUTERMFORMREQTEMPLATEDETsPaged(int startIndex, int pageSize);
		IEnumerable<EDUTERMFORMREQTEMPLATEDETDto> ReadEDUTERMFORMREQTEMPLATEDETsPaged(IQueryable<EDUTERMFORMREQTEMPLATEDET> source, int pageIndex, int pageSize);
		IEnumerable<EDUTERMFORMREQTEMPLATEDETDto> ReadEDUTERMFORMREQTEMPLATEDETsPaged(IQueryable<EDUTERMFORMREQTEMPLATEDET> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUTERMFORMREQTEMPLATEDETDto> ReadEDUTERMFORMREQTEMPLATEDETsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUTERMFORMREQTEMPLATEDETDto> ReadEDUTERMFORMREQTEMPLATEDETsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUTERMFORMREQTEMPLATEDETDto> ReadEDUTERMFORMREQTEMPLATEDETsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUTERMFORMREQTEMPLATEDET, bool>> filter);
		EDUTERMFORMREQTEMPLATEDETDto ReadEDUTERMFORMREQTEMPLATEDETs(string dtoKey);
		int CountEDUTERMFORMREQTEMPLATEDETs();
		int CountEDUTERMFORMREQTEMPLATEDETs(string filterExpression);
		int CountEDUTERMFORMREQTEMPLATEDETs(Expression<Func<EDUTERMFORMREQTEMPLATEDET, bool>> filter);
		string CreateEDUTERMFORMREQTEMPLATEDET(EDUTERMFORMREQTEMPLATEDETDto edutermformreqtemplatedet, bool doSaveChanges = true);
		void UpdateEDUTERMFORMREQTEMPLATEDET(EDUTERMFORMREQTEMPLATEDETDto edutermformreqtemplatedet, bool doSaveChanges = true);
		void UpdateEDUTERMFORMREQTEMPLATEDETs(IEnumerable<EDUTERMFORMREQTEMPLATEDETDto> edutermformreqtemplatedets, bool doSaveChanges = true);
		void DeleteEDUTERMFORMREQTEMPLATEDET(EDUTERMFORMREQTEMPLATEDETDto edutermformreqtemplatedet, bool doSaveChanges = true);
		void DeleteEDUTERMFORMREQTEMPLATEDETs(IEnumerable<EDUTERMFORMREQTEMPLATEDETDto> edutermformreqtemplatedets, bool doSaveChanges = true);
		void SaveEDUTERMFORMREQTEMPLATEDET(EDUTERMFORMREQTEMPLATEDETDto edutermformreqtemplatedet, bool doSaveChanges = true);
		void SaveEDUTERMFORMREQTEMPLATEDETs(IEnumerable<EDUTERMFORMREQTEMPLATEDETDto> edutermformreqtemplatedets, bool doSaveChanges = true);


		#endregion EDUTERMFORMREQTEMPLATEDET CRUD Operations


		#region EDUTERMFORMREQTEMPLATE CRUD Operations


		IEDUTERMFORMREQTEMPLATEService EDUTERMFORMREQTEMPLATEService { get; }
		IQueryable<EDUTERMFORMREQTEMPLATE> EDUTERMFORMREQTEMPLATEs { get; }
		IQueryable<EDUTERMFORMREQTEMPLATE> ReadEDUTERMFORMREQTEMPLATEs(Expression<Func<EDUTERMFORMREQTEMPLATE, bool>> filter, int dummy);
		IEnumerable<EDUTERMFORMREQTEMPLATEDto> ReadEDUTERMFORMREQTEMPLATEs();
		IEnumerable<EDUTERMFORMREQTEMPLATEDto> ReadEDUTERMFORMREQTEMPLATEs(Expression<Func<EDUTERMFORMREQTEMPLATE, bool>> filter);
		IEnumerable<EDUTERMFORMREQTEMPLATEDto> ReadEDUTERMFORMREQTEMPLATEs(ISpecification<EDUTERMFORMREQTEMPLATE> specification);
		IEnumerable<EDUTERMFORMREQTEMPLATEDto> ReadEDUTERMFORMREQTEMPLATEs(IQueryable<EDUTERMFORMREQTEMPLATE> query);
		IEnumerable<EDUTERMFORMREQTEMPLATEDto> ReadEDUTERMFORMREQTEMPLATEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUTERMFORMREQTEMPLATEDto> ReadEDUTERMFORMREQTEMPLATEs(object[] keyWords);
		IEnumerable<EDUTERMFORMREQTEMPLATEDto> ReadEDUTERMFORMREQTEMPLATEsPaged(int startIndex, int pageSize);
		IEnumerable<EDUTERMFORMREQTEMPLATEDto> ReadEDUTERMFORMREQTEMPLATEsPaged(IQueryable<EDUTERMFORMREQTEMPLATE> source, int pageIndex, int pageSize);
		IEnumerable<EDUTERMFORMREQTEMPLATEDto> ReadEDUTERMFORMREQTEMPLATEsPaged(IQueryable<EDUTERMFORMREQTEMPLATE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUTERMFORMREQTEMPLATEDto> ReadEDUTERMFORMREQTEMPLATEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUTERMFORMREQTEMPLATEDto> ReadEDUTERMFORMREQTEMPLATEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUTERMFORMREQTEMPLATEDto> ReadEDUTERMFORMREQTEMPLATEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUTERMFORMREQTEMPLATE, bool>> filter);
		EDUTERMFORMREQTEMPLATEDto ReadEDUTERMFORMREQTEMPLATEs(string dtoKey);
		int CountEDUTERMFORMREQTEMPLATEs();
		int CountEDUTERMFORMREQTEMPLATEs(string filterExpression);
		int CountEDUTERMFORMREQTEMPLATEs(Expression<Func<EDUTERMFORMREQTEMPLATE, bool>> filter);
		string CreateEDUTERMFORMREQTEMPLATE(EDUTERMFORMREQTEMPLATEDto edutermformreqtemplate, bool doSaveChanges = true);
		void UpdateEDUTERMFORMREQTEMPLATE(EDUTERMFORMREQTEMPLATEDto edutermformreqtemplate, bool doSaveChanges = true);
		void UpdateEDUTERMFORMREQTEMPLATEs(IEnumerable<EDUTERMFORMREQTEMPLATEDto> edutermformreqtemplates, bool doSaveChanges = true);
		void DeleteEDUTERMFORMREQTEMPLATE(EDUTERMFORMREQTEMPLATEDto edutermformreqtemplate, bool doSaveChanges = true);
		void DeleteEDUTERMFORMREQTEMPLATEs(IEnumerable<EDUTERMFORMREQTEMPLATEDto> edutermformreqtemplates, bool doSaveChanges = true);
		void SaveEDUTERMFORMREQTEMPLATE(EDUTERMFORMREQTEMPLATEDto edutermformreqtemplate, bool doSaveChanges = true);
		void SaveEDUTERMFORMREQTEMPLATEs(IEnumerable<EDUTERMFORMREQTEMPLATEDto> edutermformreqtemplates, bool doSaveChanges = true);


		#endregion EDUTERMFORMREQTEMPLATE CRUD Operations


		#region EDUTERMFORMREQ CRUD Operations


		IEDUTERMFORMREQService EDUTERMFORMREQService { get; }
		IQueryable<EDUTERMFORMREQ> EDUTERMFORMREQs { get; }
		IQueryable<EDUTERMFORMREQ> ReadEDUTERMFORMREQs(Expression<Func<EDUTERMFORMREQ, bool>> filter, int dummy);
		IEnumerable<EDUTERMFORMREQDto> ReadEDUTERMFORMREQs();
		IEnumerable<EDUTERMFORMREQDto> ReadEDUTERMFORMREQs(Expression<Func<EDUTERMFORMREQ, bool>> filter);
		IEnumerable<EDUTERMFORMREQDto> ReadEDUTERMFORMREQs(ISpecification<EDUTERMFORMREQ> specification);
		IEnumerable<EDUTERMFORMREQDto> ReadEDUTERMFORMREQs(IQueryable<EDUTERMFORMREQ> query);
		IEnumerable<EDUTERMFORMREQDto> ReadEDUTERMFORMREQs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUTERMFORMREQDto> ReadEDUTERMFORMREQs(object[] keyWords);
		IEnumerable<EDUTERMFORMREQDto> ReadEDUTERMFORMREQsPaged(int startIndex, int pageSize);
		IEnumerable<EDUTERMFORMREQDto> ReadEDUTERMFORMREQsPaged(IQueryable<EDUTERMFORMREQ> source, int pageIndex, int pageSize);
		IEnumerable<EDUTERMFORMREQDto> ReadEDUTERMFORMREQsPaged(IQueryable<EDUTERMFORMREQ> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUTERMFORMREQDto> ReadEDUTERMFORMREQsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUTERMFORMREQDto> ReadEDUTERMFORMREQsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUTERMFORMREQDto> ReadEDUTERMFORMREQsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUTERMFORMREQ, bool>> filter);
		EDUTERMFORMREQDto ReadEDUTERMFORMREQs(string dtoKey);
		int CountEDUTERMFORMREQs();
		int CountEDUTERMFORMREQs(string filterExpression);
		int CountEDUTERMFORMREQs(Expression<Func<EDUTERMFORMREQ, bool>> filter);
		string CreateEDUTERMFORMREQ(EDUTERMFORMREQDto edutermformreq, bool doSaveChanges = true);
		void UpdateEDUTERMFORMREQ(EDUTERMFORMREQDto edutermformreq, bool doSaveChanges = true);
		void UpdateEDUTERMFORMREQs(IEnumerable<EDUTERMFORMREQDto> edutermformreqs, bool doSaveChanges = true);
		void DeleteEDUTERMFORMREQ(EDUTERMFORMREQDto edutermformreq, bool doSaveChanges = true);
		void DeleteEDUTERMFORMREQs(IEnumerable<EDUTERMFORMREQDto> edutermformreqs, bool doSaveChanges = true);
		void SaveEDUTERMFORMREQ(EDUTERMFORMREQDto edutermformreq, bool doSaveChanges = true);
		void SaveEDUTERMFORMREQs(IEnumerable<EDUTERMFORMREQDto> edutermformreqs, bool doSaveChanges = true);


		#endregion EDUTERMFORMREQ CRUD Operations


		#region EDUTERMFORMINSTANCE CRUD Operations


		IEDUTERMFORMINSTANCEService EDUTERMFORMINSTANCEService { get; }
		IQueryable<EDUTERMFORMINSTANCE> EDUTERMFORMINSTANCEs { get; }
		IQueryable<EDUTERMFORMINSTANCE> ReadEDUTERMFORMINSTANCEs(Expression<Func<EDUTERMFORMINSTANCE, bool>> filter, int dummy);
		IEnumerable<EDUTERMFORMINSTANCEDto> ReadEDUTERMFORMINSTANCEs();
		IEnumerable<EDUTERMFORMINSTANCEDto> ReadEDUTERMFORMINSTANCEs(Expression<Func<EDUTERMFORMINSTANCE, bool>> filter);
		IEnumerable<EDUTERMFORMINSTANCEDto> ReadEDUTERMFORMINSTANCEs(ISpecification<EDUTERMFORMINSTANCE> specification);
		IEnumerable<EDUTERMFORMINSTANCEDto> ReadEDUTERMFORMINSTANCEs(IQueryable<EDUTERMFORMINSTANCE> query);
		IEnumerable<EDUTERMFORMINSTANCEDto> ReadEDUTERMFORMINSTANCEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUTERMFORMINSTANCEDto> ReadEDUTERMFORMINSTANCEs(object[] keyWords);
		IEnumerable<EDUTERMFORMINSTANCEDto> ReadEDUTERMFORMINSTANCEsPaged(int startIndex, int pageSize);
		IEnumerable<EDUTERMFORMINSTANCEDto> ReadEDUTERMFORMINSTANCEsPaged(IQueryable<EDUTERMFORMINSTANCE> source, int pageIndex, int pageSize);
		IEnumerable<EDUTERMFORMINSTANCEDto> ReadEDUTERMFORMINSTANCEsPaged(IQueryable<EDUTERMFORMINSTANCE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUTERMFORMINSTANCEDto> ReadEDUTERMFORMINSTANCEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUTERMFORMINSTANCEDto> ReadEDUTERMFORMINSTANCEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUTERMFORMINSTANCEDto> ReadEDUTERMFORMINSTANCEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUTERMFORMINSTANCE, bool>> filter);
		EDUTERMFORMINSTANCEDto ReadEDUTERMFORMINSTANCEs(string dtoKey);
		int CountEDUTERMFORMINSTANCEs();
		int CountEDUTERMFORMINSTANCEs(string filterExpression);
		int CountEDUTERMFORMINSTANCEs(Expression<Func<EDUTERMFORMINSTANCE, bool>> filter);
		string CreateEDUTERMFORMINSTANCE(EDUTERMFORMINSTANCEDto edutermforminstance, bool doSaveChanges = true);
		void UpdateEDUTERMFORMINSTANCE(EDUTERMFORMINSTANCEDto edutermforminstance, bool doSaveChanges = true);
		void UpdateEDUTERMFORMINSTANCEs(IEnumerable<EDUTERMFORMINSTANCEDto> edutermforminstances, bool doSaveChanges = true);
		void DeleteEDUTERMFORMINSTANCE(EDUTERMFORMINSTANCEDto edutermforminstance, bool doSaveChanges = true);
		void DeleteEDUTERMFORMINSTANCEs(IEnumerable<EDUTERMFORMINSTANCEDto> edutermforminstances, bool doSaveChanges = true);
		void SaveEDUTERMFORMINSTANCE(EDUTERMFORMINSTANCEDto edutermforminstance, bool doSaveChanges = true);
		void SaveEDUTERMFORMINSTANCEs(IEnumerable<EDUTERMFORMINSTANCEDto> edutermforminstances, bool doSaveChanges = true);


		#endregion EDUTERMFORMINSTANCE CRUD Operations


		#region EDUTERM CRUD Operations


		IEDUTERMService EDUTERMService { get; }
		IQueryable<EDUTERM> EDUTERMs { get; }
		IQueryable<EDUTERM> ReadEDUTERMs(Expression<Func<EDUTERM, bool>> filter, int dummy);
		IEnumerable<EDUTERMDto> ReadEDUTERMs();
		IEnumerable<EDUTERMDto> ReadEDUTERMs(Expression<Func<EDUTERM, bool>> filter);
		IEnumerable<EDUTERMDto> ReadEDUTERMs(ISpecification<EDUTERM> specification);
		IEnumerable<EDUTERMDto> ReadEDUTERMs(IQueryable<EDUTERM> query);
		IEnumerable<EDUTERMDto> ReadEDUTERMs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUTERMDto> ReadEDUTERMs(object[] keyWords);
		IEnumerable<EDUTERMDto> ReadEDUTERMsPaged(int startIndex, int pageSize);
		IEnumerable<EDUTERMDto> ReadEDUTERMsPaged(IQueryable<EDUTERM> source, int pageIndex, int pageSize);
		IEnumerable<EDUTERMDto> ReadEDUTERMsPaged(IQueryable<EDUTERM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUTERMDto> ReadEDUTERMsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUTERMDto> ReadEDUTERMsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUTERMDto> ReadEDUTERMsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUTERM, bool>> filter);
		EDUTERMDto ReadEDUTERMs(string dtoKey);
		int CountEDUTERMs();
		int CountEDUTERMs(string filterExpression);
		int CountEDUTERMs(Expression<Func<EDUTERM, bool>> filter);
		string CreateEDUTERM(EDUTERMDto eduterm, bool doSaveChanges = true);
		void UpdateEDUTERM(EDUTERMDto eduterm, bool doSaveChanges = true);
		void UpdateEDUTERMs(IEnumerable<EDUTERMDto> eduterms, bool doSaveChanges = true);
		void DeleteEDUTERM(EDUTERMDto eduterm, bool doSaveChanges = true);
		void DeleteEDUTERMs(IEnumerable<EDUTERMDto> eduterms, bool doSaveChanges = true);
		void SaveEDUTERM(EDUTERMDto eduterm, bool doSaveChanges = true);
		void SaveEDUTERMs(IEnumerable<EDUTERMDto> eduterms, bool doSaveChanges = true);


		#endregion EDUTERM CRUD Operations


		#region EDUTEAMRUNDOWN CRUD Operations


		IEDUTEAMRUNDOWNService EDUTEAMRUNDOWNService { get; }
		IQueryable<EDUTEAMRUNDOWN> EDUTEAMRUNDOWNs { get; }
		IQueryable<EDUTEAMRUNDOWN> ReadEDUTEAMRUNDOWNs(Expression<Func<EDUTEAMRUNDOWN, bool>> filter, int dummy);
		IEnumerable<EDUTEAMRUNDOWNDto> ReadEDUTEAMRUNDOWNs();
		IEnumerable<EDUTEAMRUNDOWNDto> ReadEDUTEAMRUNDOWNs(Expression<Func<EDUTEAMRUNDOWN, bool>> filter);
		IEnumerable<EDUTEAMRUNDOWNDto> ReadEDUTEAMRUNDOWNs(ISpecification<EDUTEAMRUNDOWN> specification);
		IEnumerable<EDUTEAMRUNDOWNDto> ReadEDUTEAMRUNDOWNs(IQueryable<EDUTEAMRUNDOWN> query);
		IEnumerable<EDUTEAMRUNDOWNDto> ReadEDUTEAMRUNDOWNs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUTEAMRUNDOWNDto> ReadEDUTEAMRUNDOWNs(object[] keyWords);
		IEnumerable<EDUTEAMRUNDOWNDto> ReadEDUTEAMRUNDOWNsPaged(int startIndex, int pageSize);
		IEnumerable<EDUTEAMRUNDOWNDto> ReadEDUTEAMRUNDOWNsPaged(IQueryable<EDUTEAMRUNDOWN> source, int pageIndex, int pageSize);
		IEnumerable<EDUTEAMRUNDOWNDto> ReadEDUTEAMRUNDOWNsPaged(IQueryable<EDUTEAMRUNDOWN> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUTEAMRUNDOWNDto> ReadEDUTEAMRUNDOWNsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUTEAMRUNDOWNDto> ReadEDUTEAMRUNDOWNsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUTEAMRUNDOWNDto> ReadEDUTEAMRUNDOWNsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUTEAMRUNDOWN, bool>> filter);
		EDUTEAMRUNDOWNDto ReadEDUTEAMRUNDOWNs(string dtoKey);
		int CountEDUTEAMRUNDOWNs();
		int CountEDUTEAMRUNDOWNs(string filterExpression);
		int CountEDUTEAMRUNDOWNs(Expression<Func<EDUTEAMRUNDOWN, bool>> filter);
		string CreateEDUTEAMRUNDOWN(EDUTEAMRUNDOWNDto eduteamrundown, bool doSaveChanges = true);
		void UpdateEDUTEAMRUNDOWN(EDUTEAMRUNDOWNDto eduteamrundown, bool doSaveChanges = true);
		void UpdateEDUTEAMRUNDOWNs(IEnumerable<EDUTEAMRUNDOWNDto> eduteamrundowns, bool doSaveChanges = true);
		void DeleteEDUTEAMRUNDOWN(EDUTEAMRUNDOWNDto eduteamrundown, bool doSaveChanges = true);
		void DeleteEDUTEAMRUNDOWNs(IEnumerable<EDUTEAMRUNDOWNDto> eduteamrundowns, bool doSaveChanges = true);
		void SaveEDUTEAMRUNDOWN(EDUTEAMRUNDOWNDto eduteamrundown, bool doSaveChanges = true);
		void SaveEDUTEAMRUNDOWNs(IEnumerable<EDUTEAMRUNDOWNDto> eduteamrundowns, bool doSaveChanges = true);


		#endregion EDUTEAMRUNDOWN CRUD Operations


		#region EDUTEAMMEMBERRUNDOWN_TRANSLOG CRUD Operations


		IEDUTEAMMEMBERRUNDOWN_TRANSLOGService EDUTEAMMEMBERRUNDOWN_TRANSLOGService { get; }
		IQueryable<EDUTEAMMEMBERRUNDOWN_TRANSLOG> EDUTEAMMEMBERRUNDOWN_TRANSLOGs { get; }
		IQueryable<EDUTEAMMEMBERRUNDOWN_TRANSLOG> ReadEDUTEAMMEMBERRUNDOWN_TRANSLOGs(Expression<Func<EDUTEAMMEMBERRUNDOWN_TRANSLOG, bool>> filter, int dummy);
		IEnumerable<EDUTEAMMEMBERRUNDOWN_TRANSLOGDto> ReadEDUTEAMMEMBERRUNDOWN_TRANSLOGs();
		IEnumerable<EDUTEAMMEMBERRUNDOWN_TRANSLOGDto> ReadEDUTEAMMEMBERRUNDOWN_TRANSLOGs(Expression<Func<EDUTEAMMEMBERRUNDOWN_TRANSLOG, bool>> filter);
		IEnumerable<EDUTEAMMEMBERRUNDOWN_TRANSLOGDto> ReadEDUTEAMMEMBERRUNDOWN_TRANSLOGs(ISpecification<EDUTEAMMEMBERRUNDOWN_TRANSLOG> specification);
		IEnumerable<EDUTEAMMEMBERRUNDOWN_TRANSLOGDto> ReadEDUTEAMMEMBERRUNDOWN_TRANSLOGs(IQueryable<EDUTEAMMEMBERRUNDOWN_TRANSLOG> query);
		IEnumerable<EDUTEAMMEMBERRUNDOWN_TRANSLOGDto> ReadEDUTEAMMEMBERRUNDOWN_TRANSLOGs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUTEAMMEMBERRUNDOWN_TRANSLOGDto> ReadEDUTEAMMEMBERRUNDOWN_TRANSLOGs(object[] keyWords);
		IEnumerable<EDUTEAMMEMBERRUNDOWN_TRANSLOGDto> ReadEDUTEAMMEMBERRUNDOWN_TRANSLOGsPaged(int startIndex, int pageSize);
		IEnumerable<EDUTEAMMEMBERRUNDOWN_TRANSLOGDto> ReadEDUTEAMMEMBERRUNDOWN_TRANSLOGsPaged(IQueryable<EDUTEAMMEMBERRUNDOWN_TRANSLOG> source, int pageIndex, int pageSize);
		IEnumerable<EDUTEAMMEMBERRUNDOWN_TRANSLOGDto> ReadEDUTEAMMEMBERRUNDOWN_TRANSLOGsPaged(IQueryable<EDUTEAMMEMBERRUNDOWN_TRANSLOG> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUTEAMMEMBERRUNDOWN_TRANSLOGDto> ReadEDUTEAMMEMBERRUNDOWN_TRANSLOGsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUTEAMMEMBERRUNDOWN_TRANSLOGDto> ReadEDUTEAMMEMBERRUNDOWN_TRANSLOGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUTEAMMEMBERRUNDOWN_TRANSLOGDto> ReadEDUTEAMMEMBERRUNDOWN_TRANSLOGsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUTEAMMEMBERRUNDOWN_TRANSLOG, bool>> filter);
		EDUTEAMMEMBERRUNDOWN_TRANSLOGDto ReadEDUTEAMMEMBERRUNDOWN_TRANSLOGs(string dtoKey);
		int CountEDUTEAMMEMBERRUNDOWN_TRANSLOGs();
		int CountEDUTEAMMEMBERRUNDOWN_TRANSLOGs(string filterExpression);
		int CountEDUTEAMMEMBERRUNDOWN_TRANSLOGs(Expression<Func<EDUTEAMMEMBERRUNDOWN_TRANSLOG, bool>> filter);
		string CreateEDUTEAMMEMBERRUNDOWN_TRANSLOG(EDUTEAMMEMBERRUNDOWN_TRANSLOGDto eduteammemberrundown_translog, bool doSaveChanges = true);
		void UpdateEDUTEAMMEMBERRUNDOWN_TRANSLOG(EDUTEAMMEMBERRUNDOWN_TRANSLOGDto eduteammemberrundown_translog, bool doSaveChanges = true);
		void UpdateEDUTEAMMEMBERRUNDOWN_TRANSLOGs(IEnumerable<EDUTEAMMEMBERRUNDOWN_TRANSLOGDto> eduteammemberrundown_translogs, bool doSaveChanges = true);
		void DeleteEDUTEAMMEMBERRUNDOWN_TRANSLOG(EDUTEAMMEMBERRUNDOWN_TRANSLOGDto eduteammemberrundown_translog, bool doSaveChanges = true);
		void DeleteEDUTEAMMEMBERRUNDOWN_TRANSLOGs(IEnumerable<EDUTEAMMEMBERRUNDOWN_TRANSLOGDto> eduteammemberrundown_translogs, bool doSaveChanges = true);
		void SaveEDUTEAMMEMBERRUNDOWN_TRANSLOG(EDUTEAMMEMBERRUNDOWN_TRANSLOGDto eduteammemberrundown_translog, bool doSaveChanges = true);
		void SaveEDUTEAMMEMBERRUNDOWN_TRANSLOGs(IEnumerable<EDUTEAMMEMBERRUNDOWN_TRANSLOGDto> eduteammemberrundown_translogs, bool doSaveChanges = true);


		#endregion EDUTEAMMEMBERRUNDOWN_TRANSLOG CRUD Operations


		#region EDUTEAMMEMBERRUNDOWN CRUD Operations


		IEDUTEAMMEMBERRUNDOWNService EDUTEAMMEMBERRUNDOWNService { get; }
		IQueryable<EDUTEAMMEMBERRUNDOWN> EDUTEAMMEMBERRUNDOWNs { get; }
		IQueryable<EDUTEAMMEMBERRUNDOWN> ReadEDUTEAMMEMBERRUNDOWNs(Expression<Func<EDUTEAMMEMBERRUNDOWN, bool>> filter, int dummy);
		IEnumerable<EDUTEAMMEMBERRUNDOWNDto> ReadEDUTEAMMEMBERRUNDOWNs();
		IEnumerable<EDUTEAMMEMBERRUNDOWNDto> ReadEDUTEAMMEMBERRUNDOWNs(Expression<Func<EDUTEAMMEMBERRUNDOWN, bool>> filter);
		IEnumerable<EDUTEAMMEMBERRUNDOWNDto> ReadEDUTEAMMEMBERRUNDOWNs(ISpecification<EDUTEAMMEMBERRUNDOWN> specification);
		IEnumerable<EDUTEAMMEMBERRUNDOWNDto> ReadEDUTEAMMEMBERRUNDOWNs(IQueryable<EDUTEAMMEMBERRUNDOWN> query);
		IEnumerable<EDUTEAMMEMBERRUNDOWNDto> ReadEDUTEAMMEMBERRUNDOWNs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUTEAMMEMBERRUNDOWNDto> ReadEDUTEAMMEMBERRUNDOWNs(object[] keyWords);
		IEnumerable<EDUTEAMMEMBERRUNDOWNDto> ReadEDUTEAMMEMBERRUNDOWNsPaged(int startIndex, int pageSize);
		IEnumerable<EDUTEAMMEMBERRUNDOWNDto> ReadEDUTEAMMEMBERRUNDOWNsPaged(IQueryable<EDUTEAMMEMBERRUNDOWN> source, int pageIndex, int pageSize);
		IEnumerable<EDUTEAMMEMBERRUNDOWNDto> ReadEDUTEAMMEMBERRUNDOWNsPaged(IQueryable<EDUTEAMMEMBERRUNDOWN> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUTEAMMEMBERRUNDOWNDto> ReadEDUTEAMMEMBERRUNDOWNsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUTEAMMEMBERRUNDOWNDto> ReadEDUTEAMMEMBERRUNDOWNsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUTEAMMEMBERRUNDOWNDto> ReadEDUTEAMMEMBERRUNDOWNsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUTEAMMEMBERRUNDOWN, bool>> filter);
		EDUTEAMMEMBERRUNDOWNDto ReadEDUTEAMMEMBERRUNDOWNs(string dtoKey);
		int CountEDUTEAMMEMBERRUNDOWNs();
		int CountEDUTEAMMEMBERRUNDOWNs(string filterExpression);
		int CountEDUTEAMMEMBERRUNDOWNs(Expression<Func<EDUTEAMMEMBERRUNDOWN, bool>> filter);
		string CreateEDUTEAMMEMBERRUNDOWN(EDUTEAMMEMBERRUNDOWNDto eduteammemberrundown, bool doSaveChanges = true);
		void UpdateEDUTEAMMEMBERRUNDOWN(EDUTEAMMEMBERRUNDOWNDto eduteammemberrundown, bool doSaveChanges = true);
		void UpdateEDUTEAMMEMBERRUNDOWNs(IEnumerable<EDUTEAMMEMBERRUNDOWNDto> eduteammemberrundowns, bool doSaveChanges = true);
		void DeleteEDUTEAMMEMBERRUNDOWN(EDUTEAMMEMBERRUNDOWNDto eduteammemberrundown, bool doSaveChanges = true);
		void DeleteEDUTEAMMEMBERRUNDOWNs(IEnumerable<EDUTEAMMEMBERRUNDOWNDto> eduteammemberrundowns, bool doSaveChanges = true);
		void SaveEDUTEAMMEMBERRUNDOWN(EDUTEAMMEMBERRUNDOWNDto eduteammemberrundown, bool doSaveChanges = true);
		void SaveEDUTEAMMEMBERRUNDOWNs(IEnumerable<EDUTEAMMEMBERRUNDOWNDto> eduteammemberrundowns, bool doSaveChanges = true);


		#endregion EDUTEAMMEMBERRUNDOWN CRUD Operations


		#region EDUTEAMMEMBER CRUD Operations


		IEDUTEAMMEMBERService EDUTEAMMEMBERService { get; }
		IQueryable<EDUTEAMMEMBER> EDUTEAMMEMBERs { get; }
		IQueryable<EDUTEAMMEMBER> ReadEDUTEAMMEMBERs(Expression<Func<EDUTEAMMEMBER, bool>> filter, int dummy);
		IEnumerable<EDUTEAMMEMBERDto> ReadEDUTEAMMEMBERs();
		IEnumerable<EDUTEAMMEMBERDto> ReadEDUTEAMMEMBERs(Expression<Func<EDUTEAMMEMBER, bool>> filter);
		IEnumerable<EDUTEAMMEMBERDto> ReadEDUTEAMMEMBERs(ISpecification<EDUTEAMMEMBER> specification);
		IEnumerable<EDUTEAMMEMBERDto> ReadEDUTEAMMEMBERs(IQueryable<EDUTEAMMEMBER> query);
		IEnumerable<EDUTEAMMEMBERDto> ReadEDUTEAMMEMBERs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUTEAMMEMBERDto> ReadEDUTEAMMEMBERs(object[] keyWords);
		IEnumerable<EDUTEAMMEMBERDto> ReadEDUTEAMMEMBERsPaged(int startIndex, int pageSize);
		IEnumerable<EDUTEAMMEMBERDto> ReadEDUTEAMMEMBERsPaged(IQueryable<EDUTEAMMEMBER> source, int pageIndex, int pageSize);
		IEnumerable<EDUTEAMMEMBERDto> ReadEDUTEAMMEMBERsPaged(IQueryable<EDUTEAMMEMBER> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUTEAMMEMBERDto> ReadEDUTEAMMEMBERsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUTEAMMEMBERDto> ReadEDUTEAMMEMBERsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUTEAMMEMBERDto> ReadEDUTEAMMEMBERsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUTEAMMEMBER, bool>> filter);
		EDUTEAMMEMBERDto ReadEDUTEAMMEMBERs(string dtoKey);
		int CountEDUTEAMMEMBERs();
		int CountEDUTEAMMEMBERs(string filterExpression);
		int CountEDUTEAMMEMBERs(Expression<Func<EDUTEAMMEMBER, bool>> filter);
		string CreateEDUTEAMMEMBER(EDUTEAMMEMBERDto eduteammember, bool doSaveChanges = true);
		void UpdateEDUTEAMMEMBER(EDUTEAMMEMBERDto eduteammember, bool doSaveChanges = true);
		void UpdateEDUTEAMMEMBERs(IEnumerable<EDUTEAMMEMBERDto> eduteammembers, bool doSaveChanges = true);
		void DeleteEDUTEAMMEMBER(EDUTEAMMEMBERDto eduteammember, bool doSaveChanges = true);
		void DeleteEDUTEAMMEMBERs(IEnumerable<EDUTEAMMEMBERDto> eduteammembers, bool doSaveChanges = true);
		void SaveEDUTEAMMEMBER(EDUTEAMMEMBERDto eduteammember, bool doSaveChanges = true);
		void SaveEDUTEAMMEMBERs(IEnumerable<EDUTEAMMEMBERDto> eduteammembers, bool doSaveChanges = true);


		#endregion EDUTEAMMEMBER CRUD Operations


		#region EDUTEAM CRUD Operations


		IEDUTEAMService EDUTEAMService { get; }
		IQueryable<EDUTEAM> EDUTEAMs { get; }
		IQueryable<EDUTEAM> ReadEDUTEAMs(Expression<Func<EDUTEAM, bool>> filter, int dummy);
		IEnumerable<EDUTEAMDto> ReadEDUTEAMs();
		IEnumerable<EDUTEAMDto> ReadEDUTEAMs(Expression<Func<EDUTEAM, bool>> filter);
		IEnumerable<EDUTEAMDto> ReadEDUTEAMs(ISpecification<EDUTEAM> specification);
		IEnumerable<EDUTEAMDto> ReadEDUTEAMs(IQueryable<EDUTEAM> query);
		IEnumerable<EDUTEAMDto> ReadEDUTEAMs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUTEAMDto> ReadEDUTEAMs(object[] keyWords);
		IEnumerable<EDUTEAMDto> ReadEDUTEAMsPaged(int startIndex, int pageSize);
		IEnumerable<EDUTEAMDto> ReadEDUTEAMsPaged(IQueryable<EDUTEAM> source, int pageIndex, int pageSize);
		IEnumerable<EDUTEAMDto> ReadEDUTEAMsPaged(IQueryable<EDUTEAM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUTEAMDto> ReadEDUTEAMsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUTEAMDto> ReadEDUTEAMsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUTEAMDto> ReadEDUTEAMsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUTEAM, bool>> filter);
		EDUTEAMDto ReadEDUTEAMs(string dtoKey);
		int CountEDUTEAMs();
		int CountEDUTEAMs(string filterExpression);
		int CountEDUTEAMs(Expression<Func<EDUTEAM, bool>> filter);
		string CreateEDUTEAM(EDUTEAMDto eduteam, bool doSaveChanges = true);
		void UpdateEDUTEAM(EDUTEAMDto eduteam, bool doSaveChanges = true);
		void UpdateEDUTEAMs(IEnumerable<EDUTEAMDto> eduteams, bool doSaveChanges = true);
		void DeleteEDUTEAM(EDUTEAMDto eduteam, bool doSaveChanges = true);
		void DeleteEDUTEAMs(IEnumerable<EDUTEAMDto> eduteams, bool doSaveChanges = true);
		void SaveEDUTEAM(EDUTEAMDto eduteam, bool doSaveChanges = true);
		void SaveEDUTEAMs(IEnumerable<EDUTEAMDto> eduteams, bool doSaveChanges = true);


		#endregion EDUTEAM CRUD Operations


		#region EDUTEACHERTYPE CRUD Operations


		IEDUTEACHERTYPEService EDUTEACHERTYPEService { get; }
		IQueryable<EDUTEACHERTYPE> EDUTEACHERTYPEs { get; }
		IQueryable<EDUTEACHERTYPE> ReadEDUTEACHERTYPEs(Expression<Func<EDUTEACHERTYPE, bool>> filter, int dummy);
		IEnumerable<EDUTEACHERTYPEDto> ReadEDUTEACHERTYPEs();
		IEnumerable<EDUTEACHERTYPEDto> ReadEDUTEACHERTYPEs(Expression<Func<EDUTEACHERTYPE, bool>> filter);
		IEnumerable<EDUTEACHERTYPEDto> ReadEDUTEACHERTYPEs(ISpecification<EDUTEACHERTYPE> specification);
		IEnumerable<EDUTEACHERTYPEDto> ReadEDUTEACHERTYPEs(IQueryable<EDUTEACHERTYPE> query);
		IEnumerable<EDUTEACHERTYPEDto> ReadEDUTEACHERTYPEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUTEACHERTYPEDto> ReadEDUTEACHERTYPEs(object[] keyWords);
		IEnumerable<EDUTEACHERTYPEDto> ReadEDUTEACHERTYPEsPaged(int startIndex, int pageSize);
		IEnumerable<EDUTEACHERTYPEDto> ReadEDUTEACHERTYPEsPaged(IQueryable<EDUTEACHERTYPE> source, int pageIndex, int pageSize);
		IEnumerable<EDUTEACHERTYPEDto> ReadEDUTEACHERTYPEsPaged(IQueryable<EDUTEACHERTYPE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUTEACHERTYPEDto> ReadEDUTEACHERTYPEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUTEACHERTYPEDto> ReadEDUTEACHERTYPEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUTEACHERTYPEDto> ReadEDUTEACHERTYPEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUTEACHERTYPE, bool>> filter);
		EDUTEACHERTYPEDto ReadEDUTEACHERTYPEs(string dtoKey);
		int CountEDUTEACHERTYPEs();
		int CountEDUTEACHERTYPEs(string filterExpression);
		int CountEDUTEACHERTYPEs(Expression<Func<EDUTEACHERTYPE, bool>> filter);
		string CreateEDUTEACHERTYPE(EDUTEACHERTYPEDto eduteachertype, bool doSaveChanges = true);
		void UpdateEDUTEACHERTYPE(EDUTEACHERTYPEDto eduteachertype, bool doSaveChanges = true);
		void UpdateEDUTEACHERTYPEs(IEnumerable<EDUTEACHERTYPEDto> eduteachertypes, bool doSaveChanges = true);
		void DeleteEDUTEACHERTYPE(EDUTEACHERTYPEDto eduteachertype, bool doSaveChanges = true);
		void DeleteEDUTEACHERTYPEs(IEnumerable<EDUTEACHERTYPEDto> eduteachertypes, bool doSaveChanges = true);
		void SaveEDUTEACHERTYPE(EDUTEACHERTYPEDto eduteachertype, bool doSaveChanges = true);
		void SaveEDUTEACHERTYPEs(IEnumerable<EDUTEACHERTYPEDto> eduteachertypes, bool doSaveChanges = true);


		#endregion EDUTEACHERTYPE CRUD Operations


		#region EDUSTOPACTSCHEDULE CRUD Operations


		IEDUSTOPACTSCHEDULEService EDUSTOPACTSCHEDULEService { get; }
		IQueryable<EDUSTOPACTSCHEDULE> EDUSTOPACTSCHEDULEs { get; }
		IQueryable<EDUSTOPACTSCHEDULE> ReadEDUSTOPACTSCHEDULEs(Expression<Func<EDUSTOPACTSCHEDULE, bool>> filter, int dummy);
		IEnumerable<EDUSTOPACTSCHEDULEDto> ReadEDUSTOPACTSCHEDULEs();
		IEnumerable<EDUSTOPACTSCHEDULEDto> ReadEDUSTOPACTSCHEDULEs(Expression<Func<EDUSTOPACTSCHEDULE, bool>> filter);
		IEnumerable<EDUSTOPACTSCHEDULEDto> ReadEDUSTOPACTSCHEDULEs(ISpecification<EDUSTOPACTSCHEDULE> specification);
		IEnumerable<EDUSTOPACTSCHEDULEDto> ReadEDUSTOPACTSCHEDULEs(IQueryable<EDUSTOPACTSCHEDULE> query);
		IEnumerable<EDUSTOPACTSCHEDULEDto> ReadEDUSTOPACTSCHEDULEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUSTOPACTSCHEDULEDto> ReadEDUSTOPACTSCHEDULEs(object[] keyWords);
		IEnumerable<EDUSTOPACTSCHEDULEDto> ReadEDUSTOPACTSCHEDULEsPaged(int startIndex, int pageSize);
		IEnumerable<EDUSTOPACTSCHEDULEDto> ReadEDUSTOPACTSCHEDULEsPaged(IQueryable<EDUSTOPACTSCHEDULE> source, int pageIndex, int pageSize);
		IEnumerable<EDUSTOPACTSCHEDULEDto> ReadEDUSTOPACTSCHEDULEsPaged(IQueryable<EDUSTOPACTSCHEDULE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUSTOPACTSCHEDULEDto> ReadEDUSTOPACTSCHEDULEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUSTOPACTSCHEDULEDto> ReadEDUSTOPACTSCHEDULEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUSTOPACTSCHEDULEDto> ReadEDUSTOPACTSCHEDULEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUSTOPACTSCHEDULE, bool>> filter);
		EDUSTOPACTSCHEDULEDto ReadEDUSTOPACTSCHEDULEs(string dtoKey);
		int CountEDUSTOPACTSCHEDULEs();
		int CountEDUSTOPACTSCHEDULEs(string filterExpression);
		int CountEDUSTOPACTSCHEDULEs(Expression<Func<EDUSTOPACTSCHEDULE, bool>> filter);
		string CreateEDUSTOPACTSCHEDULE(EDUSTOPACTSCHEDULEDto edustopactschedule, bool doSaveChanges = true);
		void UpdateEDUSTOPACTSCHEDULE(EDUSTOPACTSCHEDULEDto edustopactschedule, bool doSaveChanges = true);
		void UpdateEDUSTOPACTSCHEDULEs(IEnumerable<EDUSTOPACTSCHEDULEDto> edustopactschedules, bool doSaveChanges = true);
		void DeleteEDUSTOPACTSCHEDULE(EDUSTOPACTSCHEDULEDto edustopactschedule, bool doSaveChanges = true);
		void DeleteEDUSTOPACTSCHEDULEs(IEnumerable<EDUSTOPACTSCHEDULEDto> edustopactschedules, bool doSaveChanges = true);
		void SaveEDUSTOPACTSCHEDULE(EDUSTOPACTSCHEDULEDto edustopactschedule, bool doSaveChanges = true);
		void SaveEDUSTOPACTSCHEDULEs(IEnumerable<EDUSTOPACTSCHEDULEDto> edustopactschedules, bool doSaveChanges = true);


		#endregion EDUSTOPACTSCHEDULE CRUD Operations


		#region EDUSTOPACTATTACHMENT CRUD Operations


		IEDUSTOPACTATTACHMENTService EDUSTOPACTATTACHMENTService { get; }
		IQueryable<EDUSTOPACTATTACHMENT> EDUSTOPACTATTACHMENTs { get; }
		IQueryable<EDUSTOPACTATTACHMENT> ReadEDUSTOPACTATTACHMENTs(Expression<Func<EDUSTOPACTATTACHMENT, bool>> filter, int dummy);
		IEnumerable<EDUSTOPACTATTACHMENTDto> ReadEDUSTOPACTATTACHMENTs();
		IEnumerable<EDUSTOPACTATTACHMENTDto> ReadEDUSTOPACTATTACHMENTs(Expression<Func<EDUSTOPACTATTACHMENT, bool>> filter);
		IEnumerable<EDUSTOPACTATTACHMENTDto> ReadEDUSTOPACTATTACHMENTs(ISpecification<EDUSTOPACTATTACHMENT> specification);
		IEnumerable<EDUSTOPACTATTACHMENTDto> ReadEDUSTOPACTATTACHMENTs(IQueryable<EDUSTOPACTATTACHMENT> query);
		IEnumerable<EDUSTOPACTATTACHMENTDto> ReadEDUSTOPACTATTACHMENTs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUSTOPACTATTACHMENTDto> ReadEDUSTOPACTATTACHMENTs(object[] keyWords);
		IEnumerable<EDUSTOPACTATTACHMENTDto> ReadEDUSTOPACTATTACHMENTsPaged(int startIndex, int pageSize);
		IEnumerable<EDUSTOPACTATTACHMENTDto> ReadEDUSTOPACTATTACHMENTsPaged(IQueryable<EDUSTOPACTATTACHMENT> source, int pageIndex, int pageSize);
		IEnumerable<EDUSTOPACTATTACHMENTDto> ReadEDUSTOPACTATTACHMENTsPaged(IQueryable<EDUSTOPACTATTACHMENT> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUSTOPACTATTACHMENTDto> ReadEDUSTOPACTATTACHMENTsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUSTOPACTATTACHMENTDto> ReadEDUSTOPACTATTACHMENTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUSTOPACTATTACHMENTDto> ReadEDUSTOPACTATTACHMENTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUSTOPACTATTACHMENT, bool>> filter);
		EDUSTOPACTATTACHMENTDto ReadEDUSTOPACTATTACHMENTs(string dtoKey);
		int CountEDUSTOPACTATTACHMENTs();
		int CountEDUSTOPACTATTACHMENTs(string filterExpression);
		int CountEDUSTOPACTATTACHMENTs(Expression<Func<EDUSTOPACTATTACHMENT, bool>> filter);
		string CreateEDUSTOPACTATTACHMENT(EDUSTOPACTATTACHMENTDto edustopactattachment, bool doSaveChanges = true);
		void UpdateEDUSTOPACTATTACHMENT(EDUSTOPACTATTACHMENTDto edustopactattachment, bool doSaveChanges = true);
		void UpdateEDUSTOPACTATTACHMENTs(IEnumerable<EDUSTOPACTATTACHMENTDto> edustopactattachments, bool doSaveChanges = true);
		void DeleteEDUSTOPACTATTACHMENT(EDUSTOPACTATTACHMENTDto edustopactattachment, bool doSaveChanges = true);
		void DeleteEDUSTOPACTATTACHMENTs(IEnumerable<EDUSTOPACTATTACHMENTDto> edustopactattachments, bool doSaveChanges = true);
		void SaveEDUSTOPACTATTACHMENT(EDUSTOPACTATTACHMENTDto edustopactattachment, bool doSaveChanges = true);
		void SaveEDUSTOPACTATTACHMENTs(IEnumerable<EDUSTOPACTATTACHMENTDto> edustopactattachments, bool doSaveChanges = true);


		#endregion EDUSTOPACTATTACHMENT CRUD Operations


		#region EDUSTOP CRUD Operations


		IEDUSTOPService EDUSTOPService { get; }
		IQueryable<EDUSTOP> EDUSTOPs { get; }
		IQueryable<EDUSTOP> ReadEDUSTOPs(Expression<Func<EDUSTOP, bool>> filter, int dummy);
		IEnumerable<EDUSTOPDto> ReadEDUSTOPs();
		IEnumerable<EDUSTOPDto> ReadEDUSTOPs(Expression<Func<EDUSTOP, bool>> filter);
		IEnumerable<EDUSTOPDto> ReadEDUSTOPs(ISpecification<EDUSTOP> specification);
		IEnumerable<EDUSTOPDto> ReadEDUSTOPs(IQueryable<EDUSTOP> query);
		IEnumerable<EDUSTOPDto> ReadEDUSTOPs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUSTOPDto> ReadEDUSTOPs(object[] keyWords);
		IEnumerable<EDUSTOPDto> ReadEDUSTOPsPaged(int startIndex, int pageSize);
		IEnumerable<EDUSTOPDto> ReadEDUSTOPsPaged(IQueryable<EDUSTOP> source, int pageIndex, int pageSize);
		IEnumerable<EDUSTOPDto> ReadEDUSTOPsPaged(IQueryable<EDUSTOP> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUSTOPDto> ReadEDUSTOPsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUSTOPDto> ReadEDUSTOPsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUSTOPDto> ReadEDUSTOPsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUSTOP, bool>> filter);
		EDUSTOPDto ReadEDUSTOPs(string dtoKey);
		int CountEDUSTOPs();
		int CountEDUSTOPs(string filterExpression);
		int CountEDUSTOPs(Expression<Func<EDUSTOP, bool>> filter);
		string CreateEDUSTOP(EDUSTOPDto edustop, bool doSaveChanges = true);
		void UpdateEDUSTOP(EDUSTOPDto edustop, bool doSaveChanges = true);
		void UpdateEDUSTOPs(IEnumerable<EDUSTOPDto> edustops, bool doSaveChanges = true);
		void DeleteEDUSTOP(EDUSTOPDto edustop, bool doSaveChanges = true);
		void DeleteEDUSTOPs(IEnumerable<EDUSTOPDto> edustops, bool doSaveChanges = true);
		void SaveEDUSTOP(EDUSTOPDto edustop, bool doSaveChanges = true);
		void SaveEDUSTOPs(IEnumerable<EDUSTOPDto> edustops, bool doSaveChanges = true);


		#endregion EDUSTOP CRUD Operations


		#region EDUSETTING CRUD Operations


		IEDUSETTINGService EDUSETTINGService { get; }
		IQueryable<EDUSETTING> EDUSETTINGs { get; }
		IQueryable<EDUSETTING> ReadEDUSETTINGs(Expression<Func<EDUSETTING, bool>> filter, int dummy);
		IEnumerable<EDUSETTINGDto> ReadEDUSETTINGs();
		IEnumerable<EDUSETTINGDto> ReadEDUSETTINGs(Expression<Func<EDUSETTING, bool>> filter);
		IEnumerable<EDUSETTINGDto> ReadEDUSETTINGs(ISpecification<EDUSETTING> specification);
		IEnumerable<EDUSETTINGDto> ReadEDUSETTINGs(IQueryable<EDUSETTING> query);
		IEnumerable<EDUSETTINGDto> ReadEDUSETTINGs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUSETTINGDto> ReadEDUSETTINGs(object[] keyWords);
		IEnumerable<EDUSETTINGDto> ReadEDUSETTINGsPaged(int startIndex, int pageSize);
		IEnumerable<EDUSETTINGDto> ReadEDUSETTINGsPaged(IQueryable<EDUSETTING> source, int pageIndex, int pageSize);
		IEnumerable<EDUSETTINGDto> ReadEDUSETTINGsPaged(IQueryable<EDUSETTING> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUSETTINGDto> ReadEDUSETTINGsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUSETTINGDto> ReadEDUSETTINGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUSETTINGDto> ReadEDUSETTINGsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUSETTING, bool>> filter);
		EDUSETTINGDto ReadEDUSETTINGs(string dtoKey);
		int CountEDUSETTINGs();
		int CountEDUSETTINGs(string filterExpression);
		int CountEDUSETTINGs(Expression<Func<EDUSETTING, bool>> filter);
		string CreateEDUSETTING(EDUSETTINGDto edusetting, bool doSaveChanges = true);
		void UpdateEDUSETTING(EDUSETTINGDto edusetting, bool doSaveChanges = true);
		void UpdateEDUSETTINGs(IEnumerable<EDUSETTINGDto> edusettings, bool doSaveChanges = true);
		void DeleteEDUSETTING(EDUSETTINGDto edusetting, bool doSaveChanges = true);
		void DeleteEDUSETTINGs(IEnumerable<EDUSETTINGDto> edusettings, bool doSaveChanges = true);
		void SaveEDUSETTING(EDUSETTINGDto edusetting, bool doSaveChanges = true);
		void SaveEDUSETTINGs(IEnumerable<EDUSETTINGDto> edusettings, bool doSaveChanges = true);


		#endregion EDUSETTING CRUD Operations


		#region EDUSENTENCE CRUD Operations


		IEDUSENTENCEService EDUSENTENCEService { get; }
		IQueryable<EDUSENTENCE> EDUSENTENCEs { get; }
		IQueryable<EDUSENTENCE> ReadEDUSENTENCEs(Expression<Func<EDUSENTENCE, bool>> filter, int dummy);
		IEnumerable<EDUSENTENCEDto> ReadEDUSENTENCEs();
		IEnumerable<EDUSENTENCEDto> ReadEDUSENTENCEs(Expression<Func<EDUSENTENCE, bool>> filter);
		IEnumerable<EDUSENTENCEDto> ReadEDUSENTENCEs(ISpecification<EDUSENTENCE> specification);
		IEnumerable<EDUSENTENCEDto> ReadEDUSENTENCEs(IQueryable<EDUSENTENCE> query);
		IEnumerable<EDUSENTENCEDto> ReadEDUSENTENCEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUSENTENCEDto> ReadEDUSENTENCEs(object[] keyWords);
		IEnumerable<EDUSENTENCEDto> ReadEDUSENTENCEsPaged(int startIndex, int pageSize);
		IEnumerable<EDUSENTENCEDto> ReadEDUSENTENCEsPaged(IQueryable<EDUSENTENCE> source, int pageIndex, int pageSize);
		IEnumerable<EDUSENTENCEDto> ReadEDUSENTENCEsPaged(IQueryable<EDUSENTENCE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUSENTENCEDto> ReadEDUSENTENCEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUSENTENCEDto> ReadEDUSENTENCEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUSENTENCEDto> ReadEDUSENTENCEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUSENTENCE, bool>> filter);
		EDUSENTENCEDto ReadEDUSENTENCEs(string dtoKey);
		int CountEDUSENTENCEs();
		int CountEDUSENTENCEs(string filterExpression);
		int CountEDUSENTENCEs(Expression<Func<EDUSENTENCE, bool>> filter);
		string CreateEDUSENTENCE(EDUSENTENCEDto edusentence, bool doSaveChanges = true);
		void UpdateEDUSENTENCE(EDUSENTENCEDto edusentence, bool doSaveChanges = true);
		void UpdateEDUSENTENCEs(IEnumerable<EDUSENTENCEDto> edusentences, bool doSaveChanges = true);
		void DeleteEDUSENTENCE(EDUSENTENCEDto edusentence, bool doSaveChanges = true);
		void DeleteEDUSENTENCEs(IEnumerable<EDUSENTENCEDto> edusentences, bool doSaveChanges = true);
		void SaveEDUSENTENCE(EDUSENTENCEDto edusentence, bool doSaveChanges = true);
		void SaveEDUSENTENCEs(IEnumerable<EDUSENTENCEDto> edusentences, bool doSaveChanges = true);


		#endregion EDUSENTENCE CRUD Operations


		#region EDUSCORE CRUD Operations


		IEDUSCOREService EDUSCOREService { get; }
		IQueryable<EDUSCORE> EDUSCOREs { get; }
		IQueryable<EDUSCORE> ReadEDUSCOREs(Expression<Func<EDUSCORE, bool>> filter, int dummy);
		IEnumerable<EDUSCOREDto> ReadEDUSCOREs();
		IEnumerable<EDUSCOREDto> ReadEDUSCOREs(Expression<Func<EDUSCORE, bool>> filter);
		IEnumerable<EDUSCOREDto> ReadEDUSCOREs(ISpecification<EDUSCORE> specification);
		IEnumerable<EDUSCOREDto> ReadEDUSCOREs(IQueryable<EDUSCORE> query);
		IEnumerable<EDUSCOREDto> ReadEDUSCOREs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUSCOREDto> ReadEDUSCOREs(object[] keyWords);
		IEnumerable<EDUSCOREDto> ReadEDUSCOREsPaged(int startIndex, int pageSize);
		IEnumerable<EDUSCOREDto> ReadEDUSCOREsPaged(IQueryable<EDUSCORE> source, int pageIndex, int pageSize);
		IEnumerable<EDUSCOREDto> ReadEDUSCOREsPaged(IQueryable<EDUSCORE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUSCOREDto> ReadEDUSCOREsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUSCOREDto> ReadEDUSCOREsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUSCOREDto> ReadEDUSCOREsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUSCORE, bool>> filter);
		EDUSCOREDto ReadEDUSCOREs(string dtoKey);
		int CountEDUSCOREs();
		int CountEDUSCOREs(string filterExpression);
		int CountEDUSCOREs(Expression<Func<EDUSCORE, bool>> filter);
		string CreateEDUSCORE(EDUSCOREDto eduscore, bool doSaveChanges = true);
		void UpdateEDUSCORE(EDUSCOREDto eduscore, bool doSaveChanges = true);
		void UpdateEDUSCOREs(IEnumerable<EDUSCOREDto> eduscores, bool doSaveChanges = true);
		void DeleteEDUSCORE(EDUSCOREDto eduscore, bool doSaveChanges = true);
		void DeleteEDUSCOREs(IEnumerable<EDUSCOREDto> eduscores, bool doSaveChanges = true);
		void SaveEDUSCORE(EDUSCOREDto eduscore, bool doSaveChanges = true);
		void SaveEDUSCOREs(IEnumerable<EDUSCOREDto> eduscores, bool doSaveChanges = true);


		#endregion EDUSCORE CRUD Operations


		#region EDUREFTEACHER CRUD Operations


		IEDUREFTEACHERService EDUREFTEACHERService { get; }
		IQueryable<EDUREFTEACHER> EDUREFTEACHERs { get; }
		IQueryable<EDUREFTEACHER> ReadEDUREFTEACHERs(Expression<Func<EDUREFTEACHER, bool>> filter, int dummy);
		IEnumerable<EDUREFTEACHERDto> ReadEDUREFTEACHERs();
		IEnumerable<EDUREFTEACHERDto> ReadEDUREFTEACHERs(Expression<Func<EDUREFTEACHER, bool>> filter);
		IEnumerable<EDUREFTEACHERDto> ReadEDUREFTEACHERs(ISpecification<EDUREFTEACHER> specification);
		IEnumerable<EDUREFTEACHERDto> ReadEDUREFTEACHERs(IQueryable<EDUREFTEACHER> query);
		IEnumerable<EDUREFTEACHERDto> ReadEDUREFTEACHERs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUREFTEACHERDto> ReadEDUREFTEACHERs(object[] keyWords);
		IEnumerable<EDUREFTEACHERDto> ReadEDUREFTEACHERsPaged(int startIndex, int pageSize);
		IEnumerable<EDUREFTEACHERDto> ReadEDUREFTEACHERsPaged(IQueryable<EDUREFTEACHER> source, int pageIndex, int pageSize);
		IEnumerable<EDUREFTEACHERDto> ReadEDUREFTEACHERsPaged(IQueryable<EDUREFTEACHER> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUREFTEACHERDto> ReadEDUREFTEACHERsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUREFTEACHERDto> ReadEDUREFTEACHERsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUREFTEACHERDto> ReadEDUREFTEACHERsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUREFTEACHER, bool>> filter);
		EDUREFTEACHERDto ReadEDUREFTEACHERs(string dtoKey);
		int CountEDUREFTEACHERs();
		int CountEDUREFTEACHERs(string filterExpression);
		int CountEDUREFTEACHERs(Expression<Func<EDUREFTEACHER, bool>> filter);
		string CreateEDUREFTEACHER(EDUREFTEACHERDto edurefteacher, bool doSaveChanges = true);
		void UpdateEDUREFTEACHER(EDUREFTEACHERDto edurefteacher, bool doSaveChanges = true);
		void UpdateEDUREFTEACHERs(IEnumerable<EDUREFTEACHERDto> edurefteachers, bool doSaveChanges = true);
		void DeleteEDUREFTEACHER(EDUREFTEACHERDto edurefteacher, bool doSaveChanges = true);
		void DeleteEDUREFTEACHERs(IEnumerable<EDUREFTEACHERDto> edurefteachers, bool doSaveChanges = true);
		void SaveEDUREFTEACHER(EDUREFTEACHERDto edurefteacher, bool doSaveChanges = true);
		void SaveEDUREFTEACHERs(IEnumerable<EDUREFTEACHERDto> edurefteachers, bool doSaveChanges = true);


		#endregion EDUREFTEACHER CRUD Operations


		#region EDUQUESTION CRUD Operations


		IEDUQUESTIONService EDUQUESTIONService { get; }
		IQueryable<EDUQUESTION> EDUQUESTIONs { get; }
		IQueryable<EDUQUESTION> ReadEDUQUESTIONs(Expression<Func<EDUQUESTION, bool>> filter, int dummy);
		IEnumerable<EDUQUESTIONDto> ReadEDUQUESTIONs();
		IEnumerable<EDUQUESTIONDto> ReadEDUQUESTIONs(Expression<Func<EDUQUESTION, bool>> filter);
		IEnumerable<EDUQUESTIONDto> ReadEDUQUESTIONs(ISpecification<EDUQUESTION> specification);
		IEnumerable<EDUQUESTIONDto> ReadEDUQUESTIONs(IQueryable<EDUQUESTION> query);
		IEnumerable<EDUQUESTIONDto> ReadEDUQUESTIONs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUQUESTIONDto> ReadEDUQUESTIONs(object[] keyWords);
		IEnumerable<EDUQUESTIONDto> ReadEDUQUESTIONsPaged(int startIndex, int pageSize);
		IEnumerable<EDUQUESTIONDto> ReadEDUQUESTIONsPaged(IQueryable<EDUQUESTION> source, int pageIndex, int pageSize);
		IEnumerable<EDUQUESTIONDto> ReadEDUQUESTIONsPaged(IQueryable<EDUQUESTION> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUQUESTIONDto> ReadEDUQUESTIONsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUQUESTIONDto> ReadEDUQUESTIONsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUQUESTIONDto> ReadEDUQUESTIONsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUQUESTION, bool>> filter);
		EDUQUESTIONDto ReadEDUQUESTIONs(string dtoKey);
		int CountEDUQUESTIONs();
		int CountEDUQUESTIONs(string filterExpression);
		int CountEDUQUESTIONs(Expression<Func<EDUQUESTION, bool>> filter);
		string CreateEDUQUESTION(EDUQUESTIONDto eduquestion, bool doSaveChanges = true);
		void UpdateEDUQUESTION(EDUQUESTIONDto eduquestion, bool doSaveChanges = true);
		void UpdateEDUQUESTIONs(IEnumerable<EDUQUESTIONDto> eduquestions, bool doSaveChanges = true);
		void DeleteEDUQUESTION(EDUQUESTIONDto eduquestion, bool doSaveChanges = true);
		void DeleteEDUQUESTIONs(IEnumerable<EDUQUESTIONDto> eduquestions, bool doSaveChanges = true);
		void SaveEDUQUESTION(EDUQUESTIONDto eduquestion, bool doSaveChanges = true);
		void SaveEDUQUESTIONs(IEnumerable<EDUQUESTIONDto> eduquestions, bool doSaveChanges = true);


		#endregion EDUQUESTION CRUD Operations


		#region EDUPASSPORTTEMPLATETARGET CRUD Operations


		IEDUPASSPORTTEMPLATETARGETService EDUPASSPORTTEMPLATETARGETService { get; }
		IQueryable<EDUPASSPORTTEMPLATETARGET> EDUPASSPORTTEMPLATETARGETs { get; }
		IQueryable<EDUPASSPORTTEMPLATETARGET> ReadEDUPASSPORTTEMPLATETARGETs(Expression<Func<EDUPASSPORTTEMPLATETARGET, bool>> filter, int dummy);
		IEnumerable<EDUPASSPORTTEMPLATETARGETDto> ReadEDUPASSPORTTEMPLATETARGETs();
		IEnumerable<EDUPASSPORTTEMPLATETARGETDto> ReadEDUPASSPORTTEMPLATETARGETs(Expression<Func<EDUPASSPORTTEMPLATETARGET, bool>> filter);
		IEnumerable<EDUPASSPORTTEMPLATETARGETDto> ReadEDUPASSPORTTEMPLATETARGETs(ISpecification<EDUPASSPORTTEMPLATETARGET> specification);
		IEnumerable<EDUPASSPORTTEMPLATETARGETDto> ReadEDUPASSPORTTEMPLATETARGETs(IQueryable<EDUPASSPORTTEMPLATETARGET> query);
		IEnumerable<EDUPASSPORTTEMPLATETARGETDto> ReadEDUPASSPORTTEMPLATETARGETs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUPASSPORTTEMPLATETARGETDto> ReadEDUPASSPORTTEMPLATETARGETs(object[] keyWords);
		IEnumerable<EDUPASSPORTTEMPLATETARGETDto> ReadEDUPASSPORTTEMPLATETARGETsPaged(int startIndex, int pageSize);
		IEnumerable<EDUPASSPORTTEMPLATETARGETDto> ReadEDUPASSPORTTEMPLATETARGETsPaged(IQueryable<EDUPASSPORTTEMPLATETARGET> source, int pageIndex, int pageSize);
		IEnumerable<EDUPASSPORTTEMPLATETARGETDto> ReadEDUPASSPORTTEMPLATETARGETsPaged(IQueryable<EDUPASSPORTTEMPLATETARGET> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUPASSPORTTEMPLATETARGETDto> ReadEDUPASSPORTTEMPLATETARGETsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUPASSPORTTEMPLATETARGETDto> ReadEDUPASSPORTTEMPLATETARGETsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUPASSPORTTEMPLATETARGETDto> ReadEDUPASSPORTTEMPLATETARGETsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUPASSPORTTEMPLATETARGET, bool>> filter);
		EDUPASSPORTTEMPLATETARGETDto ReadEDUPASSPORTTEMPLATETARGETs(string dtoKey);
		int CountEDUPASSPORTTEMPLATETARGETs();
		int CountEDUPASSPORTTEMPLATETARGETs(string filterExpression);
		int CountEDUPASSPORTTEMPLATETARGETs(Expression<Func<EDUPASSPORTTEMPLATETARGET, bool>> filter);
		string CreateEDUPASSPORTTEMPLATETARGET(EDUPASSPORTTEMPLATETARGETDto edupassporttemplatetarget, bool doSaveChanges = true);
		void UpdateEDUPASSPORTTEMPLATETARGET(EDUPASSPORTTEMPLATETARGETDto edupassporttemplatetarget, bool doSaveChanges = true);
		void UpdateEDUPASSPORTTEMPLATETARGETs(IEnumerable<EDUPASSPORTTEMPLATETARGETDto> edupassporttemplatetargets, bool doSaveChanges = true);
		void DeleteEDUPASSPORTTEMPLATETARGET(EDUPASSPORTTEMPLATETARGETDto edupassporttemplatetarget, bool doSaveChanges = true);
		void DeleteEDUPASSPORTTEMPLATETARGETs(IEnumerable<EDUPASSPORTTEMPLATETARGETDto> edupassporttemplatetargets, bool doSaveChanges = true);
		void SaveEDUPASSPORTTEMPLATETARGET(EDUPASSPORTTEMPLATETARGETDto edupassporttemplatetarget, bool doSaveChanges = true);
		void SaveEDUPASSPORTTEMPLATETARGETs(IEnumerable<EDUPASSPORTTEMPLATETARGETDto> edupassporttemplatetargets, bool doSaveChanges = true);


		#endregion EDUPASSPORTTEMPLATETARGET CRUD Operations


		#region EDUPASSPORTTEMPLATEITEM CRUD Operations


		IEDUPASSPORTTEMPLATEITEMService EDUPASSPORTTEMPLATEITEMService { get; }
		IQueryable<EDUPASSPORTTEMPLATEITEM> EDUPASSPORTTEMPLATEITEMs { get; }
		IQueryable<EDUPASSPORTTEMPLATEITEM> ReadEDUPASSPORTTEMPLATEITEMs(Expression<Func<EDUPASSPORTTEMPLATEITEM, bool>> filter, int dummy);
		IEnumerable<EDUPASSPORTTEMPLATEITEMDto> ReadEDUPASSPORTTEMPLATEITEMs();
		IEnumerable<EDUPASSPORTTEMPLATEITEMDto> ReadEDUPASSPORTTEMPLATEITEMs(Expression<Func<EDUPASSPORTTEMPLATEITEM, bool>> filter);
		IEnumerable<EDUPASSPORTTEMPLATEITEMDto> ReadEDUPASSPORTTEMPLATEITEMs(ISpecification<EDUPASSPORTTEMPLATEITEM> specification);
		IEnumerable<EDUPASSPORTTEMPLATEITEMDto> ReadEDUPASSPORTTEMPLATEITEMs(IQueryable<EDUPASSPORTTEMPLATEITEM> query);
		IEnumerable<EDUPASSPORTTEMPLATEITEMDto> ReadEDUPASSPORTTEMPLATEITEMs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUPASSPORTTEMPLATEITEMDto> ReadEDUPASSPORTTEMPLATEITEMs(object[] keyWords);
		IEnumerable<EDUPASSPORTTEMPLATEITEMDto> ReadEDUPASSPORTTEMPLATEITEMsPaged(int startIndex, int pageSize);
		IEnumerable<EDUPASSPORTTEMPLATEITEMDto> ReadEDUPASSPORTTEMPLATEITEMsPaged(IQueryable<EDUPASSPORTTEMPLATEITEM> source, int pageIndex, int pageSize);
		IEnumerable<EDUPASSPORTTEMPLATEITEMDto> ReadEDUPASSPORTTEMPLATEITEMsPaged(IQueryable<EDUPASSPORTTEMPLATEITEM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUPASSPORTTEMPLATEITEMDto> ReadEDUPASSPORTTEMPLATEITEMsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUPASSPORTTEMPLATEITEMDto> ReadEDUPASSPORTTEMPLATEITEMsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUPASSPORTTEMPLATEITEMDto> ReadEDUPASSPORTTEMPLATEITEMsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUPASSPORTTEMPLATEITEM, bool>> filter);
		EDUPASSPORTTEMPLATEITEMDto ReadEDUPASSPORTTEMPLATEITEMs(string dtoKey);
		int CountEDUPASSPORTTEMPLATEITEMs();
		int CountEDUPASSPORTTEMPLATEITEMs(string filterExpression);
		int CountEDUPASSPORTTEMPLATEITEMs(Expression<Func<EDUPASSPORTTEMPLATEITEM, bool>> filter);
		string CreateEDUPASSPORTTEMPLATEITEM(EDUPASSPORTTEMPLATEITEMDto edupassporttemplateitem, bool doSaveChanges = true);
		void UpdateEDUPASSPORTTEMPLATEITEM(EDUPASSPORTTEMPLATEITEMDto edupassporttemplateitem, bool doSaveChanges = true);
		void UpdateEDUPASSPORTTEMPLATEITEMs(IEnumerable<EDUPASSPORTTEMPLATEITEMDto> edupassporttemplateitems, bool doSaveChanges = true);
		void DeleteEDUPASSPORTTEMPLATEITEM(EDUPASSPORTTEMPLATEITEMDto edupassporttemplateitem, bool doSaveChanges = true);
		void DeleteEDUPASSPORTTEMPLATEITEMs(IEnumerable<EDUPASSPORTTEMPLATEITEMDto> edupassporttemplateitems, bool doSaveChanges = true);
		void SaveEDUPASSPORTTEMPLATEITEM(EDUPASSPORTTEMPLATEITEMDto edupassporttemplateitem, bool doSaveChanges = true);
		void SaveEDUPASSPORTTEMPLATEITEMs(IEnumerable<EDUPASSPORTTEMPLATEITEMDto> edupassporttemplateitems, bool doSaveChanges = true);


		#endregion EDUPASSPORTTEMPLATEITEM CRUD Operations


		#region EDUPASSPORTTEMPLATE CRUD Operations


		IEDUPASSPORTTEMPLATEService EDUPASSPORTTEMPLATEService { get; }
		IQueryable<EDUPASSPORTTEMPLATE> EDUPASSPORTTEMPLATEs { get; }
		IQueryable<EDUPASSPORTTEMPLATE> ReadEDUPASSPORTTEMPLATEs(Expression<Func<EDUPASSPORTTEMPLATE, bool>> filter, int dummy);
		IEnumerable<EDUPASSPORTTEMPLATEDto> ReadEDUPASSPORTTEMPLATEs();
		IEnumerable<EDUPASSPORTTEMPLATEDto> ReadEDUPASSPORTTEMPLATEs(Expression<Func<EDUPASSPORTTEMPLATE, bool>> filter);
		IEnumerable<EDUPASSPORTTEMPLATEDto> ReadEDUPASSPORTTEMPLATEs(ISpecification<EDUPASSPORTTEMPLATE> specification);
		IEnumerable<EDUPASSPORTTEMPLATEDto> ReadEDUPASSPORTTEMPLATEs(IQueryable<EDUPASSPORTTEMPLATE> query);
		IEnumerable<EDUPASSPORTTEMPLATEDto> ReadEDUPASSPORTTEMPLATEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUPASSPORTTEMPLATEDto> ReadEDUPASSPORTTEMPLATEs(object[] keyWords);
		IEnumerable<EDUPASSPORTTEMPLATEDto> ReadEDUPASSPORTTEMPLATEsPaged(int startIndex, int pageSize);
		IEnumerable<EDUPASSPORTTEMPLATEDto> ReadEDUPASSPORTTEMPLATEsPaged(IQueryable<EDUPASSPORTTEMPLATE> source, int pageIndex, int pageSize);
		IEnumerable<EDUPASSPORTTEMPLATEDto> ReadEDUPASSPORTTEMPLATEsPaged(IQueryable<EDUPASSPORTTEMPLATE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUPASSPORTTEMPLATEDto> ReadEDUPASSPORTTEMPLATEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUPASSPORTTEMPLATEDto> ReadEDUPASSPORTTEMPLATEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUPASSPORTTEMPLATEDto> ReadEDUPASSPORTTEMPLATEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUPASSPORTTEMPLATE, bool>> filter);
		EDUPASSPORTTEMPLATEDto ReadEDUPASSPORTTEMPLATEs(string dtoKey);
		int CountEDUPASSPORTTEMPLATEs();
		int CountEDUPASSPORTTEMPLATEs(string filterExpression);
		int CountEDUPASSPORTTEMPLATEs(Expression<Func<EDUPASSPORTTEMPLATE, bool>> filter);
		string CreateEDUPASSPORTTEMPLATE(EDUPASSPORTTEMPLATEDto edupassporttemplate, bool doSaveChanges = true);
		void UpdateEDUPASSPORTTEMPLATE(EDUPASSPORTTEMPLATEDto edupassporttemplate, bool doSaveChanges = true);
		void UpdateEDUPASSPORTTEMPLATEs(IEnumerable<EDUPASSPORTTEMPLATEDto> edupassporttemplates, bool doSaveChanges = true);
		void DeleteEDUPASSPORTTEMPLATE(EDUPASSPORTTEMPLATEDto edupassporttemplate, bool doSaveChanges = true);
		void DeleteEDUPASSPORTTEMPLATEs(IEnumerable<EDUPASSPORTTEMPLATEDto> edupassporttemplates, bool doSaveChanges = true);
		void SaveEDUPASSPORTTEMPLATE(EDUPASSPORTTEMPLATEDto edupassporttemplate, bool doSaveChanges = true);
		void SaveEDUPASSPORTTEMPLATEs(IEnumerable<EDUPASSPORTTEMPLATEDto> edupassporttemplates, bool doSaveChanges = true);


		#endregion EDUPASSPORTTEMPLATE CRUD Operations


		#region EDUPASSPORTPREF CRUD Operations


		IEDUPASSPORTPREFService EDUPASSPORTPREFService { get; }
		IQueryable<EDUPASSPORTPREF> EDUPASSPORTPREFs { get; }
		IQueryable<EDUPASSPORTPREF> ReadEDUPASSPORTPREFs(Expression<Func<EDUPASSPORTPREF, bool>> filter, int dummy);
		IEnumerable<EDUPASSPORTPREFDto> ReadEDUPASSPORTPREFs();
		IEnumerable<EDUPASSPORTPREFDto> ReadEDUPASSPORTPREFs(Expression<Func<EDUPASSPORTPREF, bool>> filter);
		IEnumerable<EDUPASSPORTPREFDto> ReadEDUPASSPORTPREFs(ISpecification<EDUPASSPORTPREF> specification);
		IEnumerable<EDUPASSPORTPREFDto> ReadEDUPASSPORTPREFs(IQueryable<EDUPASSPORTPREF> query);
		IEnumerable<EDUPASSPORTPREFDto> ReadEDUPASSPORTPREFs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUPASSPORTPREFDto> ReadEDUPASSPORTPREFs(object[] keyWords);
		IEnumerable<EDUPASSPORTPREFDto> ReadEDUPASSPORTPREFsPaged(int startIndex, int pageSize);
		IEnumerable<EDUPASSPORTPREFDto> ReadEDUPASSPORTPREFsPaged(IQueryable<EDUPASSPORTPREF> source, int pageIndex, int pageSize);
		IEnumerable<EDUPASSPORTPREFDto> ReadEDUPASSPORTPREFsPaged(IQueryable<EDUPASSPORTPREF> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUPASSPORTPREFDto> ReadEDUPASSPORTPREFsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUPASSPORTPREFDto> ReadEDUPASSPORTPREFsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUPASSPORTPREFDto> ReadEDUPASSPORTPREFsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUPASSPORTPREF, bool>> filter);
		EDUPASSPORTPREFDto ReadEDUPASSPORTPREFs(string dtoKey);
		int CountEDUPASSPORTPREFs();
		int CountEDUPASSPORTPREFs(string filterExpression);
		int CountEDUPASSPORTPREFs(Expression<Func<EDUPASSPORTPREF, bool>> filter);
		string CreateEDUPASSPORTPREF(EDUPASSPORTPREFDto edupassportpref, bool doSaveChanges = true);
		void UpdateEDUPASSPORTPREF(EDUPASSPORTPREFDto edupassportpref, bool doSaveChanges = true);
		void UpdateEDUPASSPORTPREFs(IEnumerable<EDUPASSPORTPREFDto> edupassportprefs, bool doSaveChanges = true);
		void DeleteEDUPASSPORTPREF(EDUPASSPORTPREFDto edupassportpref, bool doSaveChanges = true);
		void DeleteEDUPASSPORTPREFs(IEnumerable<EDUPASSPORTPREFDto> edupassportprefs, bool doSaveChanges = true);
		void SaveEDUPASSPORTPREF(EDUPASSPORTPREFDto edupassportpref, bool doSaveChanges = true);
		void SaveEDUPASSPORTPREFs(IEnumerable<EDUPASSPORTPREFDto> edupassportprefs, bool doSaveChanges = true);


		#endregion EDUPASSPORTPREF CRUD Operations


		#region EDUPASSPORTITEMTARGET CRUD Operations


		IEDUPASSPORTITEMTARGETService EDUPASSPORTITEMTARGETService { get; }
		IQueryable<EDUPASSPORTITEMTARGET> EDUPASSPORTITEMTARGETs { get; }
		IQueryable<EDUPASSPORTITEMTARGET> ReadEDUPASSPORTITEMTARGETs(Expression<Func<EDUPASSPORTITEMTARGET, bool>> filter, int dummy);
		IEnumerable<EDUPASSPORTITEMTARGETDto> ReadEDUPASSPORTITEMTARGETs();
		IEnumerable<EDUPASSPORTITEMTARGETDto> ReadEDUPASSPORTITEMTARGETs(Expression<Func<EDUPASSPORTITEMTARGET, bool>> filter);
		IEnumerable<EDUPASSPORTITEMTARGETDto> ReadEDUPASSPORTITEMTARGETs(ISpecification<EDUPASSPORTITEMTARGET> specification);
		IEnumerable<EDUPASSPORTITEMTARGETDto> ReadEDUPASSPORTITEMTARGETs(IQueryable<EDUPASSPORTITEMTARGET> query);
		IEnumerable<EDUPASSPORTITEMTARGETDto> ReadEDUPASSPORTITEMTARGETs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUPASSPORTITEMTARGETDto> ReadEDUPASSPORTITEMTARGETs(object[] keyWords);
		IEnumerable<EDUPASSPORTITEMTARGETDto> ReadEDUPASSPORTITEMTARGETsPaged(int startIndex, int pageSize);
		IEnumerable<EDUPASSPORTITEMTARGETDto> ReadEDUPASSPORTITEMTARGETsPaged(IQueryable<EDUPASSPORTITEMTARGET> source, int pageIndex, int pageSize);
		IEnumerable<EDUPASSPORTITEMTARGETDto> ReadEDUPASSPORTITEMTARGETsPaged(IQueryable<EDUPASSPORTITEMTARGET> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUPASSPORTITEMTARGETDto> ReadEDUPASSPORTITEMTARGETsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUPASSPORTITEMTARGETDto> ReadEDUPASSPORTITEMTARGETsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUPASSPORTITEMTARGETDto> ReadEDUPASSPORTITEMTARGETsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUPASSPORTITEMTARGET, bool>> filter);
		EDUPASSPORTITEMTARGETDto ReadEDUPASSPORTITEMTARGETs(string dtoKey);
		int CountEDUPASSPORTITEMTARGETs();
		int CountEDUPASSPORTITEMTARGETs(string filterExpression);
		int CountEDUPASSPORTITEMTARGETs(Expression<Func<EDUPASSPORTITEMTARGET, bool>> filter);
		string CreateEDUPASSPORTITEMTARGET(EDUPASSPORTITEMTARGETDto edupassportitemtarget, bool doSaveChanges = true);
		void UpdateEDUPASSPORTITEMTARGET(EDUPASSPORTITEMTARGETDto edupassportitemtarget, bool doSaveChanges = true);
		void UpdateEDUPASSPORTITEMTARGETs(IEnumerable<EDUPASSPORTITEMTARGETDto> edupassportitemtargets, bool doSaveChanges = true);
		void DeleteEDUPASSPORTITEMTARGET(EDUPASSPORTITEMTARGETDto edupassportitemtarget, bool doSaveChanges = true);
		void DeleteEDUPASSPORTITEMTARGETs(IEnumerable<EDUPASSPORTITEMTARGETDto> edupassportitemtargets, bool doSaveChanges = true);
		void SaveEDUPASSPORTITEMTARGET(EDUPASSPORTITEMTARGETDto edupassportitemtarget, bool doSaveChanges = true);
		void SaveEDUPASSPORTITEMTARGETs(IEnumerable<EDUPASSPORTITEMTARGETDto> edupassportitemtargets, bool doSaveChanges = true);


		#endregion EDUPASSPORTITEMTARGET CRUD Operations


		#region EDUPASSPORTITEMDET CRUD Operations


		IEDUPASSPORTITEMDETService EDUPASSPORTITEMDETService { get; }
		IQueryable<EDUPASSPORTITEMDET> EDUPASSPORTITEMDETs { get; }
		IQueryable<EDUPASSPORTITEMDET> ReadEDUPASSPORTITEMDETs(Expression<Func<EDUPASSPORTITEMDET, bool>> filter, int dummy);
		IEnumerable<EDUPASSPORTITEMDETDto> ReadEDUPASSPORTITEMDETs();
		IEnumerable<EDUPASSPORTITEMDETDto> ReadEDUPASSPORTITEMDETs(Expression<Func<EDUPASSPORTITEMDET, bool>> filter);
		IEnumerable<EDUPASSPORTITEMDETDto> ReadEDUPASSPORTITEMDETs(ISpecification<EDUPASSPORTITEMDET> specification);
		IEnumerable<EDUPASSPORTITEMDETDto> ReadEDUPASSPORTITEMDETs(IQueryable<EDUPASSPORTITEMDET> query);
		IEnumerable<EDUPASSPORTITEMDETDto> ReadEDUPASSPORTITEMDETs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUPASSPORTITEMDETDto> ReadEDUPASSPORTITEMDETs(object[] keyWords);
		IEnumerable<EDUPASSPORTITEMDETDto> ReadEDUPASSPORTITEMDETsPaged(int startIndex, int pageSize);
		IEnumerable<EDUPASSPORTITEMDETDto> ReadEDUPASSPORTITEMDETsPaged(IQueryable<EDUPASSPORTITEMDET> source, int pageIndex, int pageSize);
		IEnumerable<EDUPASSPORTITEMDETDto> ReadEDUPASSPORTITEMDETsPaged(IQueryable<EDUPASSPORTITEMDET> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUPASSPORTITEMDETDto> ReadEDUPASSPORTITEMDETsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUPASSPORTITEMDETDto> ReadEDUPASSPORTITEMDETsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUPASSPORTITEMDETDto> ReadEDUPASSPORTITEMDETsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUPASSPORTITEMDET, bool>> filter);
		EDUPASSPORTITEMDETDto ReadEDUPASSPORTITEMDETs(string dtoKey);
		int CountEDUPASSPORTITEMDETs();
		int CountEDUPASSPORTITEMDETs(string filterExpression);
		int CountEDUPASSPORTITEMDETs(Expression<Func<EDUPASSPORTITEMDET, bool>> filter);
		string CreateEDUPASSPORTITEMDET(EDUPASSPORTITEMDETDto edupassportitemdet, bool doSaveChanges = true);
		void UpdateEDUPASSPORTITEMDET(EDUPASSPORTITEMDETDto edupassportitemdet, bool doSaveChanges = true);
		void UpdateEDUPASSPORTITEMDETs(IEnumerable<EDUPASSPORTITEMDETDto> edupassportitemdets, bool doSaveChanges = true);
		void DeleteEDUPASSPORTITEMDET(EDUPASSPORTITEMDETDto edupassportitemdet, bool doSaveChanges = true);
		void DeleteEDUPASSPORTITEMDETs(IEnumerable<EDUPASSPORTITEMDETDto> edupassportitemdets, bool doSaveChanges = true);
		void SaveEDUPASSPORTITEMDET(EDUPASSPORTITEMDETDto edupassportitemdet, bool doSaveChanges = true);
		void SaveEDUPASSPORTITEMDETs(IEnumerable<EDUPASSPORTITEMDETDto> edupassportitemdets, bool doSaveChanges = true);


		#endregion EDUPASSPORTITEMDET CRUD Operations


		#region EDUPASSPORTITEM CRUD Operations


		IEDUPASSPORTITEMService EDUPASSPORTITEMService { get; }
		IQueryable<EDUPASSPORTITEM> EDUPASSPORTITEMs { get; }
		IQueryable<EDUPASSPORTITEM> ReadEDUPASSPORTITEMs(Expression<Func<EDUPASSPORTITEM, bool>> filter, int dummy);
		IEnumerable<EDUPASSPORTITEMDto> ReadEDUPASSPORTITEMs();
		IEnumerable<EDUPASSPORTITEMDto> ReadEDUPASSPORTITEMs(Expression<Func<EDUPASSPORTITEM, bool>> filter);
		IEnumerable<EDUPASSPORTITEMDto> ReadEDUPASSPORTITEMs(ISpecification<EDUPASSPORTITEM> specification);
		IEnumerable<EDUPASSPORTITEMDto> ReadEDUPASSPORTITEMs(IQueryable<EDUPASSPORTITEM> query);
		IEnumerable<EDUPASSPORTITEMDto> ReadEDUPASSPORTITEMs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUPASSPORTITEMDto> ReadEDUPASSPORTITEMs(object[] keyWords);
		IEnumerable<EDUPASSPORTITEMDto> ReadEDUPASSPORTITEMsPaged(int startIndex, int pageSize);
		IEnumerable<EDUPASSPORTITEMDto> ReadEDUPASSPORTITEMsPaged(IQueryable<EDUPASSPORTITEM> source, int pageIndex, int pageSize);
		IEnumerable<EDUPASSPORTITEMDto> ReadEDUPASSPORTITEMsPaged(IQueryable<EDUPASSPORTITEM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUPASSPORTITEMDto> ReadEDUPASSPORTITEMsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUPASSPORTITEMDto> ReadEDUPASSPORTITEMsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUPASSPORTITEMDto> ReadEDUPASSPORTITEMsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUPASSPORTITEM, bool>> filter);
		EDUPASSPORTITEMDto ReadEDUPASSPORTITEMs(string dtoKey);
		int CountEDUPASSPORTITEMs();
		int CountEDUPASSPORTITEMs(string filterExpression);
		int CountEDUPASSPORTITEMs(Expression<Func<EDUPASSPORTITEM, bool>> filter);
		string CreateEDUPASSPORTITEM(EDUPASSPORTITEMDto edupassportitem, bool doSaveChanges = true);
		void UpdateEDUPASSPORTITEM(EDUPASSPORTITEMDto edupassportitem, bool doSaveChanges = true);
		void UpdateEDUPASSPORTITEMs(IEnumerable<EDUPASSPORTITEMDto> edupassportitems, bool doSaveChanges = true);
		void DeleteEDUPASSPORTITEM(EDUPASSPORTITEMDto edupassportitem, bool doSaveChanges = true);
		void DeleteEDUPASSPORTITEMs(IEnumerable<EDUPASSPORTITEMDto> edupassportitems, bool doSaveChanges = true);
		void SaveEDUPASSPORTITEM(EDUPASSPORTITEMDto edupassportitem, bool doSaveChanges = true);
		void SaveEDUPASSPORTITEMs(IEnumerable<EDUPASSPORTITEMDto> edupassportitems, bool doSaveChanges = true);


		#endregion EDUPASSPORTITEM CRUD Operations


		#region EDUPASSPORTINSTANCE CRUD Operations


		IEDUPASSPORTINSTANCEService EDUPASSPORTINSTANCEService { get; }
		IQueryable<EDUPASSPORTINSTANCE> EDUPASSPORTINSTANCEs { get; }
		IQueryable<EDUPASSPORTINSTANCE> ReadEDUPASSPORTINSTANCEs(Expression<Func<EDUPASSPORTINSTANCE, bool>> filter, int dummy);
		IEnumerable<EDUPASSPORTINSTANCEDto> ReadEDUPASSPORTINSTANCEs();
		IEnumerable<EDUPASSPORTINSTANCEDto> ReadEDUPASSPORTINSTANCEs(Expression<Func<EDUPASSPORTINSTANCE, bool>> filter);
		IEnumerable<EDUPASSPORTINSTANCEDto> ReadEDUPASSPORTINSTANCEs(ISpecification<EDUPASSPORTINSTANCE> specification);
		IEnumerable<EDUPASSPORTINSTANCEDto> ReadEDUPASSPORTINSTANCEs(IQueryable<EDUPASSPORTINSTANCE> query);
		IEnumerable<EDUPASSPORTINSTANCEDto> ReadEDUPASSPORTINSTANCEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUPASSPORTINSTANCEDto> ReadEDUPASSPORTINSTANCEs(object[] keyWords);
		IEnumerable<EDUPASSPORTINSTANCEDto> ReadEDUPASSPORTINSTANCEsPaged(int startIndex, int pageSize);
		IEnumerable<EDUPASSPORTINSTANCEDto> ReadEDUPASSPORTINSTANCEsPaged(IQueryable<EDUPASSPORTINSTANCE> source, int pageIndex, int pageSize);
		IEnumerable<EDUPASSPORTINSTANCEDto> ReadEDUPASSPORTINSTANCEsPaged(IQueryable<EDUPASSPORTINSTANCE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUPASSPORTINSTANCEDto> ReadEDUPASSPORTINSTANCEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUPASSPORTINSTANCEDto> ReadEDUPASSPORTINSTANCEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUPASSPORTINSTANCEDto> ReadEDUPASSPORTINSTANCEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUPASSPORTINSTANCE, bool>> filter);
		EDUPASSPORTINSTANCEDto ReadEDUPASSPORTINSTANCEs(string dtoKey);
		int CountEDUPASSPORTINSTANCEs();
		int CountEDUPASSPORTINSTANCEs(string filterExpression);
		int CountEDUPASSPORTINSTANCEs(Expression<Func<EDUPASSPORTINSTANCE, bool>> filter);
		string CreateEDUPASSPORTINSTANCE(EDUPASSPORTINSTANCEDto edupassportinstance, bool doSaveChanges = true);
		void UpdateEDUPASSPORTINSTANCE(EDUPASSPORTINSTANCEDto edupassportinstance, bool doSaveChanges = true);
		void UpdateEDUPASSPORTINSTANCEs(IEnumerable<EDUPASSPORTINSTANCEDto> edupassportinstances, bool doSaveChanges = true);
		void DeleteEDUPASSPORTINSTANCE(EDUPASSPORTINSTANCEDto edupassportinstance, bool doSaveChanges = true);
		void DeleteEDUPASSPORTINSTANCEs(IEnumerable<EDUPASSPORTINSTANCEDto> edupassportinstances, bool doSaveChanges = true);
		void SaveEDUPASSPORTINSTANCE(EDUPASSPORTINSTANCEDto edupassportinstance, bool doSaveChanges = true);
		void SaveEDUPASSPORTINSTANCEs(IEnumerable<EDUPASSPORTINSTANCEDto> edupassportinstances, bool doSaveChanges = true);


		#endregion EDUPASSPORTINSTANCE CRUD Operations


		#region EDUPASSPORTINSITEMREJECTHI CRUD Operations


		IEDUPASSPORTINSITEMREJECTHIService EDUPASSPORTINSITEMREJECTHIService { get; }
		IQueryable<EDUPASSPORTINSITEMREJECTHI> EDUPASSPORTINSITEMREJECTHIs { get; }
		IQueryable<EDUPASSPORTINSITEMREJECTHI> ReadEDUPASSPORTINSITEMREJECTHIs(Expression<Func<EDUPASSPORTINSITEMREJECTHI, bool>> filter, int dummy);
		IEnumerable<EDUPASSPORTINSITEMREJECTHIDto> ReadEDUPASSPORTINSITEMREJECTHIs();
		IEnumerable<EDUPASSPORTINSITEMREJECTHIDto> ReadEDUPASSPORTINSITEMREJECTHIs(Expression<Func<EDUPASSPORTINSITEMREJECTHI, bool>> filter);
		IEnumerable<EDUPASSPORTINSITEMREJECTHIDto> ReadEDUPASSPORTINSITEMREJECTHIs(ISpecification<EDUPASSPORTINSITEMREJECTHI> specification);
		IEnumerable<EDUPASSPORTINSITEMREJECTHIDto> ReadEDUPASSPORTINSITEMREJECTHIs(IQueryable<EDUPASSPORTINSITEMREJECTHI> query);
		IEnumerable<EDUPASSPORTINSITEMREJECTHIDto> ReadEDUPASSPORTINSITEMREJECTHIs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUPASSPORTINSITEMREJECTHIDto> ReadEDUPASSPORTINSITEMREJECTHIs(object[] keyWords);
		IEnumerable<EDUPASSPORTINSITEMREJECTHIDto> ReadEDUPASSPORTINSITEMREJECTHIsPaged(int startIndex, int pageSize);
		IEnumerable<EDUPASSPORTINSITEMREJECTHIDto> ReadEDUPASSPORTINSITEMREJECTHIsPaged(IQueryable<EDUPASSPORTINSITEMREJECTHI> source, int pageIndex, int pageSize);
		IEnumerable<EDUPASSPORTINSITEMREJECTHIDto> ReadEDUPASSPORTINSITEMREJECTHIsPaged(IQueryable<EDUPASSPORTINSITEMREJECTHI> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUPASSPORTINSITEMREJECTHIDto> ReadEDUPASSPORTINSITEMREJECTHIsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUPASSPORTINSITEMREJECTHIDto> ReadEDUPASSPORTINSITEMREJECTHIsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUPASSPORTINSITEMREJECTHIDto> ReadEDUPASSPORTINSITEMREJECTHIsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUPASSPORTINSITEMREJECTHI, bool>> filter);
		EDUPASSPORTINSITEMREJECTHIDto ReadEDUPASSPORTINSITEMREJECTHIs(string dtoKey);
		int CountEDUPASSPORTINSITEMREJECTHIs();
		int CountEDUPASSPORTINSITEMREJECTHIs(string filterExpression);
		int CountEDUPASSPORTINSITEMREJECTHIs(Expression<Func<EDUPASSPORTINSITEMREJECTHI, bool>> filter);
		string CreateEDUPASSPORTINSITEMREJECTHI(EDUPASSPORTINSITEMREJECTHIDto edupassportinsitemrejecthi, bool doSaveChanges = true);
		void UpdateEDUPASSPORTINSITEMREJECTHI(EDUPASSPORTINSITEMREJECTHIDto edupassportinsitemrejecthi, bool doSaveChanges = true);
		void UpdateEDUPASSPORTINSITEMREJECTHIs(IEnumerable<EDUPASSPORTINSITEMREJECTHIDto> edupassportinsitemrejecthis, bool doSaveChanges = true);
		void DeleteEDUPASSPORTINSITEMREJECTHI(EDUPASSPORTINSITEMREJECTHIDto edupassportinsitemrejecthi, bool doSaveChanges = true);
		void DeleteEDUPASSPORTINSITEMREJECTHIs(IEnumerable<EDUPASSPORTINSITEMREJECTHIDto> edupassportinsitemrejecthis, bool doSaveChanges = true);
		void SaveEDUPASSPORTINSITEMREJECTHI(EDUPASSPORTINSITEMREJECTHIDto edupassportinsitemrejecthi, bool doSaveChanges = true);
		void SaveEDUPASSPORTINSITEMREJECTHIs(IEnumerable<EDUPASSPORTINSITEMREJECTHIDto> edupassportinsitemrejecthis, bool doSaveChanges = true);


		#endregion EDUPASSPORTINSITEMREJECTHI CRUD Operations


		#region EDUPASSPORTINSITEMREF CRUD Operations


		IEDUPASSPORTINSITEMREFService EDUPASSPORTINSITEMREFService { get; }
		IQueryable<EDUPASSPORTINSITEMREF> EDUPASSPORTINSITEMREFs { get; }
		IQueryable<EDUPASSPORTINSITEMREF> ReadEDUPASSPORTINSITEMREFs(Expression<Func<EDUPASSPORTINSITEMREF, bool>> filter, int dummy);
		IEnumerable<EDUPASSPORTINSITEMREFDto> ReadEDUPASSPORTINSITEMREFs();
		IEnumerable<EDUPASSPORTINSITEMREFDto> ReadEDUPASSPORTINSITEMREFs(Expression<Func<EDUPASSPORTINSITEMREF, bool>> filter);
		IEnumerable<EDUPASSPORTINSITEMREFDto> ReadEDUPASSPORTINSITEMREFs(ISpecification<EDUPASSPORTINSITEMREF> specification);
		IEnumerable<EDUPASSPORTINSITEMREFDto> ReadEDUPASSPORTINSITEMREFs(IQueryable<EDUPASSPORTINSITEMREF> query);
		IEnumerable<EDUPASSPORTINSITEMREFDto> ReadEDUPASSPORTINSITEMREFs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUPASSPORTINSITEMREFDto> ReadEDUPASSPORTINSITEMREFs(object[] keyWords);
		IEnumerable<EDUPASSPORTINSITEMREFDto> ReadEDUPASSPORTINSITEMREFsPaged(int startIndex, int pageSize);
		IEnumerable<EDUPASSPORTINSITEMREFDto> ReadEDUPASSPORTINSITEMREFsPaged(IQueryable<EDUPASSPORTINSITEMREF> source, int pageIndex, int pageSize);
		IEnumerable<EDUPASSPORTINSITEMREFDto> ReadEDUPASSPORTINSITEMREFsPaged(IQueryable<EDUPASSPORTINSITEMREF> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUPASSPORTINSITEMREFDto> ReadEDUPASSPORTINSITEMREFsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUPASSPORTINSITEMREFDto> ReadEDUPASSPORTINSITEMREFsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUPASSPORTINSITEMREFDto> ReadEDUPASSPORTINSITEMREFsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUPASSPORTINSITEMREF, bool>> filter);
		EDUPASSPORTINSITEMREFDto ReadEDUPASSPORTINSITEMREFs(string dtoKey);
		int CountEDUPASSPORTINSITEMREFs();
		int CountEDUPASSPORTINSITEMREFs(string filterExpression);
		int CountEDUPASSPORTINSITEMREFs(Expression<Func<EDUPASSPORTINSITEMREF, bool>> filter);
		string CreateEDUPASSPORTINSITEMREF(EDUPASSPORTINSITEMREFDto edupassportinsitemref, bool doSaveChanges = true);
		void UpdateEDUPASSPORTINSITEMREF(EDUPASSPORTINSITEMREFDto edupassportinsitemref, bool doSaveChanges = true);
		void UpdateEDUPASSPORTINSITEMREFs(IEnumerable<EDUPASSPORTINSITEMREFDto> edupassportinsitemrefs, bool doSaveChanges = true);
		void DeleteEDUPASSPORTINSITEMREF(EDUPASSPORTINSITEMREFDto edupassportinsitemref, bool doSaveChanges = true);
		void DeleteEDUPASSPORTINSITEMREFs(IEnumerable<EDUPASSPORTINSITEMREFDto> edupassportinsitemrefs, bool doSaveChanges = true);
		void SaveEDUPASSPORTINSITEMREF(EDUPASSPORTINSITEMREFDto edupassportinsitemref, bool doSaveChanges = true);
		void SaveEDUPASSPORTINSITEMREFs(IEnumerable<EDUPASSPORTINSITEMREFDto> edupassportinsitemrefs, bool doSaveChanges = true);


		#endregion EDUPASSPORTINSITEMREF CRUD Operations


		#region EDUPASSPORTINSITEMDET CRUD Operations


		IEDUPASSPORTINSITEMDETService EDUPASSPORTINSITEMDETService { get; }
		IQueryable<EDUPASSPORTINSITEMDET> EDUPASSPORTINSITEMDETs { get; }
		IQueryable<EDUPASSPORTINSITEMDET> ReadEDUPASSPORTINSITEMDETs(Expression<Func<EDUPASSPORTINSITEMDET, bool>> filter, int dummy);
		IEnumerable<EDUPASSPORTINSITEMDETDto> ReadEDUPASSPORTINSITEMDETs();
		IEnumerable<EDUPASSPORTINSITEMDETDto> ReadEDUPASSPORTINSITEMDETs(Expression<Func<EDUPASSPORTINSITEMDET, bool>> filter);
		IEnumerable<EDUPASSPORTINSITEMDETDto> ReadEDUPASSPORTINSITEMDETs(ISpecification<EDUPASSPORTINSITEMDET> specification);
		IEnumerable<EDUPASSPORTINSITEMDETDto> ReadEDUPASSPORTINSITEMDETs(IQueryable<EDUPASSPORTINSITEMDET> query);
		IEnumerable<EDUPASSPORTINSITEMDETDto> ReadEDUPASSPORTINSITEMDETs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUPASSPORTINSITEMDETDto> ReadEDUPASSPORTINSITEMDETs(object[] keyWords);
		IEnumerable<EDUPASSPORTINSITEMDETDto> ReadEDUPASSPORTINSITEMDETsPaged(int startIndex, int pageSize);
		IEnumerable<EDUPASSPORTINSITEMDETDto> ReadEDUPASSPORTINSITEMDETsPaged(IQueryable<EDUPASSPORTINSITEMDET> source, int pageIndex, int pageSize);
		IEnumerable<EDUPASSPORTINSITEMDETDto> ReadEDUPASSPORTINSITEMDETsPaged(IQueryable<EDUPASSPORTINSITEMDET> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUPASSPORTINSITEMDETDto> ReadEDUPASSPORTINSITEMDETsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUPASSPORTINSITEMDETDto> ReadEDUPASSPORTINSITEMDETsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUPASSPORTINSITEMDETDto> ReadEDUPASSPORTINSITEMDETsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUPASSPORTINSITEMDET, bool>> filter);
		EDUPASSPORTINSITEMDETDto ReadEDUPASSPORTINSITEMDETs(string dtoKey);
		int CountEDUPASSPORTINSITEMDETs();
		int CountEDUPASSPORTINSITEMDETs(string filterExpression);
		int CountEDUPASSPORTINSITEMDETs(Expression<Func<EDUPASSPORTINSITEMDET, bool>> filter);
		string CreateEDUPASSPORTINSITEMDET(EDUPASSPORTINSITEMDETDto edupassportinsitemdet, bool doSaveChanges = true);
		void UpdateEDUPASSPORTINSITEMDET(EDUPASSPORTINSITEMDETDto edupassportinsitemdet, bool doSaveChanges = true);
		void UpdateEDUPASSPORTINSITEMDETs(IEnumerable<EDUPASSPORTINSITEMDETDto> edupassportinsitemdets, bool doSaveChanges = true);
		void DeleteEDUPASSPORTINSITEMDET(EDUPASSPORTINSITEMDETDto edupassportinsitemdet, bool doSaveChanges = true);
		void DeleteEDUPASSPORTINSITEMDETs(IEnumerable<EDUPASSPORTINSITEMDETDto> edupassportinsitemdets, bool doSaveChanges = true);
		void SaveEDUPASSPORTINSITEMDET(EDUPASSPORTINSITEMDETDto edupassportinsitemdet, bool doSaveChanges = true);
		void SaveEDUPASSPORTINSITEMDETs(IEnumerable<EDUPASSPORTINSITEMDETDto> edupassportinsitemdets, bool doSaveChanges = true);


		#endregion EDUPASSPORTINSITEMDET CRUD Operations


		#region EDUPASSPORTINSITEM CRUD Operations


		IEDUPASSPORTINSITEMService EDUPASSPORTINSITEMService { get; }
		IQueryable<EDUPASSPORTINSITEM> EDUPASSPORTINSITEMs { get; }
		IQueryable<EDUPASSPORTINSITEM> ReadEDUPASSPORTINSITEMs(Expression<Func<EDUPASSPORTINSITEM, bool>> filter, int dummy);
		IEnumerable<EDUPASSPORTINSITEMDto> ReadEDUPASSPORTINSITEMs();
		IEnumerable<EDUPASSPORTINSITEMDto> ReadEDUPASSPORTINSITEMs(Expression<Func<EDUPASSPORTINSITEM, bool>> filter);
		IEnumerable<EDUPASSPORTINSITEMDto> ReadEDUPASSPORTINSITEMs(ISpecification<EDUPASSPORTINSITEM> specification);
		IEnumerable<EDUPASSPORTINSITEMDto> ReadEDUPASSPORTINSITEMs(IQueryable<EDUPASSPORTINSITEM> query);
		IEnumerable<EDUPASSPORTINSITEMDto> ReadEDUPASSPORTINSITEMs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUPASSPORTINSITEMDto> ReadEDUPASSPORTINSITEMs(object[] keyWords);
		IEnumerable<EDUPASSPORTINSITEMDto> ReadEDUPASSPORTINSITEMsPaged(int startIndex, int pageSize);
		IEnumerable<EDUPASSPORTINSITEMDto> ReadEDUPASSPORTINSITEMsPaged(IQueryable<EDUPASSPORTINSITEM> source, int pageIndex, int pageSize);
		IEnumerable<EDUPASSPORTINSITEMDto> ReadEDUPASSPORTINSITEMsPaged(IQueryable<EDUPASSPORTINSITEM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUPASSPORTINSITEMDto> ReadEDUPASSPORTINSITEMsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUPASSPORTINSITEMDto> ReadEDUPASSPORTINSITEMsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUPASSPORTINSITEMDto> ReadEDUPASSPORTINSITEMsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUPASSPORTINSITEM, bool>> filter);
		EDUPASSPORTINSITEMDto ReadEDUPASSPORTINSITEMs(string dtoKey);
		int CountEDUPASSPORTINSITEMs();
		int CountEDUPASSPORTINSITEMs(string filterExpression);
		int CountEDUPASSPORTINSITEMs(Expression<Func<EDUPASSPORTINSITEM, bool>> filter);
		string CreateEDUPASSPORTINSITEM(EDUPASSPORTINSITEMDto edupassportinsitem, bool doSaveChanges = true);
		void UpdateEDUPASSPORTINSITEM(EDUPASSPORTINSITEMDto edupassportinsitem, bool doSaveChanges = true);
		void UpdateEDUPASSPORTINSITEMs(IEnumerable<EDUPASSPORTINSITEMDto> edupassportinsitems, bool doSaveChanges = true);
		void DeleteEDUPASSPORTINSITEM(EDUPASSPORTINSITEMDto edupassportinsitem, bool doSaveChanges = true);
		void DeleteEDUPASSPORTINSITEMs(IEnumerable<EDUPASSPORTINSITEMDto> edupassportinsitems, bool doSaveChanges = true);
		void SaveEDUPASSPORTINSITEM(EDUPASSPORTINSITEMDto edupassportinsitem, bool doSaveChanges = true);
		void SaveEDUPASSPORTINSITEMs(IEnumerable<EDUPASSPORTINSITEMDto> edupassportinsitems, bool doSaveChanges = true);


		#endregion EDUPASSPORTINSITEM CRUD Operations


		#region EDUNOTETEMPLATE CRUD Operations


		IEDUNOTETEMPLATEService EDUNOTETEMPLATEService { get; }
		IQueryable<EDUNOTETEMPLATE> EDUNOTETEMPLATEs { get; }
		IQueryable<EDUNOTETEMPLATE> ReadEDUNOTETEMPLATEs(Expression<Func<EDUNOTETEMPLATE, bool>> filter, int dummy);
		IEnumerable<EDUNOTETEMPLATEDto> ReadEDUNOTETEMPLATEs();
		IEnumerable<EDUNOTETEMPLATEDto> ReadEDUNOTETEMPLATEs(Expression<Func<EDUNOTETEMPLATE, bool>> filter);
		IEnumerable<EDUNOTETEMPLATEDto> ReadEDUNOTETEMPLATEs(ISpecification<EDUNOTETEMPLATE> specification);
		IEnumerable<EDUNOTETEMPLATEDto> ReadEDUNOTETEMPLATEs(IQueryable<EDUNOTETEMPLATE> query);
		IEnumerable<EDUNOTETEMPLATEDto> ReadEDUNOTETEMPLATEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUNOTETEMPLATEDto> ReadEDUNOTETEMPLATEs(object[] keyWords);
		IEnumerable<EDUNOTETEMPLATEDto> ReadEDUNOTETEMPLATEsPaged(int startIndex, int pageSize);
		IEnumerable<EDUNOTETEMPLATEDto> ReadEDUNOTETEMPLATEsPaged(IQueryable<EDUNOTETEMPLATE> source, int pageIndex, int pageSize);
		IEnumerable<EDUNOTETEMPLATEDto> ReadEDUNOTETEMPLATEsPaged(IQueryable<EDUNOTETEMPLATE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUNOTETEMPLATEDto> ReadEDUNOTETEMPLATEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUNOTETEMPLATEDto> ReadEDUNOTETEMPLATEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUNOTETEMPLATEDto> ReadEDUNOTETEMPLATEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUNOTETEMPLATE, bool>> filter);
		EDUNOTETEMPLATEDto ReadEDUNOTETEMPLATEs(string dtoKey);
		int CountEDUNOTETEMPLATEs();
		int CountEDUNOTETEMPLATEs(string filterExpression);
		int CountEDUNOTETEMPLATEs(Expression<Func<EDUNOTETEMPLATE, bool>> filter);
		string CreateEDUNOTETEMPLATE(EDUNOTETEMPLATEDto edunotetemplate, bool doSaveChanges = true);
		void UpdateEDUNOTETEMPLATE(EDUNOTETEMPLATEDto edunotetemplate, bool doSaveChanges = true);
		void UpdateEDUNOTETEMPLATEs(IEnumerable<EDUNOTETEMPLATEDto> edunotetemplates, bool doSaveChanges = true);
		void DeleteEDUNOTETEMPLATE(EDUNOTETEMPLATEDto edunotetemplate, bool doSaveChanges = true);
		void DeleteEDUNOTETEMPLATEs(IEnumerable<EDUNOTETEMPLATEDto> edunotetemplates, bool doSaveChanges = true);
		void SaveEDUNOTETEMPLATE(EDUNOTETEMPLATEDto edunotetemplate, bool doSaveChanges = true);
		void SaveEDUNOTETEMPLATEs(IEnumerable<EDUNOTETEMPLATEDto> edunotetemplates, bool doSaveChanges = true);


		#endregion EDUNOTETEMPLATE CRUD Operations


		#region EDUNOTELIST CRUD Operations


		IEDUNOTELISTService EDUNOTELISTService { get; }
		IQueryable<EDUNOTELIST> EDUNOTELISTs { get; }
		IQueryable<EDUNOTELIST> ReadEDUNOTELISTs(Expression<Func<EDUNOTELIST, bool>> filter, int dummy);
		IEnumerable<EDUNOTELISTDto> ReadEDUNOTELISTs();
		IEnumerable<EDUNOTELISTDto> ReadEDUNOTELISTs(Expression<Func<EDUNOTELIST, bool>> filter);
		IEnumerable<EDUNOTELISTDto> ReadEDUNOTELISTs(ISpecification<EDUNOTELIST> specification);
		IEnumerable<EDUNOTELISTDto> ReadEDUNOTELISTs(IQueryable<EDUNOTELIST> query);
		IEnumerable<EDUNOTELISTDto> ReadEDUNOTELISTs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUNOTELISTDto> ReadEDUNOTELISTs(object[] keyWords);
		IEnumerable<EDUNOTELISTDto> ReadEDUNOTELISTsPaged(int startIndex, int pageSize);
		IEnumerable<EDUNOTELISTDto> ReadEDUNOTELISTsPaged(IQueryable<EDUNOTELIST> source, int pageIndex, int pageSize);
		IEnumerable<EDUNOTELISTDto> ReadEDUNOTELISTsPaged(IQueryable<EDUNOTELIST> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUNOTELISTDto> ReadEDUNOTELISTsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUNOTELISTDto> ReadEDUNOTELISTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUNOTELISTDto> ReadEDUNOTELISTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUNOTELIST, bool>> filter);
		EDUNOTELISTDto ReadEDUNOTELISTs(string dtoKey);
		int CountEDUNOTELISTs();
		int CountEDUNOTELISTs(string filterExpression);
		int CountEDUNOTELISTs(Expression<Func<EDUNOTELIST, bool>> filter);
		string CreateEDUNOTELIST(EDUNOTELISTDto edunotelist, bool doSaveChanges = true);
		void UpdateEDUNOTELIST(EDUNOTELISTDto edunotelist, bool doSaveChanges = true);
		void UpdateEDUNOTELISTs(IEnumerable<EDUNOTELISTDto> edunotelists, bool doSaveChanges = true);
		void DeleteEDUNOTELIST(EDUNOTELISTDto edunotelist, bool doSaveChanges = true);
		void DeleteEDUNOTELISTs(IEnumerable<EDUNOTELISTDto> edunotelists, bool doSaveChanges = true);
		void SaveEDUNOTELIST(EDUNOTELISTDto edunotelist, bool doSaveChanges = true);
		void SaveEDUNOTELISTs(IEnumerable<EDUNOTELISTDto> edunotelists, bool doSaveChanges = true);


		#endregion EDUNOTELIST CRUD Operations


		#region EDUNOTEITEM CRUD Operations


		IEDUNOTEITEMService EDUNOTEITEMService { get; }
		IQueryable<EDUNOTEITEM> EDUNOTEITEMs { get; }
		IQueryable<EDUNOTEITEM> ReadEDUNOTEITEMs(Expression<Func<EDUNOTEITEM, bool>> filter, int dummy);
		IEnumerable<EDUNOTEITEMDto> ReadEDUNOTEITEMs();
		IEnumerable<EDUNOTEITEMDto> ReadEDUNOTEITEMs(Expression<Func<EDUNOTEITEM, bool>> filter);
		IEnumerable<EDUNOTEITEMDto> ReadEDUNOTEITEMs(ISpecification<EDUNOTEITEM> specification);
		IEnumerable<EDUNOTEITEMDto> ReadEDUNOTEITEMs(IQueryable<EDUNOTEITEM> query);
		IEnumerable<EDUNOTEITEMDto> ReadEDUNOTEITEMs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUNOTEITEMDto> ReadEDUNOTEITEMs(object[] keyWords);
		IEnumerable<EDUNOTEITEMDto> ReadEDUNOTEITEMsPaged(int startIndex, int pageSize);
		IEnumerable<EDUNOTEITEMDto> ReadEDUNOTEITEMsPaged(IQueryable<EDUNOTEITEM> source, int pageIndex, int pageSize);
		IEnumerable<EDUNOTEITEMDto> ReadEDUNOTEITEMsPaged(IQueryable<EDUNOTEITEM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUNOTEITEMDto> ReadEDUNOTEITEMsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUNOTEITEMDto> ReadEDUNOTEITEMsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUNOTEITEMDto> ReadEDUNOTEITEMsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUNOTEITEM, bool>> filter);
		EDUNOTEITEMDto ReadEDUNOTEITEMs(string dtoKey);
		int CountEDUNOTEITEMs();
		int CountEDUNOTEITEMs(string filterExpression);
		int CountEDUNOTEITEMs(Expression<Func<EDUNOTEITEM, bool>> filter);
		string CreateEDUNOTEITEM(EDUNOTEITEMDto edunoteitem, bool doSaveChanges = true);
		void UpdateEDUNOTEITEM(EDUNOTEITEMDto edunoteitem, bool doSaveChanges = true);
		void UpdateEDUNOTEITEMs(IEnumerable<EDUNOTEITEMDto> edunoteitems, bool doSaveChanges = true);
		void DeleteEDUNOTEITEM(EDUNOTEITEMDto edunoteitem, bool doSaveChanges = true);
		void DeleteEDUNOTEITEMs(IEnumerable<EDUNOTEITEMDto> edunoteitems, bool doSaveChanges = true);
		void SaveEDUNOTEITEM(EDUNOTEITEMDto edunoteitem, bool doSaveChanges = true);
		void SaveEDUNOTEITEMs(IEnumerable<EDUNOTEITEMDto> edunoteitems, bool doSaveChanges = true);


		#endregion EDUNOTEITEM CRUD Operations


		#region EDUNOTE CRUD Operations


		IEDUNOTEService EDUNOTEService { get; }
		IQueryable<EDUNOTE> EDUNOTEs { get; }
		IQueryable<EDUNOTE> ReadEDUNOTEs(Expression<Func<EDUNOTE, bool>> filter, int dummy);
		IEnumerable<EDUNOTEDto> ReadEDUNOTEs();
		IEnumerable<EDUNOTEDto> ReadEDUNOTEs(Expression<Func<EDUNOTE, bool>> filter);
		IEnumerable<EDUNOTEDto> ReadEDUNOTEs(ISpecification<EDUNOTE> specification);
		IEnumerable<EDUNOTEDto> ReadEDUNOTEs(IQueryable<EDUNOTE> query);
		IEnumerable<EDUNOTEDto> ReadEDUNOTEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUNOTEDto> ReadEDUNOTEs(object[] keyWords);
		IEnumerable<EDUNOTEDto> ReadEDUNOTEsPaged(int startIndex, int pageSize);
		IEnumerable<EDUNOTEDto> ReadEDUNOTEsPaged(IQueryable<EDUNOTE> source, int pageIndex, int pageSize);
		IEnumerable<EDUNOTEDto> ReadEDUNOTEsPaged(IQueryable<EDUNOTE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUNOTEDto> ReadEDUNOTEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUNOTEDto> ReadEDUNOTEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUNOTEDto> ReadEDUNOTEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUNOTE, bool>> filter);
		EDUNOTEDto ReadEDUNOTEs(string dtoKey);
		int CountEDUNOTEs();
		int CountEDUNOTEs(string filterExpression);
		int CountEDUNOTEs(Expression<Func<EDUNOTE, bool>> filter);
		string CreateEDUNOTE(EDUNOTEDto edunote, bool doSaveChanges = true);
		void UpdateEDUNOTE(EDUNOTEDto edunote, bool doSaveChanges = true);
		void UpdateEDUNOTEs(IEnumerable<EDUNOTEDto> edunotes, bool doSaveChanges = true);
		void DeleteEDUNOTE(EDUNOTEDto edunote, bool doSaveChanges = true);
		void DeleteEDUNOTEs(IEnumerable<EDUNOTEDto> edunotes, bool doSaveChanges = true);
		void SaveEDUNOTE(EDUNOTEDto edunote, bool doSaveChanges = true);
		void SaveEDUNOTEs(IEnumerable<EDUNOTEDto> edunotes, bool doSaveChanges = true);


		#endregion EDUNOTE CRUD Operations


		#region EDUNOTALERTSETTING CRUD Operations


		IEDUNOTALERTSETTINGService EDUNOTALERTSETTINGService { get; }
		IQueryable<EDUNOTALERTSETTING> EDUNOTALERTSETTINGs { get; }
		IQueryable<EDUNOTALERTSETTING> ReadEDUNOTALERTSETTINGs(Expression<Func<EDUNOTALERTSETTING, bool>> filter, int dummy);
		IEnumerable<EDUNOTALERTSETTINGDto> ReadEDUNOTALERTSETTINGs();
		IEnumerable<EDUNOTALERTSETTINGDto> ReadEDUNOTALERTSETTINGs(Expression<Func<EDUNOTALERTSETTING, bool>> filter);
		IEnumerable<EDUNOTALERTSETTINGDto> ReadEDUNOTALERTSETTINGs(ISpecification<EDUNOTALERTSETTING> specification);
		IEnumerable<EDUNOTALERTSETTINGDto> ReadEDUNOTALERTSETTINGs(IQueryable<EDUNOTALERTSETTING> query);
		IEnumerable<EDUNOTALERTSETTINGDto> ReadEDUNOTALERTSETTINGs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUNOTALERTSETTINGDto> ReadEDUNOTALERTSETTINGs(object[] keyWords);
		IEnumerable<EDUNOTALERTSETTINGDto> ReadEDUNOTALERTSETTINGsPaged(int startIndex, int pageSize);
		IEnumerable<EDUNOTALERTSETTINGDto> ReadEDUNOTALERTSETTINGsPaged(IQueryable<EDUNOTALERTSETTING> source, int pageIndex, int pageSize);
		IEnumerable<EDUNOTALERTSETTINGDto> ReadEDUNOTALERTSETTINGsPaged(IQueryable<EDUNOTALERTSETTING> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUNOTALERTSETTINGDto> ReadEDUNOTALERTSETTINGsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUNOTALERTSETTINGDto> ReadEDUNOTALERTSETTINGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUNOTALERTSETTINGDto> ReadEDUNOTALERTSETTINGsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUNOTALERTSETTING, bool>> filter);
		EDUNOTALERTSETTINGDto ReadEDUNOTALERTSETTINGs(string dtoKey);
		int CountEDUNOTALERTSETTINGs();
		int CountEDUNOTALERTSETTINGs(string filterExpression);
		int CountEDUNOTALERTSETTINGs(Expression<Func<EDUNOTALERTSETTING, bool>> filter);
		string CreateEDUNOTALERTSETTING(EDUNOTALERTSETTINGDto edunotalertsetting, bool doSaveChanges = true);
		void UpdateEDUNOTALERTSETTING(EDUNOTALERTSETTINGDto edunotalertsetting, bool doSaveChanges = true);
		void UpdateEDUNOTALERTSETTINGs(IEnumerable<EDUNOTALERTSETTINGDto> edunotalertsettings, bool doSaveChanges = true);
		void DeleteEDUNOTALERTSETTING(EDUNOTALERTSETTINGDto edunotalertsetting, bool doSaveChanges = true);
		void DeleteEDUNOTALERTSETTINGs(IEnumerable<EDUNOTALERTSETTINGDto> edunotalertsettings, bool doSaveChanges = true);
		void SaveEDUNOTALERTSETTING(EDUNOTALERTSETTINGDto edunotalertsetting, bool doSaveChanges = true);
		void SaveEDUNOTALERTSETTINGs(IEnumerable<EDUNOTALERTSETTINGDto> edunotalertsettings, bool doSaveChanges = true);


		#endregion EDUNOTALERTSETTING CRUD Operations


		#region EDUMENU CRUD Operations


		IEDUMENUService EDUMENUService { get; }
		IQueryable<EDUMENU> EDUMENUs { get; }
		IQueryable<EDUMENU> ReadEDUMENUs(Expression<Func<EDUMENU, bool>> filter, int dummy);
		IEnumerable<EDUMENUDto> ReadEDUMENUs();
		IEnumerable<EDUMENUDto> ReadEDUMENUs(Expression<Func<EDUMENU, bool>> filter);
		IEnumerable<EDUMENUDto> ReadEDUMENUs(ISpecification<EDUMENU> specification);
		IEnumerable<EDUMENUDto> ReadEDUMENUs(IQueryable<EDUMENU> query);
		IEnumerable<EDUMENUDto> ReadEDUMENUs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUMENUDto> ReadEDUMENUs(object[] keyWords);
		IEnumerable<EDUMENUDto> ReadEDUMENUsPaged(int startIndex, int pageSize);
		IEnumerable<EDUMENUDto> ReadEDUMENUsPaged(IQueryable<EDUMENU> source, int pageIndex, int pageSize);
		IEnumerable<EDUMENUDto> ReadEDUMENUsPaged(IQueryable<EDUMENU> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUMENUDto> ReadEDUMENUsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUMENUDto> ReadEDUMENUsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUMENUDto> ReadEDUMENUsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUMENU, bool>> filter);
		EDUMENUDto ReadEDUMENUs(string dtoKey);
		int CountEDUMENUs();
		int CountEDUMENUs(string filterExpression);
		int CountEDUMENUs(Expression<Func<EDUMENU, bool>> filter);
		string CreateEDUMENU(EDUMENUDto edumenu, bool doSaveChanges = true);
		void UpdateEDUMENU(EDUMENUDto edumenu, bool doSaveChanges = true);
		void UpdateEDUMENUs(IEnumerable<EDUMENUDto> edumenus, bool doSaveChanges = true);
		void DeleteEDUMENU(EDUMENUDto edumenu, bool doSaveChanges = true);
		void DeleteEDUMENUs(IEnumerable<EDUMENUDto> edumenus, bool doSaveChanges = true);
		void SaveEDUMENU(EDUMENUDto edumenu, bool doSaveChanges = true);
		void SaveEDUMENUs(IEnumerable<EDUMENUDto> edumenus, bool doSaveChanges = true);


		#endregion EDUMENU CRUD Operations


		#region EDUFORMTEMPLATETARGET CRUD Operations


		IEDUFORMTEMPLATETARGETService EDUFORMTEMPLATETARGETService { get; }
		IQueryable<EDUFORMTEMPLATETARGET> EDUFORMTEMPLATETARGETs { get; }
		IQueryable<EDUFORMTEMPLATETARGET> ReadEDUFORMTEMPLATETARGETs(Expression<Func<EDUFORMTEMPLATETARGET, bool>> filter, int dummy);
		IEnumerable<EDUFORMTEMPLATETARGETDto> ReadEDUFORMTEMPLATETARGETs();
		IEnumerable<EDUFORMTEMPLATETARGETDto> ReadEDUFORMTEMPLATETARGETs(Expression<Func<EDUFORMTEMPLATETARGET, bool>> filter);
		IEnumerable<EDUFORMTEMPLATETARGETDto> ReadEDUFORMTEMPLATETARGETs(ISpecification<EDUFORMTEMPLATETARGET> specification);
		IEnumerable<EDUFORMTEMPLATETARGETDto> ReadEDUFORMTEMPLATETARGETs(IQueryable<EDUFORMTEMPLATETARGET> query);
		IEnumerable<EDUFORMTEMPLATETARGETDto> ReadEDUFORMTEMPLATETARGETs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUFORMTEMPLATETARGETDto> ReadEDUFORMTEMPLATETARGETs(object[] keyWords);
		IEnumerable<EDUFORMTEMPLATETARGETDto> ReadEDUFORMTEMPLATETARGETsPaged(int startIndex, int pageSize);
		IEnumerable<EDUFORMTEMPLATETARGETDto> ReadEDUFORMTEMPLATETARGETsPaged(IQueryable<EDUFORMTEMPLATETARGET> source, int pageIndex, int pageSize);
		IEnumerable<EDUFORMTEMPLATETARGETDto> ReadEDUFORMTEMPLATETARGETsPaged(IQueryable<EDUFORMTEMPLATETARGET> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUFORMTEMPLATETARGETDto> ReadEDUFORMTEMPLATETARGETsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUFORMTEMPLATETARGETDto> ReadEDUFORMTEMPLATETARGETsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUFORMTEMPLATETARGETDto> ReadEDUFORMTEMPLATETARGETsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUFORMTEMPLATETARGET, bool>> filter);
		EDUFORMTEMPLATETARGETDto ReadEDUFORMTEMPLATETARGETs(string dtoKey);
		int CountEDUFORMTEMPLATETARGETs();
		int CountEDUFORMTEMPLATETARGETs(string filterExpression);
		int CountEDUFORMTEMPLATETARGETs(Expression<Func<EDUFORMTEMPLATETARGET, bool>> filter);
		string CreateEDUFORMTEMPLATETARGET(EDUFORMTEMPLATETARGETDto eduformtemplatetarget, bool doSaveChanges = true);
		void UpdateEDUFORMTEMPLATETARGET(EDUFORMTEMPLATETARGETDto eduformtemplatetarget, bool doSaveChanges = true);
		void UpdateEDUFORMTEMPLATETARGETs(IEnumerable<EDUFORMTEMPLATETARGETDto> eduformtemplatetargets, bool doSaveChanges = true);
		void DeleteEDUFORMTEMPLATETARGET(EDUFORMTEMPLATETARGETDto eduformtemplatetarget, bool doSaveChanges = true);
		void DeleteEDUFORMTEMPLATETARGETs(IEnumerable<EDUFORMTEMPLATETARGETDto> eduformtemplatetargets, bool doSaveChanges = true);
		void SaveEDUFORMTEMPLATETARGET(EDUFORMTEMPLATETARGETDto eduformtemplatetarget, bool doSaveChanges = true);
		void SaveEDUFORMTEMPLATETARGETs(IEnumerable<EDUFORMTEMPLATETARGETDto> eduformtemplatetargets, bool doSaveChanges = true);


		#endregion EDUFORMTEMPLATETARGET CRUD Operations


		#region EDUFORMTEMPLATELIST CRUD Operations


		IEDUFORMTEMPLATELISTService EDUFORMTEMPLATELISTService { get; }
		IQueryable<EDUFORMTEMPLATELIST> EDUFORMTEMPLATELISTs { get; }
		IQueryable<EDUFORMTEMPLATELIST> ReadEDUFORMTEMPLATELISTs(Expression<Func<EDUFORMTEMPLATELIST, bool>> filter, int dummy);
		IEnumerable<EDUFORMTEMPLATELISTDto> ReadEDUFORMTEMPLATELISTs();
		IEnumerable<EDUFORMTEMPLATELISTDto> ReadEDUFORMTEMPLATELISTs(Expression<Func<EDUFORMTEMPLATELIST, bool>> filter);
		IEnumerable<EDUFORMTEMPLATELISTDto> ReadEDUFORMTEMPLATELISTs(ISpecification<EDUFORMTEMPLATELIST> specification);
		IEnumerable<EDUFORMTEMPLATELISTDto> ReadEDUFORMTEMPLATELISTs(IQueryable<EDUFORMTEMPLATELIST> query);
		IEnumerable<EDUFORMTEMPLATELISTDto> ReadEDUFORMTEMPLATELISTs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUFORMTEMPLATELISTDto> ReadEDUFORMTEMPLATELISTs(object[] keyWords);
		IEnumerable<EDUFORMTEMPLATELISTDto> ReadEDUFORMTEMPLATELISTsPaged(int startIndex, int pageSize);
		IEnumerable<EDUFORMTEMPLATELISTDto> ReadEDUFORMTEMPLATELISTsPaged(IQueryable<EDUFORMTEMPLATELIST> source, int pageIndex, int pageSize);
		IEnumerable<EDUFORMTEMPLATELISTDto> ReadEDUFORMTEMPLATELISTsPaged(IQueryable<EDUFORMTEMPLATELIST> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUFORMTEMPLATELISTDto> ReadEDUFORMTEMPLATELISTsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUFORMTEMPLATELISTDto> ReadEDUFORMTEMPLATELISTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUFORMTEMPLATELISTDto> ReadEDUFORMTEMPLATELISTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUFORMTEMPLATELIST, bool>> filter);
		EDUFORMTEMPLATELISTDto ReadEDUFORMTEMPLATELISTs(string dtoKey);
		int CountEDUFORMTEMPLATELISTs();
		int CountEDUFORMTEMPLATELISTs(string filterExpression);
		int CountEDUFORMTEMPLATELISTs(Expression<Func<EDUFORMTEMPLATELIST, bool>> filter);
		string CreateEDUFORMTEMPLATELIST(EDUFORMTEMPLATELISTDto eduformtemplatelist, bool doSaveChanges = true);
		void UpdateEDUFORMTEMPLATELIST(EDUFORMTEMPLATELISTDto eduformtemplatelist, bool doSaveChanges = true);
		void UpdateEDUFORMTEMPLATELISTs(IEnumerable<EDUFORMTEMPLATELISTDto> eduformtemplatelists, bool doSaveChanges = true);
		void DeleteEDUFORMTEMPLATELIST(EDUFORMTEMPLATELISTDto eduformtemplatelist, bool doSaveChanges = true);
		void DeleteEDUFORMTEMPLATELISTs(IEnumerable<EDUFORMTEMPLATELISTDto> eduformtemplatelists, bool doSaveChanges = true);
		void SaveEDUFORMTEMPLATELIST(EDUFORMTEMPLATELISTDto eduformtemplatelist, bool doSaveChanges = true);
		void SaveEDUFORMTEMPLATELISTs(IEnumerable<EDUFORMTEMPLATELISTDto> eduformtemplatelists, bool doSaveChanges = true);


		#endregion EDUFORMTEMPLATELIST CRUD Operations


		#region EDUFORMSTASTICPERMISSION CRUD Operations


		IEDUFORMSTASTICPERMISSIONService EDUFORMSTASTICPERMISSIONService { get; }
		IQueryable<EDUFORMSTASTICPERMISSION> EDUFORMSTASTICPERMISSIONs { get; }
		IQueryable<EDUFORMSTASTICPERMISSION> ReadEDUFORMSTASTICPERMISSIONs(Expression<Func<EDUFORMSTASTICPERMISSION, bool>> filter, int dummy);
		IEnumerable<EDUFORMSTASTICPERMISSIONDto> ReadEDUFORMSTASTICPERMISSIONs();
		IEnumerable<EDUFORMSTASTICPERMISSIONDto> ReadEDUFORMSTASTICPERMISSIONs(Expression<Func<EDUFORMSTASTICPERMISSION, bool>> filter);
		IEnumerable<EDUFORMSTASTICPERMISSIONDto> ReadEDUFORMSTASTICPERMISSIONs(ISpecification<EDUFORMSTASTICPERMISSION> specification);
		IEnumerable<EDUFORMSTASTICPERMISSIONDto> ReadEDUFORMSTASTICPERMISSIONs(IQueryable<EDUFORMSTASTICPERMISSION> query);
		IEnumerable<EDUFORMSTASTICPERMISSIONDto> ReadEDUFORMSTASTICPERMISSIONs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUFORMSTASTICPERMISSIONDto> ReadEDUFORMSTASTICPERMISSIONs(object[] keyWords);
		IEnumerable<EDUFORMSTASTICPERMISSIONDto> ReadEDUFORMSTASTICPERMISSIONsPaged(int startIndex, int pageSize);
		IEnumerable<EDUFORMSTASTICPERMISSIONDto> ReadEDUFORMSTASTICPERMISSIONsPaged(IQueryable<EDUFORMSTASTICPERMISSION> source, int pageIndex, int pageSize);
		IEnumerable<EDUFORMSTASTICPERMISSIONDto> ReadEDUFORMSTASTICPERMISSIONsPaged(IQueryable<EDUFORMSTASTICPERMISSION> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUFORMSTASTICPERMISSIONDto> ReadEDUFORMSTASTICPERMISSIONsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUFORMSTASTICPERMISSIONDto> ReadEDUFORMSTASTICPERMISSIONsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUFORMSTASTICPERMISSIONDto> ReadEDUFORMSTASTICPERMISSIONsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUFORMSTASTICPERMISSION, bool>> filter);
		EDUFORMSTASTICPERMISSIONDto ReadEDUFORMSTASTICPERMISSIONs(string dtoKey);
		int CountEDUFORMSTASTICPERMISSIONs();
		int CountEDUFORMSTASTICPERMISSIONs(string filterExpression);
		int CountEDUFORMSTASTICPERMISSIONs(Expression<Func<EDUFORMSTASTICPERMISSION, bool>> filter);
		string CreateEDUFORMSTASTICPERMISSION(EDUFORMSTASTICPERMISSIONDto eduformstasticpermission, bool doSaveChanges = true);
		void UpdateEDUFORMSTASTICPERMISSION(EDUFORMSTASTICPERMISSIONDto eduformstasticpermission, bool doSaveChanges = true);
		void UpdateEDUFORMSTASTICPERMISSIONs(IEnumerable<EDUFORMSTASTICPERMISSIONDto> eduformstasticpermissions, bool doSaveChanges = true);
		void DeleteEDUFORMSTASTICPERMISSION(EDUFORMSTASTICPERMISSIONDto eduformstasticpermission, bool doSaveChanges = true);
		void DeleteEDUFORMSTASTICPERMISSIONs(IEnumerable<EDUFORMSTASTICPERMISSIONDto> eduformstasticpermissions, bool doSaveChanges = true);
		void SaveEDUFORMSTASTICPERMISSION(EDUFORMSTASTICPERMISSIONDto eduformstasticpermission, bool doSaveChanges = true);
		void SaveEDUFORMSTASTICPERMISSIONs(IEnumerable<EDUFORMSTASTICPERMISSIONDto> eduformstasticpermissions, bool doSaveChanges = true);


		#endregion EDUFORMSTASTICPERMISSION CRUD Operations


		#region EDUACTVIEWTARGET CRUD Operations


		IEDUACTVIEWTARGETService EDUACTVIEWTARGETService { get; }
		IQueryable<EDUACTVIEWTARGET> EDUACTVIEWTARGETs { get; }
		IQueryable<EDUACTVIEWTARGET> ReadEDUACTVIEWTARGETs(Expression<Func<EDUACTVIEWTARGET, bool>> filter, int dummy);
		IEnumerable<EDUACTVIEWTARGETDto> ReadEDUACTVIEWTARGETs();
		IEnumerable<EDUACTVIEWTARGETDto> ReadEDUACTVIEWTARGETs(Expression<Func<EDUACTVIEWTARGET, bool>> filter);
		IEnumerable<EDUACTVIEWTARGETDto> ReadEDUACTVIEWTARGETs(ISpecification<EDUACTVIEWTARGET> specification);
		IEnumerable<EDUACTVIEWTARGETDto> ReadEDUACTVIEWTARGETs(IQueryable<EDUACTVIEWTARGET> query);
		IEnumerable<EDUACTVIEWTARGETDto> ReadEDUACTVIEWTARGETs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUACTVIEWTARGETDto> ReadEDUACTVIEWTARGETs(object[] keyWords);
		IEnumerable<EDUACTVIEWTARGETDto> ReadEDUACTVIEWTARGETsPaged(int startIndex, int pageSize);
		IEnumerable<EDUACTVIEWTARGETDto> ReadEDUACTVIEWTARGETsPaged(IQueryable<EDUACTVIEWTARGET> source, int pageIndex, int pageSize);
		IEnumerable<EDUACTVIEWTARGETDto> ReadEDUACTVIEWTARGETsPaged(IQueryable<EDUACTVIEWTARGET> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUACTVIEWTARGETDto> ReadEDUACTVIEWTARGETsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUACTVIEWTARGETDto> ReadEDUACTVIEWTARGETsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUACTVIEWTARGETDto> ReadEDUACTVIEWTARGETsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUACTVIEWTARGET, bool>> filter);
		EDUACTVIEWTARGETDto ReadEDUACTVIEWTARGETs(string dtoKey);
		int CountEDUACTVIEWTARGETs();
		int CountEDUACTVIEWTARGETs(string filterExpression);
		int CountEDUACTVIEWTARGETs(Expression<Func<EDUACTVIEWTARGET, bool>> filter);
		string CreateEDUACTVIEWTARGET(EDUACTVIEWTARGETDto eduactviewtarget, bool doSaveChanges = true);
		void UpdateEDUACTVIEWTARGET(EDUACTVIEWTARGETDto eduactviewtarget, bool doSaveChanges = true);
		void UpdateEDUACTVIEWTARGETs(IEnumerable<EDUACTVIEWTARGETDto> eduactviewtargets, bool doSaveChanges = true);
		void DeleteEDUACTVIEWTARGET(EDUACTVIEWTARGETDto eduactviewtarget, bool doSaveChanges = true);
		void DeleteEDUACTVIEWTARGETs(IEnumerable<EDUACTVIEWTARGETDto> eduactviewtargets, bool doSaveChanges = true);
		void SaveEDUACTVIEWTARGET(EDUACTVIEWTARGETDto eduactviewtarget, bool doSaveChanges = true);
		void SaveEDUACTVIEWTARGETs(IEnumerable<EDUACTVIEWTARGETDto> eduactviewtargets, bool doSaveChanges = true);


		#endregion EDUACTVIEWTARGET CRUD Operations


		#region EDUACTTYPEROLEREF CRUD Operations


		IEDUACTTYPEROLEREFService EDUACTTYPEROLEREFService { get; }
		IQueryable<EDUACTTYPEROLEREF> EDUACTTYPEROLEREFs { get; }
		IQueryable<EDUACTTYPEROLEREF> ReadEDUACTTYPEROLEREFs(Expression<Func<EDUACTTYPEROLEREF, bool>> filter, int dummy);
		IEnumerable<EDUACTTYPEROLEREFDto> ReadEDUACTTYPEROLEREFs();
		IEnumerable<EDUACTTYPEROLEREFDto> ReadEDUACTTYPEROLEREFs(Expression<Func<EDUACTTYPEROLEREF, bool>> filter);
		IEnumerable<EDUACTTYPEROLEREFDto> ReadEDUACTTYPEROLEREFs(ISpecification<EDUACTTYPEROLEREF> specification);
		IEnumerable<EDUACTTYPEROLEREFDto> ReadEDUACTTYPEROLEREFs(IQueryable<EDUACTTYPEROLEREF> query);
		IEnumerable<EDUACTTYPEROLEREFDto> ReadEDUACTTYPEROLEREFs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUACTTYPEROLEREFDto> ReadEDUACTTYPEROLEREFs(object[] keyWords);
		IEnumerable<EDUACTTYPEROLEREFDto> ReadEDUACTTYPEROLEREFsPaged(int startIndex, int pageSize);
		IEnumerable<EDUACTTYPEROLEREFDto> ReadEDUACTTYPEROLEREFsPaged(IQueryable<EDUACTTYPEROLEREF> source, int pageIndex, int pageSize);
		IEnumerable<EDUACTTYPEROLEREFDto> ReadEDUACTTYPEROLEREFsPaged(IQueryable<EDUACTTYPEROLEREF> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUACTTYPEROLEREFDto> ReadEDUACTTYPEROLEREFsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUACTTYPEROLEREFDto> ReadEDUACTTYPEROLEREFsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUACTTYPEROLEREFDto> ReadEDUACTTYPEROLEREFsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUACTTYPEROLEREF, bool>> filter);
		EDUACTTYPEROLEREFDto ReadEDUACTTYPEROLEREFs(string dtoKey);
		int CountEDUACTTYPEROLEREFs();
		int CountEDUACTTYPEROLEREFs(string filterExpression);
		int CountEDUACTTYPEROLEREFs(Expression<Func<EDUACTTYPEROLEREF, bool>> filter);
		string CreateEDUACTTYPEROLEREF(EDUACTTYPEROLEREFDto eduacttyperoleref, bool doSaveChanges = true);
		void UpdateEDUACTTYPEROLEREF(EDUACTTYPEROLEREFDto eduacttyperoleref, bool doSaveChanges = true);
		void UpdateEDUACTTYPEROLEREFs(IEnumerable<EDUACTTYPEROLEREFDto> eduacttyperolerefs, bool doSaveChanges = true);
		void DeleteEDUACTTYPEROLEREF(EDUACTTYPEROLEREFDto eduacttyperoleref, bool doSaveChanges = true);
		void DeleteEDUACTTYPEROLEREFs(IEnumerable<EDUACTTYPEROLEREFDto> eduacttyperolerefs, bool doSaveChanges = true);
		void SaveEDUACTTYPEROLEREF(EDUACTTYPEROLEREFDto eduacttyperoleref, bool doSaveChanges = true);
		void SaveEDUACTTYPEROLEREFs(IEnumerable<EDUACTTYPEROLEREFDto> eduacttyperolerefs, bool doSaveChanges = true);


		#endregion EDUACTTYPEROLEREF CRUD Operations


		#region EDUACTTYPEREF CRUD Operations


		IEDUACTTYPEREFService EDUACTTYPEREFService { get; }
		IQueryable<EDUACTTYPEREF> EDUACTTYPEREFs { get; }
		IQueryable<EDUACTTYPEREF> ReadEDUACTTYPEREFs(Expression<Func<EDUACTTYPEREF, bool>> filter, int dummy);
		IEnumerable<EDUACTTYPEREFDto> ReadEDUACTTYPEREFs();
		IEnumerable<EDUACTTYPEREFDto> ReadEDUACTTYPEREFs(Expression<Func<EDUACTTYPEREF, bool>> filter);
		IEnumerable<EDUACTTYPEREFDto> ReadEDUACTTYPEREFs(ISpecification<EDUACTTYPEREF> specification);
		IEnumerable<EDUACTTYPEREFDto> ReadEDUACTTYPEREFs(IQueryable<EDUACTTYPEREF> query);
		IEnumerable<EDUACTTYPEREFDto> ReadEDUACTTYPEREFs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUACTTYPEREFDto> ReadEDUACTTYPEREFs(object[] keyWords);
		IEnumerable<EDUACTTYPEREFDto> ReadEDUACTTYPEREFsPaged(int startIndex, int pageSize);
		IEnumerable<EDUACTTYPEREFDto> ReadEDUACTTYPEREFsPaged(IQueryable<EDUACTTYPEREF> source, int pageIndex, int pageSize);
		IEnumerable<EDUACTTYPEREFDto> ReadEDUACTTYPEREFsPaged(IQueryable<EDUACTTYPEREF> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUACTTYPEREFDto> ReadEDUACTTYPEREFsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUACTTYPEREFDto> ReadEDUACTTYPEREFsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUACTTYPEREFDto> ReadEDUACTTYPEREFsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUACTTYPEREF, bool>> filter);
		EDUACTTYPEREFDto ReadEDUACTTYPEREFs(string dtoKey);
		int CountEDUACTTYPEREFs();
		int CountEDUACTTYPEREFs(string filterExpression);
		int CountEDUACTTYPEREFs(Expression<Func<EDUACTTYPEREF, bool>> filter);
		string CreateEDUACTTYPEREF(EDUACTTYPEREFDto eduacttyperef, bool doSaveChanges = true);
		void UpdateEDUACTTYPEREF(EDUACTTYPEREFDto eduacttyperef, bool doSaveChanges = true);
		void UpdateEDUACTTYPEREFs(IEnumerable<EDUACTTYPEREFDto> eduacttyperefs, bool doSaveChanges = true);
		void DeleteEDUACTTYPEREF(EDUACTTYPEREFDto eduacttyperef, bool doSaveChanges = true);
		void DeleteEDUACTTYPEREFs(IEnumerable<EDUACTTYPEREFDto> eduacttyperefs, bool doSaveChanges = true);
		void SaveEDUACTTYPEREF(EDUACTTYPEREFDto eduacttyperef, bool doSaveChanges = true);
		void SaveEDUACTTYPEREFs(IEnumerable<EDUACTTYPEREFDto> eduacttyperefs, bool doSaveChanges = true);


		#endregion EDUACTTYPEREF CRUD Operations


		#region EDUACTTYPEGROUPING CRUD Operations


		IEDUACTTYPEGROUPINGService EDUACTTYPEGROUPINGService { get; }
		IQueryable<EDUACTTYPEGROUPING> EDUACTTYPEGROUPINGs { get; }
		IQueryable<EDUACTTYPEGROUPING> ReadEDUACTTYPEGROUPINGs(Expression<Func<EDUACTTYPEGROUPING, bool>> filter, int dummy);
		IEnumerable<EDUACTTYPEGROUPINGDto> ReadEDUACTTYPEGROUPINGs();
		IEnumerable<EDUACTTYPEGROUPINGDto> ReadEDUACTTYPEGROUPINGs(Expression<Func<EDUACTTYPEGROUPING, bool>> filter);
		IEnumerable<EDUACTTYPEGROUPINGDto> ReadEDUACTTYPEGROUPINGs(ISpecification<EDUACTTYPEGROUPING> specification);
		IEnumerable<EDUACTTYPEGROUPINGDto> ReadEDUACTTYPEGROUPINGs(IQueryable<EDUACTTYPEGROUPING> query);
		IEnumerable<EDUACTTYPEGROUPINGDto> ReadEDUACTTYPEGROUPINGs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUACTTYPEGROUPINGDto> ReadEDUACTTYPEGROUPINGs(object[] keyWords);
		IEnumerable<EDUACTTYPEGROUPINGDto> ReadEDUACTTYPEGROUPINGsPaged(int startIndex, int pageSize);
		IEnumerable<EDUACTTYPEGROUPINGDto> ReadEDUACTTYPEGROUPINGsPaged(IQueryable<EDUACTTYPEGROUPING> source, int pageIndex, int pageSize);
		IEnumerable<EDUACTTYPEGROUPINGDto> ReadEDUACTTYPEGROUPINGsPaged(IQueryable<EDUACTTYPEGROUPING> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUACTTYPEGROUPINGDto> ReadEDUACTTYPEGROUPINGsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUACTTYPEGROUPINGDto> ReadEDUACTTYPEGROUPINGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUACTTYPEGROUPINGDto> ReadEDUACTTYPEGROUPINGsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUACTTYPEGROUPING, bool>> filter);
		EDUACTTYPEGROUPINGDto ReadEDUACTTYPEGROUPINGs(string dtoKey);
		int CountEDUACTTYPEGROUPINGs();
		int CountEDUACTTYPEGROUPINGs(string filterExpression);
		int CountEDUACTTYPEGROUPINGs(Expression<Func<EDUACTTYPEGROUPING, bool>> filter);
		string CreateEDUACTTYPEGROUPING(EDUACTTYPEGROUPINGDto eduacttypegrouping, bool doSaveChanges = true);
		void UpdateEDUACTTYPEGROUPING(EDUACTTYPEGROUPINGDto eduacttypegrouping, bool doSaveChanges = true);
		void UpdateEDUACTTYPEGROUPINGs(IEnumerable<EDUACTTYPEGROUPINGDto> eduacttypegroupings, bool doSaveChanges = true);
		void DeleteEDUACTTYPEGROUPING(EDUACTTYPEGROUPINGDto eduacttypegrouping, bool doSaveChanges = true);
		void DeleteEDUACTTYPEGROUPINGs(IEnumerable<EDUACTTYPEGROUPINGDto> eduacttypegroupings, bool doSaveChanges = true);
		void SaveEDUACTTYPEGROUPING(EDUACTTYPEGROUPINGDto eduacttypegrouping, bool doSaveChanges = true);
		void SaveEDUACTTYPEGROUPINGs(IEnumerable<EDUACTTYPEGROUPINGDto> eduacttypegroupings, bool doSaveChanges = true);


		#endregion EDUACTTYPEGROUPING CRUD Operations


		#region EDUACTTYPE_BK CRUD Operations


		IEDUACTTYPE_BKService EDUACTTYPE_BKService { get; }
		IQueryable<EDUACTTYPE_BK> EDUACTTYPE_BKs { get; }
		IQueryable<EDUACTTYPE_BK> ReadEDUACTTYPE_BKs(Expression<Func<EDUACTTYPE_BK, bool>> filter, int dummy);
		IEnumerable<EDUACTTYPE_BKDto> ReadEDUACTTYPE_BKs();
		IEnumerable<EDUACTTYPE_BKDto> ReadEDUACTTYPE_BKs(Expression<Func<EDUACTTYPE_BK, bool>> filter);
		IEnumerable<EDUACTTYPE_BKDto> ReadEDUACTTYPE_BKs(ISpecification<EDUACTTYPE_BK> specification);
		IEnumerable<EDUACTTYPE_BKDto> ReadEDUACTTYPE_BKs(IQueryable<EDUACTTYPE_BK> query);
		IEnumerable<EDUACTTYPE_BKDto> ReadEDUACTTYPE_BKs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUACTTYPE_BKDto> ReadEDUACTTYPE_BKs(object[] keyWords);
		IEnumerable<EDUACTTYPE_BKDto> ReadEDUACTTYPE_BKsPaged(int startIndex, int pageSize);
		IEnumerable<EDUACTTYPE_BKDto> ReadEDUACTTYPE_BKsPaged(IQueryable<EDUACTTYPE_BK> source, int pageIndex, int pageSize);
		IEnumerable<EDUACTTYPE_BKDto> ReadEDUACTTYPE_BKsPaged(IQueryable<EDUACTTYPE_BK> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUACTTYPE_BKDto> ReadEDUACTTYPE_BKsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUACTTYPE_BKDto> ReadEDUACTTYPE_BKsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUACTTYPE_BKDto> ReadEDUACTTYPE_BKsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUACTTYPE_BK, bool>> filter);
		EDUACTTYPE_BKDto ReadEDUACTTYPE_BKs(string dtoKey);
		int CountEDUACTTYPE_BKs();
		int CountEDUACTTYPE_BKs(string filterExpression);
		int CountEDUACTTYPE_BKs(Expression<Func<EDUACTTYPE_BK, bool>> filter);
		string CreateEDUACTTYPE_BK(EDUACTTYPE_BKDto eduacttype_bk, bool doSaveChanges = true);
		void UpdateEDUACTTYPE_BK(EDUACTTYPE_BKDto eduacttype_bk, bool doSaveChanges = true);
		void UpdateEDUACTTYPE_BKs(IEnumerable<EDUACTTYPE_BKDto> eduacttype_bks, bool doSaveChanges = true);
		void DeleteEDUACTTYPE_BK(EDUACTTYPE_BKDto eduacttype_bk, bool doSaveChanges = true);
		void DeleteEDUACTTYPE_BKs(IEnumerable<EDUACTTYPE_BKDto> eduacttype_bks, bool doSaveChanges = true);
		void SaveEDUACTTYPE_BK(EDUACTTYPE_BKDto eduacttype_bk, bool doSaveChanges = true);
		void SaveEDUACTTYPE_BKs(IEnumerable<EDUACTTYPE_BKDto> eduacttype_bks, bool doSaveChanges = true);


		#endregion EDUACTTYPE_BK CRUD Operations


		#region EDUACTTYPE CRUD Operations


		IEDUACTTYPEService EDUACTTYPEService { get; }
		IQueryable<EDUACTTYPE> EDUACTTYPEs { get; }
		IQueryable<EDUACTTYPE> ReadEDUACTTYPEs(Expression<Func<EDUACTTYPE, bool>> filter, int dummy);
		IEnumerable<EDUACTTYPEDto> ReadEDUACTTYPEs();
		IEnumerable<EDUACTTYPEDto> ReadEDUACTTYPEs(Expression<Func<EDUACTTYPE, bool>> filter);
		IEnumerable<EDUACTTYPEDto> ReadEDUACTTYPEs(ISpecification<EDUACTTYPE> specification);
		IEnumerable<EDUACTTYPEDto> ReadEDUACTTYPEs(IQueryable<EDUACTTYPE> query);
		IEnumerable<EDUACTTYPEDto> ReadEDUACTTYPEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUACTTYPEDto> ReadEDUACTTYPEs(object[] keyWords);
		IEnumerable<EDUACTTYPEDto> ReadEDUACTTYPEsPaged(int startIndex, int pageSize);
		IEnumerable<EDUACTTYPEDto> ReadEDUACTTYPEsPaged(IQueryable<EDUACTTYPE> source, int pageIndex, int pageSize);
		IEnumerable<EDUACTTYPEDto> ReadEDUACTTYPEsPaged(IQueryable<EDUACTTYPE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUACTTYPEDto> ReadEDUACTTYPEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUACTTYPEDto> ReadEDUACTTYPEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUACTTYPEDto> ReadEDUACTTYPEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUACTTYPE, bool>> filter);
		EDUACTTYPEDto ReadEDUACTTYPEs(string dtoKey);
		int CountEDUACTTYPEs();
		int CountEDUACTTYPEs(string filterExpression);
		int CountEDUACTTYPEs(Expression<Func<EDUACTTYPE, bool>> filter);
		string CreateEDUACTTYPE(EDUACTTYPEDto eduacttype, bool doSaveChanges = true);
		void UpdateEDUACTTYPE(EDUACTTYPEDto eduacttype, bool doSaveChanges = true);
		void UpdateEDUACTTYPEs(IEnumerable<EDUACTTYPEDto> eduacttypes, bool doSaveChanges = true);
		void DeleteEDUACTTYPE(EDUACTTYPEDto eduacttype, bool doSaveChanges = true);
		void DeleteEDUACTTYPEs(IEnumerable<EDUACTTYPEDto> eduacttypes, bool doSaveChanges = true);
		void SaveEDUACTTYPE(EDUACTTYPEDto eduacttype, bool doSaveChanges = true);
		void SaveEDUACTTYPEs(IEnumerable<EDUACTTYPEDto> eduacttypes, bool doSaveChanges = true);


		#endregion EDUACTTYPE CRUD Operations


		#region EDUACTTOPIC CRUD Operations


		IEDUACTTOPICService EDUACTTOPICService { get; }
		IQueryable<EDUACTTOPIC> EDUACTTOPICs { get; }
		IQueryable<EDUACTTOPIC> ReadEDUACTTOPICs(Expression<Func<EDUACTTOPIC, bool>> filter, int dummy);
		IEnumerable<EDUACTTOPICDto> ReadEDUACTTOPICs();
		IEnumerable<EDUACTTOPICDto> ReadEDUACTTOPICs(Expression<Func<EDUACTTOPIC, bool>> filter);
		IEnumerable<EDUACTTOPICDto> ReadEDUACTTOPICs(ISpecification<EDUACTTOPIC> specification);
		IEnumerable<EDUACTTOPICDto> ReadEDUACTTOPICs(IQueryable<EDUACTTOPIC> query);
		IEnumerable<EDUACTTOPICDto> ReadEDUACTTOPICs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUACTTOPICDto> ReadEDUACTTOPICs(object[] keyWords);
		IEnumerable<EDUACTTOPICDto> ReadEDUACTTOPICsPaged(int startIndex, int pageSize);
		IEnumerable<EDUACTTOPICDto> ReadEDUACTTOPICsPaged(IQueryable<EDUACTTOPIC> source, int pageIndex, int pageSize);
		IEnumerable<EDUACTTOPICDto> ReadEDUACTTOPICsPaged(IQueryable<EDUACTTOPIC> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUACTTOPICDto> ReadEDUACTTOPICsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUACTTOPICDto> ReadEDUACTTOPICsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUACTTOPICDto> ReadEDUACTTOPICsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUACTTOPIC, bool>> filter);
		EDUACTTOPICDto ReadEDUACTTOPICs(string dtoKey);
		int CountEDUACTTOPICs();
		int CountEDUACTTOPICs(string filterExpression);
		int CountEDUACTTOPICs(Expression<Func<EDUACTTOPIC, bool>> filter);
		string CreateEDUACTTOPIC(EDUACTTOPICDto eduacttopic, bool doSaveChanges = true);
		void UpdateEDUACTTOPIC(EDUACTTOPICDto eduacttopic, bool doSaveChanges = true);
		void UpdateEDUACTTOPICs(IEnumerable<EDUACTTOPICDto> eduacttopics, bool doSaveChanges = true);
		void DeleteEDUACTTOPIC(EDUACTTOPICDto eduacttopic, bool doSaveChanges = true);
		void DeleteEDUACTTOPICs(IEnumerable<EDUACTTOPICDto> eduacttopics, bool doSaveChanges = true);
		void SaveEDUACTTOPIC(EDUACTTOPICDto eduacttopic, bool doSaveChanges = true);
		void SaveEDUACTTOPICs(IEnumerable<EDUACTTOPICDto> eduacttopics, bool doSaveChanges = true);


		#endregion EDUACTTOPIC CRUD Operations


		#region EDUACTTARGET CRUD Operations


		IEDUACTTARGETService EDUACTTARGETService { get; }
		IQueryable<EDUACTTARGET> EDUACTTARGETs { get; }
		IQueryable<EDUACTTARGET> ReadEDUACTTARGETs(Expression<Func<EDUACTTARGET, bool>> filter, int dummy);
		IEnumerable<EDUACTTARGETDto> ReadEDUACTTARGETs();
		IEnumerable<EDUACTTARGETDto> ReadEDUACTTARGETs(Expression<Func<EDUACTTARGET, bool>> filter);
		IEnumerable<EDUACTTARGETDto> ReadEDUACTTARGETs(ISpecification<EDUACTTARGET> specification);
		IEnumerable<EDUACTTARGETDto> ReadEDUACTTARGETs(IQueryable<EDUACTTARGET> query);
		IEnumerable<EDUACTTARGETDto> ReadEDUACTTARGETs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUACTTARGETDto> ReadEDUACTTARGETs(object[] keyWords);
		IEnumerable<EDUACTTARGETDto> ReadEDUACTTARGETsPaged(int startIndex, int pageSize);
		IEnumerable<EDUACTTARGETDto> ReadEDUACTTARGETsPaged(IQueryable<EDUACTTARGET> source, int pageIndex, int pageSize);
		IEnumerable<EDUACTTARGETDto> ReadEDUACTTARGETsPaged(IQueryable<EDUACTTARGET> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUACTTARGETDto> ReadEDUACTTARGETsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUACTTARGETDto> ReadEDUACTTARGETsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUACTTARGETDto> ReadEDUACTTARGETsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUACTTARGET, bool>> filter);
		EDUACTTARGETDto ReadEDUACTTARGETs(string dtoKey);
		int CountEDUACTTARGETs();
		int CountEDUACTTARGETs(string filterExpression);
		int CountEDUACTTARGETs(Expression<Func<EDUACTTARGET, bool>> filter);
		string CreateEDUACTTARGET(EDUACTTARGETDto eduacttarget, bool doSaveChanges = true);
		void UpdateEDUACTTARGET(EDUACTTARGETDto eduacttarget, bool doSaveChanges = true);
		void UpdateEDUACTTARGETs(IEnumerable<EDUACTTARGETDto> eduacttargets, bool doSaveChanges = true);
		void DeleteEDUACTTARGET(EDUACTTARGETDto eduacttarget, bool doSaveChanges = true);
		void DeleteEDUACTTARGETs(IEnumerable<EDUACTTARGETDto> eduacttargets, bool doSaveChanges = true);
		void SaveEDUACTTARGET(EDUACTTARGETDto eduacttarget, bool doSaveChanges = true);
		void SaveEDUACTTARGETs(IEnumerable<EDUACTTARGETDto> eduacttargets, bool doSaveChanges = true);


		#endregion EDUACTTARGET CRUD Operations


		#region EDUACTBOOKING CRUD Operations


		IEDUACTBOOKINGService EDUACTBOOKINGService { get; }
		IQueryable<EDUACTBOOKING> EDUACTBOOKINGs { get; }
		IQueryable<EDUACTBOOKING> ReadEDUACTBOOKINGs(Expression<Func<EDUACTBOOKING, bool>> filter, int dummy);
		IEnumerable<EDUACTBOOKINGDto> ReadEDUACTBOOKINGs();
		IEnumerable<EDUACTBOOKINGDto> ReadEDUACTBOOKINGs(Expression<Func<EDUACTBOOKING, bool>> filter);
		IEnumerable<EDUACTBOOKINGDto> ReadEDUACTBOOKINGs(ISpecification<EDUACTBOOKING> specification);
		IEnumerable<EDUACTBOOKINGDto> ReadEDUACTBOOKINGs(IQueryable<EDUACTBOOKING> query);
		IEnumerable<EDUACTBOOKINGDto> ReadEDUACTBOOKINGs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<EDUACTBOOKINGDto> ReadEDUACTBOOKINGs(object[] keyWords);
		IEnumerable<EDUACTBOOKINGDto> ReadEDUACTBOOKINGsPaged(int startIndex, int pageSize);
		IEnumerable<EDUACTBOOKINGDto> ReadEDUACTBOOKINGsPaged(IQueryable<EDUACTBOOKING> source, int pageIndex, int pageSize);
		IEnumerable<EDUACTBOOKINGDto> ReadEDUACTBOOKINGsPaged(IQueryable<EDUACTBOOKING> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<EDUACTBOOKINGDto> ReadEDUACTBOOKINGsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EDUACTBOOKINGDto> ReadEDUACTBOOKINGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<EDUACTBOOKINGDto> ReadEDUACTBOOKINGsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUACTBOOKING, bool>> filter);
		EDUACTBOOKINGDto ReadEDUACTBOOKINGs(string dtoKey);
		int CountEDUACTBOOKINGs();
		int CountEDUACTBOOKINGs(string filterExpression);
		int CountEDUACTBOOKINGs(Expression<Func<EDUACTBOOKING, bool>> filter);
		string CreateEDUACTBOOKING(EDUACTBOOKINGDto eduactbooking, bool doSaveChanges = true);
		void UpdateEDUACTBOOKING(EDUACTBOOKINGDto eduactbooking, bool doSaveChanges = true);
		void UpdateEDUACTBOOKINGs(IEnumerable<EDUACTBOOKINGDto> eduactbookings, bool doSaveChanges = true);
		void DeleteEDUACTBOOKING(EDUACTBOOKINGDto eduactbooking, bool doSaveChanges = true);
		void DeleteEDUACTBOOKINGs(IEnumerable<EDUACTBOOKINGDto> eduactbookings, bool doSaveChanges = true);
		void SaveEDUACTBOOKING(EDUACTBOOKINGDto eduactbooking, bool doSaveChanges = true);
		void SaveEDUACTBOOKINGs(IEnumerable<EDUACTBOOKINGDto> eduactbookings, bool doSaveChanges = true);


		#endregion EDUACTBOOKING CRUD Operations


		#region DOCTORPOINTTYPE CRUD Operations


		IDOCTORPOINTTYPEService DOCTORPOINTTYPEService { get; }
		IQueryable<DOCTORPOINTTYPE> DOCTORPOINTTYPEs { get; }
		IQueryable<DOCTORPOINTTYPE> ReadDOCTORPOINTTYPEs(Expression<Func<DOCTORPOINTTYPE, bool>> filter, int dummy);
		IEnumerable<DOCTORPOINTTYPEDto> ReadDOCTORPOINTTYPEs();
		IEnumerable<DOCTORPOINTTYPEDto> ReadDOCTORPOINTTYPEs(Expression<Func<DOCTORPOINTTYPE, bool>> filter);
		IEnumerable<DOCTORPOINTTYPEDto> ReadDOCTORPOINTTYPEs(ISpecification<DOCTORPOINTTYPE> specification);
		IEnumerable<DOCTORPOINTTYPEDto> ReadDOCTORPOINTTYPEs(IQueryable<DOCTORPOINTTYPE> query);
		IEnumerable<DOCTORPOINTTYPEDto> ReadDOCTORPOINTTYPEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<DOCTORPOINTTYPEDto> ReadDOCTORPOINTTYPEs(object[] keyWords);
		IEnumerable<DOCTORPOINTTYPEDto> ReadDOCTORPOINTTYPEsPaged(int startIndex, int pageSize);
		IEnumerable<DOCTORPOINTTYPEDto> ReadDOCTORPOINTTYPEsPaged(IQueryable<DOCTORPOINTTYPE> source, int pageIndex, int pageSize);
		IEnumerable<DOCTORPOINTTYPEDto> ReadDOCTORPOINTTYPEsPaged(IQueryable<DOCTORPOINTTYPE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<DOCTORPOINTTYPEDto> ReadDOCTORPOINTTYPEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<DOCTORPOINTTYPEDto> ReadDOCTORPOINTTYPEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<DOCTORPOINTTYPEDto> ReadDOCTORPOINTTYPEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<DOCTORPOINTTYPE, bool>> filter);
		DOCTORPOINTTYPEDto ReadDOCTORPOINTTYPEs(string dtoKey);
		int CountDOCTORPOINTTYPEs();
		int CountDOCTORPOINTTYPEs(string filterExpression);
		int CountDOCTORPOINTTYPEs(Expression<Func<DOCTORPOINTTYPE, bool>> filter);
		string CreateDOCTORPOINTTYPE(DOCTORPOINTTYPEDto doctorpointtype, bool doSaveChanges = true);
		void UpdateDOCTORPOINTTYPE(DOCTORPOINTTYPEDto doctorpointtype, bool doSaveChanges = true);
		void UpdateDOCTORPOINTTYPEs(IEnumerable<DOCTORPOINTTYPEDto> doctorpointtypes, bool doSaveChanges = true);
		void DeleteDOCTORPOINTTYPE(DOCTORPOINTTYPEDto doctorpointtype, bool doSaveChanges = true);
		void DeleteDOCTORPOINTTYPEs(IEnumerable<DOCTORPOINTTYPEDto> doctorpointtypes, bool doSaveChanges = true);
		void SaveDOCTORPOINTTYPE(DOCTORPOINTTYPEDto doctorpointtype, bool doSaveChanges = true);
		void SaveDOCTORPOINTTYPEs(IEnumerable<DOCTORPOINTTYPEDto> doctorpointtypes, bool doSaveChanges = true);


		#endregion DOCTORPOINTTYPE CRUD Operations


		#region DOCTORPOINTCALTYPE CRUD Operations


		IDOCTORPOINTCALTYPEService DOCTORPOINTCALTYPEService { get; }
		IQueryable<DOCTORPOINTCALTYPE> DOCTORPOINTCALTYPEs { get; }
		IQueryable<DOCTORPOINTCALTYPE> ReadDOCTORPOINTCALTYPEs(Expression<Func<DOCTORPOINTCALTYPE, bool>> filter, int dummy);
		IEnumerable<DOCTORPOINTCALTYPEDto> ReadDOCTORPOINTCALTYPEs();
		IEnumerable<DOCTORPOINTCALTYPEDto> ReadDOCTORPOINTCALTYPEs(Expression<Func<DOCTORPOINTCALTYPE, bool>> filter);
		IEnumerable<DOCTORPOINTCALTYPEDto> ReadDOCTORPOINTCALTYPEs(ISpecification<DOCTORPOINTCALTYPE> specification);
		IEnumerable<DOCTORPOINTCALTYPEDto> ReadDOCTORPOINTCALTYPEs(IQueryable<DOCTORPOINTCALTYPE> query);
		IEnumerable<DOCTORPOINTCALTYPEDto> ReadDOCTORPOINTCALTYPEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<DOCTORPOINTCALTYPEDto> ReadDOCTORPOINTCALTYPEs(object[] keyWords);
		IEnumerable<DOCTORPOINTCALTYPEDto> ReadDOCTORPOINTCALTYPEsPaged(int startIndex, int pageSize);
		IEnumerable<DOCTORPOINTCALTYPEDto> ReadDOCTORPOINTCALTYPEsPaged(IQueryable<DOCTORPOINTCALTYPE> source, int pageIndex, int pageSize);
		IEnumerable<DOCTORPOINTCALTYPEDto> ReadDOCTORPOINTCALTYPEsPaged(IQueryable<DOCTORPOINTCALTYPE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<DOCTORPOINTCALTYPEDto> ReadDOCTORPOINTCALTYPEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<DOCTORPOINTCALTYPEDto> ReadDOCTORPOINTCALTYPEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<DOCTORPOINTCALTYPEDto> ReadDOCTORPOINTCALTYPEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<DOCTORPOINTCALTYPE, bool>> filter);
		DOCTORPOINTCALTYPEDto ReadDOCTORPOINTCALTYPEs(string dtoKey);
		int CountDOCTORPOINTCALTYPEs();
		int CountDOCTORPOINTCALTYPEs(string filterExpression);
		int CountDOCTORPOINTCALTYPEs(Expression<Func<DOCTORPOINTCALTYPE, bool>> filter);
		string CreateDOCTORPOINTCALTYPE(DOCTORPOINTCALTYPEDto doctorpointcaltype, bool doSaveChanges = true);
		void UpdateDOCTORPOINTCALTYPE(DOCTORPOINTCALTYPEDto doctorpointcaltype, bool doSaveChanges = true);
		void UpdateDOCTORPOINTCALTYPEs(IEnumerable<DOCTORPOINTCALTYPEDto> doctorpointcaltypes, bool doSaveChanges = true);
		void DeleteDOCTORPOINTCALTYPE(DOCTORPOINTCALTYPEDto doctorpointcaltype, bool doSaveChanges = true);
		void DeleteDOCTORPOINTCALTYPEs(IEnumerable<DOCTORPOINTCALTYPEDto> doctorpointcaltypes, bool doSaveChanges = true);
		void SaveDOCTORPOINTCALTYPE(DOCTORPOINTCALTYPEDto doctorpointcaltype, bool doSaveChanges = true);
		void SaveDOCTORPOINTCALTYPEs(IEnumerable<DOCTORPOINTCALTYPEDto> doctorpointcaltypes, bool doSaveChanges = true);


		#endregion DOCTORPOINTCALTYPE CRUD Operations


		#region DOCTORPOINT CRUD Operations


		IDOCTORPOINTService DOCTORPOINTService { get; }
		IQueryable<DOCTORPOINT> DOCTORPOINTs { get; }
		IQueryable<DOCTORPOINT> ReadDOCTORPOINTs(Expression<Func<DOCTORPOINT, bool>> filter, int dummy);
		IEnumerable<DOCTORPOINTDto> ReadDOCTORPOINTs();
		IEnumerable<DOCTORPOINTDto> ReadDOCTORPOINTs(Expression<Func<DOCTORPOINT, bool>> filter);
		IEnumerable<DOCTORPOINTDto> ReadDOCTORPOINTs(ISpecification<DOCTORPOINT> specification);
		IEnumerable<DOCTORPOINTDto> ReadDOCTORPOINTs(IQueryable<DOCTORPOINT> query);
		IEnumerable<DOCTORPOINTDto> ReadDOCTORPOINTs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<DOCTORPOINTDto> ReadDOCTORPOINTs(object[] keyWords);
		IEnumerable<DOCTORPOINTDto> ReadDOCTORPOINTsPaged(int startIndex, int pageSize);
		IEnumerable<DOCTORPOINTDto> ReadDOCTORPOINTsPaged(IQueryable<DOCTORPOINT> source, int pageIndex, int pageSize);
		IEnumerable<DOCTORPOINTDto> ReadDOCTORPOINTsPaged(IQueryable<DOCTORPOINT> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<DOCTORPOINTDto> ReadDOCTORPOINTsFiltered(string sortExpression, string filterExpression);
		IEnumerable<DOCTORPOINTDto> ReadDOCTORPOINTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<DOCTORPOINTDto> ReadDOCTORPOINTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<DOCTORPOINT, bool>> filter);
		DOCTORPOINTDto ReadDOCTORPOINTs(string dtoKey);
		int CountDOCTORPOINTs();
		int CountDOCTORPOINTs(string filterExpression);
		int CountDOCTORPOINTs(Expression<Func<DOCTORPOINT, bool>> filter);
		string CreateDOCTORPOINT(DOCTORPOINTDto doctorpoint, bool doSaveChanges = true);
		void UpdateDOCTORPOINT(DOCTORPOINTDto doctorpoint, bool doSaveChanges = true);
		void UpdateDOCTORPOINTs(IEnumerable<DOCTORPOINTDto> doctorpoints, bool doSaveChanges = true);
		void DeleteDOCTORPOINT(DOCTORPOINTDto doctorpoint, bool doSaveChanges = true);
		void DeleteDOCTORPOINTs(IEnumerable<DOCTORPOINTDto> doctorpoints, bool doSaveChanges = true);
		void SaveDOCTORPOINT(DOCTORPOINTDto doctorpoint, bool doSaveChanges = true);
		void SaveDOCTORPOINTs(IEnumerable<DOCTORPOINTDto> doctorpoints, bool doSaveChanges = true);


		#endregion DOCTORPOINT CRUD Operations


		#region DEPSECTEMP CRUD Operations


		IDEPSECTEMPService DEPSECTEMPService { get; }
		IQueryable<DEPSECTEMP> DEPSECTEMPs { get; }
		IQueryable<DEPSECTEMP> ReadDEPSECTEMPs(Expression<Func<DEPSECTEMP, bool>> filter, int dummy);
		IEnumerable<DEPSECTEMPDto> ReadDEPSECTEMPs();
		IEnumerable<DEPSECTEMPDto> ReadDEPSECTEMPs(Expression<Func<DEPSECTEMP, bool>> filter);
		IEnumerable<DEPSECTEMPDto> ReadDEPSECTEMPs(ISpecification<DEPSECTEMP> specification);
		IEnumerable<DEPSECTEMPDto> ReadDEPSECTEMPs(IQueryable<DEPSECTEMP> query);
		IEnumerable<DEPSECTEMPDto> ReadDEPSECTEMPs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<DEPSECTEMPDto> ReadDEPSECTEMPs(object[] keyWords);
		IEnumerable<DEPSECTEMPDto> ReadDEPSECTEMPsPaged(int startIndex, int pageSize);
		IEnumerable<DEPSECTEMPDto> ReadDEPSECTEMPsPaged(IQueryable<DEPSECTEMP> source, int pageIndex, int pageSize);
		IEnumerable<DEPSECTEMPDto> ReadDEPSECTEMPsPaged(IQueryable<DEPSECTEMP> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<DEPSECTEMPDto> ReadDEPSECTEMPsFiltered(string sortExpression, string filterExpression);
		IEnumerable<DEPSECTEMPDto> ReadDEPSECTEMPsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<DEPSECTEMPDto> ReadDEPSECTEMPsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<DEPSECTEMP, bool>> filter);
		DEPSECTEMPDto ReadDEPSECTEMPs(string dtoKey);
		int CountDEPSECTEMPs();
		int CountDEPSECTEMPs(string filterExpression);
		int CountDEPSECTEMPs(Expression<Func<DEPSECTEMP, bool>> filter);
		string CreateDEPSECTEMP(DEPSECTEMPDto depsectemp, bool doSaveChanges = true);
		void UpdateDEPSECTEMP(DEPSECTEMPDto depsectemp, bool doSaveChanges = true);
		void UpdateDEPSECTEMPs(IEnumerable<DEPSECTEMPDto> depsectemps, bool doSaveChanges = true);
		void DeleteDEPSECTEMP(DEPSECTEMPDto depsectemp, bool doSaveChanges = true);
		void DeleteDEPSECTEMPs(IEnumerable<DEPSECTEMPDto> depsectemps, bool doSaveChanges = true);
		void SaveDEPSECTEMP(DEPSECTEMPDto depsectemp, bool doSaveChanges = true);
		void SaveDEPSECTEMPs(IEnumerable<DEPSECTEMPDto> depsectemps, bool doSaveChanges = true);


		#endregion DEPSECTEMP CRUD Operations


		#region DEPSECDATUM CRUD Operations


		IDEPSECDATUMService DEPSECDATUMService { get; }
		IQueryable<DEPSECDATUM> DEPSECDATa { get; }
		IQueryable<DEPSECDATUM> ReadDEPSECDATa(Expression<Func<DEPSECDATUM, bool>> filter, int dummy);
		IEnumerable<DEPSECDATUMDto> ReadDEPSECDATa();
		IEnumerable<DEPSECDATUMDto> ReadDEPSECDATa(Expression<Func<DEPSECDATUM, bool>> filter);
		IEnumerable<DEPSECDATUMDto> ReadDEPSECDATa(ISpecification<DEPSECDATUM> specification);
		IEnumerable<DEPSECDATUMDto> ReadDEPSECDATa(IQueryable<DEPSECDATUM> query);
		IEnumerable<DEPSECDATUMDto> ReadDEPSECDATa(string[] propertyToSearch, object[] keyWords);
		IEnumerable<DEPSECDATUMDto> ReadDEPSECDATa(object[] keyWords);
		IEnumerable<DEPSECDATUMDto> ReadDEPSECDATaPaged(int startIndex, int pageSize);
		IEnumerable<DEPSECDATUMDto> ReadDEPSECDATaPaged(IQueryable<DEPSECDATUM> source, int pageIndex, int pageSize);
		IEnumerable<DEPSECDATUMDto> ReadDEPSECDATaPaged(IQueryable<DEPSECDATUM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<DEPSECDATUMDto> ReadDEPSECDATaFiltered(string sortExpression, string filterExpression);
		IEnumerable<DEPSECDATUMDto> ReadDEPSECDATaPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<DEPSECDATUMDto> ReadDEPSECDATaPagedAndFiltered(int startIndex, int pageSize, Expression<Func<DEPSECDATUM, bool>> filter);
		DEPSECDATUMDto ReadDEPSECDATa(string dtoKey);
		int CountDEPSECDATa();
		int CountDEPSECDATa(string filterExpression);
		int CountDEPSECDATa(Expression<Func<DEPSECDATUM, bool>> filter);
		string CreateDEPSECDATUM(DEPSECDATUMDto depsecdatum, bool doSaveChanges = true);
		void UpdateDEPSECDATUM(DEPSECDATUMDto depsecdatum, bool doSaveChanges = true);
		void UpdateDEPSECDATa(IEnumerable<DEPSECDATUMDto> depsecdata, bool doSaveChanges = true);
		void DeleteDEPSECDATUM(DEPSECDATUMDto depsecdatum, bool doSaveChanges = true);
		void DeleteDEPSECDATa(IEnumerable<DEPSECDATUMDto> depsecdata, bool doSaveChanges = true);
		void SaveDEPSECDATUM(DEPSECDATUMDto depsecdatum, bool doSaveChanges = true);
		void SaveDEPSECDATa(IEnumerable<DEPSECDATUMDto> depsecdata, bool doSaveChanges = true);


		#endregion DEPSECDATUM CRUD Operations


		#region CLERKIPDNOTEDATUM CRUD Operations


		ICLERKIPDNOTEDATUMService CLERKIPDNOTEDATUMService { get; }
		IQueryable<CLERKIPDNOTEDATUM> CLERKIPDNOTEDATa { get; }
		IQueryable<CLERKIPDNOTEDATUM> ReadCLERKIPDNOTEDATa(Expression<Func<CLERKIPDNOTEDATUM, bool>> filter, int dummy);
		IEnumerable<CLERKIPDNOTEDATUMDto> ReadCLERKIPDNOTEDATa();
		IEnumerable<CLERKIPDNOTEDATUMDto> ReadCLERKIPDNOTEDATa(Expression<Func<CLERKIPDNOTEDATUM, bool>> filter);
		IEnumerable<CLERKIPDNOTEDATUMDto> ReadCLERKIPDNOTEDATa(ISpecification<CLERKIPDNOTEDATUM> specification);
		IEnumerable<CLERKIPDNOTEDATUMDto> ReadCLERKIPDNOTEDATa(IQueryable<CLERKIPDNOTEDATUM> query);
		IEnumerable<CLERKIPDNOTEDATUMDto> ReadCLERKIPDNOTEDATa(string[] propertyToSearch, object[] keyWords);
		IEnumerable<CLERKIPDNOTEDATUMDto> ReadCLERKIPDNOTEDATa(object[] keyWords);
		IEnumerable<CLERKIPDNOTEDATUMDto> ReadCLERKIPDNOTEDATaPaged(int startIndex, int pageSize);
		IEnumerable<CLERKIPDNOTEDATUMDto> ReadCLERKIPDNOTEDATaPaged(IQueryable<CLERKIPDNOTEDATUM> source, int pageIndex, int pageSize);
		IEnumerable<CLERKIPDNOTEDATUMDto> ReadCLERKIPDNOTEDATaPaged(IQueryable<CLERKIPDNOTEDATUM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<CLERKIPDNOTEDATUMDto> ReadCLERKIPDNOTEDATaFiltered(string sortExpression, string filterExpression);
		IEnumerable<CLERKIPDNOTEDATUMDto> ReadCLERKIPDNOTEDATaPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<CLERKIPDNOTEDATUMDto> ReadCLERKIPDNOTEDATaPagedAndFiltered(int startIndex, int pageSize, Expression<Func<CLERKIPDNOTEDATUM, bool>> filter);
		CLERKIPDNOTEDATUMDto ReadCLERKIPDNOTEDATa(string dtoKey);
		int CountCLERKIPDNOTEDATa();
		int CountCLERKIPDNOTEDATa(string filterExpression);
		int CountCLERKIPDNOTEDATa(Expression<Func<CLERKIPDNOTEDATUM, bool>> filter);
		string CreateCLERKIPDNOTEDATUM(CLERKIPDNOTEDATUMDto clerkipdnotedatum, bool doSaveChanges = true);
		void UpdateCLERKIPDNOTEDATUM(CLERKIPDNOTEDATUMDto clerkipdnotedatum, bool doSaveChanges = true);
		void UpdateCLERKIPDNOTEDATa(IEnumerable<CLERKIPDNOTEDATUMDto> clerkipdnotedata, bool doSaveChanges = true);
		void DeleteCLERKIPDNOTEDATUM(CLERKIPDNOTEDATUMDto clerkipdnotedatum, bool doSaveChanges = true);
		void DeleteCLERKIPDNOTEDATa(IEnumerable<CLERKIPDNOTEDATUMDto> clerkipdnotedata, bool doSaveChanges = true);
		void SaveCLERKIPDNOTEDATUM(CLERKIPDNOTEDATUMDto clerkipdnotedatum, bool doSaveChanges = true);
		void SaveCLERKIPDNOTEDATa(IEnumerable<CLERKIPDNOTEDATUMDto> clerkipdnotedata, bool doSaveChanges = true);


		#endregion CLERKIPDNOTEDATUM CRUD Operations


		#region CICBOOK CRUD Operations


		ICICBOOKService CICBOOKService { get; }
		IQueryable<CICBOOK> CICBOOKs { get; }
		IQueryable<CICBOOK> ReadCICBOOKs(Expression<Func<CICBOOK, bool>> filter, int dummy);
		IEnumerable<CICBOOKDto> ReadCICBOOKs();
		IEnumerable<CICBOOKDto> ReadCICBOOKs(Expression<Func<CICBOOK, bool>> filter);
		IEnumerable<CICBOOKDto> ReadCICBOOKs(ISpecification<CICBOOK> specification);
		IEnumerable<CICBOOKDto> ReadCICBOOKs(IQueryable<CICBOOK> query);
		IEnumerable<CICBOOKDto> ReadCICBOOKs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<CICBOOKDto> ReadCICBOOKs(object[] keyWords);
		IEnumerable<CICBOOKDto> ReadCICBOOKsPaged(int startIndex, int pageSize);
		IEnumerable<CICBOOKDto> ReadCICBOOKsPaged(IQueryable<CICBOOK> source, int pageIndex, int pageSize);
		IEnumerable<CICBOOKDto> ReadCICBOOKsPaged(IQueryable<CICBOOK> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<CICBOOKDto> ReadCICBOOKsFiltered(string sortExpression, string filterExpression);
		IEnumerable<CICBOOKDto> ReadCICBOOKsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<CICBOOKDto> ReadCICBOOKsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<CICBOOK, bool>> filter);
		CICBOOKDto ReadCICBOOKs(string dtoKey);
		int CountCICBOOKs();
		int CountCICBOOKs(string filterExpression);
		int CountCICBOOKs(Expression<Func<CICBOOK, bool>> filter);
		string CreateCICBOOK(CICBOOKDto cicbook, bool doSaveChanges = true);
		void UpdateCICBOOK(CICBOOKDto cicbook, bool doSaveChanges = true);
		void UpdateCICBOOKs(IEnumerable<CICBOOKDto> cicbooks, bool doSaveChanges = true);
		void DeleteCICBOOK(CICBOOKDto cicbook, bool doSaveChanges = true);
		void DeleteCICBOOKs(IEnumerable<CICBOOKDto> cicbooks, bool doSaveChanges = true);
		void SaveCICBOOK(CICBOOKDto cicbook, bool doSaveChanges = true);
		void SaveCICBOOKs(IEnumerable<CICBOOKDto> cicbooks, bool doSaveChanges = true);


		#endregion CICBOOK CRUD Operations


		#region AUTOEDUFORMTEMPLATETARGET CRUD Operations


		IAUTOEDUFORMTEMPLATETARGETService AUTOEDUFORMTEMPLATETARGETService { get; }
		IQueryable<AUTOEDUFORMTEMPLATETARGET> AUTOEDUFORMTEMPLATETARGETs { get; }
		IQueryable<AUTOEDUFORMTEMPLATETARGET> ReadAUTOEDUFORMTEMPLATETARGETs(Expression<Func<AUTOEDUFORMTEMPLATETARGET, bool>> filter, int dummy);
		IEnumerable<AUTOEDUFORMTEMPLATETARGETDto> ReadAUTOEDUFORMTEMPLATETARGETs();
		IEnumerable<AUTOEDUFORMTEMPLATETARGETDto> ReadAUTOEDUFORMTEMPLATETARGETs(Expression<Func<AUTOEDUFORMTEMPLATETARGET, bool>> filter);
		IEnumerable<AUTOEDUFORMTEMPLATETARGETDto> ReadAUTOEDUFORMTEMPLATETARGETs(ISpecification<AUTOEDUFORMTEMPLATETARGET> specification);
		IEnumerable<AUTOEDUFORMTEMPLATETARGETDto> ReadAUTOEDUFORMTEMPLATETARGETs(IQueryable<AUTOEDUFORMTEMPLATETARGET> query);
		IEnumerable<AUTOEDUFORMTEMPLATETARGETDto> ReadAUTOEDUFORMTEMPLATETARGETs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<AUTOEDUFORMTEMPLATETARGETDto> ReadAUTOEDUFORMTEMPLATETARGETs(object[] keyWords);
		IEnumerable<AUTOEDUFORMTEMPLATETARGETDto> ReadAUTOEDUFORMTEMPLATETARGETsPaged(int startIndex, int pageSize);
		IEnumerable<AUTOEDUFORMTEMPLATETARGETDto> ReadAUTOEDUFORMTEMPLATETARGETsPaged(IQueryable<AUTOEDUFORMTEMPLATETARGET> source, int pageIndex, int pageSize);
		IEnumerable<AUTOEDUFORMTEMPLATETARGETDto> ReadAUTOEDUFORMTEMPLATETARGETsPaged(IQueryable<AUTOEDUFORMTEMPLATETARGET> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<AUTOEDUFORMTEMPLATETARGETDto> ReadAUTOEDUFORMTEMPLATETARGETsFiltered(string sortExpression, string filterExpression);
		IEnumerable<AUTOEDUFORMTEMPLATETARGETDto> ReadAUTOEDUFORMTEMPLATETARGETsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<AUTOEDUFORMTEMPLATETARGETDto> ReadAUTOEDUFORMTEMPLATETARGETsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<AUTOEDUFORMTEMPLATETARGET, bool>> filter);
		AUTOEDUFORMTEMPLATETARGETDto ReadAUTOEDUFORMTEMPLATETARGETs(string dtoKey);
		int CountAUTOEDUFORMTEMPLATETARGETs();
		int CountAUTOEDUFORMTEMPLATETARGETs(string filterExpression);
		int CountAUTOEDUFORMTEMPLATETARGETs(Expression<Func<AUTOEDUFORMTEMPLATETARGET, bool>> filter);
		string CreateAUTOEDUFORMTEMPLATETARGET(AUTOEDUFORMTEMPLATETARGETDto autoeduformtemplatetarget, bool doSaveChanges = true);
		void UpdateAUTOEDUFORMTEMPLATETARGET(AUTOEDUFORMTEMPLATETARGETDto autoeduformtemplatetarget, bool doSaveChanges = true);
		void UpdateAUTOEDUFORMTEMPLATETARGETs(IEnumerable<AUTOEDUFORMTEMPLATETARGETDto> autoeduformtemplatetargets, bool doSaveChanges = true);
		void DeleteAUTOEDUFORMTEMPLATETARGET(AUTOEDUFORMTEMPLATETARGETDto autoeduformtemplatetarget, bool doSaveChanges = true);
		void DeleteAUTOEDUFORMTEMPLATETARGETs(IEnumerable<AUTOEDUFORMTEMPLATETARGETDto> autoeduformtemplatetargets, bool doSaveChanges = true);
		void SaveAUTOEDUFORMTEMPLATETARGET(AUTOEDUFORMTEMPLATETARGETDto autoeduformtemplatetarget, bool doSaveChanges = true);
		void SaveAUTOEDUFORMTEMPLATETARGETs(IEnumerable<AUTOEDUFORMTEMPLATETARGETDto> autoeduformtemplatetargets, bool doSaveChanges = true);


		#endregion AUTOEDUFORMTEMPLATETARGET CRUD Operations


		#region AUTOEDUFORMTEMPLATESIGNER CRUD Operations


		IAUTOEDUFORMTEMPLATESIGNERService AUTOEDUFORMTEMPLATESIGNERService { get; }
		IQueryable<AUTOEDUFORMTEMPLATESIGNER> AUTOEDUFORMTEMPLATESIGNERs { get; }
		IQueryable<AUTOEDUFORMTEMPLATESIGNER> ReadAUTOEDUFORMTEMPLATESIGNERs(Expression<Func<AUTOEDUFORMTEMPLATESIGNER, bool>> filter, int dummy);
		IEnumerable<AUTOEDUFORMTEMPLATESIGNERDto> ReadAUTOEDUFORMTEMPLATESIGNERs();
		IEnumerable<AUTOEDUFORMTEMPLATESIGNERDto> ReadAUTOEDUFORMTEMPLATESIGNERs(Expression<Func<AUTOEDUFORMTEMPLATESIGNER, bool>> filter);
		IEnumerable<AUTOEDUFORMTEMPLATESIGNERDto> ReadAUTOEDUFORMTEMPLATESIGNERs(ISpecification<AUTOEDUFORMTEMPLATESIGNER> specification);
		IEnumerable<AUTOEDUFORMTEMPLATESIGNERDto> ReadAUTOEDUFORMTEMPLATESIGNERs(IQueryable<AUTOEDUFORMTEMPLATESIGNER> query);
		IEnumerable<AUTOEDUFORMTEMPLATESIGNERDto> ReadAUTOEDUFORMTEMPLATESIGNERs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<AUTOEDUFORMTEMPLATESIGNERDto> ReadAUTOEDUFORMTEMPLATESIGNERs(object[] keyWords);
		IEnumerable<AUTOEDUFORMTEMPLATESIGNERDto> ReadAUTOEDUFORMTEMPLATESIGNERsPaged(int startIndex, int pageSize);
		IEnumerable<AUTOEDUFORMTEMPLATESIGNERDto> ReadAUTOEDUFORMTEMPLATESIGNERsPaged(IQueryable<AUTOEDUFORMTEMPLATESIGNER> source, int pageIndex, int pageSize);
		IEnumerable<AUTOEDUFORMTEMPLATESIGNERDto> ReadAUTOEDUFORMTEMPLATESIGNERsPaged(IQueryable<AUTOEDUFORMTEMPLATESIGNER> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<AUTOEDUFORMTEMPLATESIGNERDto> ReadAUTOEDUFORMTEMPLATESIGNERsFiltered(string sortExpression, string filterExpression);
		IEnumerable<AUTOEDUFORMTEMPLATESIGNERDto> ReadAUTOEDUFORMTEMPLATESIGNERsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<AUTOEDUFORMTEMPLATESIGNERDto> ReadAUTOEDUFORMTEMPLATESIGNERsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<AUTOEDUFORMTEMPLATESIGNER, bool>> filter);
		AUTOEDUFORMTEMPLATESIGNERDto ReadAUTOEDUFORMTEMPLATESIGNERs(string dtoKey);
		int CountAUTOEDUFORMTEMPLATESIGNERs();
		int CountAUTOEDUFORMTEMPLATESIGNERs(string filterExpression);
		int CountAUTOEDUFORMTEMPLATESIGNERs(Expression<Func<AUTOEDUFORMTEMPLATESIGNER, bool>> filter);
		string CreateAUTOEDUFORMTEMPLATESIGNER(AUTOEDUFORMTEMPLATESIGNERDto autoeduformtemplatesigner, bool doSaveChanges = true);
		void UpdateAUTOEDUFORMTEMPLATESIGNER(AUTOEDUFORMTEMPLATESIGNERDto autoeduformtemplatesigner, bool doSaveChanges = true);
		void UpdateAUTOEDUFORMTEMPLATESIGNERs(IEnumerable<AUTOEDUFORMTEMPLATESIGNERDto> autoeduformtemplatesigners, bool doSaveChanges = true);
		void DeleteAUTOEDUFORMTEMPLATESIGNER(AUTOEDUFORMTEMPLATESIGNERDto autoeduformtemplatesigner, bool doSaveChanges = true);
		void DeleteAUTOEDUFORMTEMPLATESIGNERs(IEnumerable<AUTOEDUFORMTEMPLATESIGNERDto> autoeduformtemplatesigners, bool doSaveChanges = true);
		void SaveAUTOEDUFORMTEMPLATESIGNER(AUTOEDUFORMTEMPLATESIGNERDto autoeduformtemplatesigner, bool doSaveChanges = true);
		void SaveAUTOEDUFORMTEMPLATESIGNERs(IEnumerable<AUTOEDUFORMTEMPLATESIGNERDto> autoeduformtemplatesigners, bool doSaveChanges = true);


		#endregion AUTOEDUFORMTEMPLATESIGNER CRUD Operations


		#region AUTOEDUFORMTEMPLATELIST CRUD Operations


		IAUTOEDUFORMTEMPLATELISTService AUTOEDUFORMTEMPLATELISTService { get; }
		IQueryable<AUTOEDUFORMTEMPLATELIST> AUTOEDUFORMTEMPLATELISTs { get; }
		IQueryable<AUTOEDUFORMTEMPLATELIST> ReadAUTOEDUFORMTEMPLATELISTs(Expression<Func<AUTOEDUFORMTEMPLATELIST, bool>> filter, int dummy);
		IEnumerable<AUTOEDUFORMTEMPLATELISTDto> ReadAUTOEDUFORMTEMPLATELISTs();
		IEnumerable<AUTOEDUFORMTEMPLATELISTDto> ReadAUTOEDUFORMTEMPLATELISTs(Expression<Func<AUTOEDUFORMTEMPLATELIST, bool>> filter);
		IEnumerable<AUTOEDUFORMTEMPLATELISTDto> ReadAUTOEDUFORMTEMPLATELISTs(ISpecification<AUTOEDUFORMTEMPLATELIST> specification);
		IEnumerable<AUTOEDUFORMTEMPLATELISTDto> ReadAUTOEDUFORMTEMPLATELISTs(IQueryable<AUTOEDUFORMTEMPLATELIST> query);
		IEnumerable<AUTOEDUFORMTEMPLATELISTDto> ReadAUTOEDUFORMTEMPLATELISTs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<AUTOEDUFORMTEMPLATELISTDto> ReadAUTOEDUFORMTEMPLATELISTs(object[] keyWords);
		IEnumerable<AUTOEDUFORMTEMPLATELISTDto> ReadAUTOEDUFORMTEMPLATELISTsPaged(int startIndex, int pageSize);
		IEnumerable<AUTOEDUFORMTEMPLATELISTDto> ReadAUTOEDUFORMTEMPLATELISTsPaged(IQueryable<AUTOEDUFORMTEMPLATELIST> source, int pageIndex, int pageSize);
		IEnumerable<AUTOEDUFORMTEMPLATELISTDto> ReadAUTOEDUFORMTEMPLATELISTsPaged(IQueryable<AUTOEDUFORMTEMPLATELIST> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<AUTOEDUFORMTEMPLATELISTDto> ReadAUTOEDUFORMTEMPLATELISTsFiltered(string sortExpression, string filterExpression);
		IEnumerable<AUTOEDUFORMTEMPLATELISTDto> ReadAUTOEDUFORMTEMPLATELISTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<AUTOEDUFORMTEMPLATELISTDto> ReadAUTOEDUFORMTEMPLATELISTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<AUTOEDUFORMTEMPLATELIST, bool>> filter);
		AUTOEDUFORMTEMPLATELISTDto ReadAUTOEDUFORMTEMPLATELISTs(string dtoKey);
		int CountAUTOEDUFORMTEMPLATELISTs();
		int CountAUTOEDUFORMTEMPLATELISTs(string filterExpression);
		int CountAUTOEDUFORMTEMPLATELISTs(Expression<Func<AUTOEDUFORMTEMPLATELIST, bool>> filter);
		string CreateAUTOEDUFORMTEMPLATELIST(AUTOEDUFORMTEMPLATELISTDto autoeduformtemplatelist, bool doSaveChanges = true);
		void UpdateAUTOEDUFORMTEMPLATELIST(AUTOEDUFORMTEMPLATELISTDto autoeduformtemplatelist, bool doSaveChanges = true);
		void UpdateAUTOEDUFORMTEMPLATELISTs(IEnumerable<AUTOEDUFORMTEMPLATELISTDto> autoeduformtemplatelists, bool doSaveChanges = true);
		void DeleteAUTOEDUFORMTEMPLATELIST(AUTOEDUFORMTEMPLATELISTDto autoeduformtemplatelist, bool doSaveChanges = true);
		void DeleteAUTOEDUFORMTEMPLATELISTs(IEnumerable<AUTOEDUFORMTEMPLATELISTDto> autoeduformtemplatelists, bool doSaveChanges = true);
		void SaveAUTOEDUFORMTEMPLATELIST(AUTOEDUFORMTEMPLATELISTDto autoeduformtemplatelist, bool doSaveChanges = true);
		void SaveAUTOEDUFORMTEMPLATELISTs(IEnumerable<AUTOEDUFORMTEMPLATELISTDto> autoeduformtemplatelists, bool doSaveChanges = true);


		#endregion AUTOEDUFORMTEMPLATELIST CRUD Operations


		#region AUTOEDUFORMTEMPLATEEXCEPT CRUD Operations


		IAUTOEDUFORMTEMPLATEEXCEPTService AUTOEDUFORMTEMPLATEEXCEPTService { get; }
		IQueryable<AUTOEDUFORMTEMPLATEEXCEPT> AUTOEDUFORMTEMPLATEEXCEPTs { get; }
		IQueryable<AUTOEDUFORMTEMPLATEEXCEPT> ReadAUTOEDUFORMTEMPLATEEXCEPTs(Expression<Func<AUTOEDUFORMTEMPLATEEXCEPT, bool>> filter, int dummy);
		IEnumerable<AUTOEDUFORMTEMPLATEEXCEPTDto> ReadAUTOEDUFORMTEMPLATEEXCEPTs();
		IEnumerable<AUTOEDUFORMTEMPLATEEXCEPTDto> ReadAUTOEDUFORMTEMPLATEEXCEPTs(Expression<Func<AUTOEDUFORMTEMPLATEEXCEPT, bool>> filter);
		IEnumerable<AUTOEDUFORMTEMPLATEEXCEPTDto> ReadAUTOEDUFORMTEMPLATEEXCEPTs(ISpecification<AUTOEDUFORMTEMPLATEEXCEPT> specification);
		IEnumerable<AUTOEDUFORMTEMPLATEEXCEPTDto> ReadAUTOEDUFORMTEMPLATEEXCEPTs(IQueryable<AUTOEDUFORMTEMPLATEEXCEPT> query);
		IEnumerable<AUTOEDUFORMTEMPLATEEXCEPTDto> ReadAUTOEDUFORMTEMPLATEEXCEPTs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<AUTOEDUFORMTEMPLATEEXCEPTDto> ReadAUTOEDUFORMTEMPLATEEXCEPTs(object[] keyWords);
		IEnumerable<AUTOEDUFORMTEMPLATEEXCEPTDto> ReadAUTOEDUFORMTEMPLATEEXCEPTsPaged(int startIndex, int pageSize);
		IEnumerable<AUTOEDUFORMTEMPLATEEXCEPTDto> ReadAUTOEDUFORMTEMPLATEEXCEPTsPaged(IQueryable<AUTOEDUFORMTEMPLATEEXCEPT> source, int pageIndex, int pageSize);
		IEnumerable<AUTOEDUFORMTEMPLATEEXCEPTDto> ReadAUTOEDUFORMTEMPLATEEXCEPTsPaged(IQueryable<AUTOEDUFORMTEMPLATEEXCEPT> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<AUTOEDUFORMTEMPLATEEXCEPTDto> ReadAUTOEDUFORMTEMPLATEEXCEPTsFiltered(string sortExpression, string filterExpression);
		IEnumerable<AUTOEDUFORMTEMPLATEEXCEPTDto> ReadAUTOEDUFORMTEMPLATEEXCEPTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<AUTOEDUFORMTEMPLATEEXCEPTDto> ReadAUTOEDUFORMTEMPLATEEXCEPTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<AUTOEDUFORMTEMPLATEEXCEPT, bool>> filter);
		AUTOEDUFORMTEMPLATEEXCEPTDto ReadAUTOEDUFORMTEMPLATEEXCEPTs(string dtoKey);
		int CountAUTOEDUFORMTEMPLATEEXCEPTs();
		int CountAUTOEDUFORMTEMPLATEEXCEPTs(string filterExpression);
		int CountAUTOEDUFORMTEMPLATEEXCEPTs(Expression<Func<AUTOEDUFORMTEMPLATEEXCEPT, bool>> filter);
		string CreateAUTOEDUFORMTEMPLATEEXCEPT(AUTOEDUFORMTEMPLATEEXCEPTDto autoeduformtemplateexcept, bool doSaveChanges = true);
		void UpdateAUTOEDUFORMTEMPLATEEXCEPT(AUTOEDUFORMTEMPLATEEXCEPTDto autoeduformtemplateexcept, bool doSaveChanges = true);
		void UpdateAUTOEDUFORMTEMPLATEEXCEPTs(IEnumerable<AUTOEDUFORMTEMPLATEEXCEPTDto> autoeduformtemplateexcepts, bool doSaveChanges = true);
		void DeleteAUTOEDUFORMTEMPLATEEXCEPT(AUTOEDUFORMTEMPLATEEXCEPTDto autoeduformtemplateexcept, bool doSaveChanges = true);
		void DeleteAUTOEDUFORMTEMPLATEEXCEPTs(IEnumerable<AUTOEDUFORMTEMPLATEEXCEPTDto> autoeduformtemplateexcepts, bool doSaveChanges = true);
		void SaveAUTOEDUFORMTEMPLATEEXCEPT(AUTOEDUFORMTEMPLATEEXCEPTDto autoeduformtemplateexcept, bool doSaveChanges = true);
		void SaveAUTOEDUFORMTEMPLATEEXCEPTs(IEnumerable<AUTOEDUFORMTEMPLATEEXCEPTDto> autoeduformtemplateexcepts, bool doSaveChanges = true);


		#endregion AUTOEDUFORMTEMPLATEEXCEPT CRUD Operations


		#region AUTHROLE CRUD Operations


		IAUTHROLEService AUTHROLEService { get; }
		IQueryable<AUTHROLE> AUTHROLEs { get; }
		IQueryable<AUTHROLE> ReadAUTHROLEs(Expression<Func<AUTHROLE, bool>> filter, int dummy);
		IEnumerable<AUTHROLEDto> ReadAUTHROLEs();
		IEnumerable<AUTHROLEDto> ReadAUTHROLEs(Expression<Func<AUTHROLE, bool>> filter);
		IEnumerable<AUTHROLEDto> ReadAUTHROLEs(ISpecification<AUTHROLE> specification);
		IEnumerable<AUTHROLEDto> ReadAUTHROLEs(IQueryable<AUTHROLE> query);
		IEnumerable<AUTHROLEDto> ReadAUTHROLEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<AUTHROLEDto> ReadAUTHROLEs(object[] keyWords);
		IEnumerable<AUTHROLEDto> ReadAUTHROLEsPaged(int startIndex, int pageSize);
		IEnumerable<AUTHROLEDto> ReadAUTHROLEsPaged(IQueryable<AUTHROLE> source, int pageIndex, int pageSize);
		IEnumerable<AUTHROLEDto> ReadAUTHROLEsPaged(IQueryable<AUTHROLE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<AUTHROLEDto> ReadAUTHROLEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<AUTHROLEDto> ReadAUTHROLEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<AUTHROLEDto> ReadAUTHROLEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<AUTHROLE, bool>> filter);
		AUTHROLEDto ReadAUTHROLEs(string dtoKey);
		int CountAUTHROLEs();
		int CountAUTHROLEs(string filterExpression);
		int CountAUTHROLEs(Expression<Func<AUTHROLE, bool>> filter);
		string CreateAUTHROLE(AUTHROLEDto authrole, bool doSaveChanges = true);
		void UpdateAUTHROLE(AUTHROLEDto authrole, bool doSaveChanges = true);
		void UpdateAUTHROLEs(IEnumerable<AUTHROLEDto> authroles, bool doSaveChanges = true);
		void DeleteAUTHROLE(AUTHROLEDto authrole, bool doSaveChanges = true);
		void DeleteAUTHROLEs(IEnumerable<AUTHROLEDto> authroles, bool doSaveChanges = true);
		void SaveAUTHROLE(AUTHROLEDto authrole, bool doSaveChanges = true);
		void SaveAUTHROLEs(IEnumerable<AUTHROLEDto> authroles, bool doSaveChanges = true);


		#endregion AUTHROLE CRUD Operations


		#region AUTHMENU CRUD Operations


		IAUTHMENUService AUTHMENUService { get; }
		IQueryable<AUTHMENU> AUTHMENUs { get; }
		IQueryable<AUTHMENU> ReadAUTHMENUs(Expression<Func<AUTHMENU, bool>> filter, int dummy);
		IEnumerable<AUTHMENUDto> ReadAUTHMENUs();
		IEnumerable<AUTHMENUDto> ReadAUTHMENUs(Expression<Func<AUTHMENU, bool>> filter);
		IEnumerable<AUTHMENUDto> ReadAUTHMENUs(ISpecification<AUTHMENU> specification);
		IEnumerable<AUTHMENUDto> ReadAUTHMENUs(IQueryable<AUTHMENU> query);
		IEnumerable<AUTHMENUDto> ReadAUTHMENUs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<AUTHMENUDto> ReadAUTHMENUs(object[] keyWords);
		IEnumerable<AUTHMENUDto> ReadAUTHMENUsPaged(int startIndex, int pageSize);
		IEnumerable<AUTHMENUDto> ReadAUTHMENUsPaged(IQueryable<AUTHMENU> source, int pageIndex, int pageSize);
		IEnumerable<AUTHMENUDto> ReadAUTHMENUsPaged(IQueryable<AUTHMENU> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<AUTHMENUDto> ReadAUTHMENUsFiltered(string sortExpression, string filterExpression);
		IEnumerable<AUTHMENUDto> ReadAUTHMENUsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<AUTHMENUDto> ReadAUTHMENUsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<AUTHMENU, bool>> filter);
		AUTHMENUDto ReadAUTHMENUs(string dtoKey);
		int CountAUTHMENUs();
		int CountAUTHMENUs(string filterExpression);
		int CountAUTHMENUs(Expression<Func<AUTHMENU, bool>> filter);
		string CreateAUTHMENU(AUTHMENUDto authmenu, bool doSaveChanges = true);
		void UpdateAUTHMENU(AUTHMENUDto authmenu, bool doSaveChanges = true);
		void UpdateAUTHMENUs(IEnumerable<AUTHMENUDto> authmenus, bool doSaveChanges = true);
		void DeleteAUTHMENU(AUTHMENUDto authmenu, bool doSaveChanges = true);
		void DeleteAUTHMENUs(IEnumerable<AUTHMENUDto> authmenus, bool doSaveChanges = true);
		void SaveAUTHMENU(AUTHMENUDto authmenu, bool doSaveChanges = true);
		void SaveAUTHMENUs(IEnumerable<AUTHMENUDto> authmenus, bool doSaveChanges = true);


		#endregion AUTHMENU CRUD Operations


		#region ACTTYPETREE_TEMP CRUD Operations


		IACTTYPETREE_TEMPService ACTTYPETREE_TEMPService { get; }
		IQueryable<ACTTYPETREE_TEMP> ACTTYPETREE_TEMPs { get; }
		IQueryable<ACTTYPETREE_TEMP> ReadACTTYPETREE_TEMPs(Expression<Func<ACTTYPETREE_TEMP, bool>> filter, int dummy);
		IEnumerable<ACTTYPETREE_TEMPDto> ReadACTTYPETREE_TEMPs();
		IEnumerable<ACTTYPETREE_TEMPDto> ReadACTTYPETREE_TEMPs(Expression<Func<ACTTYPETREE_TEMP, bool>> filter);
		IEnumerable<ACTTYPETREE_TEMPDto> ReadACTTYPETREE_TEMPs(ISpecification<ACTTYPETREE_TEMP> specification);
		IEnumerable<ACTTYPETREE_TEMPDto> ReadACTTYPETREE_TEMPs(IQueryable<ACTTYPETREE_TEMP> query);
		IEnumerable<ACTTYPETREE_TEMPDto> ReadACTTYPETREE_TEMPs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<ACTTYPETREE_TEMPDto> ReadACTTYPETREE_TEMPs(object[] keyWords);
		IEnumerable<ACTTYPETREE_TEMPDto> ReadACTTYPETREE_TEMPsPaged(int startIndex, int pageSize);
		IEnumerable<ACTTYPETREE_TEMPDto> ReadACTTYPETREE_TEMPsPaged(IQueryable<ACTTYPETREE_TEMP> source, int pageIndex, int pageSize);
		IEnumerable<ACTTYPETREE_TEMPDto> ReadACTTYPETREE_TEMPsPaged(IQueryable<ACTTYPETREE_TEMP> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<ACTTYPETREE_TEMPDto> ReadACTTYPETREE_TEMPsFiltered(string sortExpression, string filterExpression);
		IEnumerable<ACTTYPETREE_TEMPDto> ReadACTTYPETREE_TEMPsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<ACTTYPETREE_TEMPDto> ReadACTTYPETREE_TEMPsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<ACTTYPETREE_TEMP, bool>> filter);
		ACTTYPETREE_TEMPDto ReadACTTYPETREE_TEMPs(string dtoKey);
		int CountACTTYPETREE_TEMPs();
		int CountACTTYPETREE_TEMPs(string filterExpression);
		int CountACTTYPETREE_TEMPs(Expression<Func<ACTTYPETREE_TEMP, bool>> filter);
		string CreateACTTYPETREE_TEMP(ACTTYPETREE_TEMPDto acttypetree_temp, bool doSaveChanges = true);
		void UpdateACTTYPETREE_TEMP(ACTTYPETREE_TEMPDto acttypetree_temp, bool doSaveChanges = true);
		void UpdateACTTYPETREE_TEMPs(IEnumerable<ACTTYPETREE_TEMPDto> acttypetree_temps, bool doSaveChanges = true);
		void DeleteACTTYPETREE_TEMP(ACTTYPETREE_TEMPDto acttypetree_temp, bool doSaveChanges = true);
		void DeleteACTTYPETREE_TEMPs(IEnumerable<ACTTYPETREE_TEMPDto> acttypetree_temps, bool doSaveChanges = true);
		void SaveACTTYPETREE_TEMP(ACTTYPETREE_TEMPDto acttypetree_temp, bool doSaveChanges = true);
		void SaveACTTYPETREE_TEMPs(IEnumerable<ACTTYPETREE_TEMPDto> acttypetree_temps, bool doSaveChanges = true);


		#endregion ACTTYPETREE_TEMP CRUD Operations


		#region ACCOUNT CRUD Operations


		IACCOUNTService ACCOUNTService { get; }
		IQueryable<ACCOUNT> ACCOUNTs { get; }
		IQueryable<ACCOUNT> ReadACCOUNTs(Expression<Func<ACCOUNT, bool>> filter, int dummy);
		IEnumerable<ACCOUNTDto> ReadACCOUNTs();
		IEnumerable<ACCOUNTDto> ReadACCOUNTs(Expression<Func<ACCOUNT, bool>> filter);
		IEnumerable<ACCOUNTDto> ReadACCOUNTs(ISpecification<ACCOUNT> specification);
		IEnumerable<ACCOUNTDto> ReadACCOUNTs(IQueryable<ACCOUNT> query);
		IEnumerable<ACCOUNTDto> ReadACCOUNTs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<ACCOUNTDto> ReadACCOUNTs(object[] keyWords);
		IEnumerable<ACCOUNTDto> ReadACCOUNTsPaged(int startIndex, int pageSize);
		IEnumerable<ACCOUNTDto> ReadACCOUNTsPaged(IQueryable<ACCOUNT> source, int pageIndex, int pageSize);
		IEnumerable<ACCOUNTDto> ReadACCOUNTsPaged(IQueryable<ACCOUNT> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<ACCOUNTDto> ReadACCOUNTsFiltered(string sortExpression, string filterExpression);
		IEnumerable<ACCOUNTDto> ReadACCOUNTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<ACCOUNTDto> ReadACCOUNTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<ACCOUNT, bool>> filter);
		ACCOUNTDto ReadACCOUNTs(string dtoKey);
		int CountACCOUNTs();
		int CountACCOUNTs(string filterExpression);
		int CountACCOUNTs(Expression<Func<ACCOUNT, bool>> filter);
		string CreateACCOUNT(ACCOUNTDto account, bool doSaveChanges = true);
		void UpdateACCOUNT(ACCOUNTDto account, bool doSaveChanges = true);
		void UpdateACCOUNTs(IEnumerable<ACCOUNTDto> accounts, bool doSaveChanges = true);
		void DeleteACCOUNT(ACCOUNTDto account, bool doSaveChanges = true);
		void DeleteACCOUNTs(IEnumerable<ACCOUNTDto> accounts, bool doSaveChanges = true);
		void SaveACCOUNT(ACCOUNTDto account, bool doSaveChanges = true);
		void SaveACCOUNTs(IEnumerable<ACCOUNTDto> accounts, bool doSaveChanges = true);


		#endregion ACCOUNT CRUD Operations


		#region ACCOUNTROLEIMPORT CRUD Operations


		IACCOUNTROLEIMPORTService ACCOUNTROLEIMPORTService { get; }
		IQueryable<ACCOUNTROLEIMPORT> ACCOUNTROLEIMPORTs { get; }
		IQueryable<ACCOUNTROLEIMPORT> ReadACCOUNTROLEIMPORTs(Expression<Func<ACCOUNTROLEIMPORT, bool>> filter, int dummy);
		IEnumerable<ACCOUNTROLEIMPORTDto> ReadACCOUNTROLEIMPORTs();
		IEnumerable<ACCOUNTROLEIMPORTDto> ReadACCOUNTROLEIMPORTs(Expression<Func<ACCOUNTROLEIMPORT, bool>> filter);
		IEnumerable<ACCOUNTROLEIMPORTDto> ReadACCOUNTROLEIMPORTs(ISpecification<ACCOUNTROLEIMPORT> specification);
		IEnumerable<ACCOUNTROLEIMPORTDto> ReadACCOUNTROLEIMPORTs(IQueryable<ACCOUNTROLEIMPORT> query);
		IEnumerable<ACCOUNTROLEIMPORTDto> ReadACCOUNTROLEIMPORTs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<ACCOUNTROLEIMPORTDto> ReadACCOUNTROLEIMPORTs(object[] keyWords);
		IEnumerable<ACCOUNTROLEIMPORTDto> ReadACCOUNTROLEIMPORTsPaged(int startIndex, int pageSize);
		IEnumerable<ACCOUNTROLEIMPORTDto> ReadACCOUNTROLEIMPORTsPaged(IQueryable<ACCOUNTROLEIMPORT> source, int pageIndex, int pageSize);
		IEnumerable<ACCOUNTROLEIMPORTDto> ReadACCOUNTROLEIMPORTsPaged(IQueryable<ACCOUNTROLEIMPORT> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<ACCOUNTROLEIMPORTDto> ReadACCOUNTROLEIMPORTsFiltered(string sortExpression, string filterExpression);
		IEnumerable<ACCOUNTROLEIMPORTDto> ReadACCOUNTROLEIMPORTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<ACCOUNTROLEIMPORTDto> ReadACCOUNTROLEIMPORTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<ACCOUNTROLEIMPORT, bool>> filter);
		ACCOUNTROLEIMPORTDto ReadACCOUNTROLEIMPORTs(string dtoKey);
		int CountACCOUNTROLEIMPORTs();
		int CountACCOUNTROLEIMPORTs(string filterExpression);
		int CountACCOUNTROLEIMPORTs(Expression<Func<ACCOUNTROLEIMPORT, bool>> filter);
		string CreateACCOUNTROLEIMPORT(ACCOUNTROLEIMPORTDto accountroleimport, bool doSaveChanges = true);
		void UpdateACCOUNTROLEIMPORT(ACCOUNTROLEIMPORTDto accountroleimport, bool doSaveChanges = true);
		void UpdateACCOUNTROLEIMPORTs(IEnumerable<ACCOUNTROLEIMPORTDto> accountroleimports, bool doSaveChanges = true);
		void DeleteACCOUNTROLEIMPORT(ACCOUNTROLEIMPORTDto accountroleimport, bool doSaveChanges = true);
		void DeleteACCOUNTROLEIMPORTs(IEnumerable<ACCOUNTROLEIMPORTDto> accountroleimports, bool doSaveChanges = true);
		void SaveACCOUNTROLEIMPORT(ACCOUNTROLEIMPORTDto accountroleimport, bool doSaveChanges = true);
		void SaveACCOUNTROLEIMPORTs(IEnumerable<ACCOUNTROLEIMPORTDto> accountroleimports, bool doSaveChanges = true);


		#endregion ACCOUNTROLEIMPORT CRUD Operations


		#region ACCOUNTROLE CRUD Operations


		IACCOUNTROLEService ACCOUNTROLEService { get; }
		IQueryable<ACCOUNTROLE> ACCOUNTROLEs { get; }
		IQueryable<ACCOUNTROLE> ReadACCOUNTROLEs(Expression<Func<ACCOUNTROLE, bool>> filter, int dummy);
		IEnumerable<ACCOUNTROLEDto> ReadACCOUNTROLEs();
		IEnumerable<ACCOUNTROLEDto> ReadACCOUNTROLEs(Expression<Func<ACCOUNTROLE, bool>> filter);
		IEnumerable<ACCOUNTROLEDto> ReadACCOUNTROLEs(ISpecification<ACCOUNTROLE> specification);
		IEnumerable<ACCOUNTROLEDto> ReadACCOUNTROLEs(IQueryable<ACCOUNTROLE> query);
		IEnumerable<ACCOUNTROLEDto> ReadACCOUNTROLEs(string[] propertyToSearch, object[] keyWords);
		IEnumerable<ACCOUNTROLEDto> ReadACCOUNTROLEs(object[] keyWords);
		IEnumerable<ACCOUNTROLEDto> ReadACCOUNTROLEsPaged(int startIndex, int pageSize);
		IEnumerable<ACCOUNTROLEDto> ReadACCOUNTROLEsPaged(IQueryable<ACCOUNTROLE> source, int pageIndex, int pageSize);
		IEnumerable<ACCOUNTROLEDto> ReadACCOUNTROLEsPaged(IQueryable<ACCOUNTROLE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage);
		IEnumerable<ACCOUNTROLEDto> ReadACCOUNTROLEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<ACCOUNTROLEDto> ReadACCOUNTROLEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IEnumerable<ACCOUNTROLEDto> ReadACCOUNTROLEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<ACCOUNTROLE, bool>> filter);
		ACCOUNTROLEDto ReadACCOUNTROLEs(string dtoKey);
		int CountACCOUNTROLEs();
		int CountACCOUNTROLEs(string filterExpression);
		int CountACCOUNTROLEs(Expression<Func<ACCOUNTROLE, bool>> filter);
		string CreateACCOUNTROLE(ACCOUNTROLEDto accountrole, bool doSaveChanges = true);
		void UpdateACCOUNTROLE(ACCOUNTROLEDto accountrole, bool doSaveChanges = true);
		void UpdateACCOUNTROLEs(IEnumerable<ACCOUNTROLEDto> accountroles, bool doSaveChanges = true);
		void DeleteACCOUNTROLE(ACCOUNTROLEDto accountrole, bool doSaveChanges = true);
		void DeleteACCOUNTROLEs(IEnumerable<ACCOUNTROLEDto> accountroles, bool doSaveChanges = true);
		void SaveACCOUNTROLE(ACCOUNTROLEDto accountrole, bool doSaveChanges = true);
		void SaveACCOUNTROLEs(IEnumerable<ACCOUNTROLEDto> accountroles, bool doSaveChanges = true);


		#endregion ACCOUNTROLE CRUD Operations


	}
}
#pragma warning restore 1591

