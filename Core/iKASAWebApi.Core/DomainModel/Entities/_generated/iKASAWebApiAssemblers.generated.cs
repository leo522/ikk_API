

#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using AppFramework.ApplicationLayer.Assemblers;
using Telerik.OpenAccess;
using KMUH.iKASAWebApi.ApplicationLayer.DTO;
using KMUH.iKASAWebApi.DomainModel.Entities;

namespace KMUH.iKASAWebApi.ApplicationLayer.Assemblers
{
	public partial class 移課程暫存Assembler : 移課程暫存AssemblerBase, I移課程暫存Assembler
	{
	}


	public partial interface I移課程暫存Assembler : IEntityAssembler<移課程暫存Dto, 移課程暫存>
	{
	}


	public partial class 移課程暫存AssemblerBase : EntityAssembler<移課程暫存Dto, 移課程暫存>
	{
		partial void OnDTOAssembled(移課程暫存Dto dto);
		partial void OnEntityAssembled(移課程暫存 entity);


		public override 移課程暫存 Assemble(移課程暫存 entity, 移課程暫存Dto dto)
		{
			if (entity == null)
			{
				entity = new 移課程暫存();
			}
			entity.課程ID = dto.課程ID;
			entity.新課程名稱 = dto.新課程名稱;
			entity.移至課程ID = dto.移至課程ID;
			entity.原課程名稱 = dto.原課程名稱;
			return entity;
		}
		public override 移課程暫存Dto Assemble(移課程暫存 entity)
		{
			移課程暫存Dto dto = new 移課程暫存Dto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.課程ID = entity.課程ID;
			dto.新課程名稱 = entity.新課程名稱;
			dto.移至課程ID = entity.移至課程ID;
			dto.原課程名稱 = entity.原課程名稱;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class 抓MAIL暫存Assembler : 抓MAIL暫存AssemblerBase, I抓MAIL暫存Assembler
	{
	}


	public partial interface I抓MAIL暫存Assembler : IEntityAssembler<抓MAIL暫存Dto, 抓MAIL暫存>
	{
	}


	public partial class 抓MAIL暫存AssemblerBase : EntityAssembler<抓MAIL暫存Dto, 抓MAIL暫存>
	{
		partial void OnDTOAssembled(抓MAIL暫存Dto dto);
		partial void OnEntityAssembled(抓MAIL暫存 entity);


		public override 抓MAIL暫存 Assemble(抓MAIL暫存 entity, 抓MAIL暫存Dto dto)
		{
			if (entity == null)
			{
				entity = new 抓MAIL暫存();
			}
			entity.姓名 = dto.姓名;
			entity.身分證字號 = dto.身分證字號;
			entity.EMAIL = dto.EMAIL;
			entity.離職 = dto.離職;
			entity.職類 = dto.職類;
			entity.師生別 = dto.師生別;
			return entity;
		}
		public override 抓MAIL暫存Dto Assemble(抓MAIL暫存 entity)
		{
			抓MAIL暫存Dto dto = new 抓MAIL暫存Dto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.姓名 = entity.姓名;
			dto.身分證字號 = entity.身分證字號;
			dto.EMAIL = entity.EMAIL;
			dto.離職 = entity.離職;
			dto.職類 = entity.職類;
			dto.師生別 = entity.師生別;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class 住院醫師暫存Assembler : 住院醫師暫存AssemblerBase, I住院醫師暫存Assembler
	{
	}


	public partial interface I住院醫師暫存Assembler : IEntityAssembler<住院醫師暫存Dto, 住院醫師暫存>
	{
	}


	public partial class 住院醫師暫存AssemblerBase : EntityAssembler<住院醫師暫存Dto, 住院醫師暫存>
	{
		partial void OnDTOAssembled(住院醫師暫存Dto dto);
		partial void OnEntityAssembled(住院醫師暫存 entity);


		public override 住院醫師暫存 Assemble(住院醫師暫存 entity, 住院醫師暫存Dto dto)
		{
			if (entity == null)
			{
				entity = new 住院醫師暫存();
			}
			entity.參與人職編 = dto.參與人職編;
			entity.參與人姓名 = dto.參與人姓名;
			return entity;
		}
		public override 住院醫師暫存Dto Assemble(住院醫師暫存 entity)
		{
			住院醫師暫存Dto dto = new 住院醫師暫存Dto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.參與人職編 = entity.參與人職編;
			dto.參與人姓名 = entity.參與人姓名;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class 西醫受訓人員名單Assembler : 西醫受訓人員名單AssemblerBase, I西醫受訓人員名單Assembler
	{
	}


	public partial interface I西醫受訓人員名單Assembler : IEntityAssembler<西醫受訓人員名單Dto, 西醫受訓人員名單>
	{
	}


	public partial class 西醫受訓人員名單AssemblerBase : EntityAssembler<西醫受訓人員名單Dto, 西醫受訓人員名單>
	{
		partial void OnDTOAssembled(西醫受訓人員名單Dto dto);
		partial void OnEntityAssembled(西醫受訓人員名單 entity);


		public override 西醫受訓人員名單 Assemble(西醫受訓人員名單 entity, 西醫受訓人員名單Dto dto)
		{
			if (entity == null)
			{
				entity = new 西醫受訓人員名單();
			}
			entity.人員姓名 = dto.人員姓名;
			entity.身分證字號 = dto.身分證字號;
			entity.科別 = dto.科別;
			return entity;
		}
		public override 西醫受訓人員名單Dto Assemble(西醫受訓人員名單 entity)
		{
			西醫受訓人員名單Dto dto = new 西醫受訓人員名單Dto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.人員姓名 = entity.人員姓名;
			dto.身分證字號 = entity.身分證字號;
			dto.科別 = entity.科別;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class VOTEUSERDEFINELISTAssembler : VOTEUSERDEFINELISTAssemblerBase, IVOTEUSERDEFINELISTAssembler
	{
	}


	public partial interface IVOTEUSERDEFINELISTAssembler : IEntityAssembler<VOTEUSERDEFINELISTDto, VOTEUSERDEFINELIST>
	{
	}


	public partial class VOTEUSERDEFINELISTAssemblerBase : EntityAssembler<VOTEUSERDEFINELISTDto, VOTEUSERDEFINELIST>
	{
		partial void OnDTOAssembled(VOTEUSERDEFINELISTDto dto);
		partial void OnEntityAssembled(VOTEUSERDEFINELIST entity);


		public override VOTEUSERDEFINELIST Assemble(VOTEUSERDEFINELIST entity, VOTEUSERDEFINELISTDto dto)
		{
			if (entity == null)
			{
				entity = new VOTEUSERDEFINELIST();
			}
			entity.ID = dto.ID;
			entity.MAINID = dto.MAINID;
			entity.GROUPID = dto.GROUPID;
			entity.VALUE = dto.VALUE;
			entity.TEXT = dto.TEXT;
			return entity;
		}
		public override VOTEUSERDEFINELISTDto Assemble(VOTEUSERDEFINELIST entity)
		{
			VOTEUSERDEFINELISTDto dto = new VOTEUSERDEFINELISTDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.MAINID = entity.MAINID;
			dto.GROUPID = entity.GROUPID;
			dto.VALUE = entity.VALUE;
			dto.TEXT = entity.TEXT;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class VOTETEMPDATUMAssembler : VOTETEMPDATUMAssemblerBase, IVOTETEMPDATUMAssembler
	{
	}


	public partial interface IVOTETEMPDATUMAssembler : IEntityAssembler<VOTETEMPDATUMDto, VOTETEMPDATUM>
	{
	}


	public partial class VOTETEMPDATUMAssemblerBase : EntityAssembler<VOTETEMPDATUMDto, VOTETEMPDATUM>
	{
		partial void OnDTOAssembled(VOTETEMPDATUMDto dto);
		partial void OnEntityAssembled(VOTETEMPDATUM entity);


		public override VOTETEMPDATUM Assemble(VOTETEMPDATUM entity, VOTETEMPDATUMDto dto)
		{
			if (entity == null)
			{
				entity = new VOTETEMPDATUM();
			}
			entity.SERIAL = dto.SERIAL;
			entity.DES = dto.DES;
			entity.DEPT = dto.DEPT;
			entity.NAME = dto.NAME;
			return entity;
		}
		public override VOTETEMPDATUMDto Assemble(VOTETEMPDATUM entity)
		{
			VOTETEMPDATUMDto dto = new VOTETEMPDATUMDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.SERIAL = entity.SERIAL;
			dto.DES = entity.DES;
			dto.DEPT = entity.DEPT;
			dto.NAME = entity.NAME;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class VOTETARGETAssembler : VOTETARGETAssemblerBase, IVOTETARGETAssembler
	{
	}


	public partial interface IVOTETARGETAssembler : IEntityAssembler<VOTETARGETDto, VOTETARGET>
	{
	}


	public partial class VOTETARGETAssemblerBase : EntityAssembler<VOTETARGETDto, VOTETARGET>
	{
		partial void OnDTOAssembled(VOTETARGETDto dto);
		partial void OnEntityAssembled(VOTETARGET entity);


		public override VOTETARGET Assemble(VOTETARGET entity, VOTETARGETDto dto)
		{
			if (entity == null)
			{
				entity = new VOTETARGET();
			}
			entity.MAINID = dto.MAINID;
			entity.TARGETTYPE = dto.TARGETTYPE;
			entity.TARGETID = dto.TARGETID;
			return entity;
		}
		public override VOTETARGETDto Assemble(VOTETARGET entity)
		{
			VOTETARGETDto dto = new VOTETARGETDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.MAINID = entity.MAINID;
			dto.TARGETTYPE = entity.TARGETTYPE;
			dto.TARGETID = entity.TARGETID;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class VOTEMAINAssembler : VOTEMAINAssemblerBase, IVOTEMAINAssembler
	{
	}


	public partial interface IVOTEMAINAssembler : IEntityAssembler<VOTEMAINDto, VOTEMAIN>
	{
	}


	public partial class VOTEMAINAssemblerBase : EntityAssembler<VOTEMAINDto, VOTEMAIN>
	{
		partial void OnDTOAssembled(VOTEMAINDto dto);
		partial void OnEntityAssembled(VOTEMAIN entity);


		public override VOTEMAIN Assemble(VOTEMAIN entity, VOTEMAINDto dto)
		{
			if (entity == null)
			{
				entity = new VOTEMAIN();
			}
			entity.ID = dto.ID;
			entity.VOTENAME = dto.VOTENAME;
			entity.SDATE = dto.SDATE;
			entity.EDATE = dto.EDATE;
			entity.CREATER = dto.CREATER;
			entity.VOTETYPE = dto.VOTETYPE;
			entity.HOSPCODE = dto.HOSPCODE;
			entity.HEADER = dto.HEADER;
			return entity;
		}
		public override VOTEMAINDto Assemble(VOTEMAIN entity)
		{
			VOTEMAINDto dto = new VOTEMAINDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.VOTENAME = entity.VOTENAME;
			dto.SDATE = entity.SDATE;
			dto.EDATE = entity.EDATE;
			dto.CREATER = entity.CREATER;
			dto.VOTETYPE = entity.VOTETYPE;
			dto.HOSPCODE = entity.HOSPCODE;
			dto.HEADER = entity.HEADER;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class VOTEJOBAssembler : VOTEJOBAssemblerBase, IVOTEJOBAssembler
	{
	}


	public partial interface IVOTEJOBAssembler : IEntityAssembler<VOTEJOBDto, VOTEJOB>
	{
	}


	public partial class VOTEJOBAssemblerBase : EntityAssembler<VOTEJOBDto, VOTEJOB>
	{
		partial void OnDTOAssembled(VOTEJOBDto dto);
		partial void OnEntityAssembled(VOTEJOB entity);


		public override VOTEJOB Assemble(VOTEJOB entity, VOTEJOBDto dto)
		{
			if (entity == null)
			{
				entity = new VOTEJOB();
			}
			entity.ID = dto.ID;
			entity.MAINID = dto.MAINID;
			entity.JOBCODE = dto.JOBCODE;
			return entity;
		}
		public override VOTEJOBDto Assemble(VOTEJOB entity)
		{
			VOTEJOBDto dto = new VOTEJOBDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.MAINID = entity.MAINID;
			dto.JOBCODE = entity.JOBCODE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class VOTEINSTANCEAssembler : VOTEINSTANCEAssemblerBase, IVOTEINSTANCEAssembler
	{
	}


	public partial interface IVOTEINSTANCEAssembler : IEntityAssembler<VOTEINSTANCEDto, VOTEINSTANCE>
	{
	}


	public partial class VOTEINSTANCEAssemblerBase : EntityAssembler<VOTEINSTANCEDto, VOTEINSTANCE>
	{
		partial void OnDTOAssembled(VOTEINSTANCEDto dto);
		partial void OnEntityAssembled(VOTEINSTANCE entity);


		public override VOTEINSTANCE Assemble(VOTEINSTANCE entity, VOTEINSTANCEDto dto)
		{
			if (entity == null)
			{
				entity = new VOTEINSTANCE();
			}
			entity.ID = dto.ID;
			entity.MAINID = dto.MAINID;
			entity.CREATER = dto.CREATER;
			entity.CREATETIME = dto.CREATETIME;
			entity.STATUS = dto.STATUS;
			return entity;
		}
		public override VOTEINSTANCEDto Assemble(VOTEINSTANCE entity)
		{
			VOTEINSTANCEDto dto = new VOTEINSTANCEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.MAINID = entity.MAINID;
			dto.CREATER = entity.CREATER;
			dto.CREATETIME = entity.CREATETIME;
			dto.STATUS = entity.STATUS;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class VOTEINSDETAssembler : VOTEINSDETAssemblerBase, IVOTEINSDETAssembler
	{
	}


	public partial interface IVOTEINSDETAssembler : IEntityAssembler<VOTEINSDETDto, VOTEINSDET>
	{
	}


	public partial class VOTEINSDETAssemblerBase : EntityAssembler<VOTEINSDETDto, VOTEINSDET>
	{
		partial void OnDTOAssembled(VOTEINSDETDto dto);
		partial void OnEntityAssembled(VOTEINSDET entity);


		public override VOTEINSDET Assemble(VOTEINSDET entity, VOTEINSDETDto dto)
		{
			if (entity == null)
			{
				entity = new VOTEINSDET();
			}
			entity.ID = dto.ID;
			entity.INSTANCEID = dto.INSTANCEID;
			entity.GROUPID = dto.GROUPID;
			entity.VALUE = dto.VALUE;
			entity.TEXT = dto.TEXT;
			return entity;
		}
		public override VOTEINSDETDto Assemble(VOTEINSDET entity)
		{
			VOTEINSDETDto dto = new VOTEINSDETDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.INSTANCEID = entity.INSTANCEID;
			dto.GROUPID = entity.GROUPID;
			dto.VALUE = entity.VALUE;
			dto.TEXT = entity.TEXT;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class VOTEGROUPAssembler : VOTEGROUPAssemblerBase, IVOTEGROUPAssembler
	{
	}


	public partial interface IVOTEGROUPAssembler : IEntityAssembler<VOTEGROUPDto, VOTEGROUP>
	{
	}


	public partial class VOTEGROUPAssemblerBase : EntityAssembler<VOTEGROUPDto, VOTEGROUP>
	{
		partial void OnDTOAssembled(VOTEGROUPDto dto);
		partial void OnEntityAssembled(VOTEGROUP entity);


		public override VOTEGROUP Assemble(VOTEGROUP entity, VOTEGROUPDto dto)
		{
			if (entity == null)
			{
				entity = new VOTEGROUP();
			}
			entity.ID = dto.ID;
			entity.MAINID = dto.MAINID;
			entity.GROUPNAME = dto.GROUPNAME;
			entity.GROUPTYPE = dto.GROUPTYPE;
			entity.CHOICERATE = dto.CHOICERATE;
			entity.CHOICECOUNT = dto.CHOICECOUNT;
			return entity;
		}
		public override VOTEGROUPDto Assemble(VOTEGROUP entity)
		{
			VOTEGROUPDto dto = new VOTEGROUPDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.MAINID = entity.MAINID;
			dto.GROUPNAME = entity.GROUPNAME;
			dto.GROUPTYPE = entity.GROUPTYPE;
			dto.CHOICERATE = entity.CHOICERATE;
			dto.CHOICECOUNT = entity.CHOICECOUNT;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class VOTEGCONDAssembler : VOTEGCONDAssemblerBase, IVOTEGCONDAssembler
	{
	}


	public partial interface IVOTEGCONDAssembler : IEntityAssembler<VOTEGCONDDto, VOTEGCOND>
	{
	}


	public partial class VOTEGCONDAssemblerBase : EntityAssembler<VOTEGCONDDto, VOTEGCOND>
	{
		partial void OnDTOAssembled(VOTEGCONDDto dto);
		partial void OnEntityAssembled(VOTEGCOND entity);


		public override VOTEGCOND Assemble(VOTEGCOND entity, VOTEGCONDDto dto)
		{
			if (entity == null)
			{
				entity = new VOTEGCOND();
			}
			entity.ID = dto.ID;
			entity.GROUPID = dto.GROUPID;
			entity.CODE = dto.CODE;
			entity.CONDTYPE = dto.CONDTYPE;
			return entity;
		}
		public override VOTEGCONDDto Assemble(VOTEGCOND entity)
		{
			VOTEGCONDDto dto = new VOTEGCONDDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.GROUPID = entity.GROUPID;
			dto.CODE = entity.CODE;
			dto.CONDTYPE = entity.CONDTYPE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class TRAININGTIMEAssembler : TRAININGTIMEAssemblerBase, ITRAININGTIMEAssembler
	{
	}


	public partial interface ITRAININGTIMEAssembler : IEntityAssembler<TRAININGTIMEDto, TRAININGTIME>
	{
	}


	public partial class TRAININGTIMEAssemblerBase : EntityAssembler<TRAININGTIMEDto, TRAININGTIME>
	{
		partial void OnDTOAssembled(TRAININGTIMEDto dto);
		partial void OnEntityAssembled(TRAININGTIME entity);


		public override TRAININGTIME Assemble(TRAININGTIME entity, TRAININGTIMEDto dto)
		{
			if (entity == null)
			{
				entity = new TRAININGTIME();
			}
			entity.ID = dto.ID;
			entity.EDUYEAR = dto.EDUYEAR;
			entity.SEMESTER = dto.SEMESTER;
			entity.HOSPITAL = dto.HOSPITAL;
			entity.EMPCODE = dto.EMPCODE;
			entity.ROLE = dto.ROLE;
			entity.TRAININGTIME1 = dto.TRAININGTIME1;
			entity.TIMEHOUR = dto.TIMEHOUR;
			entity.CLASSNAME = dto.CLASSNAME;
			entity.CLASSTYPE = dto.CLASSTYPE;
			entity.CREATER = dto.CREATER;
			entity.CREATETIME = dto.CREATETIME;
			entity.STATUS = dto.STATUS;
			return entity;
		}
		public override TRAININGTIMEDto Assemble(TRAININGTIME entity)
		{
			TRAININGTIMEDto dto = new TRAININGTIMEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.EDUYEAR = entity.EDUYEAR;
			dto.SEMESTER = entity.SEMESTER;
			dto.HOSPITAL = entity.HOSPITAL;
			dto.EMPCODE = entity.EMPCODE;
			dto.ROLE = entity.ROLE;
			dto.TRAININGTIME1 = entity.TRAININGTIME1;
			dto.TIMEHOUR = entity.TIMEHOUR;
			dto.CLASSNAME = entity.CLASSNAME;
			dto.CLASSTYPE = entity.CLASSTYPE;
			dto.CREATER = entity.CREATER;
			dto.CREATETIME = entity.CREATETIME;
			dto.STATUS = entity.STATUS;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class TESTAssembler : TESTAssemblerBase, ITESTAssembler
	{
	}


	public partial interface ITESTAssembler : IEntityAssembler<TESTDto, TEST>
	{
	}


	public partial class TESTAssemblerBase : EntityAssembler<TESTDto, TEST>
	{
		partial void OnDTOAssembled(TESTDto dto);
		partial void OnEntityAssembled(TEST entity);


		public override TEST Assemble(TEST entity, TESTDto dto)
		{
			if (entity == null)
			{
				entity = new TEST();
			}
			entity.COLUMN_1 = dto.COLUMN_1;
			entity.COLUMN_2 = dto.COLUMN_2;
			return entity;
		}
		public override TESTDto Assemble(TEST entity)
		{
			TESTDto dto = new TESTDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.COLUMN_1 = entity.COLUMN_1;
			dto.COLUMN_2 = entity.COLUMN_2;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class TEACHTIMETYPEAssembler : TEACHTIMETYPEAssemblerBase, ITEACHTIMETYPEAssembler
	{
	}


	public partial interface ITEACHTIMETYPEAssembler : IEntityAssembler<TEACHTIMETYPEDto, TEACHTIMETYPE>
	{
	}


	public partial class TEACHTIMETYPEAssemblerBase : EntityAssembler<TEACHTIMETYPEDto, TEACHTIMETYPE>
	{
		partial void OnDTOAssembled(TEACHTIMETYPEDto dto);
		partial void OnEntityAssembled(TEACHTIMETYPE entity);


		public override TEACHTIMETYPE Assemble(TEACHTIMETYPE entity, TEACHTIMETYPEDto dto)
		{
			if (entity == null)
			{
				entity = new TEACHTIMETYPE();
			}
			entity.SETTINGTYPE = dto.SETTINGTYPE;
			entity.NEEDATTACHMENT = dto.NEEDATTACHMENT;
			entity.NEEDMEMBER = dto.NEEDMEMBER;
			entity.DISABLE = dto.DISABLE;
			entity.LOADFORMDATA = dto.LOADFORMDATA;
			entity.ALLOWKPI = dto.ALLOWKPI;
			return entity;
		}
		public override TEACHTIMETYPEDto Assemble(TEACHTIMETYPE entity)
		{
			TEACHTIMETYPEDto dto = new TEACHTIMETYPEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.SETTINGTYPE = entity.SETTINGTYPE;
			dto.NEEDATTACHMENT = entity.NEEDATTACHMENT;
			dto.NEEDMEMBER = entity.NEEDMEMBER;
			dto.DISABLE = entity.DISABLE;
			dto.LOADFORMDATA = entity.LOADFORMDATA;
			dto.ALLOWKPI = entity.ALLOWKPI;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class TEACHTIMERATEAssembler : TEACHTIMERATEAssemblerBase, ITEACHTIMERATEAssembler
	{
	}


	public partial interface ITEACHTIMERATEAssembler : IEntityAssembler<TEACHTIMERATEDto, TEACHTIMERATE>
	{
	}


	public partial class TEACHTIMERATEAssemblerBase : EntityAssembler<TEACHTIMERATEDto, TEACHTIMERATE>
	{
		partial void OnDTOAssembled(TEACHTIMERATEDto dto);
		partial void OnEntityAssembled(TEACHTIMERATE entity);


		public override TEACHTIMERATE Assemble(TEACHTIMERATE entity, TEACHTIMERATEDto dto)
		{
			if (entity == null)
			{
				entity = new TEACHTIMERATE();
			}
			entity.SETTINGID = dto.SETTINGID;
			entity.SETTINGTYPE = dto.SETTINGTYPE;
			entity.SETTINGCODE = dto.SETTINGCODE;
			entity.CODETYPE = dto.CODETYPE;
			entity.RATE1 = dto.RATE1;
			entity.RATE2 = dto.RATE2;
			entity.UNIT = dto.UNIT;
			entity.REFID = dto.REFID;
			entity.DISABLEDATE = dto.DISABLEDATE;
			entity.ENABLEDATE = dto.ENABLEDATE;
			return entity;
		}
		public override TEACHTIMERATEDto Assemble(TEACHTIMERATE entity)
		{
			TEACHTIMERATEDto dto = new TEACHTIMERATEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.SETTINGID = entity.SETTINGID;
			dto.SETTINGTYPE = entity.SETTINGTYPE;
			dto.SETTINGCODE = entity.SETTINGCODE;
			dto.CODETYPE = entity.CODETYPE;
			dto.RATE1 = entity.RATE1;
			dto.RATE2 = entity.RATE2;
			dto.UNIT = entity.UNIT;
			dto.REFID = entity.REFID;
			dto.DISABLEDATE = entity.DISABLEDATE;
			dto.ENABLEDATE = entity.ENABLEDATE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class TEACHTIMEKPIREFTEMPAssembler : TEACHTIMEKPIREFTEMPAssemblerBase, ITEACHTIMEKPIREFTEMPAssembler
	{
	}


	public partial interface ITEACHTIMEKPIREFTEMPAssembler : IEntityAssembler<TEACHTIMEKPIREFTEMPDto, TEACHTIMEKPIREFTEMP>
	{
	}


	public partial class TEACHTIMEKPIREFTEMPAssemblerBase : EntityAssembler<TEACHTIMEKPIREFTEMPDto, TEACHTIMEKPIREFTEMP>
	{
		partial void OnDTOAssembled(TEACHTIMEKPIREFTEMPDto dto);
		partial void OnEntityAssembled(TEACHTIMEKPIREFTEMP entity);


		public override TEACHTIMEKPIREFTEMP Assemble(TEACHTIMEKPIREFTEMP entity, TEACHTIMEKPIREFTEMPDto dto)
		{
			if (entity == null)
			{
				entity = new TEACHTIMEKPIREFTEMP();
			}
			entity.KPICODE = dto.KPICODE;
			entity.TEACHTIMESETTINGID = dto.TEACHTIMESETTINGID;
			entity.TRANSRATE = dto.TRANSRATE;
			entity.ENABLEDATE = dto.ENABLEDATE;
			entity.DISABLEDATE = dto.DISABLEDATE;
			return entity;
		}
		public override TEACHTIMEKPIREFTEMPDto Assemble(TEACHTIMEKPIREFTEMP entity)
		{
			TEACHTIMEKPIREFTEMPDto dto = new TEACHTIMEKPIREFTEMPDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.KPICODE = entity.KPICODE;
			dto.TEACHTIMESETTINGID = entity.TEACHTIMESETTINGID;
			dto.TRANSRATE = entity.TRANSRATE;
			dto.ENABLEDATE = entity.ENABLEDATE;
			dto.DISABLEDATE = entity.DISABLEDATE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class TEACHTIMEKPIREFAssembler : TEACHTIMEKPIREFAssemblerBase, ITEACHTIMEKPIREFAssembler
	{
	}


	public partial interface ITEACHTIMEKPIREFAssembler : IEntityAssembler<TEACHTIMEKPIREFDto, TEACHTIMEKPIREF>
	{
	}


	public partial class TEACHTIMEKPIREFAssemblerBase : EntityAssembler<TEACHTIMEKPIREFDto, TEACHTIMEKPIREF>
	{
		partial void OnDTOAssembled(TEACHTIMEKPIREFDto dto);
		partial void OnEntityAssembled(TEACHTIMEKPIREF entity);


		public override TEACHTIMEKPIREF Assemble(TEACHTIMEKPIREF entity, TEACHTIMEKPIREFDto dto)
		{
			if (entity == null)
			{
				entity = new TEACHTIMEKPIREF();
			}
			entity.KPICODE = dto.KPICODE;
			entity.ACTTYPE = dto.ACTTYPE;
			entity.TRANSRATE = dto.TRANSRATE;
			entity.ENABLEDATE = dto.ENABLEDATE;
			entity.DISABLEDATE = dto.DISABLEDATE;
			entity.ROLETYPE = dto.ROLETYPE;
			return entity;
		}
		public override TEACHTIMEKPIREFDto Assemble(TEACHTIMEKPIREF entity)
		{
			TEACHTIMEKPIREFDto dto = new TEACHTIMEKPIREFDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.KPICODE = entity.KPICODE;
			dto.ACTTYPE = entity.ACTTYPE;
			dto.TRANSRATE = entity.TRANSRATE;
			dto.ENABLEDATE = entity.ENABLEDATE;
			dto.DISABLEDATE = entity.DISABLEDATE;
			dto.ROLETYPE = entity.ROLETYPE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class TEACHPOINTREFAssembler : TEACHPOINTREFAssemblerBase, ITEACHPOINTREFAssembler
	{
	}


	public partial interface ITEACHPOINTREFAssembler : IEntityAssembler<TEACHPOINTREFDto, TEACHPOINTREF>
	{
	}


	public partial class TEACHPOINTREFAssemblerBase : EntityAssembler<TEACHPOINTREFDto, TEACHPOINTREF>
	{
		partial void OnDTOAssembled(TEACHPOINTREFDto dto);
		partial void OnEntityAssembled(TEACHPOINTREF entity);


		public override TEACHPOINTREF Assemble(TEACHPOINTREF entity, TEACHPOINTREFDto dto)
		{
			if (entity == null)
			{
				entity = new TEACHPOINTREF();
			}
			entity.ITEMID = dto.ITEMID;
			entity.REFTYPE = dto.REFTYPE;
			entity.REFID = dto.REFID;
			entity.REFGROUP = dto.REFGROUP;
			return entity;
		}
		public override TEACHPOINTREFDto Assemble(TEACHPOINTREF entity)
		{
			TEACHPOINTREFDto dto = new TEACHPOINTREFDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ITEMID = entity.ITEMID;
			dto.REFTYPE = entity.REFTYPE;
			dto.REFID = entity.REFID;
			dto.REFGROUP = entity.REFGROUP;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class TEACHPOINTJOBITEMAssembler : TEACHPOINTJOBITEMAssemblerBase, ITEACHPOINTJOBITEMAssembler
	{
	}


	public partial interface ITEACHPOINTJOBITEMAssembler : IEntityAssembler<TEACHPOINTJOBITEMDto, TEACHPOINTJOBITEM>
	{
	}


	public partial class TEACHPOINTJOBITEMAssemblerBase : EntityAssembler<TEACHPOINTJOBITEMDto, TEACHPOINTJOBITEM>
	{
		partial void OnDTOAssembled(TEACHPOINTJOBITEMDto dto);
		partial void OnEntityAssembled(TEACHPOINTJOBITEM entity);


		public override TEACHPOINTJOBITEM Assemble(TEACHPOINTJOBITEM entity, TEACHPOINTJOBITEMDto dto)
		{
			if (entity == null)
			{
				entity = new TEACHPOINTJOBITEM();
			}
			entity.ITEMID = dto.ITEMID;
			entity.JOBCODE = dto.JOBCODE;
			return entity;
		}
		public override TEACHPOINTJOBITEMDto Assemble(TEACHPOINTJOBITEM entity)
		{
			TEACHPOINTJOBITEMDto dto = new TEACHPOINTJOBITEMDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ITEMID = entity.ITEMID;
			dto.JOBCODE = entity.JOBCODE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class TEACHPOINTITEMREQUIREAssembler : TEACHPOINTITEMREQUIREAssemblerBase, ITEACHPOINTITEMREQUIREAssembler
	{
	}


	public partial interface ITEACHPOINTITEMREQUIREAssembler : IEntityAssembler<TEACHPOINTITEMREQUIREDto, TEACHPOINTITEMREQUIRE>
	{
	}


	public partial class TEACHPOINTITEMREQUIREAssemblerBase : EntityAssembler<TEACHPOINTITEMREQUIREDto, TEACHPOINTITEMREQUIRE>
	{
		partial void OnDTOAssembled(TEACHPOINTITEMREQUIREDto dto);
		partial void OnEntityAssembled(TEACHPOINTITEMREQUIRE entity);


		public override TEACHPOINTITEMREQUIRE Assemble(TEACHPOINTITEMREQUIRE entity, TEACHPOINTITEMREQUIREDto dto)
		{
			if (entity == null)
			{
				entity = new TEACHPOINTITEMREQUIRE();
			}
			entity.ITEMID = dto.ITEMID;
			entity.REQTYPE = dto.REQTYPE;
			entity.REQID = dto.REQID;
			entity.REQCOUNT = dto.REQCOUNT;
			entity.REQRATE = dto.REQRATE;
			return entity;
		}
		public override TEACHPOINTITEMREQUIREDto Assemble(TEACHPOINTITEMREQUIRE entity)
		{
			TEACHPOINTITEMREQUIREDto dto = new TEACHPOINTITEMREQUIREDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ITEMID = entity.ITEMID;
			dto.REQTYPE = entity.REQTYPE;
			dto.REQID = entity.REQID;
			dto.REQCOUNT = entity.REQCOUNT;
			dto.REQRATE = entity.REQRATE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class TEACHPOINTITEMAssembler : TEACHPOINTITEMAssemblerBase, ITEACHPOINTITEMAssembler
	{
	}


	public partial interface ITEACHPOINTITEMAssembler : IEntityAssembler<TEACHPOINTITEMDto, TEACHPOINTITEM>
	{
	}


	public partial class TEACHPOINTITEMAssemblerBase : EntityAssembler<TEACHPOINTITEMDto, TEACHPOINTITEM>
	{
		partial void OnDTOAssembled(TEACHPOINTITEMDto dto);
		partial void OnEntityAssembled(TEACHPOINTITEM entity);


		public override TEACHPOINTITEM Assemble(TEACHPOINTITEM entity, TEACHPOINTITEMDto dto)
		{
			if (entity == null)
			{
				entity = new TEACHPOINTITEM();
			}
			entity.ITEMID = dto.ITEMID;
			entity.ITEMNAME = dto.ITEMNAME;
			entity.ITEMTYPE = dto.ITEMTYPE;
			entity.POINTUNIT = dto.POINTUNIT;
			entity.EACHPOINT = dto.EACHPOINT;
			entity.EACHUNIT = dto.EACHUNIT;
			entity.MAXPOINT = dto.MAXPOINT;
			entity.MAXPOINTEVALRANGE = dto.MAXPOINTEVALRANGE;
			entity.REMARK = dto.REMARK;
			entity.TRAININGTYPE = dto.TRAININGTYPE;
			return entity;
		}
		public override TEACHPOINTITEMDto Assemble(TEACHPOINTITEM entity)
		{
			TEACHPOINTITEMDto dto = new TEACHPOINTITEMDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ITEMID = entity.ITEMID;
			dto.ITEMNAME = entity.ITEMNAME;
			dto.ITEMTYPE = entity.ITEMTYPE;
			dto.POINTUNIT = entity.POINTUNIT;
			dto.EACHPOINT = entity.EACHPOINT;
			dto.EACHUNIT = entity.EACHUNIT;
			dto.MAXPOINT = entity.MAXPOINT;
			dto.MAXPOINTEVALRANGE = entity.MAXPOINTEVALRANGE;
			dto.REMARK = entity.REMARK;
			dto.TRAININGTYPE = entity.TRAININGTYPE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class TEACHPOINTEMPITEMDATUMAssembler : TEACHPOINTEMPITEMDATUMAssemblerBase, ITEACHPOINTEMPITEMDATUMAssembler
	{
	}


	public partial interface ITEACHPOINTEMPITEMDATUMAssembler : IEntityAssembler<TEACHPOINTEMPITEMDATUMDto, TEACHPOINTEMPITEMDATUM>
	{
	}


	public partial class TEACHPOINTEMPITEMDATUMAssemblerBase : EntityAssembler<TEACHPOINTEMPITEMDATUMDto, TEACHPOINTEMPITEMDATUM>
	{
		partial void OnDTOAssembled(TEACHPOINTEMPITEMDATUMDto dto);
		partial void OnEntityAssembled(TEACHPOINTEMPITEMDATUM entity);


		public override TEACHPOINTEMPITEMDATUM Assemble(TEACHPOINTEMPITEMDATUM entity, TEACHPOINTEMPITEMDATUMDto dto)
		{
			if (entity == null)
			{
				entity = new TEACHPOINTEMPITEMDATUM();
			}
			entity.ID = dto.ID;
			entity.ITEMID = dto.ITEMID;
			entity.EMPCODE = dto.EMPCODE;
			entity.ITEMCOUNT = dto.ITEMCOUNT;
			entity.OCCURDATE = dto.OCCURDATE;
			entity.CREATER = dto.CREATER;
			entity.CREATEDATE = dto.CREATEDATE;
			entity.STATUS = dto.STATUS;
			entity.REMARK = dto.REMARK;
			return entity;
		}
		public override TEACHPOINTEMPITEMDATUMDto Assemble(TEACHPOINTEMPITEMDATUM entity)
		{
			TEACHPOINTEMPITEMDATUMDto dto = new TEACHPOINTEMPITEMDATUMDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.ITEMID = entity.ITEMID;
			dto.EMPCODE = entity.EMPCODE;
			dto.ITEMCOUNT = entity.ITEMCOUNT;
			dto.OCCURDATE = entity.OCCURDATE;
			dto.CREATER = entity.CREATER;
			dto.CREATEDATE = entity.CREATEDATE;
			dto.STATUS = entity.STATUS;
			dto.REMARK = entity.REMARK;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class TEACHPOINTCALCTYPEREFAssembler : TEACHPOINTCALCTYPEREFAssemblerBase, ITEACHPOINTCALCTYPEREFAssembler
	{
	}


	public partial interface ITEACHPOINTCALCTYPEREFAssembler : IEntityAssembler<TEACHPOINTCALCTYPEREFDto, TEACHPOINTCALCTYPEREF>
	{
	}


	public partial class TEACHPOINTCALCTYPEREFAssemblerBase : EntityAssembler<TEACHPOINTCALCTYPEREFDto, TEACHPOINTCALCTYPEREF>
	{
		partial void OnDTOAssembled(TEACHPOINTCALCTYPEREFDto dto);
		partial void OnEntityAssembled(TEACHPOINTCALCTYPEREF entity);


		public override TEACHPOINTCALCTYPEREF Assemble(TEACHPOINTCALCTYPEREF entity, TEACHPOINTCALCTYPEREFDto dto)
		{
			if (entity == null)
			{
				entity = new TEACHPOINTCALCTYPEREF();
			}
			entity.TYPEID = dto.TYPEID;
			entity.ITEMID = dto.ITEMID;
			return entity;
		}
		public override TEACHPOINTCALCTYPEREFDto Assemble(TEACHPOINTCALCTYPEREF entity)
		{
			TEACHPOINTCALCTYPEREFDto dto = new TEACHPOINTCALCTYPEREFDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TYPEID = entity.TYPEID;
			dto.ITEMID = entity.ITEMID;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class TEACHPOINTCALCTYPEAssembler : TEACHPOINTCALCTYPEAssemblerBase, ITEACHPOINTCALCTYPEAssembler
	{
	}


	public partial interface ITEACHPOINTCALCTYPEAssembler : IEntityAssembler<TEACHPOINTCALCTYPEDto, TEACHPOINTCALCTYPE>
	{
	}


	public partial class TEACHPOINTCALCTYPEAssemblerBase : EntityAssembler<TEACHPOINTCALCTYPEDto, TEACHPOINTCALCTYPE>
	{
		partial void OnDTOAssembled(TEACHPOINTCALCTYPEDto dto);
		partial void OnEntityAssembled(TEACHPOINTCALCTYPE entity);


		public override TEACHPOINTCALCTYPE Assemble(TEACHPOINTCALCTYPE entity, TEACHPOINTCALCTYPEDto dto)
		{
			if (entity == null)
			{
				entity = new TEACHPOINTCALCTYPE();
			}
			entity.TYPEID = dto.TYPEID;
			entity.TYPENAME = dto.TYPENAME;
			entity.STATUS = dto.STATUS;
			entity.REMARK = dto.REMARK;
			entity.DISPLAYORDER = dto.DISPLAYORDER;
			return entity;
		}
		public override TEACHPOINTCALCTYPEDto Assemble(TEACHPOINTCALCTYPE entity)
		{
			TEACHPOINTCALCTYPEDto dto = new TEACHPOINTCALCTYPEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TYPEID = entity.TYPEID;
			dto.TYPENAME = entity.TYPENAME;
			dto.STATUS = entity.STATUS;
			dto.REMARK = entity.REMARK;
			dto.DISPLAYORDER = entity.DISPLAYORDER;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class SCORESETTINGSCORETYPEAssembler : SCORESETTINGSCORETYPEAssemblerBase, ISCORESETTINGSCORETYPEAssembler
	{
	}


	public partial interface ISCORESETTINGSCORETYPEAssembler : IEntityAssembler<SCORESETTINGSCORETYPEDto, SCORESETTINGSCORETYPE>
	{
	}


	public partial class SCORESETTINGSCORETYPEAssemblerBase : EntityAssembler<SCORESETTINGSCORETYPEDto, SCORESETTINGSCORETYPE>
	{
		partial void OnDTOAssembled(SCORESETTINGSCORETYPEDto dto);
		partial void OnEntityAssembled(SCORESETTINGSCORETYPE entity);


		public override SCORESETTINGSCORETYPE Assemble(SCORESETTINGSCORETYPE entity, SCORESETTINGSCORETYPEDto dto)
		{
			if (entity == null)
			{
				entity = new SCORESETTINGSCORETYPE();
			}
			entity.TYPEID = dto.TYPEID;
			entity.SETTINGID = dto.SETTINGID;
			entity.TYPENAME = dto.TYPENAME;
			entity.TYPEPERCENT = dto.TYPEPERCENT;
			return entity;
		}
		public override SCORESETTINGSCORETYPEDto Assemble(SCORESETTINGSCORETYPE entity)
		{
			SCORESETTINGSCORETYPEDto dto = new SCORESETTINGSCORETYPEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TYPEID = entity.TYPEID;
			dto.SETTINGID = entity.SETTINGID;
			dto.TYPENAME = entity.TYPENAME;
			dto.TYPEPERCENT = entity.TYPEPERCENT;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class SCORESETTINGJOBAssembler : SCORESETTINGJOBAssemblerBase, ISCORESETTINGJOBAssembler
	{
	}


	public partial interface ISCORESETTINGJOBAssembler : IEntityAssembler<SCORESETTINGJOBDto, SCORESETTINGJOB>
	{
	}


	public partial class SCORESETTINGJOBAssemblerBase : EntityAssembler<SCORESETTINGJOBDto, SCORESETTINGJOB>
	{
		partial void OnDTOAssembled(SCORESETTINGJOBDto dto);
		partial void OnEntityAssembled(SCORESETTINGJOB entity);


		public override SCORESETTINGJOB Assemble(SCORESETTINGJOB entity, SCORESETTINGJOBDto dto)
		{
			if (entity == null)
			{
				entity = new SCORESETTINGJOB();
			}
			entity.SETTINGID = dto.SETTINGID;
			entity.JOBCODE = dto.JOBCODE;
			return entity;
		}
		public override SCORESETTINGJOBDto Assemble(SCORESETTINGJOB entity)
		{
			SCORESETTINGJOBDto dto = new SCORESETTINGJOBDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.SETTINGID = entity.SETTINGID;
			dto.JOBCODE = entity.JOBCODE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class SCORESETTINGDETAILAssembler : SCORESETTINGDETAILAssemblerBase, ISCORESETTINGDETAILAssembler
	{
	}


	public partial interface ISCORESETTINGDETAILAssembler : IEntityAssembler<SCORESETTINGDETAILDto, SCORESETTINGDETAIL>
	{
	}


	public partial class SCORESETTINGDETAILAssemblerBase : EntityAssembler<SCORESETTINGDETAILDto, SCORESETTINGDETAIL>
	{
		partial void OnDTOAssembled(SCORESETTINGDETAILDto dto);
		partial void OnEntityAssembled(SCORESETTINGDETAIL entity);


		public override SCORESETTINGDETAIL Assemble(SCORESETTINGDETAIL entity, SCORESETTINGDETAILDto dto)
		{
			if (entity == null)
			{
				entity = new SCORESETTINGDETAIL();
			}
			entity.SETTINGID = dto.SETTINGID;
			entity.VALUETYPE = dto.VALUETYPE;
			entity.VALUEID = dto.VALUEID;
			entity.VALUEPARAMETER = dto.VALUEPARAMETER;
			entity.SCOREPERCENT = dto.SCOREPERCENT;
			entity.VALUENAME = dto.VALUENAME;
			entity.DISPLAYORDER = dto.DISPLAYORDER;
			entity.SCORETYPE = dto.SCORETYPE;
			return entity;
		}
		public override SCORESETTINGDETAILDto Assemble(SCORESETTINGDETAIL entity)
		{
			SCORESETTINGDETAILDto dto = new SCORESETTINGDETAILDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.SETTINGID = entity.SETTINGID;
			dto.VALUETYPE = entity.VALUETYPE;
			dto.VALUEID = entity.VALUEID;
			dto.VALUEPARAMETER = entity.VALUEPARAMETER;
			dto.SCOREPERCENT = entity.SCOREPERCENT;
			dto.VALUENAME = entity.VALUENAME;
			dto.DISPLAYORDER = entity.DISPLAYORDER;
			dto.SCORETYPE = entity.SCORETYPE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class SCORESETTINGAssembler : SCORESETTINGAssemblerBase, ISCORESETTINGAssembler
	{
	}


	public partial interface ISCORESETTINGAssembler : IEntityAssembler<SCORESETTINGDto, SCORESETTING>
	{
	}


	public partial class SCORESETTINGAssemblerBase : EntityAssembler<SCORESETTINGDto, SCORESETTING>
	{
		partial void OnDTOAssembled(SCORESETTINGDto dto);
		partial void OnEntityAssembled(SCORESETTING entity);


		public override SCORESETTING Assemble(SCORESETTING entity, SCORESETTINGDto dto)
		{
			if (entity == null)
			{
				entity = new SCORESETTING();
			}
			entity.SETTINGID = dto.SETTINGID;
			entity.DEPTCODE = dto.DEPTCODE;
			entity.SETTINGNAME = dto.SETTINGNAME;
			entity.CREATER = dto.CREATER;
			entity.CREATEDATE = dto.CREATEDATE;
			entity.MODIFIER = dto.MODIFIER;
			entity.MODIFYDATE = dto.MODIFYDATE;
			return entity;
		}
		public override SCORESETTINGDto Assemble(SCORESETTING entity)
		{
			SCORESETTINGDto dto = new SCORESETTINGDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.SETTINGID = entity.SETTINGID;
			dto.DEPTCODE = entity.DEPTCODE;
			dto.SETTINGNAME = entity.SETTINGNAME;
			dto.CREATER = entity.CREATER;
			dto.CREATEDATE = entity.CREATEDATE;
			dto.MODIFIER = entity.MODIFIER;
			dto.MODIFYDATE = entity.MODIFYDATE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class SCOREINSTANCEDETAILAssembler : SCOREINSTANCEDETAILAssemblerBase, ISCOREINSTANCEDETAILAssembler
	{
	}


	public partial interface ISCOREINSTANCEDETAILAssembler : IEntityAssembler<SCOREINSTANCEDETAILDto, SCOREINSTANCEDETAIL>
	{
	}


	public partial class SCOREINSTANCEDETAILAssemblerBase : EntityAssembler<SCOREINSTANCEDETAILDto, SCOREINSTANCEDETAIL>
	{
		partial void OnDTOAssembled(SCOREINSTANCEDETAILDto dto);
		partial void OnEntityAssembled(SCOREINSTANCEDETAIL entity);


		public override SCOREINSTANCEDETAIL Assemble(SCOREINSTANCEDETAIL entity, SCOREINSTANCEDETAILDto dto)
		{
			if (entity == null)
			{
				entity = new SCOREINSTANCEDETAIL();
			}
			entity.INSTANCEDETAILID = dto.INSTANCEDETAILID;
			entity.INSTANCEID = dto.INSTANCEID;
			entity.SETTINGID = dto.SETTINGID;
			entity.VALUETYPE = dto.VALUETYPE;
			entity.VALUEID = dto.VALUEID;
			entity.TARGETID = dto.TARGETID;
			entity.SCOREPERCENT = dto.SCOREPERCENT;
			entity.SCORE = dto.SCORE;
			entity.MODIFIER = dto.MODIFIER;
			entity.MODIFYDATE = dto.MODIFYDATE;
			return entity;
		}
		public override SCOREINSTANCEDETAILDto Assemble(SCOREINSTANCEDETAIL entity)
		{
			SCOREINSTANCEDETAILDto dto = new SCOREINSTANCEDETAILDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.INSTANCEDETAILID = entity.INSTANCEDETAILID;
			dto.INSTANCEID = entity.INSTANCEID;
			dto.SETTINGID = entity.SETTINGID;
			dto.VALUETYPE = entity.VALUETYPE;
			dto.VALUEID = entity.VALUEID;
			dto.TARGETID = entity.TARGETID;
			dto.SCOREPERCENT = entity.SCOREPERCENT;
			dto.SCORE = entity.SCORE;
			dto.MODIFIER = entity.MODIFIER;
			dto.MODIFYDATE = entity.MODIFYDATE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class SCOREINSTANCEAssembler : SCOREINSTANCEAssemblerBase, ISCOREINSTANCEAssembler
	{
	}


	public partial interface ISCOREINSTANCEAssembler : IEntityAssembler<SCOREINSTANCEDto, SCOREINSTANCE>
	{
	}


	public partial class SCOREINSTANCEAssemblerBase : EntityAssembler<SCOREINSTANCEDto, SCOREINSTANCE>
	{
		partial void OnDTOAssembled(SCOREINSTANCEDto dto);
		partial void OnEntityAssembled(SCOREINSTANCE entity);


		public override SCOREINSTANCE Assemble(SCOREINSTANCE entity, SCOREINSTANCEDto dto)
		{
			if (entity == null)
			{
				entity = new SCOREINSTANCE();
			}
			entity.INSTANCEID = dto.INSTANCEID;
			entity.SETTINGID = dto.SETTINGID;
			entity.DATASDATE = dto.DATASDATE;
			entity.DATAEDATE = dto.DATAEDATE;
			entity.CREATER = dto.CREATER;
			entity.CREATEDATE = dto.CREATEDATE;
			entity.MODIFIER = dto.MODIFIER;
			entity.MODIFYDATE = dto.MODIFYDATE;
			return entity;
		}
		public override SCOREINSTANCEDto Assemble(SCOREINSTANCE entity)
		{
			SCOREINSTANCEDto dto = new SCOREINSTANCEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.INSTANCEID = entity.INSTANCEID;
			dto.SETTINGID = entity.SETTINGID;
			dto.DATASDATE = entity.DATASDATE;
			dto.DATAEDATE = entity.DATAEDATE;
			dto.CREATER = entity.CREATER;
			dto.CREATEDATE = entity.CREATEDATE;
			dto.MODIFIER = entity.MODIFIER;
			dto.MODIFYDATE = entity.MODIFYDATE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class SCHEDULERLOGAssembler : SCHEDULERLOGAssemblerBase, ISCHEDULERLOGAssembler
	{
	}


	public partial interface ISCHEDULERLOGAssembler : IEntityAssembler<SCHEDULERLOGDto, SCHEDULERLOG>
	{
	}


	public partial class SCHEDULERLOGAssemblerBase : EntityAssembler<SCHEDULERLOGDto, SCHEDULERLOG>
	{
		partial void OnDTOAssembled(SCHEDULERLOGDto dto);
		partial void OnEntityAssembled(SCHEDULERLOG entity);


		public override SCHEDULERLOG Assemble(SCHEDULERLOG entity, SCHEDULERLOGDto dto)
		{
			if (entity == null)
			{
				entity = new SCHEDULERLOG();
			}
			entity.FUNCTIONNAME = dto.FUNCTIONNAME;
			entity.LOGCONTENT = dto.LOGCONTENT;
			entity.LOGTIME = dto.LOGTIME;
			entity.LOGID = dto.LOGID;
			entity.LOGPARAMETER = dto.LOGPARAMETER;
			return entity;
		}
		public override SCHEDULERLOGDto Assemble(SCHEDULERLOG entity)
		{
			SCHEDULERLOGDto dto = new SCHEDULERLOGDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.FUNCTIONNAME = entity.FUNCTIONNAME;
			dto.LOGCONTENT = entity.LOGCONTENT;
			dto.LOGTIME = entity.LOGTIME;
			dto.LOGID = entity.LOGID;
			dto.LOGPARAMETER = entity.LOGPARAMETER;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class R分級資料Assembler : R分級資料AssemblerBase, IR分級資料Assembler
	{
	}


	public partial interface IR分級資料Assembler : IEntityAssembler<R分級資料Dto, R分級資料>
	{
	}


	public partial class R分級資料AssemblerBase : EntityAssembler<R分級資料Dto, R分級資料>
	{
		partial void OnDTOAssembled(R分級資料Dto dto);
		partial void OnEntityAssembled(R分級資料 entity);


		public override R分級資料 Assemble(R分級資料 entity, R分級資料Dto dto)
		{
			if (entity == null)
			{
				entity = new R分級資料();
			}
			entity.序號 = dto.序號;
			entity.科別 = dto.科別;
			entity.住院醫師 = dto.住院醫師;
			entity.員工編號 = dto.員工編號;
			entity.職級 = dto.職級;
			entity._16目前等級 = dto._16目前等級;
			entity._17目前等級 = dto._17目前等級;
			return entity;
		}
		public override R分級資料Dto Assemble(R分級資料 entity)
		{
			R分級資料Dto dto = new R分級資料Dto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.序號 = entity.序號;
			dto.科別 = entity.科別;
			dto.住院醫師 = entity.住院醫師;
			dto.員工編號 = entity.員工編號;
			dto.職級 = entity.職級;
			dto._16目前等級 = entity._16目前等級;
			dto._17目前等級 = entity._17目前等級;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class REPORTDATATEMPAssembler : REPORTDATATEMPAssemblerBase, IREPORTDATATEMPAssembler
	{
	}


	public partial interface IREPORTDATATEMPAssembler : IEntityAssembler<REPORTDATATEMPDto, REPORTDATATEMP>
	{
	}


	public partial class REPORTDATATEMPAssemblerBase : EntityAssembler<REPORTDATATEMPDto, REPORTDATATEMP>
	{
		partial void OnDTOAssembled(REPORTDATATEMPDto dto);
		partial void OnEntityAssembled(REPORTDATATEMP entity);


		public override REPORTDATATEMP Assemble(REPORTDATATEMP entity, REPORTDATATEMPDto dto)
		{
			if (entity == null)
			{
				entity = new REPORTDATATEMP();
			}
			entity.表單序號 = dto.表單序號;
			entity.填寫人職編 = dto.填寫人職編;
			entity.填寫人姓名 = dto.填寫人姓名;
			entity.填寫狀態 = dto.填寫狀態;
			entity.考核對象 = dto.考核對象;
			entity.課程名稱完整 = dto.課程名稱完整;
			entity.受訓院區 = dto.受訓院區;
			entity.受訓科別 = dto.受訓科別;
			entity.受訓期間 = dto.受訓期間;
			entity.VS1 = dto.VS1;
			entity.VS1姓名 = dto.VS1姓名;
			entity.VS1教師提供鼓勵支持之學習氣氛 = dto.VS1教師提供鼓勵支持之學習氣氛;
			entity.VS1教師給予清楚合理的學習目標 = dto.VS1教師給予清楚合理的學習目標;
			entity.VS1教師給予明確回饋與改善建議 = dto.VS1教師給予明確回饋與改善建議;
			entity.VS1教師具教學熱忱願意付出時間從事教學上的表現 = dto.VS1教師具教學熱忱願意付出時間從事教學上的表現;
			entity.VS1教師展現臨床醫療專業能力和行為表現 = dto.VS1教師展現臨床醫療專業能力和行為表現;
			entity.VS2 = dto.VS2;
			entity.VS2姓名 = dto.VS2姓名;
			entity.VS2教師提供鼓勵支持之學習氣氛 = dto.VS2教師提供鼓勵支持之學習氣氛;
			entity.VS2教師給予清楚合理的學習目標 = dto.VS2教師給予清楚合理的學習目標;
			entity.VS2教師給予明確回饋與改善建議 = dto.VS2教師給予明確回饋與改善建議;
			entity.VS2教師具教學熱忱願意付出時間從事教學上的表現 = dto.VS2教師具教學熱忱願意付出時間從事教學上的表現;
			entity.VS2教師展現臨床醫療專業能力和行為表現 = dto.VS2教師展現臨床醫療專業能力和行為表現;
			entity.R1 = dto.R1;
			entity.R1姓名 = dto.R1姓名;
			entity.R1教師提供鼓勵支持之學習氣氛 = dto.R1教師提供鼓勵支持之學習氣氛;
			entity.R1教師給予清楚合理的學習目標 = dto.R1教師給予清楚合理的學習目標;
			entity.R1教師給予明確回饋與改善建議 = dto.R1教師給予明確回饋與改善建議;
			entity.R1教師具教學熱忱願意付出時間從事教學上的表現 = dto.R1教師具教學熱忱願意付出時間從事教學上的表現;
			entity.R1教師展現臨床醫療專業能力和行為表現 = dto.R1教師展現臨床醫療專業能力和行為表現;
			entity.R2 = dto.R2;
			entity.R2姓名 = dto.R2姓名;
			entity.R2教師提供鼓勵支持之學習氣氛 = dto.R2教師提供鼓勵支持之學習氣氛;
			entity.R2教師給予清楚合理的學習目標 = dto.R2教師給予清楚合理的學習目標;
			entity.R2教師給予明確回饋與改善建議 = dto.R2教師給予明確回饋與改善建議;
			entity.R2教師具教學熱忱願意付出時間從事教學上的表現 = dto.R2教師具教學熱忱願意付出時間從事教學上的表現;
			entity.R2教師展現臨床醫療專業能力和行為表現 = dto.R2教師展現臨床醫療專業能力和行為表現;
			entity.臨床單位提供清楚的教學計畫或學習指引對學習有幫助 = dto.臨床單位提供清楚的教學計畫或學習指引對學習有幫助;
			entity.臨床單位學術活動如討論會及教學課程安排適當且落實施行 = dto.臨床單位學術活動如討論會及教學課程安排適當且落實施行;
			entity.臨床單位提升我的完整行醫專業能力 = dto.臨床單位提升我的完整行醫專業能力;
			entity.臨床單位的工作負荷安排合宜關切我的身心健全 = dto.臨床單位的工作負荷安排合宜關切我的身心健全;
			entity.與其他醫療人員跨領域團隊互動良好獲得必要的協助 = dto.與其他醫療人員跨領域團隊互動良好獲得必要的協助;
			entity.對臨床指導教師與臨床科室的具體回饋或建議 = dto.對臨床指導教師與臨床科室的具體回饋或建議;
			entity.科別代碼 = dto.科別代碼;
			return entity;
		}
		public override REPORTDATATEMPDto Assemble(REPORTDATATEMP entity)
		{
			REPORTDATATEMPDto dto = new REPORTDATATEMPDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.表單序號 = entity.表單序號;
			dto.填寫人職編 = entity.填寫人職編;
			dto.填寫人姓名 = entity.填寫人姓名;
			dto.填寫狀態 = entity.填寫狀態;
			dto.考核對象 = entity.考核對象;
			dto.課程名稱完整 = entity.課程名稱完整;
			dto.受訓院區 = entity.受訓院區;
			dto.受訓科別 = entity.受訓科別;
			dto.受訓期間 = entity.受訓期間;
			dto.VS1 = entity.VS1;
			dto.VS1姓名 = entity.VS1姓名;
			dto.VS1教師提供鼓勵支持之學習氣氛 = entity.VS1教師提供鼓勵支持之學習氣氛;
			dto.VS1教師給予清楚合理的學習目標 = entity.VS1教師給予清楚合理的學習目標;
			dto.VS1教師給予明確回饋與改善建議 = entity.VS1教師給予明確回饋與改善建議;
			dto.VS1教師具教學熱忱願意付出時間從事教學上的表現 = entity.VS1教師具教學熱忱願意付出時間從事教學上的表現;
			dto.VS1教師展現臨床醫療專業能力和行為表現 = entity.VS1教師展現臨床醫療專業能力和行為表現;
			dto.VS2 = entity.VS2;
			dto.VS2姓名 = entity.VS2姓名;
			dto.VS2教師提供鼓勵支持之學習氣氛 = entity.VS2教師提供鼓勵支持之學習氣氛;
			dto.VS2教師給予清楚合理的學習目標 = entity.VS2教師給予清楚合理的學習目標;
			dto.VS2教師給予明確回饋與改善建議 = entity.VS2教師給予明確回饋與改善建議;
			dto.VS2教師具教學熱忱願意付出時間從事教學上的表現 = entity.VS2教師具教學熱忱願意付出時間從事教學上的表現;
			dto.VS2教師展現臨床醫療專業能力和行為表現 = entity.VS2教師展現臨床醫療專業能力和行為表現;
			dto.R1 = entity.R1;
			dto.R1姓名 = entity.R1姓名;
			dto.R1教師提供鼓勵支持之學習氣氛 = entity.R1教師提供鼓勵支持之學習氣氛;
			dto.R1教師給予清楚合理的學習目標 = entity.R1教師給予清楚合理的學習目標;
			dto.R1教師給予明確回饋與改善建議 = entity.R1教師給予明確回饋與改善建議;
			dto.R1教師具教學熱忱願意付出時間從事教學上的表現 = entity.R1教師具教學熱忱願意付出時間從事教學上的表現;
			dto.R1教師展現臨床醫療專業能力和行為表現 = entity.R1教師展現臨床醫療專業能力和行為表現;
			dto.R2 = entity.R2;
			dto.R2姓名 = entity.R2姓名;
			dto.R2教師提供鼓勵支持之學習氣氛 = entity.R2教師提供鼓勵支持之學習氣氛;
			dto.R2教師給予清楚合理的學習目標 = entity.R2教師給予清楚合理的學習目標;
			dto.R2教師給予明確回饋與改善建議 = entity.R2教師給予明確回饋與改善建議;
			dto.R2教師具教學熱忱願意付出時間從事教學上的表現 = entity.R2教師具教學熱忱願意付出時間從事教學上的表現;
			dto.R2教師展現臨床醫療專業能力和行為表現 = entity.R2教師展現臨床醫療專業能力和行為表現;
			dto.臨床單位提供清楚的教學計畫或學習指引對學習有幫助 = entity.臨床單位提供清楚的教學計畫或學習指引對學習有幫助;
			dto.臨床單位學術活動如討論會及教學課程安排適當且落實施行 = entity.臨床單位學術活動如討論會及教學課程安排適當且落實施行;
			dto.臨床單位提升我的完整行醫專業能力 = entity.臨床單位提升我的完整行醫專業能力;
			dto.臨床單位的工作負荷安排合宜關切我的身心健全 = entity.臨床單位的工作負荷安排合宜關切我的身心健全;
			dto.與其他醫療人員跨領域團隊互動良好獲得必要的協助 = entity.與其他醫療人員跨領域團隊互動良好獲得必要的協助;
			dto.對臨床指導教師與臨床科室的具體回饋或建議 = entity.對臨床指導教師與臨床科室的具體回饋或建議;
			dto.科別代碼 = entity.科別代碼;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class RECORDTEMPLATEAssembler : RECORDTEMPLATEAssemblerBase, IRECORDTEMPLATEAssembler
	{
	}


	public partial interface IRECORDTEMPLATEAssembler : IEntityAssembler<RECORDTEMPLATEDto, RECORDTEMPLATE>
	{
	}


	public partial class RECORDTEMPLATEAssemblerBase : EntityAssembler<RECORDTEMPLATEDto, RECORDTEMPLATE>
	{
		partial void OnDTOAssembled(RECORDTEMPLATEDto dto);
		partial void OnEntityAssembled(RECORDTEMPLATE entity);


		public override RECORDTEMPLATE Assemble(RECORDTEMPLATE entity, RECORDTEMPLATEDto dto)
		{
			if (entity == null)
			{
				entity = new RECORDTEMPLATE();
			}
			entity.TEMPLATEID = dto.TEMPLATEID;
			entity.TEMPLATENAME = dto.TEMPLATENAME;
			entity.CLASSNAME = dto.CLASSNAME;
			entity.STATUS = dto.STATUS;
			entity.BINDACT = dto.BINDACT;
			entity.DISPLAYORDER = dto.DISPLAYORDER;
			entity.OLDVERSION = dto.OLDVERSION;
			return entity;
		}
		public override RECORDTEMPLATEDto Assemble(RECORDTEMPLATE entity)
		{
			RECORDTEMPLATEDto dto = new RECORDTEMPLATEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TEMPLATEID = entity.TEMPLATEID;
			dto.TEMPLATENAME = entity.TEMPLATENAME;
			dto.CLASSNAME = entity.CLASSNAME;
			dto.STATUS = entity.STATUS;
			dto.BINDACT = entity.BINDACT;
			dto.DISPLAYORDER = entity.DISPLAYORDER;
			dto.OLDVERSION = entity.OLDVERSION;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class RECORDINSVIEWERAssembler : RECORDINSVIEWERAssemblerBase, IRECORDINSVIEWERAssembler
	{
	}


	public partial interface IRECORDINSVIEWERAssembler : IEntityAssembler<RECORDINSVIEWERDto, RECORDINSVIEWER>
	{
	}


	public partial class RECORDINSVIEWERAssemblerBase : EntityAssembler<RECORDINSVIEWERDto, RECORDINSVIEWER>
	{
		partial void OnDTOAssembled(RECORDINSVIEWERDto dto);
		partial void OnEntityAssembled(RECORDINSVIEWER entity);


		public override RECORDINSVIEWER Assemble(RECORDINSVIEWER entity, RECORDINSVIEWERDto dto)
		{
			if (entity == null)
			{
				entity = new RECORDINSVIEWER();
			}
			entity.INSTANCEID = dto.INSTANCEID;
			entity.VIEWORDER = dto.VIEWORDER;
			entity.VIEWER = dto.VIEWER;
			entity.VIEWSTATUS = dto.VIEWSTATUS;
			entity.VIEWTIME = dto.VIEWTIME;
			entity.VIEWMEMO = dto.VIEWMEMO;
			entity.SN = dto.SN;
			return entity;
		}
		public override RECORDINSVIEWERDto Assemble(RECORDINSVIEWER entity)
		{
			RECORDINSVIEWERDto dto = new RECORDINSVIEWERDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.INSTANCEID = entity.INSTANCEID;
			dto.VIEWORDER = entity.VIEWORDER;
			dto.VIEWER = entity.VIEWER;
			dto.VIEWSTATUS = entity.VIEWSTATUS;
			dto.VIEWTIME = entity.VIEWTIME;
			dto.VIEWMEMO = entity.VIEWMEMO;
			dto.SN = entity.SN;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class RECORDINSTANCEREJECTLOGAssembler : RECORDINSTANCEREJECTLOGAssemblerBase, IRECORDINSTANCEREJECTLOGAssembler
	{
	}


	public partial interface IRECORDINSTANCEREJECTLOGAssembler : IEntityAssembler<RECORDINSTANCEREJECTLOGDto, RECORDINSTANCEREJECTLOG>
	{
	}


	public partial class RECORDINSTANCEREJECTLOGAssemblerBase : EntityAssembler<RECORDINSTANCEREJECTLOGDto, RECORDINSTANCEREJECTLOG>
	{
		partial void OnDTOAssembled(RECORDINSTANCEREJECTLOGDto dto);
		partial void OnEntityAssembled(RECORDINSTANCEREJECTLOG entity);


		public override RECORDINSTANCEREJECTLOG Assemble(RECORDINSTANCEREJECTLOG entity, RECORDINSTANCEREJECTLOGDto dto)
		{
			if (entity == null)
			{
				entity = new RECORDINSTANCEREJECTLOG();
			}
			entity.INSTANCEID = dto.INSTANCEID;
			entity.EMPCODE = dto.EMPCODE;
			entity.REJECTREASON = dto.REJECTREASON;
			entity.OLDSTATUS = dto.OLDSTATUS;
			entity.NEWSTATUS = dto.NEWSTATUS;
			entity.REJECTTIME = dto.REJECTTIME;
			entity.LOGID = dto.LOGID;
			return entity;
		}
		public override RECORDINSTANCEREJECTLOGDto Assemble(RECORDINSTANCEREJECTLOG entity)
		{
			RECORDINSTANCEREJECTLOGDto dto = new RECORDINSTANCEREJECTLOGDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.INSTANCEID = entity.INSTANCEID;
			dto.EMPCODE = entity.EMPCODE;
			dto.REJECTREASON = entity.REJECTREASON;
			dto.OLDSTATUS = entity.OLDSTATUS;
			dto.NEWSTATUS = entity.NEWSTATUS;
			dto.REJECTTIME = entity.REJECTTIME;
			dto.LOGID = entity.LOGID;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class RECORDINSTANCEAssembler : RECORDINSTANCEAssemblerBase, IRECORDINSTANCEAssembler
	{
	}


	public partial interface IRECORDINSTANCEAssembler : IEntityAssembler<RECORDINSTANCEDto, RECORDINSTANCE>
	{
	}


	public partial class RECORDINSTANCEAssemblerBase : EntityAssembler<RECORDINSTANCEDto, RECORDINSTANCE>
	{
		partial void OnDTOAssembled(RECORDINSTANCEDto dto);
		partial void OnEntityAssembled(RECORDINSTANCE entity);


		public override RECORDINSTANCE Assemble(RECORDINSTANCE entity, RECORDINSTANCEDto dto)
		{
			if (entity == null)
			{
				entity = new RECORDINSTANCE();
			}
			entity.INSTANCEID = dto.INSTANCEID;
			entity.TEMPLATEID = dto.TEMPLATEID;
			entity.SDATE = dto.SDATE;
			entity.EDATE = dto.EDATE;
			entity.TITLE = dto.TITLE;
			entity.CREATER = dto.CREATER;
			entity.CREATEDATE = dto.CREATEDATE;
			entity.VIEWER = dto.VIEWER;
			entity.VIEWDATE = dto.VIEWDATE;
			entity.MODIFIER = dto.MODIFIER;
			entity.MODIFYDATE = dto.MODIFYDATE;
			entity.STATUS = dto.STATUS;
			entity.HOSPCODE = dto.HOSPCODE;
			entity.DEPTCODE = dto.DEPTCODE;
			entity.RECODER = dto.RECODER;
			entity.ISPUBLIC = dto.ISPUBLIC;
			entity.SIGNMETHOD = dto.SIGNMETHOD;
			return entity;
		}
		public override RECORDINSTANCEDto Assemble(RECORDINSTANCE entity)
		{
			RECORDINSTANCEDto dto = new RECORDINSTANCEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.INSTANCEID = entity.INSTANCEID;
			dto.TEMPLATEID = entity.TEMPLATEID;
			dto.SDATE = entity.SDATE;
			dto.EDATE = entity.EDATE;
			dto.TITLE = entity.TITLE;
			dto.CREATER = entity.CREATER;
			dto.CREATEDATE = entity.CREATEDATE;
			dto.VIEWER = entity.VIEWER;
			dto.VIEWDATE = entity.VIEWDATE;
			dto.MODIFIER = entity.MODIFIER;
			dto.MODIFYDATE = entity.MODIFYDATE;
			dto.STATUS = entity.STATUS;
			dto.HOSPCODE = entity.HOSPCODE;
			dto.DEPTCODE = entity.DEPTCODE;
			dto.RECODER = entity.RECODER;
			dto.ISPUBLIC = entity.ISPUBLIC;
			dto.SIGNMETHOD = entity.SIGNMETHOD;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class RECORDINSSIGNINAssembler : RECORDINSSIGNINAssemblerBase, IRECORDINSSIGNINAssembler
	{
	}


	public partial interface IRECORDINSSIGNINAssembler : IEntityAssembler<RECORDINSSIGNINDto, RECORDINSSIGNIN>
	{
	}


	public partial class RECORDINSSIGNINAssemblerBase : EntityAssembler<RECORDINSSIGNINDto, RECORDINSSIGNIN>
	{
		partial void OnDTOAssembled(RECORDINSSIGNINDto dto);
		partial void OnEntityAssembled(RECORDINSSIGNIN entity);


		public override RECORDINSSIGNIN Assemble(RECORDINSSIGNIN entity, RECORDINSSIGNINDto dto)
		{
			if (entity == null)
			{
				entity = new RECORDINSSIGNIN();
			}
			entity.INSTANCEID = dto.INSTANCEID;
			entity.EMPCODE = dto.EMPCODE;
			entity.SIGNTIME = dto.SIGNTIME;
			entity.SIGNPATH = dto.SIGNPATH;
			entity.ROLETYPE = dto.ROLETYPE;
			entity.TARGETJOB = dto.TARGETJOB;
			return entity;
		}
		public override RECORDINSSIGNINDto Assemble(RECORDINSSIGNIN entity)
		{
			RECORDINSSIGNINDto dto = new RECORDINSSIGNINDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.INSTANCEID = entity.INSTANCEID;
			dto.EMPCODE = entity.EMPCODE;
			dto.SIGNTIME = entity.SIGNTIME;
			dto.SIGNPATH = entity.SIGNPATH;
			dto.ROLETYPE = entity.ROLETYPE;
			dto.TARGETJOB = entity.TARGETJOB;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class RECORDINSREADERAssembler : RECORDINSREADERAssemblerBase, IRECORDINSREADERAssembler
	{
	}


	public partial interface IRECORDINSREADERAssembler : IEntityAssembler<RECORDINSREADERDto, RECORDINSREADER>
	{
	}


	public partial class RECORDINSREADERAssemblerBase : EntityAssembler<RECORDINSREADERDto, RECORDINSREADER>
	{
		partial void OnDTOAssembled(RECORDINSREADERDto dto);
		partial void OnEntityAssembled(RECORDINSREADER entity);


		public override RECORDINSREADER Assemble(RECORDINSREADER entity, RECORDINSREADERDto dto)
		{
			if (entity == null)
			{
				entity = new RECORDINSREADER();
			}
			entity.INSTANCEID = dto.INSTANCEID;
			entity.READER = dto.READER;
			entity.FIRSTREADTIME = dto.FIRSTREADTIME;
			entity.SN = dto.SN;
			return entity;
		}
		public override RECORDINSREADERDto Assemble(RECORDINSREADER entity)
		{
			RECORDINSREADERDto dto = new RECORDINSREADERDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.INSTANCEID = entity.INSTANCEID;
			dto.READER = entity.READER;
			dto.FIRSTREADTIME = entity.FIRSTREADTIME;
			dto.SN = entity.SN;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class RECORDINSDETAssembler : RECORDINSDETAssemblerBase, IRECORDINSDETAssembler
	{
	}


	public partial interface IRECORDINSDETAssembler : IEntityAssembler<RECORDINSDETDto, RECORDINSDET>
	{
	}


	public partial class RECORDINSDETAssemblerBase : EntityAssembler<RECORDINSDETDto, RECORDINSDET>
	{
		partial void OnDTOAssembled(RECORDINSDETDto dto);
		partial void OnEntityAssembled(RECORDINSDET entity);


		public override RECORDINSDET Assemble(RECORDINSDET entity, RECORDINSDETDto dto)
		{
			if (entity == null)
			{
				entity = new RECORDINSDET();
			}
			entity.INSTANCEID = dto.INSTANCEID;
			entity.CONTROLID = dto.CONTROLID;
			entity.CONTROLVALUE = dto.CONTROLVALUE;
			return entity;
		}
		public override RECORDINSDETDto Assemble(RECORDINSDET entity)
		{
			RECORDINSDETDto dto = new RECORDINSDETDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.INSTANCEID = entity.INSTANCEID;
			dto.CONTROLID = entity.CONTROLID;
			dto.CONTROLVALUE = entity.CONTROLVALUE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class RECORDEDUACTREFAssembler : RECORDEDUACTREFAssemblerBase, IRECORDEDUACTREFAssembler
	{
	}


	public partial interface IRECORDEDUACTREFAssembler : IEntityAssembler<RECORDEDUACTREFDto, RECORDEDUACTREF>
	{
	}


	public partial class RECORDEDUACTREFAssemblerBase : EntityAssembler<RECORDEDUACTREFDto, RECORDEDUACTREF>
	{
		partial void OnDTOAssembled(RECORDEDUACTREFDto dto);
		partial void OnEntityAssembled(RECORDEDUACTREF entity);


		public override RECORDEDUACTREF Assemble(RECORDEDUACTREF entity, RECORDEDUACTREFDto dto)
		{
			if (entity == null)
			{
				entity = new RECORDEDUACTREF();
			}
			entity.INSTANCEID = dto.INSTANCEID;
			entity.EDUSTOPACTSCHEDULEID = dto.EDUSTOPACTSCHEDULEID;
			entity.CREATER = dto.CREATER;
			entity.CREATEDATE = dto.CREATEDATE;
			return entity;
		}
		public override RECORDEDUACTREFDto Assemble(RECORDEDUACTREF entity)
		{
			RECORDEDUACTREFDto dto = new RECORDEDUACTREFDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.INSTANCEID = entity.INSTANCEID;
			dto.EDUSTOPACTSCHEDULEID = entity.EDUSTOPACTSCHEDULEID;
			dto.CREATER = entity.CREATER;
			dto.CREATEDATE = entity.CREATEDATE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class PSNOPDAssembler : PSNOPDAssemblerBase, IPSNOPDAssembler
	{
	}


	public partial interface IPSNOPDAssembler : IEntityAssembler<PSNOPDDto, PSNOPD>
	{
	}


	public partial class PSNOPDAssemblerBase : EntityAssembler<PSNOPDDto, PSNOPD>
	{
		partial void OnDTOAssembled(PSNOPDDto dto);
		partial void OnEntityAssembled(PSNOPD entity);


		public override PSNOPD Assemble(PSNOPD entity, PSNOPDDto dto)
		{
			if (entity == null)
			{
				entity = new PSNOPD();
			}
			entity.DEPT_CODE = dto.DEPT_CODE;
			entity.EMP_CODE = dto.EMP_CODE;
			return entity;
		}
		public override PSNOPDDto Assemble(PSNOPD entity)
		{
			PSNOPDDto dto = new PSNOPDDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.DEPT_CODE = entity.DEPT_CODE;
			dto.EMP_CODE = entity.EMP_CODE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class PASSPORTSTUDENTAPPLICATIONITEMFAILLOGAssembler : PASSPORTSTUDENTAPPLICATIONITEMFAILLOGAssemblerBase, IPASSPORTSTUDENTAPPLICATIONITEMFAILLOGAssembler
	{
	}


	public partial interface IPASSPORTSTUDENTAPPLICATIONITEMFAILLOGAssembler : IEntityAssembler<PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto, PASSPORTSTUDENTAPPLICATIONITEMFAILLOG>
	{
	}


	public partial class PASSPORTSTUDENTAPPLICATIONITEMFAILLOGAssemblerBase : EntityAssembler<PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto, PASSPORTSTUDENTAPPLICATIONITEMFAILLOG>
	{
		partial void OnDTOAssembled(PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto dto);
		partial void OnEntityAssembled(PASSPORTSTUDENTAPPLICATIONITEMFAILLOG entity);


		public override PASSPORTSTUDENTAPPLICATIONITEMFAILLOG Assemble(PASSPORTSTUDENTAPPLICATIONITEMFAILLOG entity, PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto dto)
		{
			if (entity == null)
			{
				entity = new PASSPORTSTUDENTAPPLICATIONITEMFAILLOG();
			}
			entity.APPLICATIONID = dto.APPLICATIONID;
			entity.ITEMCODE = dto.ITEMCODE;
			entity.APPLICATIONMEMBERNUMBER = dto.APPLICATIONMEMBERNUMBER;
			entity.CHECKORDER = dto.CHECKORDER;
			entity.DESIGNATIONTEACHERNUMBER = dto.DESIGNATIONTEACHERNUMBER;
			entity.IMPLEMENTPLACE = dto.IMPLEMENTPLACE;
			entity.IMPLEMENTDATE = dto.IMPLEMENTDATE;
			entity.APPLICATIONDATE = dto.APPLICATIONDATE;
			entity.ISFINALCHECK = dto.ISFINALCHECK;
			entity.CHECKRESULT = dto.CHECKRESULT;
			entity.CHECKSTATUS = dto.CHECKSTATUS;
			entity.CHECKDATE = dto.CHECKDATE;
			entity.STUDENTREMARK = dto.STUDENTREMARK;
			entity.IMPLEMENTOBJECT = dto.IMPLEMENTOBJECT;
			entity.CASEHISTORYNUMBER = dto.CASEHISTORYNUMBER;
			entity.TEACHERREMARK = dto.TEACHERREMARK;
			entity.JOBCODE = dto.JOBCODE;
			return entity;
		}
		public override PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto Assemble(PASSPORTSTUDENTAPPLICATIONITEMFAILLOG entity)
		{
			PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto dto = new PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.APPLICATIONID = entity.APPLICATIONID;
			dto.ITEMCODE = entity.ITEMCODE;
			dto.APPLICATIONMEMBERNUMBER = entity.APPLICATIONMEMBERNUMBER;
			dto.CHECKORDER = entity.CHECKORDER;
			dto.DESIGNATIONTEACHERNUMBER = entity.DESIGNATIONTEACHERNUMBER;
			dto.IMPLEMENTPLACE = entity.IMPLEMENTPLACE;
			dto.IMPLEMENTDATE = entity.IMPLEMENTDATE;
			dto.APPLICATIONDATE = entity.APPLICATIONDATE;
			dto.ISFINALCHECK = entity.ISFINALCHECK;
			dto.CHECKRESULT = entity.CHECKRESULT;
			dto.CHECKSTATUS = entity.CHECKSTATUS;
			dto.CHECKDATE = entity.CHECKDATE;
			dto.STUDENTREMARK = entity.STUDENTREMARK;
			dto.IMPLEMENTOBJECT = entity.IMPLEMENTOBJECT;
			dto.CASEHISTORYNUMBER = entity.CASEHISTORYNUMBER;
			dto.TEACHERREMARK = entity.TEACHERREMARK;
			dto.JOBCODE = entity.JOBCODE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class PASSPORTSTUDENTAPPLICATIONITEM_BK2Assembler : PASSPORTSTUDENTAPPLICATIONITEM_BK2AssemblerBase, IPASSPORTSTUDENTAPPLICATIONITEM_BK2Assembler
	{
	}


	public partial interface IPASSPORTSTUDENTAPPLICATIONITEM_BK2Assembler : IEntityAssembler<PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto, PASSPORTSTUDENTAPPLICATIONITEM_BK2>
	{
	}


	public partial class PASSPORTSTUDENTAPPLICATIONITEM_BK2AssemblerBase : EntityAssembler<PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto, PASSPORTSTUDENTAPPLICATIONITEM_BK2>
	{
		partial void OnDTOAssembled(PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto dto);
		partial void OnEntityAssembled(PASSPORTSTUDENTAPPLICATIONITEM_BK2 entity);


		public override PASSPORTSTUDENTAPPLICATIONITEM_BK2 Assemble(PASSPORTSTUDENTAPPLICATIONITEM_BK2 entity, PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto dto)
		{
			if (entity == null)
			{
				entity = new PASSPORTSTUDENTAPPLICATIONITEM_BK2();
			}
			entity.APPLICATIONID = dto.APPLICATIONID;
			entity.ITEMCODE = dto.ITEMCODE;
			entity.APPLICATIONMEMBERNUMBER = dto.APPLICATIONMEMBERNUMBER;
			entity.CHECKORDER = dto.CHECKORDER;
			entity.DESIGNATIONTEACHERNUMBER = dto.DESIGNATIONTEACHERNUMBER;
			entity.IMPLEMENTPLACE = dto.IMPLEMENTPLACE;
			entity.IMPLEMENTDATE = dto.IMPLEMENTDATE;
			entity.APPLICATIONDATE = dto.APPLICATIONDATE;
			entity.ISFINALCHECK = dto.ISFINALCHECK;
			entity.CHECKRESULT = dto.CHECKRESULT;
			entity.CHECKSTATUS = dto.CHECKSTATUS;
			entity.CHECKDATE = dto.CHECKDATE;
			entity.STUDENTREMARK = dto.STUDENTREMARK;
			entity.IMPLEMENTOBJECT = dto.IMPLEMENTOBJECT;
			entity.CASEHISTORYNUMBER = dto.CASEHISTORYNUMBER;
			entity.TEACHERREMARK = dto.TEACHERREMARK;
			entity.JOBCODE = dto.JOBCODE;
			return entity;
		}
		public override PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto Assemble(PASSPORTSTUDENTAPPLICATIONITEM_BK2 entity)
		{
			PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto dto = new PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.APPLICATIONID = entity.APPLICATIONID;
			dto.ITEMCODE = entity.ITEMCODE;
			dto.APPLICATIONMEMBERNUMBER = entity.APPLICATIONMEMBERNUMBER;
			dto.CHECKORDER = entity.CHECKORDER;
			dto.DESIGNATIONTEACHERNUMBER = entity.DESIGNATIONTEACHERNUMBER;
			dto.IMPLEMENTPLACE = entity.IMPLEMENTPLACE;
			dto.IMPLEMENTDATE = entity.IMPLEMENTDATE;
			dto.APPLICATIONDATE = entity.APPLICATIONDATE;
			dto.ISFINALCHECK = entity.ISFINALCHECK;
			dto.CHECKRESULT = entity.CHECKRESULT;
			dto.CHECKSTATUS = entity.CHECKSTATUS;
			dto.CHECKDATE = entity.CHECKDATE;
			dto.STUDENTREMARK = entity.STUDENTREMARK;
			dto.IMPLEMENTOBJECT = entity.IMPLEMENTOBJECT;
			dto.CASEHISTORYNUMBER = entity.CASEHISTORYNUMBER;
			dto.TEACHERREMARK = entity.TEACHERREMARK;
			dto.JOBCODE = entity.JOBCODE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class PASSPORTSTUDENTAPPLICATIONITEM_BKAssembler : PASSPORTSTUDENTAPPLICATIONITEM_BKAssemblerBase, IPASSPORTSTUDENTAPPLICATIONITEM_BKAssembler
	{
	}


	public partial interface IPASSPORTSTUDENTAPPLICATIONITEM_BKAssembler : IEntityAssembler<PASSPORTSTUDENTAPPLICATIONITEM_BKDto, PASSPORTSTUDENTAPPLICATIONITEM_BK>
	{
	}


	public partial class PASSPORTSTUDENTAPPLICATIONITEM_BKAssemblerBase : EntityAssembler<PASSPORTSTUDENTAPPLICATIONITEM_BKDto, PASSPORTSTUDENTAPPLICATIONITEM_BK>
	{
		partial void OnDTOAssembled(PASSPORTSTUDENTAPPLICATIONITEM_BKDto dto);
		partial void OnEntityAssembled(PASSPORTSTUDENTAPPLICATIONITEM_BK entity);


		public override PASSPORTSTUDENTAPPLICATIONITEM_BK Assemble(PASSPORTSTUDENTAPPLICATIONITEM_BK entity, PASSPORTSTUDENTAPPLICATIONITEM_BKDto dto)
		{
			if (entity == null)
			{
				entity = new PASSPORTSTUDENTAPPLICATIONITEM_BK();
			}
			entity.APPLICATIONID = dto.APPLICATIONID;
			entity.ITEMCODE = dto.ITEMCODE;
			entity.APPLICATIONMEMBERNUMBER = dto.APPLICATIONMEMBERNUMBER;
			entity.CHECKORDER = dto.CHECKORDER;
			entity.DESIGNATIONTEACHERNUMBER = dto.DESIGNATIONTEACHERNUMBER;
			entity.IMPLEMENTPLACE = dto.IMPLEMENTPLACE;
			entity.IMPLEMENTDATE = dto.IMPLEMENTDATE;
			entity.APPLICATIONDATE = dto.APPLICATIONDATE;
			entity.ISFINALCHECK = dto.ISFINALCHECK;
			entity.CHECKRESULT = dto.CHECKRESULT;
			entity.CHECKSTATUS = dto.CHECKSTATUS;
			entity.CHECKDATE = dto.CHECKDATE;
			entity.STUDENTREMARK = dto.STUDENTREMARK;
			entity.IMPLEMENTOBJECT = dto.IMPLEMENTOBJECT;
			entity.CASEHISTORYNUMBER = dto.CASEHISTORYNUMBER;
			entity.TEACHERREMARK = dto.TEACHERREMARK;
			entity.JOBCODE = dto.JOBCODE;
			return entity;
		}
		public override PASSPORTSTUDENTAPPLICATIONITEM_BKDto Assemble(PASSPORTSTUDENTAPPLICATIONITEM_BK entity)
		{
			PASSPORTSTUDENTAPPLICATIONITEM_BKDto dto = new PASSPORTSTUDENTAPPLICATIONITEM_BKDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.APPLICATIONID = entity.APPLICATIONID;
			dto.ITEMCODE = entity.ITEMCODE;
			dto.APPLICATIONMEMBERNUMBER = entity.APPLICATIONMEMBERNUMBER;
			dto.CHECKORDER = entity.CHECKORDER;
			dto.DESIGNATIONTEACHERNUMBER = entity.DESIGNATIONTEACHERNUMBER;
			dto.IMPLEMENTPLACE = entity.IMPLEMENTPLACE;
			dto.IMPLEMENTDATE = entity.IMPLEMENTDATE;
			dto.APPLICATIONDATE = entity.APPLICATIONDATE;
			dto.ISFINALCHECK = entity.ISFINALCHECK;
			dto.CHECKRESULT = entity.CHECKRESULT;
			dto.CHECKSTATUS = entity.CHECKSTATUS;
			dto.CHECKDATE = entity.CHECKDATE;
			dto.STUDENTREMARK = entity.STUDENTREMARK;
			dto.IMPLEMENTOBJECT = entity.IMPLEMENTOBJECT;
			dto.CASEHISTORYNUMBER = entity.CASEHISTORYNUMBER;
			dto.TEACHERREMARK = entity.TEACHERREMARK;
			dto.JOBCODE = entity.JOBCODE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class PASSPORTSTUDENTAPPLICATIONITEMAssembler : PASSPORTSTUDENTAPPLICATIONITEMAssemblerBase, IPASSPORTSTUDENTAPPLICATIONITEMAssembler
	{
	}


	public partial interface IPASSPORTSTUDENTAPPLICATIONITEMAssembler : IEntityAssembler<PASSPORTSTUDENTAPPLICATIONITEMDto, PASSPORTSTUDENTAPPLICATIONITEM>
	{
	}


	public partial class PASSPORTSTUDENTAPPLICATIONITEMAssemblerBase : EntityAssembler<PASSPORTSTUDENTAPPLICATIONITEMDto, PASSPORTSTUDENTAPPLICATIONITEM>
	{
		partial void OnDTOAssembled(PASSPORTSTUDENTAPPLICATIONITEMDto dto);
		partial void OnEntityAssembled(PASSPORTSTUDENTAPPLICATIONITEM entity);


		public override PASSPORTSTUDENTAPPLICATIONITEM Assemble(PASSPORTSTUDENTAPPLICATIONITEM entity, PASSPORTSTUDENTAPPLICATIONITEMDto dto)
		{
			if (entity == null)
			{
				entity = new PASSPORTSTUDENTAPPLICATIONITEM();
			}
			entity.APPLICATIONID = dto.APPLICATIONID;
			entity.ITEMCODE = dto.ITEMCODE;
			entity.APPLICATIONMEMBERNUMBER = dto.APPLICATIONMEMBERNUMBER;
			entity.CHECKORDER = dto.CHECKORDER;
			entity.DESIGNATIONTEACHERNUMBER = dto.DESIGNATIONTEACHERNUMBER;
			entity.IMPLEMENTPLACE = dto.IMPLEMENTPLACE;
			entity.IMPLEMENTDATE = dto.IMPLEMENTDATE;
			entity.APPLICATIONDATE = dto.APPLICATIONDATE;
			entity.ISFINALCHECK = dto.ISFINALCHECK;
			entity.CHECKRESULT = dto.CHECKRESULT;
			entity.CHECKSTATUS = dto.CHECKSTATUS;
			entity.CHECKDATE = dto.CHECKDATE;
			entity.STUDENTREMARK = dto.STUDENTREMARK;
			entity.IMPLEMENTOBJECT = dto.IMPLEMENTOBJECT;
			entity.CASEHISTORYNUMBER = dto.CASEHISTORYNUMBER;
			entity.TEACHERREMARK = dto.TEACHERREMARK;
			entity.JOBCODE = dto.JOBCODE;
			return entity;
		}
		public override PASSPORTSTUDENTAPPLICATIONITEMDto Assemble(PASSPORTSTUDENTAPPLICATIONITEM entity)
		{
			PASSPORTSTUDENTAPPLICATIONITEMDto dto = new PASSPORTSTUDENTAPPLICATIONITEMDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.APPLICATIONID = entity.APPLICATIONID;
			dto.ITEMCODE = entity.ITEMCODE;
			dto.APPLICATIONMEMBERNUMBER = entity.APPLICATIONMEMBERNUMBER;
			dto.CHECKORDER = entity.CHECKORDER;
			dto.DESIGNATIONTEACHERNUMBER = entity.DESIGNATIONTEACHERNUMBER;
			dto.IMPLEMENTPLACE = entity.IMPLEMENTPLACE;
			dto.IMPLEMENTDATE = entity.IMPLEMENTDATE;
			dto.APPLICATIONDATE = entity.APPLICATIONDATE;
			dto.ISFINALCHECK = entity.ISFINALCHECK;
			dto.CHECKRESULT = entity.CHECKRESULT;
			dto.CHECKSTATUS = entity.CHECKSTATUS;
			dto.CHECKDATE = entity.CHECKDATE;
			dto.STUDENTREMARK = entity.STUDENTREMARK;
			dto.IMPLEMENTOBJECT = entity.IMPLEMENTOBJECT;
			dto.CASEHISTORYNUMBER = entity.CASEHISTORYNUMBER;
			dto.TEACHERREMARK = entity.TEACHERREMARK;
			dto.JOBCODE = entity.JOBCODE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class PASSPORTSPECIALLISTAssembler : PASSPORTSPECIALLISTAssemblerBase, IPASSPORTSPECIALLISTAssembler
	{
	}


	public partial interface IPASSPORTSPECIALLISTAssembler : IEntityAssembler<PASSPORTSPECIALLISTDto, PASSPORTSPECIALLIST>
	{
	}


	public partial class PASSPORTSPECIALLISTAssemblerBase : EntityAssembler<PASSPORTSPECIALLISTDto, PASSPORTSPECIALLIST>
	{
		partial void OnDTOAssembled(PASSPORTSPECIALLISTDto dto);
		partial void OnEntityAssembled(PASSPORTSPECIALLIST entity);


		public override PASSPORTSPECIALLIST Assemble(PASSPORTSPECIALLIST entity, PASSPORTSPECIALLISTDto dto)
		{
			if (entity == null)
			{
				entity = new PASSPORTSPECIALLIST();
			}
			entity.EMPCODE = dto.EMPCODE;
			entity.ITEMCODE = dto.ITEMCODE;
			entity.DEFAULTLEVEL = dto.DEFAULTLEVEL;
			return entity;
		}
		public override PASSPORTSPECIALLISTDto Assemble(PASSPORTSPECIALLIST entity)
		{
			PASSPORTSPECIALLISTDto dto = new PASSPORTSPECIALLISTDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EMPCODE = entity.EMPCODE;
			dto.ITEMCODE = entity.ITEMCODE;
			dto.DEFAULTLEVEL = entity.DEFAULTLEVEL;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class PASSPORTJOBTITLEITEM_BKAssembler : PASSPORTJOBTITLEITEM_BKAssemblerBase, IPASSPORTJOBTITLEITEM_BKAssembler
	{
	}


	public partial interface IPASSPORTJOBTITLEITEM_BKAssembler : IEntityAssembler<PASSPORTJOBTITLEITEM_BKDto, PASSPORTJOBTITLEITEM_BK>
	{
	}


	public partial class PASSPORTJOBTITLEITEM_BKAssemblerBase : EntityAssembler<PASSPORTJOBTITLEITEM_BKDto, PASSPORTJOBTITLEITEM_BK>
	{
		partial void OnDTOAssembled(PASSPORTJOBTITLEITEM_BKDto dto);
		partial void OnEntityAssembled(PASSPORTJOBTITLEITEM_BK entity);


		public override PASSPORTJOBTITLEITEM_BK Assemble(PASSPORTJOBTITLEITEM_BK entity, PASSPORTJOBTITLEITEM_BKDto dto)
		{
			if (entity == null)
			{
				entity = new PASSPORTJOBTITLEITEM_BK();
			}
			entity.JOBTITLECODE = dto.JOBTITLECODE;
			entity.ITEMCODE = dto.ITEMCODE;
			entity.AUTHORIZELEVEL = dto.AUTHORIZELEVEL;
			entity.AUTHENTICATEFREQUENCY = dto.AUTHENTICATEFREQUENCY;
			entity.ISNEEDFINALCHECK = dto.ISNEEDFINALCHECK;
			entity.EXAUTHORIZELEVEL = dto.EXAUTHORIZELEVEL;
			return entity;
		}
		public override PASSPORTJOBTITLEITEM_BKDto Assemble(PASSPORTJOBTITLEITEM_BK entity)
		{
			PASSPORTJOBTITLEITEM_BKDto dto = new PASSPORTJOBTITLEITEM_BKDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.JOBTITLECODE = entity.JOBTITLECODE;
			dto.ITEMCODE = entity.ITEMCODE;
			dto.AUTHORIZELEVEL = entity.AUTHORIZELEVEL;
			dto.AUTHENTICATEFREQUENCY = entity.AUTHENTICATEFREQUENCY;
			dto.ISNEEDFINALCHECK = entity.ISNEEDFINALCHECK;
			dto.EXAUTHORIZELEVEL = entity.EXAUTHORIZELEVEL;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class PASSPORTJOBTITLEITEMAssembler : PASSPORTJOBTITLEITEMAssemblerBase, IPASSPORTJOBTITLEITEMAssembler
	{
	}


	public partial interface IPASSPORTJOBTITLEITEMAssembler : IEntityAssembler<PASSPORTJOBTITLEITEMDto, PASSPORTJOBTITLEITEM>
	{
	}


	public partial class PASSPORTJOBTITLEITEMAssemblerBase : EntityAssembler<PASSPORTJOBTITLEITEMDto, PASSPORTJOBTITLEITEM>
	{
		partial void OnDTOAssembled(PASSPORTJOBTITLEITEMDto dto);
		partial void OnEntityAssembled(PASSPORTJOBTITLEITEM entity);


		public override PASSPORTJOBTITLEITEM Assemble(PASSPORTJOBTITLEITEM entity, PASSPORTJOBTITLEITEMDto dto)
		{
			if (entity == null)
			{
				entity = new PASSPORTJOBTITLEITEM();
			}
			entity.JOBTITLECODE = dto.JOBTITLECODE;
			entity.ITEMCODE = dto.ITEMCODE;
			entity.AUTHORIZELEVEL = dto.AUTHORIZELEVEL;
			entity.AUTHENTICATEFREQUENCY = dto.AUTHENTICATEFREQUENCY;
			entity.ISNEEDFINALCHECK = dto.ISNEEDFINALCHECK;
			entity.EXAUTHORIZELEVEL = dto.EXAUTHORIZELEVEL;
			return entity;
		}
		public override PASSPORTJOBTITLEITEMDto Assemble(PASSPORTJOBTITLEITEM entity)
		{
			PASSPORTJOBTITLEITEMDto dto = new PASSPORTJOBTITLEITEMDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.JOBTITLECODE = entity.JOBTITLECODE;
			dto.ITEMCODE = entity.ITEMCODE;
			dto.AUTHORIZELEVEL = entity.AUTHORIZELEVEL;
			dto.AUTHENTICATEFREQUENCY = entity.AUTHENTICATEFREQUENCY;
			dto.ISNEEDFINALCHECK = entity.ISNEEDFINALCHECK;
			dto.EXAUTHORIZELEVEL = entity.EXAUTHORIZELEVEL;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class PASSPORTJOBFINALMANAssembler : PASSPORTJOBFINALMANAssemblerBase, IPASSPORTJOBFINALMANAssembler
	{
	}


	public partial interface IPASSPORTJOBFINALMANAssembler : IEntityAssembler<PASSPORTJOBFINALMANDto, PASSPORTJOBFINALMAN>
	{
	}


	public partial class PASSPORTJOBFINALMANAssemblerBase : EntityAssembler<PASSPORTJOBFINALMANDto, PASSPORTJOBFINALMAN>
	{
		partial void OnDTOAssembled(PASSPORTJOBFINALMANDto dto);
		partial void OnEntityAssembled(PASSPORTJOBFINALMAN entity);


		public override PASSPORTJOBFINALMAN Assemble(PASSPORTJOBFINALMAN entity, PASSPORTJOBFINALMANDto dto)
		{
			if (entity == null)
			{
				entity = new PASSPORTJOBFINALMAN();
			}
			entity.JOBCODE = dto.JOBCODE;
			entity.EMPCODE = dto.EMPCODE;
			return entity;
		}
		public override PASSPORTJOBFINALMANDto Assemble(PASSPORTJOBFINALMAN entity)
		{
			PASSPORTJOBFINALMANDto dto = new PASSPORTJOBFINALMANDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.JOBCODE = entity.JOBCODE;
			dto.EMPCODE = entity.EMPCODE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class PASSPORTDOCGRADEAssembler : PASSPORTDOCGRADEAssemblerBase, IPASSPORTDOCGRADEAssembler
	{
	}


	public partial interface IPASSPORTDOCGRADEAssembler : IEntityAssembler<PASSPORTDOCGRADEDto, PASSPORTDOCGRADE>
	{
	}


	public partial class PASSPORTDOCGRADEAssemblerBase : EntityAssembler<PASSPORTDOCGRADEDto, PASSPORTDOCGRADE>
	{
		partial void OnDTOAssembled(PASSPORTDOCGRADEDto dto);
		partial void OnEntityAssembled(PASSPORTDOCGRADE entity);


		public override PASSPORTDOCGRADE Assemble(PASSPORTDOCGRADE entity, PASSPORTDOCGRADEDto dto)
		{
			if (entity == null)
			{
				entity = new PASSPORTDOCGRADE();
			}
			entity.TITLECODE = dto.TITLECODE;
			entity.GRADE = dto.GRADE;
			return entity;
		}
		public override PASSPORTDOCGRADEDto Assemble(PASSPORTDOCGRADE entity)
		{
			PASSPORTDOCGRADEDto dto = new PASSPORTDOCGRADEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TITLECODE = entity.TITLECODE;
			dto.GRADE = entity.GRADE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class PASSPORTCHECKITEMAssembler : PASSPORTCHECKITEMAssemblerBase, IPASSPORTCHECKITEMAssembler
	{
	}


	public partial interface IPASSPORTCHECKITEMAssembler : IEntityAssembler<PASSPORTCHECKITEMDto, PASSPORTCHECKITEM>
	{
	}


	public partial class PASSPORTCHECKITEMAssemblerBase : EntityAssembler<PASSPORTCHECKITEMDto, PASSPORTCHECKITEM>
	{
		partial void OnDTOAssembled(PASSPORTCHECKITEMDto dto);
		partial void OnEntityAssembled(PASSPORTCHECKITEM entity);


		public override PASSPORTCHECKITEM Assemble(PASSPORTCHECKITEM entity, PASSPORTCHECKITEMDto dto)
		{
			if (entity == null)
			{
				entity = new PASSPORTCHECKITEM();
			}
			entity.ITEMCODE = dto.ITEMCODE;
			entity.ITEMNAME = dto.ITEMNAME;
			entity.CREATEDMAN = dto.CREATEDMAN;
			entity.CREATEDTIME = dto.CREATEDTIME;
			entity.TOPTEAMCODE = dto.TOPTEAMCODE;
			entity.ITEMGROUP = dto.ITEMGROUP;
			return entity;
		}
		public override PASSPORTCHECKITEMDto Assemble(PASSPORTCHECKITEM entity)
		{
			PASSPORTCHECKITEMDto dto = new PASSPORTCHECKITEMDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ITEMCODE = entity.ITEMCODE;
			dto.ITEMNAME = entity.ITEMNAME;
			dto.CREATEDMAN = entity.CREATEDMAN;
			dto.CREATEDTIME = entity.CREATEDTIME;
			dto.TOPTEAMCODE = entity.TOPTEAMCODE;
			dto.ITEMGROUP = entity.ITEMGROUP;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class OSCECERTAssembler : OSCECERTAssemblerBase, IOSCECERTAssembler
	{
	}


	public partial interface IOSCECERTAssembler : IEntityAssembler<OSCECERTDto, OSCECERT>
	{
	}


	public partial class OSCECERTAssemblerBase : EntityAssembler<OSCECERTDto, OSCECERT>
	{
		partial void OnDTOAssembled(OSCECERTDto dto);
		partial void OnEntityAssembled(OSCECERT entity);


		public override OSCECERT Assemble(OSCECERT entity, OSCECERTDto dto)
		{
			if (entity == null)
			{
				entity = new OSCECERT();
			}
			entity.ID = dto.ID;
			entity.EMPCODE = dto.EMPCODE;
			entity.SDATE = dto.SDATE;
			entity.EDATE = dto.EDATE;
			entity.CREATER = dto.CREATER;
			entity.CREATEDATE = dto.CREATEDATE;
			entity.STATUS = dto.STATUS;
			entity.REMARK = dto.REMARK;
			return entity;
		}
		public override OSCECERTDto Assemble(OSCECERT entity)
		{
			OSCECERTDto dto = new OSCECERTDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.EMPCODE = entity.EMPCODE;
			dto.SDATE = entity.SDATE;
			dto.EDATE = entity.EDATE;
			dto.CREATER = entity.CREATER;
			dto.CREATEDATE = entity.CREATEDATE;
			dto.STATUS = entity.STATUS;
			dto.REMARK = entity.REMARK;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class OSCEBLOCKTIMEAssembler : OSCEBLOCKTIMEAssemblerBase, IOSCEBLOCKTIMEAssembler
	{
	}


	public partial interface IOSCEBLOCKTIMEAssembler : IEntityAssembler<OSCEBLOCKTIMEDto, OSCEBLOCKTIME>
	{
	}


	public partial class OSCEBLOCKTIMEAssemblerBase : EntityAssembler<OSCEBLOCKTIMEDto, OSCEBLOCKTIME>
	{
		partial void OnDTOAssembled(OSCEBLOCKTIMEDto dto);
		partial void OnEntityAssembled(OSCEBLOCKTIME entity);


		public override OSCEBLOCKTIME Assemble(OSCEBLOCKTIME entity, OSCEBLOCKTIMEDto dto)
		{
			if (entity == null)
			{
				entity = new OSCEBLOCKTIME();
			}
			entity.ID = dto.ID;
			entity.EMPCODE = dto.EMPCODE;
			entity.CLASSNAME = dto.CLASSNAME;
			entity.CLASSDATE = dto.CLASSDATE;
			entity.TRAININGTIME = dto.TRAININGTIME;
			entity.CREATER = dto.CREATER;
			entity.CREATEDATE = dto.CREATEDATE;
			entity.STATUS = dto.STATUS;
			return entity;
		}
		public override OSCEBLOCKTIMEDto Assemble(OSCEBLOCKTIME entity)
		{
			OSCEBLOCKTIMEDto dto = new OSCEBLOCKTIMEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.EMPCODE = entity.EMPCODE;
			dto.CLASSNAME = entity.CLASSNAME;
			dto.CLASSDATE = entity.CLASSDATE;
			dto.TRAININGTIME = entity.TRAININGTIME;
			dto.CREATER = entity.CREATER;
			dto.CREATEDATE = entity.CREATEDATE;
			dto.STATUS = entity.STATUS;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class NURSELISTAssembler : NURSELISTAssemblerBase, INURSELISTAssembler
	{
	}


	public partial interface INURSELISTAssembler : IEntityAssembler<NURSELISTDto, NURSELIST>
	{
	}


	public partial class NURSELISTAssemblerBase : EntityAssembler<NURSELISTDto, NURSELIST>
	{
		partial void OnDTOAssembled(NURSELISTDto dto);
		partial void OnEntityAssembled(NURSELIST entity);


		public override NURSELIST Assemble(NURSELIST entity, NURSELISTDto dto)
		{
			if (entity == null)
			{
				entity = new NURSELIST();
			}
			entity.序號 = dto.序號;
			entity.部門名稱 = dto.部門名稱;
			entity.單位 = dto.單位;
			entity.員工編號 = dto.員工編號;
			entity.員工姓名 = dto.員工姓名;
			return entity;
		}
		public override NURSELISTDto Assemble(NURSELIST entity)
		{
			NURSELISTDto dto = new NURSELISTDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.序號 = entity.序號;
			dto.部門名稱 = entity.部門名稱;
			dto.單位 = entity.單位;
			dto.員工編號 = entity.員工編號;
			dto.員工姓名 = entity.員工姓名;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class NNOTEITEMAssembler : NNOTEITEMAssemblerBase, INNOTEITEMAssembler
	{
	}


	public partial interface INNOTEITEMAssembler : IEntityAssembler<NNOTEITEMDto, NNOTEITEM>
	{
	}


	public partial class NNOTEITEMAssemblerBase : EntityAssembler<NNOTEITEMDto, NNOTEITEM>
	{
		partial void OnDTOAssembled(NNOTEITEMDto dto);
		partial void OnEntityAssembled(NNOTEITEM entity);


		public override NNOTEITEM Assemble(NNOTEITEM entity, NNOTEITEMDto dto)
		{
			if (entity == null)
			{
				entity = new NNOTEITEM();
			}
			entity.NNOTEITEMID = dto.NNOTEITEMID;
			entity.NNOTEID = dto.NNOTEID;
			entity.STUDYKEYWORD = dto.STUDYKEYWORD;
			entity.NOTINGDESABBREV = dto.NOTINGDESABBREV;
			entity.DES = dto.DES;
			return entity;
		}
		public override NNOTEITEMDto Assemble(NNOTEITEM entity)
		{
			NNOTEITEMDto dto = new NNOTEITEMDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.NNOTEITEMID = entity.NNOTEITEMID;
			dto.NNOTEID = entity.NNOTEID;
			dto.STUDYKEYWORD = entity.STUDYKEYWORD;
			dto.NOTINGDESABBREV = entity.NOTINGDESABBREV;
			dto.DES = entity.DES;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class NNOTEAssembler : NNOTEAssemblerBase, INNOTEAssembler
	{
	}


	public partial interface INNOTEAssembler : IEntityAssembler<NNOTEDto, NNOTE>
	{
	}


	public partial class NNOTEAssemblerBase : EntityAssembler<NNOTEDto, NNOTE>
	{
		partial void OnDTOAssembled(NNOTEDto dto);
		partial void OnEntityAssembled(NNOTE entity);


		public override NNOTE Assemble(NNOTE entity, NNOTEDto dto)
		{
			if (entity == null)
			{
				entity = new NNOTE();
			}
			entity.NNOTEID = dto.NNOTEID;
			entity.NURSINGNOTECODE = dto.NURSINGNOTECODE;
			entity.VERSIONCODE = dto.VERSIONCODE;
			entity.NOTEDATE = dto.NOTEDATE;
			entity.CHART_NO = dto.CHART_NO;
			entity.PATIENT_NAME = dto.PATIENT_NAME;
			entity.CREATER = dto.CREATER;
			entity.CREATER_NAME = dto.CREATER_NAME;
			entity.INHOSPID = dto.INHOSPID;
			entity.UPDATEDATE = dto.UPDATEDATE;
			return entity;
		}
		public override NNOTEDto Assemble(NNOTE entity)
		{
			NNOTEDto dto = new NNOTEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.NNOTEID = entity.NNOTEID;
			dto.NURSINGNOTECODE = entity.NURSINGNOTECODE;
			dto.VERSIONCODE = entity.VERSIONCODE;
			dto.NOTEDATE = entity.NOTEDATE;
			dto.CHART_NO = entity.CHART_NO;
			dto.PATIENT_NAME = entity.PATIENT_NAME;
			dto.CREATER = entity.CREATER;
			dto.CREATER_NAME = entity.CREATER_NAME;
			dto.INHOSPID = entity.INHOSPID;
			dto.UPDATEDATE = entity.UPDATEDATE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class NEWSVIEWTARGETAssembler : NEWSVIEWTARGETAssemblerBase, INEWSVIEWTARGETAssembler
	{
	}


	public partial interface INEWSVIEWTARGETAssembler : IEntityAssembler<NEWSVIEWTARGETDto, NEWSVIEWTARGET>
	{
	}


	public partial class NEWSVIEWTARGETAssemblerBase : EntityAssembler<NEWSVIEWTARGETDto, NEWSVIEWTARGET>
	{
		partial void OnDTOAssembled(NEWSVIEWTARGETDto dto);
		partial void OnEntityAssembled(NEWSVIEWTARGET entity);


		public override NEWSVIEWTARGET Assemble(NEWSVIEWTARGET entity, NEWSVIEWTARGETDto dto)
		{
			if (entity == null)
			{
				entity = new NEWSVIEWTARGET();
			}
			entity.NEWID = dto.NEWID;
			entity.TARGETTYPE = dto.TARGETTYPE;
			entity.TARGETID = dto.TARGETID;
			entity.CANREAD = dto.CANREAD;
			return entity;
		}
		public override NEWSVIEWTARGETDto Assemble(NEWSVIEWTARGET entity)
		{
			NEWSVIEWTARGETDto dto = new NEWSVIEWTARGETDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.NEWID = entity.NEWID;
			dto.TARGETTYPE = entity.TARGETTYPE;
			dto.TARGETID = entity.TARGETID;
			dto.CANREAD = entity.CANREAD;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class NEWS_ATTACHMENTAssembler : NEWS_ATTACHMENTAssemblerBase, INEWS_ATTACHMENTAssembler
	{
	}


	public partial interface INEWS_ATTACHMENTAssembler : IEntityAssembler<NEWS_ATTACHMENTDto, NEWS_ATTACHMENT>
	{
	}


	public partial class NEWS_ATTACHMENTAssemblerBase : EntityAssembler<NEWS_ATTACHMENTDto, NEWS_ATTACHMENT>
	{
		partial void OnDTOAssembled(NEWS_ATTACHMENTDto dto);
		partial void OnEntityAssembled(NEWS_ATTACHMENT entity);


		public override NEWS_ATTACHMENT Assemble(NEWS_ATTACHMENT entity, NEWS_ATTACHMENTDto dto)
		{
			if (entity == null)
			{
				entity = new NEWS_ATTACHMENT();
			}
			entity.ATTACHMENTID = dto.ATTACHMENTID;
			entity.NEWID = dto.NEWID;
			entity.ATTACHMENTNAME = dto.ATTACHMENTNAME;
			entity.ATTACHMENT = dto.ATTACHMENT;
			return entity;
		}
		public override NEWS_ATTACHMENTDto Assemble(NEWS_ATTACHMENT entity)
		{
			NEWS_ATTACHMENTDto dto = new NEWS_ATTACHMENTDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ATTACHMENTID = entity.ATTACHMENTID;
			dto.NEWID = entity.NEWID;
			dto.ATTACHMENTNAME = entity.ATTACHMENTNAME;
			dto.ATTACHMENT = entity.ATTACHMENT;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class NEWSAssembler : NEWSAssemblerBase, INEWSAssembler
	{
	}


	public partial interface INEWSAssembler : IEntityAssembler<NEWSDto, NEWS>
	{
	}


	public partial class NEWSAssemblerBase : EntityAssembler<NEWSDto, NEWS>
	{
		partial void OnDTOAssembled(NEWSDto dto);
		partial void OnEntityAssembled(NEWS entity);


		public override NEWS Assemble(NEWS entity, NEWSDto dto)
		{
			if (entity == null)
			{
				entity = new NEWS();
			}
			entity.NEWID = dto.NEWID;
			entity.TITLE = dto.TITLE;
			entity.CONTENT = dto.CONTENT;
			entity.SDATE = dto.SDATE;
			entity.EDATE = dto.EDATE;
			entity.CREATER = dto.CREATER;
			entity.CREATEDATE = dto.CREATEDATE;
			return entity;
		}
		public override NEWSDto Assemble(NEWS entity)
		{
			NEWSDto dto = new NEWSDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.NEWID = entity.NEWID;
			dto.TITLE = entity.TITLE;
			dto.CONTENT = entity.CONTENT;
			dto.SDATE = entity.SDATE;
			dto.EDATE = entity.EDATE;
			dto.CREATER = entity.CREATER;
			dto.CREATEDATE = entity.CREATEDATE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class MYLISTDETAssembler : MYLISTDETAssemblerBase, IMYLISTDETAssembler
	{
	}


	public partial interface IMYLISTDETAssembler : IEntityAssembler<MYLISTDETDto, MYLISTDET>
	{
	}


	public partial class MYLISTDETAssemblerBase : EntityAssembler<MYLISTDETDto, MYLISTDET>
	{
		partial void OnDTOAssembled(MYLISTDETDto dto);
		partial void OnEntityAssembled(MYLISTDET entity);


		public override MYLISTDET Assemble(MYLISTDET entity, MYLISTDETDto dto)
		{
			if (entity == null)
			{
				entity = new MYLISTDET();
			}
			entity.LISTID = dto.LISTID;
			entity.EMPCODE = dto.EMPCODE;
			entity.REMARK = dto.REMARK;
			return entity;
		}
		public override MYLISTDETDto Assemble(MYLISTDET entity)
		{
			MYLISTDETDto dto = new MYLISTDETDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.LISTID = entity.LISTID;
			dto.EMPCODE = entity.EMPCODE;
			dto.REMARK = entity.REMARK;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class MYLISTAssembler : MYLISTAssemblerBase, IMYLISTAssembler
	{
	}


	public partial interface IMYLISTAssembler : IEntityAssembler<MYLISTDto, MYLIST>
	{
	}


	public partial class MYLISTAssemblerBase : EntityAssembler<MYLISTDto, MYLIST>
	{
		partial void OnDTOAssembled(MYLISTDto dto);
		partial void OnEntityAssembled(MYLIST entity);


		public override MYLIST Assemble(MYLIST entity, MYLISTDto dto)
		{
			if (entity == null)
			{
				entity = new MYLIST();
			}
			entity.LISTID = dto.LISTID;
			entity.LISTNAME = dto.LISTNAME;
			entity.CREATER = dto.CREATER;
			entity.CREATEDATE = dto.CREATEDATE;
			entity.MODIFYDATE = dto.MODIFYDATE;
			entity.ISPUBLIC = dto.ISPUBLIC;
			return entity;
		}
		public override MYLISTDto Assemble(MYLIST entity)
		{
			MYLISTDto dto = new MYLISTDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.LISTID = entity.LISTID;
			dto.LISTNAME = entity.LISTNAME;
			dto.CREATER = entity.CREATER;
			dto.CREATEDATE = entity.CREATEDATE;
			dto.MODIFYDATE = entity.MODIFYDATE;
			dto.ISPUBLIC = entity.ISPUBLIC;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class MONTHLYTEACHPOINTCALCDATUMAssembler : MONTHLYTEACHPOINTCALCDATUMAssemblerBase, IMONTHLYTEACHPOINTCALCDATUMAssembler
	{
	}


	public partial interface IMONTHLYTEACHPOINTCALCDATUMAssembler : IEntityAssembler<MONTHLYTEACHPOINTCALCDATUMDto, MONTHLYTEACHPOINTCALCDATUM>
	{
	}


	public partial class MONTHLYTEACHPOINTCALCDATUMAssemblerBase : EntityAssembler<MONTHLYTEACHPOINTCALCDATUMDto, MONTHLYTEACHPOINTCALCDATUM>
	{
		partial void OnDTOAssembled(MONTHLYTEACHPOINTCALCDATUMDto dto);
		partial void OnEntityAssembled(MONTHLYTEACHPOINTCALCDATUM entity);


		public override MONTHLYTEACHPOINTCALCDATUM Assemble(MONTHLYTEACHPOINTCALCDATUM entity, MONTHLYTEACHPOINTCALCDATUMDto dto)
		{
			if (entity == null)
			{
				entity = new MONTHLYTEACHPOINTCALCDATUM();
			}
			entity.CALDATE = dto.CALDATE;
			entity.EMPCODE = dto.EMPCODE;
			entity.SDATE = dto.SDATE;
			entity.EDATE = dto.EDATE;
			entity.ISLATEST = dto.ISLATEST;
			entity.PARAM0 = dto.PARAM0;
			entity.PARAM1 = dto.PARAM1;
			entity.PARAM2 = dto.PARAM2;
			entity.PARAM3 = dto.PARAM3;
			entity.PARAM4 = dto.PARAM4;
			entity.PARAM5 = dto.PARAM5;
			entity.PARAM6 = dto.PARAM6;
			entity.PARAM7 = dto.PARAM7;
			entity.PARAM8 = dto.PARAM8;
			entity.PARAM9 = dto.PARAM9;
			entity.PARAM10 = dto.PARAM10;
			entity.PARAM11 = dto.PARAM11;
			entity.PARAM12 = dto.PARAM12;
			entity.PARAM13 = dto.PARAM13;
			return entity;
		}
		public override MONTHLYTEACHPOINTCALCDATUMDto Assemble(MONTHLYTEACHPOINTCALCDATUM entity)
		{
			MONTHLYTEACHPOINTCALCDATUMDto dto = new MONTHLYTEACHPOINTCALCDATUMDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.CALDATE = entity.CALDATE;
			dto.EMPCODE = entity.EMPCODE;
			dto.SDATE = entity.SDATE;
			dto.EDATE = entity.EDATE;
			dto.ISLATEST = entity.ISLATEST;
			dto.PARAM0 = entity.PARAM0;
			dto.PARAM1 = entity.PARAM1;
			dto.PARAM2 = entity.PARAM2;
			dto.PARAM3 = entity.PARAM3;
			dto.PARAM4 = entity.PARAM4;
			dto.PARAM5 = entity.PARAM5;
			dto.PARAM6 = entity.PARAM6;
			dto.PARAM7 = entity.PARAM7;
			dto.PARAM8 = entity.PARAM8;
			dto.PARAM9 = entity.PARAM9;
			dto.PARAM10 = entity.PARAM10;
			dto.PARAM11 = entity.PARAM11;
			dto.PARAM12 = entity.PARAM12;
			dto.PARAM13 = entity.PARAM13;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class MESSAGEBOARDAssembler : MESSAGEBOARDAssemblerBase, IMESSAGEBOARDAssembler
	{
	}


	public partial interface IMESSAGEBOARDAssembler : IEntityAssembler<MESSAGEBOARDDto, MESSAGEBOARD>
	{
	}


	public partial class MESSAGEBOARDAssemblerBase : EntityAssembler<MESSAGEBOARDDto, MESSAGEBOARD>
	{
		partial void OnDTOAssembled(MESSAGEBOARDDto dto);
		partial void OnEntityAssembled(MESSAGEBOARD entity);


		public override MESSAGEBOARD Assemble(MESSAGEBOARD entity, MESSAGEBOARDDto dto)
		{
			if (entity == null)
			{
				entity = new MESSAGEBOARD();
			}
			entity.MESSAGEID = dto.MESSAGEID;
			entity.EMP_CODE = dto.EMP_CODE;
			entity.MESSAGETITLE = dto.MESSAGETITLE;
			entity.MESSAGECONTENT = dto.MESSAGECONTENT;
			entity.SENDTIME = dto.SENDTIME;
			entity.PARENTMESSAGEID = dto.PARENTMESSAGEID;
			entity.READCOUNT = dto.READCOUNT;
			entity.ISPUBLIC = dto.ISPUBLIC;
			entity.STATUS = dto.STATUS;
			entity.JOBCODE = dto.JOBCODE;
			entity.MESSAGETYPE = dto.MESSAGETYPE;
			return entity;
		}
		public override MESSAGEBOARDDto Assemble(MESSAGEBOARD entity)
		{
			MESSAGEBOARDDto dto = new MESSAGEBOARDDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.MESSAGEID = entity.MESSAGEID;
			dto.EMP_CODE = entity.EMP_CODE;
			dto.MESSAGETITLE = entity.MESSAGETITLE;
			dto.MESSAGECONTENT = entity.MESSAGECONTENT;
			dto.SENDTIME = entity.SENDTIME;
			dto.PARENTMESSAGEID = entity.PARENTMESSAGEID;
			dto.READCOUNT = entity.READCOUNT;
			dto.ISPUBLIC = entity.ISPUBLIC;
			dto.STATUS = entity.STATUS;
			dto.JOBCODE = entity.JOBCODE;
			dto.MESSAGETYPE = entity.MESSAGETYPE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class MEMBER_BKAssembler : MEMBER_BKAssemblerBase, IMEMBER_BKAssembler
	{
	}


	public partial interface IMEMBER_BKAssembler : IEntityAssembler<MEMBER_BKDto, MEMBER_BK>
	{
	}


	public partial class MEMBER_BKAssemblerBase : EntityAssembler<MEMBER_BKDto, MEMBER_BK>
	{
		partial void OnDTOAssembled(MEMBER_BKDto dto);
		partial void OnEntityAssembled(MEMBER_BK entity);


		public override MEMBER_BK Assemble(MEMBER_BK entity, MEMBER_BKDto dto)
		{
			if (entity == null)
			{
				entity = new MEMBER_BK();
			}
			entity.MEMBERID = dto.MEMBERID;
			entity.MEMBERCODE = dto.MEMBERCODE;
			entity.NAME = dto.NAME;
			entity.MEMBERTYPE = dto.MEMBERTYPE;
			entity.DES = dto.DES;
			entity.STATUS = dto.STATUS;
			entity.DATEFROM = dto.DATEFROM;
			entity.DATETO = dto.DATETO;
			entity.ISHOSPMEMBER = dto.ISHOSPMEMBER;
			return entity;
		}
		public override MEMBER_BKDto Assemble(MEMBER_BK entity)
		{
			MEMBER_BKDto dto = new MEMBER_BKDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.MEMBERID = entity.MEMBERID;
			dto.MEMBERCODE = entity.MEMBERCODE;
			dto.NAME = entity.NAME;
			dto.MEMBERTYPE = entity.MEMBERTYPE;
			dto.DES = entity.DES;
			dto.STATUS = entity.STATUS;
			dto.DATEFROM = entity.DATEFROM;
			dto.DATETO = entity.DATETO;
			dto.ISHOSPMEMBER = entity.ISHOSPMEMBER;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class MEMBERAssembler : MEMBERAssemblerBase, IMEMBERAssembler
	{
	}


	public partial interface IMEMBERAssembler : IEntityAssembler<MEMBERDto, MEMBER>
	{
	}


	public partial class MEMBERAssemblerBase : EntityAssembler<MEMBERDto, MEMBER>
	{
		partial void OnDTOAssembled(MEMBERDto dto);
		partial void OnEntityAssembled(MEMBER entity);


		public override MEMBER Assemble(MEMBER entity, MEMBERDto dto)
		{
			if (entity == null)
			{
				entity = new MEMBER();
			}
			entity.MEMBERID = dto.MEMBERID;
			entity.MEMBERCODE = dto.MEMBERCODE;
			entity.NAME = dto.NAME;
			entity.MEMBERTYPE = dto.MEMBERTYPE;
			entity.DES = dto.DES;
			entity.STATUS = dto.STATUS;
			entity.DATEFROM = dto.DATEFROM;
			entity.DATETO = dto.DATETO;
			entity.ISHOSPMEMBER = dto.ISHOSPMEMBER;
			entity.CREATER = dto.CREATER;
			entity.CREATEDATE = dto.CREATEDATE;
			entity.TRAININGPROCESS = dto.TRAININGPROCESS;
			entity.LASTMODIFIER = dto.LASTMODIFIER;
			entity.LASTMODIFYDATE = dto.LASTMODIFYDATE;
			return entity;
		}
		public override MEMBERDto Assemble(MEMBER entity)
		{
			MEMBERDto dto = new MEMBERDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.MEMBERID = entity.MEMBERID;
			dto.MEMBERCODE = entity.MEMBERCODE;
			dto.NAME = entity.NAME;
			dto.MEMBERTYPE = entity.MEMBERTYPE;
			dto.DES = entity.DES;
			dto.STATUS = entity.STATUS;
			dto.DATEFROM = entity.DATEFROM;
			dto.DATETO = entity.DATETO;
			dto.ISHOSPMEMBER = entity.ISHOSPMEMBER;
			dto.CREATER = entity.CREATER;
			dto.CREATEDATE = entity.CREATEDATE;
			dto.TRAININGPROCESS = entity.TRAININGPROCESS;
			dto.LASTMODIFIER = entity.LASTMODIFIER;
			dto.LASTMODIFYDATE = entity.LASTMODIFYDATE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class MEDICALVOTELISTAssembler : MEDICALVOTELISTAssemblerBase, IMEDICALVOTELISTAssembler
	{
	}


	public partial interface IMEDICALVOTELISTAssembler : IEntityAssembler<MEDICALVOTELISTDto, MEDICALVOTELIST>
	{
	}


	public partial class MEDICALVOTELISTAssemblerBase : EntityAssembler<MEDICALVOTELISTDto, MEDICALVOTELIST>
	{
		partial void OnDTOAssembled(MEDICALVOTELISTDto dto);
		partial void OnEntityAssembled(MEDICALVOTELIST entity);


		public override MEDICALVOTELIST Assemble(MEDICALVOTELIST entity, MEDICALVOTELISTDto dto)
		{
			if (entity == null)
			{
				entity = new MEDICALVOTELIST();
			}
			entity.EMPCODE = dto.EMPCODE;
			entity.NAME = dto.NAME;
			entity.DISPLAYNAME = dto.DISPLAYNAME;
			entity.SDATE = dto.SDATE;
			entity.EDATE = dto.EDATE;
			entity.ID = dto.ID;
			entity.DEPTCODE = dto.DEPTCODE;
			entity.HOSPCODE = dto.HOSPCODE;
			return entity;
		}
		public override MEDICALVOTELISTDto Assemble(MEDICALVOTELIST entity)
		{
			MEDICALVOTELISTDto dto = new MEDICALVOTELISTDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EMPCODE = entity.EMPCODE;
			dto.NAME = entity.NAME;
			dto.DISPLAYNAME = entity.DISPLAYNAME;
			dto.SDATE = entity.SDATE;
			dto.EDATE = entity.EDATE;
			dto.ID = entity.ID;
			dto.DEPTCODE = entity.DEPTCODE;
			dto.HOSPCODE = entity.HOSPCODE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class MEDICALTEACHPOINTAssembler : MEDICALTEACHPOINTAssemblerBase, IMEDICALTEACHPOINTAssembler
	{
	}


	public partial interface IMEDICALTEACHPOINTAssembler : IEntityAssembler<MEDICALTEACHPOINTDto, MEDICALTEACHPOINT>
	{
	}


	public partial class MEDICALTEACHPOINTAssemblerBase : EntityAssembler<MEDICALTEACHPOINTDto, MEDICALTEACHPOINT>
	{
		partial void OnDTOAssembled(MEDICALTEACHPOINTDto dto);
		partial void OnEntityAssembled(MEDICALTEACHPOINT entity);


		public override MEDICALTEACHPOINT Assemble(MEDICALTEACHPOINT entity, MEDICALTEACHPOINTDto dto)
		{
			if (entity == null)
			{
				entity = new MEDICALTEACHPOINT();
			}
			entity.EMPCODE = dto.EMPCODE;
			entity.DATADATE = dto.DATADATE;
			entity.DEPTCODE = dto.DEPTCODE;
			entity.BASETEACHPOINT = dto.BASETEACHPOINT;
			entity.ID = dto.ID;
			entity.HOSPCODE = dto.HOSPCODE;
			entity.CREATER = dto.CREATER;
			entity.CREATETIME = dto.CREATETIME;
			entity.BASERATIO = dto.BASERATIO;
			entity.TEACHERPOINT = dto.TEACHERPOINT;
			entity.STRAINPOINT = dto.STRAINPOINT;
			entity.REMARK = dto.REMARK;
			entity.REVIEWSTATUS = dto.REVIEWSTATUS;
			return entity;
		}
		public override MEDICALTEACHPOINTDto Assemble(MEDICALTEACHPOINT entity)
		{
			MEDICALTEACHPOINTDto dto = new MEDICALTEACHPOINTDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EMPCODE = entity.EMPCODE;
			dto.DATADATE = entity.DATADATE;
			dto.DEPTCODE = entity.DEPTCODE;
			dto.BASETEACHPOINT = entity.BASETEACHPOINT;
			dto.ID = entity.ID;
			dto.HOSPCODE = entity.HOSPCODE;
			dto.CREATER = entity.CREATER;
			dto.CREATETIME = entity.CREATETIME;
			dto.BASERATIO = entity.BASERATIO;
			dto.TEACHERPOINT = entity.TEACHERPOINT;
			dto.STRAINPOINT = entity.STRAINPOINT;
			dto.REMARK = entity.REMARK;
			dto.REVIEWSTATUS = entity.REVIEWSTATUS;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class LOGINLOGAssembler : LOGINLOGAssemblerBase, ILOGINLOGAssembler
	{
	}


	public partial interface ILOGINLOGAssembler : IEntityAssembler<LOGINLOGDto, LOGINLOG>
	{
	}


	public partial class LOGINLOGAssemblerBase : EntityAssembler<LOGINLOGDto, LOGINLOG>
	{
		partial void OnDTOAssembled(LOGINLOGDto dto);
		partial void OnEntityAssembled(LOGINLOG entity);


		public override LOGINLOG Assemble(LOGINLOG entity, LOGINLOGDto dto)
		{
			if (entity == null)
			{
				entity = new LOGINLOG();
			}
			entity.ID = dto.ID;
			entity.EMPCODE = dto.EMPCODE;
			entity.LOGINTIME = dto.LOGINTIME;
			entity.ISSUCCESS = dto.ISSUCCESS;
			entity.LOGINIP = dto.LOGINIP;
			return entity;
		}
		public override LOGINLOGDto Assemble(LOGINLOG entity)
		{
			LOGINLOGDto dto = new LOGINLOGDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.EMPCODE = entity.EMPCODE;
			dto.LOGINTIME = entity.LOGINTIME;
			dto.ISSUCCESS = entity.ISSUCCESS;
			dto.LOGINIP = entity.LOGINIP;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class JOBFORMSETTINGAssembler : JOBFORMSETTINGAssemblerBase, IJOBFORMSETTINGAssembler
	{
	}


	public partial interface IJOBFORMSETTINGAssembler : IEntityAssembler<JOBFORMSETTINGDto, JOBFORMSETTING>
	{
	}


	public partial class JOBFORMSETTINGAssemblerBase : EntityAssembler<JOBFORMSETTINGDto, JOBFORMSETTING>
	{
		partial void OnDTOAssembled(JOBFORMSETTINGDto dto);
		partial void OnEntityAssembled(JOBFORMSETTING entity);


		public override JOBFORMSETTING Assemble(JOBFORMSETTING entity, JOBFORMSETTINGDto dto)
		{
			if (entity == null)
			{
				entity = new JOBFORMSETTING();
			}
			entity.SETTINGID = dto.SETTINGID;
			entity.JOBCODE = dto.JOBCODE;
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.DISPLAY_ORDER = dto.DISPLAY_ORDER;
			return entity;
		}
		public override JOBFORMSETTINGDto Assemble(JOBFORMSETTING entity)
		{
			JOBFORMSETTINGDto dto = new JOBFORMSETTINGDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.SETTINGID = entity.SETTINGID;
			dto.JOBCODE = entity.JOBCODE;
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.DISPLAY_ORDER = entity.DISPLAY_ORDER;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class IMPORTTEMPAssembler : IMPORTTEMPAssemblerBase, IIMPORTTEMPAssembler
	{
	}


	public partial interface IIMPORTTEMPAssembler : IEntityAssembler<IMPORTTEMPDto, IMPORTTEMP>
	{
	}


	public partial class IMPORTTEMPAssemblerBase : EntityAssembler<IMPORTTEMPDto, IMPORTTEMP>
	{
		partial void OnDTOAssembled(IMPORTTEMPDto dto);
		partial void OnEntityAssembled(IMPORTTEMP entity);


		public override IMPORTTEMP Assemble(IMPORTTEMP entity, IMPORTTEMPDto dto)
		{
			if (entity == null)
			{
				entity = new IMPORTTEMP();
			}
			entity.姓名 = dto.姓名;
			entity.職編 = dto.職編;
			return entity;
		}
		public override IMPORTTEMPDto Assemble(IMPORTTEMP entity)
		{
			IMPORTTEMPDto dto = new IMPORTTEMPDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.姓名 = entity.姓名;
			dto.職編 = entity.職編;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class IKASA_UPLOADFILEAssembler : IKASA_UPLOADFILEAssemblerBase, IIKASA_UPLOADFILEAssembler
	{
	}


	public partial interface IIKASA_UPLOADFILEAssembler : IEntityAssembler<IKASA_UPLOADFILEDto, IKASA_UPLOADFILE>
	{
	}


	public partial class IKASA_UPLOADFILEAssemblerBase : EntityAssembler<IKASA_UPLOADFILEDto, IKASA_UPLOADFILE>
	{
		partial void OnDTOAssembled(IKASA_UPLOADFILEDto dto);
		partial void OnEntityAssembled(IKASA_UPLOADFILE entity);


		public override IKASA_UPLOADFILE Assemble(IKASA_UPLOADFILE entity, IKASA_UPLOADFILEDto dto)
		{
			if (entity == null)
			{
				entity = new IKASA_UPLOADFILE();
			}
			entity.ID = dto.ID;
			entity.FILENAME = dto.FILENAME;
			entity.DISPLAYTITLE = dto.DISPLAYTITLE;
			entity.DESCRIPTION = dto.DESCRIPTION;
			entity.FILEPATH = dto.FILEPATH;
			entity.FILECATEGORY = dto.FILECATEGORY;
			entity.CREATER = dto.CREATER;
			entity.CREATEDATE = dto.CREATEDATE;
			entity.DELETETIME = dto.DELETETIME;
			return entity;
		}
		public override IKASA_UPLOADFILEDto Assemble(IKASA_UPLOADFILE entity)
		{
			IKASA_UPLOADFILEDto dto = new IKASA_UPLOADFILEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.FILENAME = entity.FILENAME;
			dto.DISPLAYTITLE = entity.DISPLAYTITLE;
			dto.DESCRIPTION = entity.DESCRIPTION;
			dto.FILEPATH = entity.FILEPATH;
			dto.FILECATEGORY = entity.FILECATEGORY;
			dto.CREATER = entity.CREATER;
			dto.CREATEDATE = entity.CREATEDATE;
			dto.DELETETIME = entity.DELETETIME;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class IKASA_OSCEEXAMSTAGEAssembler : IKASA_OSCEEXAMSTAGEAssemblerBase, IIKASA_OSCEEXAMSTAGEAssembler
	{
	}


	public partial interface IIKASA_OSCEEXAMSTAGEAssembler : IEntityAssembler<IKASA_OSCEEXAMSTAGEDto, IKASA_OSCEEXAMSTAGE>
	{
	}


	public partial class IKASA_OSCEEXAMSTAGEAssemblerBase : EntityAssembler<IKASA_OSCEEXAMSTAGEDto, IKASA_OSCEEXAMSTAGE>
	{
		partial void OnDTOAssembled(IKASA_OSCEEXAMSTAGEDto dto);
		partial void OnEntityAssembled(IKASA_OSCEEXAMSTAGE entity);


		public override IKASA_OSCEEXAMSTAGE Assemble(IKASA_OSCEEXAMSTAGE entity, IKASA_OSCEEXAMSTAGEDto dto)
		{
			if (entity == null)
			{
				entity = new IKASA_OSCEEXAMSTAGE();
			}
			entity.EXAMID = dto.EXAMID;
			entity.STAGENO = dto.STAGENO;
			entity.STAGENAME = dto.STAGENAME;
			entity.PASSSCORE = dto.PASSSCORE;
			return entity;
		}
		public override IKASA_OSCEEXAMSTAGEDto Assemble(IKASA_OSCEEXAMSTAGE entity)
		{
			IKASA_OSCEEXAMSTAGEDto dto = new IKASA_OSCEEXAMSTAGEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EXAMID = entity.EXAMID;
			dto.STAGENO = entity.STAGENO;
			dto.STAGENAME = entity.STAGENAME;
			dto.PASSSCORE = entity.PASSSCORE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class IKASA_OSCEEXAMSCOREAssembler : IKASA_OSCEEXAMSCOREAssemblerBase, IIKASA_OSCEEXAMSCOREAssembler
	{
	}


	public partial interface IIKASA_OSCEEXAMSCOREAssembler : IEntityAssembler<IKASA_OSCEEXAMSCOREDto, IKASA_OSCEEXAMSCORE>
	{
	}


	public partial class IKASA_OSCEEXAMSCOREAssemblerBase : EntityAssembler<IKASA_OSCEEXAMSCOREDto, IKASA_OSCEEXAMSCORE>
	{
		partial void OnDTOAssembled(IKASA_OSCEEXAMSCOREDto dto);
		partial void OnEntityAssembled(IKASA_OSCEEXAMSCORE entity);


		public override IKASA_OSCEEXAMSCORE Assemble(IKASA_OSCEEXAMSCORE entity, IKASA_OSCEEXAMSCOREDto dto)
		{
			if (entity == null)
			{
				entity = new IKASA_OSCEEXAMSCORE();
			}
			entity.EXAMID = dto.EXAMID;
			entity.EMPCODE = dto.EMPCODE;
			entity.EXAMIDNO = dto.EXAMIDNO;
			entity.STAGENO = dto.STAGENO;
			entity.SCORE = dto.SCORE;
			return entity;
		}
		public override IKASA_OSCEEXAMSCOREDto Assemble(IKASA_OSCEEXAMSCORE entity)
		{
			IKASA_OSCEEXAMSCOREDto dto = new IKASA_OSCEEXAMSCOREDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EXAMID = entity.EXAMID;
			dto.EMPCODE = entity.EMPCODE;
			dto.EXAMIDNO = entity.EXAMIDNO;
			dto.STAGENO = entity.STAGENO;
			dto.SCORE = entity.SCORE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class IKASA_OSCEEXAMAssembler : IKASA_OSCEEXAMAssemblerBase, IIKASA_OSCEEXAMAssembler
	{
	}


	public partial interface IIKASA_OSCEEXAMAssembler : IEntityAssembler<IKASA_OSCEEXAMDto, IKASA_OSCEEXAM>
	{
	}


	public partial class IKASA_OSCEEXAMAssemblerBase : EntityAssembler<IKASA_OSCEEXAMDto, IKASA_OSCEEXAM>
	{
		partial void OnDTOAssembled(IKASA_OSCEEXAMDto dto);
		partial void OnEntityAssembled(IKASA_OSCEEXAM entity);


		public override IKASA_OSCEEXAM Assemble(IKASA_OSCEEXAM entity, IKASA_OSCEEXAMDto dto)
		{
			if (entity == null)
			{
				entity = new IKASA_OSCEEXAM();
			}
			entity.EXAMID = dto.EXAMID;
			entity.EXAMNAME = dto.EXAMNAME;
			entity.EXAMDATE = dto.EXAMDATE;
			entity.PASSSCORE = dto.PASSSCORE;
			entity.PASSSTAGE = dto.PASSSTAGE;
			entity.HOSPCODE = dto.HOSPCODE;
			entity.CREATER = dto.CREATER;
			entity.CREATEDATE = dto.CREATEDATE;
			entity.DELETEFLAG = dto.DELETEFLAG;
			entity.DELETETIME = dto.DELETETIME;
			return entity;
		}
		public override IKASA_OSCEEXAMDto Assemble(IKASA_OSCEEXAM entity)
		{
			IKASA_OSCEEXAMDto dto = new IKASA_OSCEEXAMDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EXAMID = entity.EXAMID;
			dto.EXAMNAME = entity.EXAMNAME;
			dto.EXAMDATE = entity.EXAMDATE;
			dto.PASSSCORE = entity.PASSSCORE;
			dto.PASSSTAGE = entity.PASSSTAGE;
			dto.HOSPCODE = entity.HOSPCODE;
			dto.CREATER = entity.CREATER;
			dto.CREATEDATE = entity.CREATEDATE;
			dto.DELETEFLAG = entity.DELETEFLAG;
			dto.DELETETIME = entity.DELETETIME;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class IKASA_MENUREFAssembler : IKASA_MENUREFAssemblerBase, IIKASA_MENUREFAssembler
	{
	}


	public partial interface IIKASA_MENUREFAssembler : IEntityAssembler<IKASA_MENUREFDto, IKASA_MENUREF>
	{
	}


	public partial class IKASA_MENUREFAssemblerBase : EntityAssembler<IKASA_MENUREFDto, IKASA_MENUREF>
	{
		partial void OnDTOAssembled(IKASA_MENUREFDto dto);
		partial void OnEntityAssembled(IKASA_MENUREF entity);


		public override IKASA_MENUREF Assemble(IKASA_MENUREF entity, IKASA_MENUREFDto dto)
		{
			if (entity == null)
			{
				entity = new IKASA_MENUREF();
			}
			entity.MENUID = dto.MENUID;
			entity.TOPTEAMCODE = dto.TOPTEAMCODE;
			entity.DEPT_CODE = dto.DEPT_CODE;
			entity.REFID = dto.REFID;
			entity.MEMBERTYPE = dto.MEMBERTYPE;
			return entity;
		}
		public override IKASA_MENUREFDto Assemble(IKASA_MENUREF entity)
		{
			IKASA_MENUREFDto dto = new IKASA_MENUREFDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.MENUID = entity.MENUID;
			dto.TOPTEAMCODE = entity.TOPTEAMCODE;
			dto.DEPT_CODE = entity.DEPT_CODE;
			dto.REFID = entity.REFID;
			dto.MEMBERTYPE = entity.MEMBERTYPE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class IKASA_MENUPARAMAssembler : IKASA_MENUPARAMAssemblerBase, IIKASA_MENUPARAMAssembler
	{
	}


	public partial interface IIKASA_MENUPARAMAssembler : IEntityAssembler<IKASA_MENUPARAMDto, IKASA_MENUPARAM>
	{
	}


	public partial class IKASA_MENUPARAMAssemblerBase : EntityAssembler<IKASA_MENUPARAMDto, IKASA_MENUPARAM>
	{
		partial void OnDTOAssembled(IKASA_MENUPARAMDto dto);
		partial void OnEntityAssembled(IKASA_MENUPARAM entity);


		public override IKASA_MENUPARAM Assemble(IKASA_MENUPARAM entity, IKASA_MENUPARAMDto dto)
		{
			if (entity == null)
			{
				entity = new IKASA_MENUPARAM();
			}
			entity.MENUID = dto.MENUID;
			entity.PARAMNAME = dto.PARAMNAME;
			entity.PARAMVALUE = dto.PARAMVALUE;
			return entity;
		}
		public override IKASA_MENUPARAMDto Assemble(IKASA_MENUPARAM entity)
		{
			IKASA_MENUPARAMDto dto = new IKASA_MENUPARAMDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.MENUID = entity.MENUID;
			dto.PARAMNAME = entity.PARAMNAME;
			dto.PARAMVALUE = entity.PARAMVALUE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class IKASA_MENUAssembler : IKASA_MENUAssemblerBase, IIKASA_MENUAssembler
	{
	}


	public partial interface IIKASA_MENUAssembler : IEntityAssembler<IKASA_MENUDto, IKASA_MENU>
	{
	}


	public partial class IKASA_MENUAssemblerBase : EntityAssembler<IKASA_MENUDto, IKASA_MENU>
	{
		partial void OnDTOAssembled(IKASA_MENUDto dto);
		partial void OnEntityAssembled(IKASA_MENU entity);


		public override IKASA_MENU Assemble(IKASA_MENU entity, IKASA_MENUDto dto)
		{
			if (entity == null)
			{
				entity = new IKASA_MENU();
			}
			entity.MENUID = dto.MENUID;
			entity.MENUTEXT = dto.MENUTEXT;
			entity.BGCOLOR = dto.BGCOLOR;
			entity.FONTCOLOR = dto.FONTCOLOR;
			entity.PARENTMENUID = dto.PARENTMENUID;
			entity.HINTTEXT = dto.HINTTEXT;
			entity.REMARK = dto.REMARK;
			entity.ENABLEDATE = dto.ENABLEDATE;
			entity.DISABLEDATE = dto.DISABLEDATE;
			entity.ISSHOW = dto.ISSHOW;
			entity.FRAMEURL = dto.FRAMEURL;
			entity.DISPLAYORDER = dto.DISPLAYORDER;
			return entity;
		}
		public override IKASA_MENUDto Assemble(IKASA_MENU entity)
		{
			IKASA_MENUDto dto = new IKASA_MENUDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.MENUID = entity.MENUID;
			dto.MENUTEXT = entity.MENUTEXT;
			dto.BGCOLOR = entity.BGCOLOR;
			dto.FONTCOLOR = entity.FONTCOLOR;
			dto.PARENTMENUID = entity.PARENTMENUID;
			dto.HINTTEXT = entity.HINTTEXT;
			dto.REMARK = entity.REMARK;
			dto.ENABLEDATE = entity.ENABLEDATE;
			dto.DISABLEDATE = entity.DISABLEDATE;
			dto.ISSHOW = entity.ISSHOW;
			dto.FRAMEURL = entity.FRAMEURL;
			dto.DISPLAYORDER = entity.DISPLAYORDER;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class IKASA_IPDDATACOUNTAssembler : IKASA_IPDDATACOUNTAssemblerBase, IIKASA_IPDDATACOUNTAssembler
	{
	}


	public partial interface IIKASA_IPDDATACOUNTAssembler : IEntityAssembler<IKASA_IPDDATACOUNTDto, IKASA_IPDDATACOUNT>
	{
	}


	public partial class IKASA_IPDDATACOUNTAssemblerBase : EntityAssembler<IKASA_IPDDATACOUNTDto, IKASA_IPDDATACOUNT>
	{
		partial void OnDTOAssembled(IKASA_IPDDATACOUNTDto dto);
		partial void OnEntityAssembled(IKASA_IPDDATACOUNT entity);


		public override IKASA_IPDDATACOUNT Assemble(IKASA_IPDDATACOUNT entity, IKASA_IPDDATACOUNTDto dto)
		{
			if (entity == null)
			{
				entity = new IKASA_IPDDATACOUNT();
			}
			entity.EMPCODE = dto.EMPCODE;
			entity.SDATE = dto.SDATE;
			entity.EDATE = dto.EDATE;
			entity.IPDNOTECOUNT = dto.IPDNOTECOUNT;
			entity.PRIMARYCARECOUNT = dto.PRIMARYCARECOUNT;
			entity.WORKHOUR = dto.WORKHOUR;
			return entity;
		}
		public override IKASA_IPDDATACOUNTDto Assemble(IKASA_IPDDATACOUNT entity)
		{
			IKASA_IPDDATACOUNTDto dto = new IKASA_IPDDATACOUNTDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EMPCODE = entity.EMPCODE;
			dto.SDATE = entity.SDATE;
			dto.EDATE = entity.EDATE;
			dto.IPDNOTECOUNT = entity.IPDNOTECOUNT;
			dto.PRIMARYCARECOUNT = entity.PRIMARYCARECOUNT;
			dto.WORKHOUR = entity.WORKHOUR;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class IKASA_ERCASE_EVALDETAssembler : IKASA_ERCASE_EVALDETAssemblerBase, IIKASA_ERCASE_EVALDETAssembler
	{
	}


	public partial interface IIKASA_ERCASE_EVALDETAssembler : IEntityAssembler<IKASA_ERCASE_EVALDETDto, IKASA_ERCASE_EVALDET>
	{
	}


	public partial class IKASA_ERCASE_EVALDETAssemblerBase : EntityAssembler<IKASA_ERCASE_EVALDETDto, IKASA_ERCASE_EVALDET>
	{
		partial void OnDTOAssembled(IKASA_ERCASE_EVALDETDto dto);
		partial void OnEntityAssembled(IKASA_ERCASE_EVALDET entity);


		public override IKASA_ERCASE_EVALDET Assemble(IKASA_ERCASE_EVALDET entity, IKASA_ERCASE_EVALDETDto dto)
		{
			if (entity == null)
			{
				entity = new IKASA_ERCASE_EVALDET();
			}
			entity.EVALID = dto.EVALID;
			entity.CONTROLID = dto.CONTROLID;
			entity.CONTROLVALUE = dto.CONTROLVALUE;
			return entity;
		}
		public override IKASA_ERCASE_EVALDETDto Assemble(IKASA_ERCASE_EVALDET entity)
		{
			IKASA_ERCASE_EVALDETDto dto = new IKASA_ERCASE_EVALDETDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EVALID = entity.EVALID;
			dto.CONTROLID = entity.CONTROLID;
			dto.CONTROLVALUE = entity.CONTROLVALUE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class IKASA_ERCASE_EVALAssembler : IKASA_ERCASE_EVALAssemblerBase, IIKASA_ERCASE_EVALAssembler
	{
	}


	public partial interface IIKASA_ERCASE_EVALAssembler : IEntityAssembler<IKASA_ERCASE_EVALDto, IKASA_ERCASE_EVAL>
	{
	}


	public partial class IKASA_ERCASE_EVALAssemblerBase : EntityAssembler<IKASA_ERCASE_EVALDto, IKASA_ERCASE_EVAL>
	{
		partial void OnDTOAssembled(IKASA_ERCASE_EVALDto dto);
		partial void OnEntityAssembled(IKASA_ERCASE_EVAL entity);


		public override IKASA_ERCASE_EVAL Assemble(IKASA_ERCASE_EVAL entity, IKASA_ERCASE_EVALDto dto)
		{
			if (entity == null)
			{
				entity = new IKASA_ERCASE_EVAL();
			}
			entity.ID = dto.ID;
			entity.EVALTYPE = dto.EVALTYPE;
			entity.CREATEDATE = dto.CREATEDATE;
			entity.TEACHERID = dto.TEACHERID;
			entity.STATUS = dto.STATUS;
			entity.SUBMITTIME = dto.SUBMITTIME;
			entity.CASEID = dto.CASEID;
			return entity;
		}
		public override IKASA_ERCASE_EVALDto Assemble(IKASA_ERCASE_EVAL entity)
		{
			IKASA_ERCASE_EVALDto dto = new IKASA_ERCASE_EVALDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.EVALTYPE = entity.EVALTYPE;
			dto.CREATEDATE = entity.CREATEDATE;
			dto.TEACHERID = entity.TEACHERID;
			dto.STATUS = entity.STATUS;
			dto.SUBMITTIME = entity.SUBMITTIME;
			dto.CASEID = entity.CASEID;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class IKASA_ERCASEAssembler : IKASA_ERCASEAssemblerBase, IIKASA_ERCASEAssembler
	{
	}


	public partial interface IIKASA_ERCASEAssembler : IEntityAssembler<IKASA_ERCASEDto, IKASA_ERCASE>
	{
	}


	public partial class IKASA_ERCASEAssemblerBase : EntityAssembler<IKASA_ERCASEDto, IKASA_ERCASE>
	{
		partial void OnDTOAssembled(IKASA_ERCASEDto dto);
		partial void OnEntityAssembled(IKASA_ERCASE entity);


		public override IKASA_ERCASE Assemble(IKASA_ERCASE entity, IKASA_ERCASEDto dto)
		{
			if (entity == null)
			{
				entity = new IKASA_ERCASE();
			}
			entity.ID = dto.ID;
			entity.EMPCODE = dto.EMPCODE;
			entity.SOURCE_SYSTEM = dto.SOURCE_SYSTEM;
			entity.SOURCE_ID = dto.SOURCE_ID;
			entity.CHART_NO = dto.CHART_NO;
			entity.ICD_CODE = dto.ICD_CODE;
			entity.DISEASE_CLASS = dto.DISEASE_CLASS;
			entity.DEPT_CODE = dto.DEPT_CODE;
			entity.IN_DATE = dto.IN_DATE;
			entity.PROCEDURE = dto.PROCEDURE;
			entity.STATUS = dto.STATUS;
			entity.SIGN_TEACHER = dto.SIGN_TEACHER;
			entity.SIGN_DATE = dto.SIGN_DATE;
			entity.SIGN_NOTE = dto.SIGN_NOTE;
			entity.ICD_NAME = dto.ICD_NAME;
			entity.DEPT_NAME = dto.DEPT_NAME;
			entity.DOPSID = dto.DOPSID;
			entity.EPAID = dto.EPAID;
			return entity;
		}
		public override IKASA_ERCASEDto Assemble(IKASA_ERCASE entity)
		{
			IKASA_ERCASEDto dto = new IKASA_ERCASEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.EMPCODE = entity.EMPCODE;
			dto.SOURCE_SYSTEM = entity.SOURCE_SYSTEM;
			dto.SOURCE_ID = entity.SOURCE_ID;
			dto.CHART_NO = entity.CHART_NO;
			dto.ICD_CODE = entity.ICD_CODE;
			dto.DISEASE_CLASS = entity.DISEASE_CLASS;
			dto.DEPT_CODE = entity.DEPT_CODE;
			dto.IN_DATE = entity.IN_DATE;
			dto.PROCEDURE = entity.PROCEDURE;
			dto.STATUS = entity.STATUS;
			dto.SIGN_TEACHER = entity.SIGN_TEACHER;
			dto.SIGN_DATE = entity.SIGN_DATE;
			dto.SIGN_NOTE = entity.SIGN_NOTE;
			dto.ICD_NAME = entity.ICD_NAME;
			dto.DEPT_NAME = entity.DEPT_NAME;
			dto.DOPSID = entity.DOPSID;
			dto.EPAID = entity.EPAID;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class IKASA_ACTUPLOADFILEAssembler : IKASA_ACTUPLOADFILEAssemblerBase, IIKASA_ACTUPLOADFILEAssembler
	{
	}


	public partial interface IIKASA_ACTUPLOADFILEAssembler : IEntityAssembler<IKASA_ACTUPLOADFILEDto, IKASA_ACTUPLOADFILE>
	{
	}


	public partial class IKASA_ACTUPLOADFILEAssemblerBase : EntityAssembler<IKASA_ACTUPLOADFILEDto, IKASA_ACTUPLOADFILE>
	{
		partial void OnDTOAssembled(IKASA_ACTUPLOADFILEDto dto);
		partial void OnEntityAssembled(IKASA_ACTUPLOADFILE entity);


		public override IKASA_ACTUPLOADFILE Assemble(IKASA_ACTUPLOADFILE entity, IKASA_ACTUPLOADFILEDto dto)
		{
			if (entity == null)
			{
				entity = new IKASA_ACTUPLOADFILE();
			}
			entity.ID = dto.ID;
			entity.FILENAME = dto.FILENAME;
			entity.DISPLAYTITLE = dto.DISPLAYTITLE;
			entity.DESCRIPTION = dto.DESCRIPTION;
			entity.FILEPATH = dto.FILEPATH;
			entity.FILECATEGORY = dto.FILECATEGORY;
			entity.CREATER = dto.CREATER;
			entity.CREATEDATE = dto.CREATEDATE;
			entity.DELETETIME = dto.DELETETIME;
			entity.ACTDATE = dto.ACTDATE;
			return entity;
		}
		public override IKASA_ACTUPLOADFILEDto Assemble(IKASA_ACTUPLOADFILE entity)
		{
			IKASA_ACTUPLOADFILEDto dto = new IKASA_ACTUPLOADFILEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.FILENAME = entity.FILENAME;
			dto.DISPLAYTITLE = entity.DISPLAYTITLE;
			dto.DESCRIPTION = entity.DESCRIPTION;
			dto.FILEPATH = entity.FILEPATH;
			dto.FILECATEGORY = entity.FILECATEGORY;
			dto.CREATER = entity.CREATER;
			dto.CREATEDATE = entity.CREATEDATE;
			dto.DELETETIME = entity.DELETETIME;
			dto.ACTDATE = entity.ACTDATE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class HEALTEACHTIMERATEAssembler : HEALTEACHTIMERATEAssemblerBase, IHEALTEACHTIMERATEAssembler
	{
	}


	public partial interface IHEALTEACHTIMERATEAssembler : IEntityAssembler<HEALTEACHTIMERATEDto, HEALTEACHTIMERATE>
	{
	}


	public partial class HEALTEACHTIMERATEAssemblerBase : EntityAssembler<HEALTEACHTIMERATEDto, HEALTEACHTIMERATE>
	{
		partial void OnDTOAssembled(HEALTEACHTIMERATEDto dto);
		partial void OnEntityAssembled(HEALTEACHTIMERATE entity);


		public override HEALTEACHTIMERATE Assemble(HEALTEACHTIMERATE entity, HEALTEACHTIMERATEDto dto)
		{
			if (entity == null)
			{
				entity = new HEALTEACHTIMERATE();
			}
			entity.SETTINGID = dto.SETTINGID;
			entity.ACTTYPE = dto.ACTTYPE;
			entity.RATE1 = dto.RATE1;
			entity.RATE2 = dto.RATE2;
			entity.WEEKLIMIT = dto.WEEKLIMIT;
			return entity;
		}
		public override HEALTEACHTIMERATEDto Assemble(HEALTEACHTIMERATE entity)
		{
			HEALTEACHTIMERATEDto dto = new HEALTEACHTIMERATEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.SETTINGID = entity.SETTINGID;
			dto.ACTTYPE = entity.ACTTYPE;
			dto.RATE1 = entity.RATE1;
			dto.RATE2 = entity.RATE2;
			dto.WEEKLIMIT = entity.WEEKLIMIT;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class HEALTEACHTIMEAssembler : HEALTEACHTIMEAssemblerBase, IHEALTEACHTIMEAssembler
	{
	}


	public partial interface IHEALTEACHTIMEAssembler : IEntityAssembler<HEALTEACHTIMEDto, HEALTEACHTIME>
	{
	}


	public partial class HEALTEACHTIMEAssemblerBase : EntityAssembler<HEALTEACHTIMEDto, HEALTEACHTIME>
	{
		partial void OnDTOAssembled(HEALTEACHTIMEDto dto);
		partial void OnEntityAssembled(HEALTEACHTIME entity);


		public override HEALTEACHTIME Assemble(HEALTEACHTIME entity, HEALTEACHTIMEDto dto)
		{
			if (entity == null)
			{
				entity = new HEALTEACHTIME();
			}
			entity.EMPCODE = dto.EMPCODE;
			entity.DATADATE = dto.DATADATE;
			entity.DEPTCODE = dto.DEPTCODE;
			entity.ACTTYPE = dto.ACTTYPE;
			entity.TARGETTYPE = dto.TARGETTYPE;
			entity.TEACHTIME = dto.TEACHTIME;
			entity.ID = dto.ID;
			entity.HOSPCODE = dto.HOSPCODE;
			entity.CREATER = dto.CREATER;
			entity.CREATETIME = dto.CREATETIME;
			return entity;
		}
		public override HEALTEACHTIMEDto Assemble(HEALTEACHTIME entity)
		{
			HEALTEACHTIMEDto dto = new HEALTEACHTIMEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EMPCODE = entity.EMPCODE;
			dto.DATADATE = entity.DATADATE;
			dto.DEPTCODE = entity.DEPTCODE;
			dto.ACTTYPE = entity.ACTTYPE;
			dto.TARGETTYPE = entity.TARGETTYPE;
			dto.TEACHTIME = entity.TEACHTIME;
			dto.ID = entity.ID;
			dto.HOSPCODE = entity.HOSPCODE;
			dto.CREATER = entity.CREATER;
			dto.CREATETIME = entity.CREATETIME;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class GOODVSDATADEAssembler : GOODVSDATADEAssemblerBase, IGOODVSDATADEAssembler
	{
	}


	public partial interface IGOODVSDATADEAssembler : IEntityAssembler<GOODVSDATADEDto, GOODVSDATADE>
	{
	}


	public partial class GOODVSDATADEAssemblerBase : EntityAssembler<GOODVSDATADEDto, GOODVSDATADE>
	{
		partial void OnDTOAssembled(GOODVSDATADEDto dto);
		partial void OnEntityAssembled(GOODVSDATADE entity);


		public override GOODVSDATADE Assemble(GOODVSDATADE entity, GOODVSDATADEDto dto)
		{
			if (entity == null)
			{
				entity = new GOODVSDATADE();
			}
			entity.期別 = dto.期別;
			entity.科別 = dto.科別;
			entity.臨床指導老師 = dto.臨床指導老師;
			entity.填寫人數 = dto.填寫人數;
			entity.教師總滿意度 = dto.教師總滿意度;
			entity.教師提供鼓勵支持之學習氣氛 = dto.教師提供鼓勵支持之學習氣氛;
			entity.教師給予清楚合理的學習目標 = dto.教師給予清楚合理的學習目標;
			entity.教師給予明確回饋與改善建議 = dto.教師給予明確回饋與改善建議;
			entity.教師具教學熱忱且願意付出時間從事教學 = dto.教師具教學熱忱且願意付出時間從事教學;
			entity.教師展現臨床醫療專業能力 = dto.教師展現臨床醫療專業能力;
			entity.職編 = dto.職編;
			return entity;
		}
		public override GOODVSDATADEDto Assemble(GOODVSDATADE entity)
		{
			GOODVSDATADEDto dto = new GOODVSDATADEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.期別 = entity.期別;
			dto.科別 = entity.科別;
			dto.臨床指導老師 = entity.臨床指導老師;
			dto.填寫人數 = entity.填寫人數;
			dto.教師總滿意度 = entity.教師總滿意度;
			dto.教師提供鼓勵支持之學習氣氛 = entity.教師提供鼓勵支持之學習氣氛;
			dto.教師給予清楚合理的學習目標 = entity.教師給予清楚合理的學習目標;
			dto.教師給予明確回饋與改善建議 = entity.教師給予明確回饋與改善建議;
			dto.教師具教學熱忱且願意付出時間從事教學 = entity.教師具教學熱忱且願意付出時間從事教學;
			dto.教師展現臨床醫療專業能力 = entity.教師展現臨床醫療專業能力;
			dto.職編 = entity.職編;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class GOODVSDATUMAssembler : GOODVSDATUMAssemblerBase, IGOODVSDATUMAssembler
	{
	}


	public partial interface IGOODVSDATUMAssembler : IEntityAssembler<GOODVSDATUMDto, GOODVSDATUM>
	{
	}


	public partial class GOODVSDATUMAssemblerBase : EntityAssembler<GOODVSDATUMDto, GOODVSDATUM>
	{
		partial void OnDTOAssembled(GOODVSDATUMDto dto);
		partial void OnEntityAssembled(GOODVSDATUM entity);


		public override GOODVSDATUM Assemble(GOODVSDATUM entity, GOODVSDATUMDto dto)
		{
			if (entity == null)
			{
				entity = new GOODVSDATUM();
			}
			entity.序號 = dto.序號;
			entity.分類 = dto.分類;
			entity.部門名稱 = dto.部門名稱;
			entity.編制單位 = dto.編制單位;
			entity.員工編號 = dto.員工編號;
			entity.員工姓名 = dto.員工姓名;
			entity.總分FINAL = dto.總分FINAL;
			entity.分數轉換 = dto.分數轉換;
			return entity;
		}
		public override GOODVSDATUMDto Assemble(GOODVSDATUM entity)
		{
			GOODVSDATUMDto dto = new GOODVSDATUMDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.序號 = entity.序號;
			dto.分類 = entity.分類;
			dto.部門名稱 = entity.部門名稱;
			dto.編制單位 = entity.編制單位;
			dto.員工編號 = entity.員工編號;
			dto.員工姓名 = entity.員工姓名;
			dto.總分FINAL = entity.總分FINAL;
			dto.分數轉換 = entity.分數轉換;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORMCATEGORYREFAssembler : FORMCATEGORYREFAssemblerBase, IFORMCATEGORYREFAssembler
	{
	}


	public partial interface IFORMCATEGORYREFAssembler : IEntityAssembler<FORMCATEGORYREFDto, FORMCATEGORYREF>
	{
	}


	public partial class FORMCATEGORYREFAssemblerBase : EntityAssembler<FORMCATEGORYREFDto, FORMCATEGORYREF>
	{
		partial void OnDTOAssembled(FORMCATEGORYREFDto dto);
		partial void OnEntityAssembled(FORMCATEGORYREF entity);


		public override FORMCATEGORYREF Assemble(FORMCATEGORYREF entity, FORMCATEGORYREFDto dto)
		{
			if (entity == null)
			{
				entity = new FORMCATEGORYREF();
			}
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.CATEGORYID = dto.CATEGORYID;
			return entity;
		}
		public override FORMCATEGORYREFDto Assemble(FORMCATEGORYREF entity)
		{
			FORMCATEGORYREFDto dto = new FORMCATEGORYREFDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.CATEGORYID = entity.CATEGORYID;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORMCATEGORYAssembler : FORMCATEGORYAssemblerBase, IFORMCATEGORYAssembler
	{
	}


	public partial interface IFORMCATEGORYAssembler : IEntityAssembler<FORMCATEGORYDto, FORMCATEGORY>
	{
	}


	public partial class FORMCATEGORYAssemblerBase : EntityAssembler<FORMCATEGORYDto, FORMCATEGORY>
	{
		partial void OnDTOAssembled(FORMCATEGORYDto dto);
		partial void OnEntityAssembled(FORMCATEGORY entity);


		public override FORMCATEGORY Assemble(FORMCATEGORY entity, FORMCATEGORYDto dto)
		{
			if (entity == null)
			{
				entity = new FORMCATEGORY();
			}
			entity.ID = dto.ID;
			entity.CATEGORYNAME = dto.CATEGORYNAME;
			entity.CREATER = dto.CREATER;
			entity.CREATEDATE = dto.CREATEDATE;
			return entity;
		}
		public override FORMCATEGORYDto Assemble(FORMCATEGORY entity)
		{
			FORMCATEGORYDto dto = new FORMCATEGORYDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.CATEGORYNAME = entity.CATEGORYNAME;
			dto.CREATER = entity.CREATER;
			dto.CREATEDATE = entity.CREATEDATE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_TODO_LISTAssembler : FORM_TODO_LISTAssemblerBase, IFORM_TODO_LISTAssembler
	{
	}


	public partial interface IFORM_TODO_LISTAssembler : IEntityAssembler<FORM_TODO_LISTDto, FORM_TODO_LIST>
	{
	}


	public partial class FORM_TODO_LISTAssemblerBase : EntityAssembler<FORM_TODO_LISTDto, FORM_TODO_LIST>
	{
		partial void OnDTOAssembled(FORM_TODO_LISTDto dto);
		partial void OnEntityAssembled(FORM_TODO_LIST entity);


		public override FORM_TODO_LIST Assemble(FORM_TODO_LIST entity, FORM_TODO_LISTDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_TODO_LIST();
			}
			entity.TODOLISTID = dto.TODOLISTID;
			entity.EDUTERMID = dto.EDUTERMID;
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.BEGIN_TIME = dto.BEGIN_TIME;
			entity.END_TIME = dto.END_TIME;
			return entity;
		}
		public override FORM_TODO_LISTDto Assemble(FORM_TODO_LIST entity)
		{
			FORM_TODO_LISTDto dto = new FORM_TODO_LISTDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TODOLISTID = entity.TODOLISTID;
			dto.EDUTERMID = entity.EDUTERMID;
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.BEGIN_TIME = entity.BEGIN_TIME;
			dto.END_TIME = entity.END_TIME;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_TEMPLATES_BKAssembler : FORM_TEMPLATES_BKAssemblerBase, IFORM_TEMPLATES_BKAssembler
	{
	}


	public partial interface IFORM_TEMPLATES_BKAssembler : IEntityAssembler<FORM_TEMPLATES_BKDto, FORM_TEMPLATES_BK>
	{
	}


	public partial class FORM_TEMPLATES_BKAssemblerBase : EntityAssembler<FORM_TEMPLATES_BKDto, FORM_TEMPLATES_BK>
	{
		partial void OnDTOAssembled(FORM_TEMPLATES_BKDto dto);
		partial void OnEntityAssembled(FORM_TEMPLATES_BK entity);


		public override FORM_TEMPLATES_BK Assemble(FORM_TEMPLATES_BK entity, FORM_TEMPLATES_BKDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_TEMPLATES_BK();
			}
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.PARENT_TEMPLATE_ID = dto.PARENT_TEMPLATE_ID;
			entity.TEMPLATE_NAME = dto.TEMPLATE_NAME;
			entity.TEMPLATE_CATEGORY = dto.TEMPLATE_CATEGORY;
			entity.TEMPLATE_CREATE_DATATIME = dto.TEMPLATE_CREATE_DATATIME;
			entity.TEMPLATE_ALTER_DATATIME = dto.TEMPLATE_ALTER_DATATIME;
			entity.TEMPLATE_CONTENT = dto.TEMPLATE_CONTENT;
			entity.TEMPLATE_REMARK = dto.TEMPLATE_REMARK;
			entity.TEMPLATE_TYPE = dto.TEMPLATE_TYPE;
			entity.ALLOW_ATTACHMENT = dto.ALLOW_ATTACHMENT;
			entity.SCORE_FIELD_ID = dto.SCORE_FIELD_ID;
			entity.ALERT_NEXT_MESSAGE = dto.ALERT_NEXT_MESSAGE;
			entity.DISPLAY_TO_EVALTARGET = dto.DISPLAY_TO_EVALTARGET;
			entity.ENABLED = dto.ENABLED;
			entity.ALLOW_NEXT_TARGET_EDIT = dto.ALLOW_NEXT_TARGET_EDIT;
			return entity;
		}
		public override FORM_TEMPLATES_BKDto Assemble(FORM_TEMPLATES_BK entity)
		{
			FORM_TEMPLATES_BKDto dto = new FORM_TEMPLATES_BKDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.PARENT_TEMPLATE_ID = entity.PARENT_TEMPLATE_ID;
			dto.TEMPLATE_NAME = entity.TEMPLATE_NAME;
			dto.TEMPLATE_CATEGORY = entity.TEMPLATE_CATEGORY;
			dto.TEMPLATE_CREATE_DATATIME = entity.TEMPLATE_CREATE_DATATIME;
			dto.TEMPLATE_ALTER_DATATIME = entity.TEMPLATE_ALTER_DATATIME;
			dto.TEMPLATE_CONTENT = entity.TEMPLATE_CONTENT;
			dto.TEMPLATE_REMARK = entity.TEMPLATE_REMARK;
			dto.TEMPLATE_TYPE = entity.TEMPLATE_TYPE;
			dto.ALLOW_ATTACHMENT = entity.ALLOW_ATTACHMENT;
			dto.SCORE_FIELD_ID = entity.SCORE_FIELD_ID;
			dto.ALERT_NEXT_MESSAGE = entity.ALERT_NEXT_MESSAGE;
			dto.DISPLAY_TO_EVALTARGET = entity.DISPLAY_TO_EVALTARGET;
			dto.ENABLED = entity.ENABLED;
			dto.ALLOW_NEXT_TARGET_EDIT = entity.ALLOW_NEXT_TARGET_EDIT;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_TEMPLATEAssembler : FORM_TEMPLATEAssemblerBase, IFORM_TEMPLATEAssembler
	{
	}


	public partial interface IFORM_TEMPLATEAssembler : IEntityAssembler<FORM_TEMPLATEDto, FORM_TEMPLATE>
	{
	}


	public partial class FORM_TEMPLATEAssemblerBase : EntityAssembler<FORM_TEMPLATEDto, FORM_TEMPLATE>
	{
		partial void OnDTOAssembled(FORM_TEMPLATEDto dto);
		partial void OnEntityAssembled(FORM_TEMPLATE entity);


		public override FORM_TEMPLATE Assemble(FORM_TEMPLATE entity, FORM_TEMPLATEDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_TEMPLATE();
			}
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.PARENT_TEMPLATE_ID = dto.PARENT_TEMPLATE_ID;
			entity.TEMPLATE_NAME = dto.TEMPLATE_NAME;
			entity.TEMPLATE_CATEGORY = dto.TEMPLATE_CATEGORY;
			entity.TEMPLATE_CREATE_DATATIME = dto.TEMPLATE_CREATE_DATATIME;
			entity.TEMPLATE_ALTER_DATATIME = dto.TEMPLATE_ALTER_DATATIME;
			entity.TEMPLATE_CONTENT = dto.TEMPLATE_CONTENT;
			entity.TEMPLATE_REMARK = dto.TEMPLATE_REMARK;
			entity.TEMPLATE_TYPE = dto.TEMPLATE_TYPE;
			entity.ALLOW_ATTACHMENT = dto.ALLOW_ATTACHMENT;
			entity.SCORE_FIELD_ID = dto.SCORE_FIELD_ID;
			entity.ALERT_NEXT_MESSAGE = dto.ALERT_NEXT_MESSAGE;
			entity.DISPLAY_TO_EVALTARGET = dto.DISPLAY_TO_EVALTARGET;
			entity.ENABLED = dto.ENABLED;
			entity.ALLOW_NEXT_TARGET_EDIT = dto.ALLOW_NEXT_TARGET_EDIT;
			entity.IS_USER_DEFINE_TARGET = dto.IS_USER_DEFINE_TARGET;
			entity.NEEDPASS = dto.NEEDPASS;
			entity.ALLOW_RETURN = dto.ALLOW_RETURN;
			entity.ALLOW_TAKEBACK = dto.ALLOW_TAKEBACK;
			entity.ALLOW_VIEW_EVALTARGETDATA = dto.ALLOW_VIEW_EVALTARGETDATA;
			return entity;
		}
		public override FORM_TEMPLATEDto Assemble(FORM_TEMPLATE entity)
		{
			FORM_TEMPLATEDto dto = new FORM_TEMPLATEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.PARENT_TEMPLATE_ID = entity.PARENT_TEMPLATE_ID;
			dto.TEMPLATE_NAME = entity.TEMPLATE_NAME;
			dto.TEMPLATE_CATEGORY = entity.TEMPLATE_CATEGORY;
			dto.TEMPLATE_CREATE_DATATIME = entity.TEMPLATE_CREATE_DATATIME;
			dto.TEMPLATE_ALTER_DATATIME = entity.TEMPLATE_ALTER_DATATIME;
			dto.TEMPLATE_CONTENT = entity.TEMPLATE_CONTENT;
			dto.TEMPLATE_REMARK = entity.TEMPLATE_REMARK;
			dto.TEMPLATE_TYPE = entity.TEMPLATE_TYPE;
			dto.ALLOW_ATTACHMENT = entity.ALLOW_ATTACHMENT;
			dto.SCORE_FIELD_ID = entity.SCORE_FIELD_ID;
			dto.ALERT_NEXT_MESSAGE = entity.ALERT_NEXT_MESSAGE;
			dto.DISPLAY_TO_EVALTARGET = entity.DISPLAY_TO_EVALTARGET;
			dto.ENABLED = entity.ENABLED;
			dto.ALLOW_NEXT_TARGET_EDIT = entity.ALLOW_NEXT_TARGET_EDIT;
			dto.IS_USER_DEFINE_TARGET = entity.IS_USER_DEFINE_TARGET;
			dto.NEEDPASS = entity.NEEDPASS;
			dto.ALLOW_RETURN = entity.ALLOW_RETURN;
			dto.ALLOW_TAKEBACK = entity.ALLOW_TAKEBACK;
			dto.ALLOW_VIEW_EVALTARGETDATA = entity.ALLOW_VIEW_EVALTARGETDATA;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_TEMPLATE_SUBMIT_SQLAssembler : FORM_TEMPLATE_SUBMIT_SQLAssemblerBase, IFORM_TEMPLATE_SUBMIT_SQLAssembler
	{
	}


	public partial interface IFORM_TEMPLATE_SUBMIT_SQLAssembler : IEntityAssembler<FORM_TEMPLATE_SUBMIT_SQLDto, FORM_TEMPLATE_SUBMIT_SQL>
	{
	}


	public partial class FORM_TEMPLATE_SUBMIT_SQLAssemblerBase : EntityAssembler<FORM_TEMPLATE_SUBMIT_SQLDto, FORM_TEMPLATE_SUBMIT_SQL>
	{
		partial void OnDTOAssembled(FORM_TEMPLATE_SUBMIT_SQLDto dto);
		partial void OnEntityAssembled(FORM_TEMPLATE_SUBMIT_SQL entity);


		public override FORM_TEMPLATE_SUBMIT_SQL Assemble(FORM_TEMPLATE_SUBMIT_SQL entity, FORM_TEMPLATE_SUBMIT_SQLDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_TEMPLATE_SUBMIT_SQL();
			}
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.KEY = dto.KEY;
			entity.SOURCEREFSTATEMENT = dto.SOURCEREFSTATEMENT;
			entity.EXECUTE_FIRST_TIME = dto.EXECUTE_FIRST_TIME;
			return entity;
		}
		public override FORM_TEMPLATE_SUBMIT_SQLDto Assemble(FORM_TEMPLATE_SUBMIT_SQL entity)
		{
			FORM_TEMPLATE_SUBMIT_SQLDto dto = new FORM_TEMPLATE_SUBMIT_SQLDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.KEY = entity.KEY;
			dto.SOURCEREFSTATEMENT = entity.SOURCEREFSTATEMENT;
			dto.EXECUTE_FIRST_TIME = entity.EXECUTE_FIRST_TIME;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_TEMPLATE_SQLAssembler : FORM_TEMPLATE_SQLAssemblerBase, IFORM_TEMPLATE_SQLAssembler
	{
	}


	public partial interface IFORM_TEMPLATE_SQLAssembler : IEntityAssembler<FORM_TEMPLATE_SQLDto, FORM_TEMPLATE_SQL>
	{
	}


	public partial class FORM_TEMPLATE_SQLAssemblerBase : EntityAssembler<FORM_TEMPLATE_SQLDto, FORM_TEMPLATE_SQL>
	{
		partial void OnDTOAssembled(FORM_TEMPLATE_SQLDto dto);
		partial void OnEntityAssembled(FORM_TEMPLATE_SQL entity);


		public override FORM_TEMPLATE_SQL Assemble(FORM_TEMPLATE_SQL entity, FORM_TEMPLATE_SQLDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_TEMPLATE_SQL();
			}
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.KEY = dto.KEY;
			entity.SOURCEREFSTATEMENT = dto.SOURCEREFSTATEMENT;
			return entity;
		}
		public override FORM_TEMPLATE_SQLDto Assemble(FORM_TEMPLATE_SQL entity)
		{
			FORM_TEMPLATE_SQLDto dto = new FORM_TEMPLATE_SQLDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.KEY = entity.KEY;
			dto.SOURCEREFSTATEMENT = entity.SOURCEREFSTATEMENT;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_TEMPLATE_SINGLEAssembler : FORM_TEMPLATE_SINGLEAssemblerBase, IFORM_TEMPLATE_SINGLEAssembler
	{
	}


	public partial interface IFORM_TEMPLATE_SINGLEAssembler : IEntityAssembler<FORM_TEMPLATE_SINGLEDto, FORM_TEMPLATE_SINGLE>
	{
	}


	public partial class FORM_TEMPLATE_SINGLEAssemblerBase : EntityAssembler<FORM_TEMPLATE_SINGLEDto, FORM_TEMPLATE_SINGLE>
	{
		partial void OnDTOAssembled(FORM_TEMPLATE_SINGLEDto dto);
		partial void OnEntityAssembled(FORM_TEMPLATE_SINGLE entity);


		public override FORM_TEMPLATE_SINGLE Assemble(FORM_TEMPLATE_SINGLE entity, FORM_TEMPLATE_SINGLEDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_TEMPLATE_SINGLE();
			}
			entity.SETTINGID = dto.SETTINGID;
			entity.TEMPLATEID = dto.TEMPLATEID;
			entity.IDS = dto.IDS;
			return entity;
		}
		public override FORM_TEMPLATE_SINGLEDto Assemble(FORM_TEMPLATE_SINGLE entity)
		{
			FORM_TEMPLATE_SINGLEDto dto = new FORM_TEMPLATE_SINGLEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.SETTINGID = entity.SETTINGID;
			dto.TEMPLATEID = entity.TEMPLATEID;
			dto.IDS = entity.IDS;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_TEMPLATE_SCRIPTAssembler : FORM_TEMPLATE_SCRIPTAssemblerBase, IFORM_TEMPLATE_SCRIPTAssembler
	{
	}


	public partial interface IFORM_TEMPLATE_SCRIPTAssembler : IEntityAssembler<FORM_TEMPLATE_SCRIPTDto, FORM_TEMPLATE_SCRIPT>
	{
	}


	public partial class FORM_TEMPLATE_SCRIPTAssemblerBase : EntityAssembler<FORM_TEMPLATE_SCRIPTDto, FORM_TEMPLATE_SCRIPT>
	{
		partial void OnDTOAssembled(FORM_TEMPLATE_SCRIPTDto dto);
		partial void OnEntityAssembled(FORM_TEMPLATE_SCRIPT entity);


		public override FORM_TEMPLATE_SCRIPT Assemble(FORM_TEMPLATE_SCRIPT entity, FORM_TEMPLATE_SCRIPTDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_TEMPLATE_SCRIPT();
			}
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.SCRIPT_CONTENT = dto.SCRIPT_CONTENT;
			return entity;
		}
		public override FORM_TEMPLATE_SCRIPTDto Assemble(FORM_TEMPLATE_SCRIPT entity)
		{
			FORM_TEMPLATE_SCRIPTDto dto = new FORM_TEMPLATE_SCRIPTDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.SCRIPT_CONTENT = entity.SCRIPT_CONTENT;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_TEMPLATE_PERMISSIONAssembler : FORM_TEMPLATE_PERMISSIONAssemblerBase, IFORM_TEMPLATE_PERMISSIONAssembler
	{
	}


	public partial interface IFORM_TEMPLATE_PERMISSIONAssembler : IEntityAssembler<FORM_TEMPLATE_PERMISSIONDto, FORM_TEMPLATE_PERMISSION>
	{
	}


	public partial class FORM_TEMPLATE_PERMISSIONAssemblerBase : EntityAssembler<FORM_TEMPLATE_PERMISSIONDto, FORM_TEMPLATE_PERMISSION>
	{
		partial void OnDTOAssembled(FORM_TEMPLATE_PERMISSIONDto dto);
		partial void OnEntityAssembled(FORM_TEMPLATE_PERMISSION entity);


		public override FORM_TEMPLATE_PERMISSION Assemble(FORM_TEMPLATE_PERMISSION entity, FORM_TEMPLATE_PERMISSIONDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_TEMPLATE_PERMISSION();
			}
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.HOSPCODE = dto.HOSPCODE;
			entity.CREATER = dto.CREATER;
			entity.CREATEDATE = dto.CREATEDATE;
			return entity;
		}
		public override FORM_TEMPLATE_PERMISSIONDto Assemble(FORM_TEMPLATE_PERMISSION entity)
		{
			FORM_TEMPLATE_PERMISSIONDto dto = new FORM_TEMPLATE_PERMISSIONDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.HOSPCODE = entity.HOSPCODE;
			dto.CREATER = entity.CREATER;
			dto.CREATEDATE = entity.CREATEDATE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_TEMPLATE_NECESSARYAssembler : FORM_TEMPLATE_NECESSARYAssemblerBase, IFORM_TEMPLATE_NECESSARYAssembler
	{
	}


	public partial interface IFORM_TEMPLATE_NECESSARYAssembler : IEntityAssembler<FORM_TEMPLATE_NECESSARYDto, FORM_TEMPLATE_NECESSARY>
	{
	}


	public partial class FORM_TEMPLATE_NECESSARYAssemblerBase : EntityAssembler<FORM_TEMPLATE_NECESSARYDto, FORM_TEMPLATE_NECESSARY>
	{
		partial void OnDTOAssembled(FORM_TEMPLATE_NECESSARYDto dto);
		partial void OnEntityAssembled(FORM_TEMPLATE_NECESSARY entity);


		public override FORM_TEMPLATE_NECESSARY Assemble(FORM_TEMPLATE_NECESSARY entity, FORM_TEMPLATE_NECESSARYDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_TEMPLATE_NECESSARY();
			}
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.NAME = dto.NAME;
			entity.ENABLE = dto.ENABLE;
			entity.MESSAGE = dto.MESSAGE;
			return entity;
		}
		public override FORM_TEMPLATE_NECESSARYDto Assemble(FORM_TEMPLATE_NECESSARY entity)
		{
			FORM_TEMPLATE_NECESSARYDto dto = new FORM_TEMPLATE_NECESSARYDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.NAME = entity.NAME;
			dto.ENABLE = entity.ENABLE;
			dto.MESSAGE = entity.MESSAGE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_TEMPLATE_LIBRARY_OPTIONAssembler : FORM_TEMPLATE_LIBRARY_OPTIONAssemblerBase, IFORM_TEMPLATE_LIBRARY_OPTIONAssembler
	{
	}


	public partial interface IFORM_TEMPLATE_LIBRARY_OPTIONAssembler : IEntityAssembler<FORM_TEMPLATE_LIBRARY_OPTIONDto, FORM_TEMPLATE_LIBRARY_OPTION>
	{
	}


	public partial class FORM_TEMPLATE_LIBRARY_OPTIONAssemblerBase : EntityAssembler<FORM_TEMPLATE_LIBRARY_OPTIONDto, FORM_TEMPLATE_LIBRARY_OPTION>
	{
		partial void OnDTOAssembled(FORM_TEMPLATE_LIBRARY_OPTIONDto dto);
		partial void OnEntityAssembled(FORM_TEMPLATE_LIBRARY_OPTION entity);


		public override FORM_TEMPLATE_LIBRARY_OPTION Assemble(FORM_TEMPLATE_LIBRARY_OPTION entity, FORM_TEMPLATE_LIBRARY_OPTIONDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_TEMPLATE_LIBRARY_OPTION();
			}
			entity.OPTION_ID = dto.OPTION_ID;
			entity.LIBRARY_ID = dto.LIBRARY_ID;
			entity.OPTION_TYPE = dto.OPTION_TYPE;
			entity.OPTION_TEXT = dto.OPTION_TEXT;
			entity.OPTION_POINTS = dto.OPTION_POINTS;
			entity.DISPLAY_ORDER = dto.DISPLAY_ORDER;
			entity.IS_ANSWER = dto.IS_ANSWER;
			return entity;
		}
		public override FORM_TEMPLATE_LIBRARY_OPTIONDto Assemble(FORM_TEMPLATE_LIBRARY_OPTION entity)
		{
			FORM_TEMPLATE_LIBRARY_OPTIONDto dto = new FORM_TEMPLATE_LIBRARY_OPTIONDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.OPTION_ID = entity.OPTION_ID;
			dto.LIBRARY_ID = entity.LIBRARY_ID;
			dto.OPTION_TYPE = entity.OPTION_TYPE;
			dto.OPTION_TEXT = entity.OPTION_TEXT;
			dto.OPTION_POINTS = entity.OPTION_POINTS;
			dto.DISPLAY_ORDER = entity.DISPLAY_ORDER;
			dto.IS_ANSWER = entity.IS_ANSWER;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_TEMPLATE_LIBRARYAssembler : FORM_TEMPLATE_LIBRARYAssemblerBase, IFORM_TEMPLATE_LIBRARYAssembler
	{
	}


	public partial interface IFORM_TEMPLATE_LIBRARYAssembler : IEntityAssembler<FORM_TEMPLATE_LIBRARYDto, FORM_TEMPLATE_LIBRARY>
	{
	}


	public partial class FORM_TEMPLATE_LIBRARYAssemblerBase : EntityAssembler<FORM_TEMPLATE_LIBRARYDto, FORM_TEMPLATE_LIBRARY>
	{
		partial void OnDTOAssembled(FORM_TEMPLATE_LIBRARYDto dto);
		partial void OnEntityAssembled(FORM_TEMPLATE_LIBRARY entity);


		public override FORM_TEMPLATE_LIBRARY Assemble(FORM_TEMPLATE_LIBRARY entity, FORM_TEMPLATE_LIBRARYDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_TEMPLATE_LIBRARY();
			}
			entity.FORM_TEMPLATE_LIBRARY_ID = dto.FORM_TEMPLATE_LIBRARY_ID;
			entity.FORM_TEMPLATE_ID = dto.FORM_TEMPLATE_ID;
			entity.QUESTION_CONTENT = dto.QUESTION_CONTENT;
			entity.QUESTION_TYPE = dto.QUESTION_TYPE;
			entity.DISPLAY = dto.DISPLAY;
			return entity;
		}
		public override FORM_TEMPLATE_LIBRARYDto Assemble(FORM_TEMPLATE_LIBRARY entity)
		{
			FORM_TEMPLATE_LIBRARYDto dto = new FORM_TEMPLATE_LIBRARYDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.FORM_TEMPLATE_LIBRARY_ID = entity.FORM_TEMPLATE_LIBRARY_ID;
			dto.FORM_TEMPLATE_ID = entity.FORM_TEMPLATE_ID;
			dto.QUESTION_CONTENT = entity.QUESTION_CONTENT;
			dto.QUESTION_TYPE = entity.QUESTION_TYPE;
			dto.DISPLAY = entity.DISPLAY;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_TEMPLATE_IMAGEAssembler : FORM_TEMPLATE_IMAGEAssemblerBase, IFORM_TEMPLATE_IMAGEAssembler
	{
	}


	public partial interface IFORM_TEMPLATE_IMAGEAssembler : IEntityAssembler<FORM_TEMPLATE_IMAGEDto, FORM_TEMPLATE_IMAGE>
	{
	}


	public partial class FORM_TEMPLATE_IMAGEAssemblerBase : EntityAssembler<FORM_TEMPLATE_IMAGEDto, FORM_TEMPLATE_IMAGE>
	{
		partial void OnDTOAssembled(FORM_TEMPLATE_IMAGEDto dto);
		partial void OnEntityAssembled(FORM_TEMPLATE_IMAGE entity);


		public override FORM_TEMPLATE_IMAGE Assemble(FORM_TEMPLATE_IMAGE entity, FORM_TEMPLATE_IMAGEDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_TEMPLATE_IMAGE();
			}
			entity.TEMPLATE_IMAGE_ID = dto.TEMPLATE_IMAGE_ID;
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.FILE_NAME = dto.FILE_NAME;
			entity.IMAGE_CONTENT = dto.IMAGE_CONTENT;
			return entity;
		}
		public override FORM_TEMPLATE_IMAGEDto Assemble(FORM_TEMPLATE_IMAGE entity)
		{
			FORM_TEMPLATE_IMAGEDto dto = new FORM_TEMPLATE_IMAGEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TEMPLATE_IMAGE_ID = entity.TEMPLATE_IMAGE_ID;
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.FILE_NAME = entity.FILE_NAME;
			dto.IMAGE_CONTENT = entity.IMAGE_CONTENT;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_TEMPLATE_GROUPS_BKAssembler : FORM_TEMPLATE_GROUPS_BKAssemblerBase, IFORM_TEMPLATE_GROUPS_BKAssembler
	{
	}


	public partial interface IFORM_TEMPLATE_GROUPS_BKAssembler : IEntityAssembler<FORM_TEMPLATE_GROUPS_BKDto, FORM_TEMPLATE_GROUPS_BK>
	{
	}


	public partial class FORM_TEMPLATE_GROUPS_BKAssemblerBase : EntityAssembler<FORM_TEMPLATE_GROUPS_BKDto, FORM_TEMPLATE_GROUPS_BK>
	{
		partial void OnDTOAssembled(FORM_TEMPLATE_GROUPS_BKDto dto);
		partial void OnEntityAssembled(FORM_TEMPLATE_GROUPS_BK entity);


		public override FORM_TEMPLATE_GROUPS_BK Assemble(FORM_TEMPLATE_GROUPS_BK entity, FORM_TEMPLATE_GROUPS_BKDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_TEMPLATE_GROUPS_BK();
			}
			entity.GROUP_ID = dto.GROUP_ID;
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.GROUP_NAME = dto.GROUP_NAME;
			entity.DISPLAY_ORDER = dto.DISPLAY_ORDER;
			entity.TO_EVALTARGET = dto.TO_EVALTARGET;
			return entity;
		}
		public override FORM_TEMPLATE_GROUPS_BKDto Assemble(FORM_TEMPLATE_GROUPS_BK entity)
		{
			FORM_TEMPLATE_GROUPS_BKDto dto = new FORM_TEMPLATE_GROUPS_BKDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.GROUP_ID = entity.GROUP_ID;
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.GROUP_NAME = entity.GROUP_NAME;
			dto.DISPLAY_ORDER = entity.DISPLAY_ORDER;
			dto.TO_EVALTARGET = entity.TO_EVALTARGET;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_TEMPLATE_GROUPAssembler : FORM_TEMPLATE_GROUPAssemblerBase, IFORM_TEMPLATE_GROUPAssembler
	{
	}


	public partial interface IFORM_TEMPLATE_GROUPAssembler : IEntityAssembler<FORM_TEMPLATE_GROUPDto, FORM_TEMPLATE_GROUP>
	{
	}


	public partial class FORM_TEMPLATE_GROUPAssemblerBase : EntityAssembler<FORM_TEMPLATE_GROUPDto, FORM_TEMPLATE_GROUP>
	{
		partial void OnDTOAssembled(FORM_TEMPLATE_GROUPDto dto);
		partial void OnEntityAssembled(FORM_TEMPLATE_GROUP entity);


		public override FORM_TEMPLATE_GROUP Assemble(FORM_TEMPLATE_GROUP entity, FORM_TEMPLATE_GROUPDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_TEMPLATE_GROUP();
			}
			entity.GROUP_ID = dto.GROUP_ID;
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.GROUP_NAME = dto.GROUP_NAME;
			entity.DISPLAY_ORDER = dto.DISPLAY_ORDER;
			entity.TO_EVALTARGET = dto.TO_EVALTARGET;
			return entity;
		}
		public override FORM_TEMPLATE_GROUPDto Assemble(FORM_TEMPLATE_GROUP entity)
		{
			FORM_TEMPLATE_GROUPDto dto = new FORM_TEMPLATE_GROUPDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.GROUP_ID = entity.GROUP_ID;
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.GROUP_NAME = entity.GROUP_NAME;
			dto.DISPLAY_ORDER = entity.DISPLAY_ORDER;
			dto.TO_EVALTARGET = entity.TO_EVALTARGET;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_TEMPLATE_EXPRESSIONAssembler : FORM_TEMPLATE_EXPRESSIONAssemblerBase, IFORM_TEMPLATE_EXPRESSIONAssembler
	{
	}


	public partial interface IFORM_TEMPLATE_EXPRESSIONAssembler : IEntityAssembler<FORM_TEMPLATE_EXPRESSIONDto, FORM_TEMPLATE_EXPRESSION>
	{
	}


	public partial class FORM_TEMPLATE_EXPRESSIONAssemblerBase : EntityAssembler<FORM_TEMPLATE_EXPRESSIONDto, FORM_TEMPLATE_EXPRESSION>
	{
		partial void OnDTOAssembled(FORM_TEMPLATE_EXPRESSIONDto dto);
		partial void OnEntityAssembled(FORM_TEMPLATE_EXPRESSION entity);


		public override FORM_TEMPLATE_EXPRESSION Assemble(FORM_TEMPLATE_EXPRESSION entity, FORM_TEMPLATE_EXPRESSIONDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_TEMPLATE_EXPRESSION();
			}
			entity.TEMPLATE_EXPRESSION_ID = dto.TEMPLATE_EXPRESSION_ID;
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.TEMPLATE_EXPRESSION_NAME = dto.TEMPLATE_EXPRESSION_NAME;
			entity.EXPRESSION = dto.EXPRESSION;
			entity.EXECUTE_ORDER = dto.EXECUTE_ORDER;
			entity.ISFINALSCORE = dto.ISFINALSCORE;
			entity.ALLOWUSERDEFINE = dto.ALLOWUSERDEFINE;
			return entity;
		}
		public override FORM_TEMPLATE_EXPRESSIONDto Assemble(FORM_TEMPLATE_EXPRESSION entity)
		{
			FORM_TEMPLATE_EXPRESSIONDto dto = new FORM_TEMPLATE_EXPRESSIONDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TEMPLATE_EXPRESSION_ID = entity.TEMPLATE_EXPRESSION_ID;
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.TEMPLATE_EXPRESSION_NAME = entity.TEMPLATE_EXPRESSION_NAME;
			dto.EXPRESSION = entity.EXPRESSION;
			dto.EXECUTE_ORDER = entity.EXECUTE_ORDER;
			dto.ISFINALSCORE = entity.ISFINALSCORE;
			dto.ALLOWUSERDEFINE = entity.ALLOWUSERDEFINE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_TEMPLATE_ELEMENTS_BKAssembler : FORM_TEMPLATE_ELEMENTS_BKAssemblerBase, IFORM_TEMPLATE_ELEMENTS_BKAssembler
	{
	}


	public partial interface IFORM_TEMPLATE_ELEMENTS_BKAssembler : IEntityAssembler<FORM_TEMPLATE_ELEMENTS_BKDto, FORM_TEMPLATE_ELEMENTS_BK>
	{
	}


	public partial class FORM_TEMPLATE_ELEMENTS_BKAssemblerBase : EntityAssembler<FORM_TEMPLATE_ELEMENTS_BKDto, FORM_TEMPLATE_ELEMENTS_BK>
	{
		partial void OnDTOAssembled(FORM_TEMPLATE_ELEMENTS_BKDto dto);
		partial void OnEntityAssembled(FORM_TEMPLATE_ELEMENTS_BK entity);


		public override FORM_TEMPLATE_ELEMENTS_BK Assemble(FORM_TEMPLATE_ELEMENTS_BK entity, FORM_TEMPLATE_ELEMENTS_BKDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_TEMPLATE_ELEMENTS_BK();
			}
			entity.TEMPLATE_ELEMENT_ID = dto.TEMPLATE_ELEMENT_ID;
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.ID = dto.ID;
			entity.NAME = dto.NAME;
			entity.CONTROL_TYPE = dto.CONTROL_TYPE;
			entity.DATA_TYPE = dto.DATA_TYPE;
			entity.POINTS = dto.POINTS;
			entity.DISPLAY_NAME = dto.DISPLAY_NAME;
			entity.GROUP_ID = dto.GROUP_ID;
			entity.ISHIDE = dto.ISHIDE;
			entity.MAXPOINT = dto.MAXPOINT;
			entity.BINDVALUE = dto.BINDVALUE;
			entity.BINDSQL = dto.BINDSQL;
			entity.ALLOWOVER = dto.ALLOWOVER;
			return entity;
		}
		public override FORM_TEMPLATE_ELEMENTS_BKDto Assemble(FORM_TEMPLATE_ELEMENTS_BK entity)
		{
			FORM_TEMPLATE_ELEMENTS_BKDto dto = new FORM_TEMPLATE_ELEMENTS_BKDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TEMPLATE_ELEMENT_ID = entity.TEMPLATE_ELEMENT_ID;
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.ID = entity.ID;
			dto.NAME = entity.NAME;
			dto.CONTROL_TYPE = entity.CONTROL_TYPE;
			dto.DATA_TYPE = entity.DATA_TYPE;
			dto.POINTS = entity.POINTS;
			dto.DISPLAY_NAME = entity.DISPLAY_NAME;
			dto.GROUP_ID = entity.GROUP_ID;
			dto.ISHIDE = entity.ISHIDE;
			dto.MAXPOINT = entity.MAXPOINT;
			dto.BINDVALUE = entity.BINDVALUE;
			dto.BINDSQL = entity.BINDSQL;
			dto.ALLOWOVER = entity.ALLOWOVER;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_TEMPLATE_ELEMENTAssembler : FORM_TEMPLATE_ELEMENTAssemblerBase, IFORM_TEMPLATE_ELEMENTAssembler
	{
	}


	public partial interface IFORM_TEMPLATE_ELEMENTAssembler : IEntityAssembler<FORM_TEMPLATE_ELEMENTDto, FORM_TEMPLATE_ELEMENT>
	{
	}


	public partial class FORM_TEMPLATE_ELEMENTAssemblerBase : EntityAssembler<FORM_TEMPLATE_ELEMENTDto, FORM_TEMPLATE_ELEMENT>
	{
		partial void OnDTOAssembled(FORM_TEMPLATE_ELEMENTDto dto);
		partial void OnEntityAssembled(FORM_TEMPLATE_ELEMENT entity);


		public override FORM_TEMPLATE_ELEMENT Assemble(FORM_TEMPLATE_ELEMENT entity, FORM_TEMPLATE_ELEMENTDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_TEMPLATE_ELEMENT();
			}
			entity.TEMPLATE_ELEMENT_ID = dto.TEMPLATE_ELEMENT_ID;
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.ID = dto.ID;
			entity.NAME = dto.NAME;
			entity.CONTROL_TYPE = dto.CONTROL_TYPE;
			entity.DATA_TYPE = dto.DATA_TYPE;
			entity.POINTS = dto.POINTS;
			entity.DISPLAY_NAME = dto.DISPLAY_NAME;
			entity.GROUP_ID = dto.GROUP_ID;
			entity.ISHIDE = dto.ISHIDE;
			entity.MAXPOINT = dto.MAXPOINT;
			entity.BINDVALUE = dto.BINDVALUE;
			entity.BINDSQL = dto.BINDSQL;
			entity.ALLOWOVER = dto.ALLOWOVER;
			entity.MINTEXTCOUNT = dto.MINTEXTCOUNT;
			entity.MAXTEXTCOUNT = dto.MAXTEXTCOUNT;
			return entity;
		}
		public override FORM_TEMPLATE_ELEMENTDto Assemble(FORM_TEMPLATE_ELEMENT entity)
		{
			FORM_TEMPLATE_ELEMENTDto dto = new FORM_TEMPLATE_ELEMENTDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TEMPLATE_ELEMENT_ID = entity.TEMPLATE_ELEMENT_ID;
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.ID = entity.ID;
			dto.NAME = entity.NAME;
			dto.CONTROL_TYPE = entity.CONTROL_TYPE;
			dto.DATA_TYPE = entity.DATA_TYPE;
			dto.POINTS = entity.POINTS;
			dto.DISPLAY_NAME = entity.DISPLAY_NAME;
			dto.GROUP_ID = entity.GROUP_ID;
			dto.ISHIDE = entity.ISHIDE;
			dto.MAXPOINT = entity.MAXPOINT;
			dto.BINDVALUE = entity.BINDVALUE;
			dto.BINDSQL = entity.BINDSQL;
			dto.ALLOWOVER = entity.ALLOWOVER;
			dto.MINTEXTCOUNT = entity.MINTEXTCOUNT;
			dto.MAXTEXTCOUNT = entity.MAXTEXTCOUNT;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_TEMPLATE_ELEMENT_READONLYAssembler : FORM_TEMPLATE_ELEMENT_READONLYAssemblerBase, IFORM_TEMPLATE_ELEMENT_READONLYAssembler
	{
	}


	public partial interface IFORM_TEMPLATE_ELEMENT_READONLYAssembler : IEntityAssembler<FORM_TEMPLATE_ELEMENT_READONLYDto, FORM_TEMPLATE_ELEMENT_READONLY>
	{
	}


	public partial class FORM_TEMPLATE_ELEMENT_READONLYAssemblerBase : EntityAssembler<FORM_TEMPLATE_ELEMENT_READONLYDto, FORM_TEMPLATE_ELEMENT_READONLY>
	{
		partial void OnDTOAssembled(FORM_TEMPLATE_ELEMENT_READONLYDto dto);
		partial void OnEntityAssembled(FORM_TEMPLATE_ELEMENT_READONLY entity);


		public override FORM_TEMPLATE_ELEMENT_READONLY Assemble(FORM_TEMPLATE_ELEMENT_READONLY entity, FORM_TEMPLATE_ELEMENT_READONLYDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_TEMPLATE_ELEMENT_READONLY();
			}
			entity.ID = dto.ID;
			entity.TEMPLATE_ELEMELT_ID = dto.TEMPLATE_ELEMELT_ID;
			entity.SETTINGTYPE = dto.SETTINGTYPE;
			entity.SETTINGID = dto.SETTINGID;
			entity.JOB_CODE = dto.JOB_CODE;
			return entity;
		}
		public override FORM_TEMPLATE_ELEMENT_READONLYDto Assemble(FORM_TEMPLATE_ELEMENT_READONLY entity)
		{
			FORM_TEMPLATE_ELEMENT_READONLYDto dto = new FORM_TEMPLATE_ELEMENT_READONLYDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.TEMPLATE_ELEMELT_ID = entity.TEMPLATE_ELEMELT_ID;
			dto.SETTINGTYPE = entity.SETTINGTYPE;
			dto.SETTINGID = entity.SETTINGID;
			dto.JOB_CODE = entity.JOB_CODE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_TEMPLATE_DYNAMIC_ELEMENTAssembler : FORM_TEMPLATE_DYNAMIC_ELEMENTAssemblerBase, IFORM_TEMPLATE_DYNAMIC_ELEMENTAssembler
	{
	}


	public partial interface IFORM_TEMPLATE_DYNAMIC_ELEMENTAssembler : IEntityAssembler<FORM_TEMPLATE_DYNAMIC_ELEMENTDto, FORM_TEMPLATE_DYNAMIC_ELEMENT>
	{
	}


	public partial class FORM_TEMPLATE_DYNAMIC_ELEMENTAssemblerBase : EntityAssembler<FORM_TEMPLATE_DYNAMIC_ELEMENTDto, FORM_TEMPLATE_DYNAMIC_ELEMENT>
	{
		partial void OnDTOAssembled(FORM_TEMPLATE_DYNAMIC_ELEMENTDto dto);
		partial void OnEntityAssembled(FORM_TEMPLATE_DYNAMIC_ELEMENT entity);


		public override FORM_TEMPLATE_DYNAMIC_ELEMENT Assemble(FORM_TEMPLATE_DYNAMIC_ELEMENT entity, FORM_TEMPLATE_DYNAMIC_ELEMENTDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_TEMPLATE_DYNAMIC_ELEMENT();
			}
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.KEY = dto.KEY;
			entity.SOURCEREFSTATEMENT = dto.SOURCEREFSTATEMENT;
			entity.DISPLAY_DIRECTION = dto.DISPLAY_DIRECTION;
			return entity;
		}
		public override FORM_TEMPLATE_DYNAMIC_ELEMENTDto Assemble(FORM_TEMPLATE_DYNAMIC_ELEMENT entity)
		{
			FORM_TEMPLATE_DYNAMIC_ELEMENTDto dto = new FORM_TEMPLATE_DYNAMIC_ELEMENTDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.KEY = entity.KEY;
			dto.SOURCEREFSTATEMENT = entity.SOURCEREFSTATEMENT;
			dto.DISPLAY_DIRECTION = entity.DISPLAY_DIRECTION;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_OPTION_TYPEAssembler : FORM_OPTION_TYPEAssemblerBase, IFORM_OPTION_TYPEAssembler
	{
	}


	public partial interface IFORM_OPTION_TYPEAssembler : IEntityAssembler<FORM_OPTION_TYPEDto, FORM_OPTION_TYPE>
	{
	}


	public partial class FORM_OPTION_TYPEAssemblerBase : EntityAssembler<FORM_OPTION_TYPEDto, FORM_OPTION_TYPE>
	{
		partial void OnDTOAssembled(FORM_OPTION_TYPEDto dto);
		partial void OnEntityAssembled(FORM_OPTION_TYPE entity);


		public override FORM_OPTION_TYPE Assemble(FORM_OPTION_TYPE entity, FORM_OPTION_TYPEDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_OPTION_TYPE();
			}
			entity.CODE = dto.CODE;
			entity.NAME = dto.NAME;
			entity.DISPLAY_ORDER = dto.DISPLAY_ORDER;
			return entity;
		}
		public override FORM_OPTION_TYPEDto Assemble(FORM_OPTION_TYPE entity)
		{
			FORM_OPTION_TYPEDto dto = new FORM_OPTION_TYPEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.CODE = entity.CODE;
			dto.NAME = entity.NAME;
			dto.DISPLAY_ORDER = entity.DISPLAY_ORDER;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_INSTANCES_DELLOGAssembler : FORM_INSTANCES_DELLOGAssemblerBase, IFORM_INSTANCES_DELLOGAssembler
	{
	}


	public partial interface IFORM_INSTANCES_DELLOGAssembler : IEntityAssembler<FORM_INSTANCES_DELLOGDto, FORM_INSTANCES_DELLOG>
	{
	}


	public partial class FORM_INSTANCES_DELLOGAssemblerBase : EntityAssembler<FORM_INSTANCES_DELLOGDto, FORM_INSTANCES_DELLOG>
	{
		partial void OnDTOAssembled(FORM_INSTANCES_DELLOGDto dto);
		partial void OnEntityAssembled(FORM_INSTANCES_DELLOG entity);


		public override FORM_INSTANCES_DELLOG Assemble(FORM_INSTANCES_DELLOG entity, FORM_INSTANCES_DELLOGDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_INSTANCES_DELLOG();
			}
			entity.INSTANCE_ID = dto.INSTANCE_ID;
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.INSTANCE_NAME = dto.INSTANCE_NAME;
			entity.INSTANCE_CREATE_DATETIME = dto.INSTANCE_CREATE_DATETIME;
			entity.INSTANCE_ALTER_DATETIME = dto.INSTANCE_ALTER_DATETIME;
			entity.INSTANCE_REMARK = dto.INSTANCE_REMARK;
			entity.INSTANCE_CONTENT = dto.INSTANCE_CONTENT;
			entity.INHOSPID = dto.INHOSPID;
			entity.CREATER = dto.CREATER;
			entity.EXPIREDATE = dto.EXPIREDATE;
			entity.TARGETTYPE = dto.TARGETTYPE;
			entity.TARGETID = dto.TARGETID;
			entity.STATUS = dto.STATUS;
			entity.PARENT_INSTANCE_ID = dto.PARENT_INSTANCE_ID;
			entity.EVALTARGETID = dto.EVALTARGETID;
			entity.ISPASS = dto.ISPASS;
			entity.DEL_TIME = dto.DEL_TIME;
			return entity;
		}
		public override FORM_INSTANCES_DELLOGDto Assemble(FORM_INSTANCES_DELLOG entity)
		{
			FORM_INSTANCES_DELLOGDto dto = new FORM_INSTANCES_DELLOGDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.INSTANCE_ID = entity.INSTANCE_ID;
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.INSTANCE_NAME = entity.INSTANCE_NAME;
			dto.INSTANCE_CREATE_DATETIME = entity.INSTANCE_CREATE_DATETIME;
			dto.INSTANCE_ALTER_DATETIME = entity.INSTANCE_ALTER_DATETIME;
			dto.INSTANCE_REMARK = entity.INSTANCE_REMARK;
			dto.INSTANCE_CONTENT = entity.INSTANCE_CONTENT;
			dto.INHOSPID = entity.INHOSPID;
			dto.CREATER = entity.CREATER;
			dto.EXPIREDATE = entity.EXPIREDATE;
			dto.TARGETTYPE = entity.TARGETTYPE;
			dto.TARGETID = entity.TARGETID;
			dto.STATUS = entity.STATUS;
			dto.PARENT_INSTANCE_ID = entity.PARENT_INSTANCE_ID;
			dto.EVALTARGETID = entity.EVALTARGETID;
			dto.ISPASS = entity.ISPASS;
			dto.DEL_TIME = entity.DEL_TIME;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_INSTANCES_BKAssembler : FORM_INSTANCES_BKAssemblerBase, IFORM_INSTANCES_BKAssembler
	{
	}


	public partial interface IFORM_INSTANCES_BKAssembler : IEntityAssembler<FORM_INSTANCES_BKDto, FORM_INSTANCES_BK>
	{
	}


	public partial class FORM_INSTANCES_BKAssemblerBase : EntityAssembler<FORM_INSTANCES_BKDto, FORM_INSTANCES_BK>
	{
		partial void OnDTOAssembled(FORM_INSTANCES_BKDto dto);
		partial void OnEntityAssembled(FORM_INSTANCES_BK entity);


		public override FORM_INSTANCES_BK Assemble(FORM_INSTANCES_BK entity, FORM_INSTANCES_BKDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_INSTANCES_BK();
			}
			entity.INSTANCE_ID = dto.INSTANCE_ID;
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.INSTANCE_NAME = dto.INSTANCE_NAME;
			entity.INSTANCE_CREATE_DATETIME = dto.INSTANCE_CREATE_DATETIME;
			entity.INSTANCE_ALTER_DATETIME = dto.INSTANCE_ALTER_DATETIME;
			entity.INSTANCE_REMARK = dto.INSTANCE_REMARK;
			entity.INSTANCE_CONTENT = dto.INSTANCE_CONTENT;
			entity.INHOSPID = dto.INHOSPID;
			entity.CREATER = dto.CREATER;
			entity.EXPIREDATE = dto.EXPIREDATE;
			entity.TARGETTYPE = dto.TARGETTYPE;
			entity.TARGETID = dto.TARGETID;
			entity.STATUS = dto.STATUS;
			entity.PARENT_INSTANCE_ID = dto.PARENT_INSTANCE_ID;
			entity.EVALTARGETID = dto.EVALTARGETID;
			return entity;
		}
		public override FORM_INSTANCES_BKDto Assemble(FORM_INSTANCES_BK entity)
		{
			FORM_INSTANCES_BKDto dto = new FORM_INSTANCES_BKDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.INSTANCE_ID = entity.INSTANCE_ID;
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.INSTANCE_NAME = entity.INSTANCE_NAME;
			dto.INSTANCE_CREATE_DATETIME = entity.INSTANCE_CREATE_DATETIME;
			dto.INSTANCE_ALTER_DATETIME = entity.INSTANCE_ALTER_DATETIME;
			dto.INSTANCE_REMARK = entity.INSTANCE_REMARK;
			dto.INSTANCE_CONTENT = entity.INSTANCE_CONTENT;
			dto.INHOSPID = entity.INHOSPID;
			dto.CREATER = entity.CREATER;
			dto.EXPIREDATE = entity.EXPIREDATE;
			dto.TARGETTYPE = entity.TARGETTYPE;
			dto.TARGETID = entity.TARGETID;
			dto.STATUS = entity.STATUS;
			dto.PARENT_INSTANCE_ID = entity.PARENT_INSTANCE_ID;
			dto.EVALTARGETID = entity.EVALTARGETID;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_INSTANCEAssembler : FORM_INSTANCEAssemblerBase, IFORM_INSTANCEAssembler
	{
	}


	public partial interface IFORM_INSTANCEAssembler : IEntityAssembler<FORM_INSTANCEDto, FORM_INSTANCE>
	{
	}


	public partial class FORM_INSTANCEAssemblerBase : EntityAssembler<FORM_INSTANCEDto, FORM_INSTANCE>
	{
		partial void OnDTOAssembled(FORM_INSTANCEDto dto);
		partial void OnEntityAssembled(FORM_INSTANCE entity);


		public override FORM_INSTANCE Assemble(FORM_INSTANCE entity, FORM_INSTANCEDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_INSTANCE();
			}
			entity.INSTANCE_ID = dto.INSTANCE_ID;
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.INSTANCE_NAME = dto.INSTANCE_NAME;
			entity.INSTANCE_CREATE_DATETIME = dto.INSTANCE_CREATE_DATETIME;
			entity.INSTANCE_ALTER_DATETIME = dto.INSTANCE_ALTER_DATETIME;
			entity.INSTANCE_REMARK = dto.INSTANCE_REMARK;
			entity.INSTANCE_CONTENT = dto.INSTANCE_CONTENT;
			entity.INHOSPID = dto.INHOSPID;
			entity.CREATER = dto.CREATER;
			entity.EXPIREDATE = dto.EXPIREDATE;
			entity.TARGETTYPE = dto.TARGETTYPE;
			entity.TARGETID = dto.TARGETID;
			entity.STATUS = dto.STATUS;
			entity.PARENT_INSTANCE_ID = dto.PARENT_INSTANCE_ID;
			entity.EVALTARGETID = dto.EVALTARGETID;
			entity.ISPASS = dto.ISPASS;
			return entity;
		}
		public override FORM_INSTANCEDto Assemble(FORM_INSTANCE entity)
		{
			FORM_INSTANCEDto dto = new FORM_INSTANCEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.INSTANCE_ID = entity.INSTANCE_ID;
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.INSTANCE_NAME = entity.INSTANCE_NAME;
			dto.INSTANCE_CREATE_DATETIME = entity.INSTANCE_CREATE_DATETIME;
			dto.INSTANCE_ALTER_DATETIME = entity.INSTANCE_ALTER_DATETIME;
			dto.INSTANCE_REMARK = entity.INSTANCE_REMARK;
			dto.INSTANCE_CONTENT = entity.INSTANCE_CONTENT;
			dto.INHOSPID = entity.INHOSPID;
			dto.CREATER = entity.CREATER;
			dto.EXPIREDATE = entity.EXPIREDATE;
			dto.TARGETTYPE = entity.TARGETTYPE;
			dto.TARGETID = entity.TARGETID;
			dto.STATUS = entity.STATUS;
			dto.PARENT_INSTANCE_ID = entity.PARENT_INSTANCE_ID;
			dto.EVALTARGETID = entity.EVALTARGETID;
			dto.ISPASS = entity.ISPASS;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_INSTANCE_TRANSLOGAssembler : FORM_INSTANCE_TRANSLOGAssemblerBase, IFORM_INSTANCE_TRANSLOGAssembler
	{
	}


	public partial interface IFORM_INSTANCE_TRANSLOGAssembler : IEntityAssembler<FORM_INSTANCE_TRANSLOGDto, FORM_INSTANCE_TRANSLOG>
	{
	}


	public partial class FORM_INSTANCE_TRANSLOGAssemblerBase : EntityAssembler<FORM_INSTANCE_TRANSLOGDto, FORM_INSTANCE_TRANSLOG>
	{
		partial void OnDTOAssembled(FORM_INSTANCE_TRANSLOGDto dto);
		partial void OnEntityAssembled(FORM_INSTANCE_TRANSLOG entity);


		public override FORM_INSTANCE_TRANSLOG Assemble(FORM_INSTANCE_TRANSLOG entity, FORM_INSTANCE_TRANSLOGDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_INSTANCE_TRANSLOG();
			}
			entity.LOG_ID = dto.LOG_ID;
			entity.INSTANCE_ID = dto.INSTANCE_ID;
			entity.MODIFIER = dto.MODIFIER;
			entity.MODIFYDATE = dto.MODIFYDATE;
			entity.MODIFYTYPE = dto.MODIFYTYPE;
			entity.OLDVALUE = dto.OLDVALUE;
			entity.NEWVALUE = dto.NEWVALUE;
			return entity;
		}
		public override FORM_INSTANCE_TRANSLOGDto Assemble(FORM_INSTANCE_TRANSLOG entity)
		{
			FORM_INSTANCE_TRANSLOGDto dto = new FORM_INSTANCE_TRANSLOGDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.LOG_ID = entity.LOG_ID;
			dto.INSTANCE_ID = entity.INSTANCE_ID;
			dto.MODIFIER = entity.MODIFIER;
			dto.MODIFYDATE = entity.MODIFYDATE;
			dto.MODIFYTYPE = entity.MODIFYTYPE;
			dto.OLDVALUE = entity.OLDVALUE;
			dto.NEWVALUE = entity.NEWVALUE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_INSTANCE_TARGETS_DELLOGAssembler : FORM_INSTANCE_TARGETS_DELLOGAssemblerBase, IFORM_INSTANCE_TARGETS_DELLOGAssembler
	{
	}


	public partial interface IFORM_INSTANCE_TARGETS_DELLOGAssembler : IEntityAssembler<FORM_INSTANCE_TARGETS_DELLOGDto, FORM_INSTANCE_TARGETS_DELLOG>
	{
	}


	public partial class FORM_INSTANCE_TARGETS_DELLOGAssemblerBase : EntityAssembler<FORM_INSTANCE_TARGETS_DELLOGDto, FORM_INSTANCE_TARGETS_DELLOG>
	{
		partial void OnDTOAssembled(FORM_INSTANCE_TARGETS_DELLOGDto dto);
		partial void OnEntityAssembled(FORM_INSTANCE_TARGETS_DELLOG entity);


		public override FORM_INSTANCE_TARGETS_DELLOG Assemble(FORM_INSTANCE_TARGETS_DELLOG entity, FORM_INSTANCE_TARGETS_DELLOGDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_INSTANCE_TARGETS_DELLOG();
			}
			entity.TARGETID = dto.TARGETID;
			entity.INSTANCE_ID = dto.INSTANCE_ID;
			entity.TARGETORDER = dto.TARGETORDER;
			entity.STATUS = dto.STATUS;
			entity.TARGETTYPE = dto.TARGETTYPE;
			entity.ALERTTIME = dto.ALERTTIME;
			entity.TARGETSOURCE = dto.TARGETSOURCE;
			entity.DEL_TIME = dto.DEL_TIME;
			return entity;
		}
		public override FORM_INSTANCE_TARGETS_DELLOGDto Assemble(FORM_INSTANCE_TARGETS_DELLOG entity)
		{
			FORM_INSTANCE_TARGETS_DELLOGDto dto = new FORM_INSTANCE_TARGETS_DELLOGDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TARGETID = entity.TARGETID;
			dto.INSTANCE_ID = entity.INSTANCE_ID;
			dto.TARGETORDER = entity.TARGETORDER;
			dto.STATUS = entity.STATUS;
			dto.TARGETTYPE = entity.TARGETTYPE;
			dto.ALERTTIME = entity.ALERTTIME;
			dto.TARGETSOURCE = entity.TARGETSOURCE;
			dto.DEL_TIME = entity.DEL_TIME;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_INSTANCE_TARGETS_BKAssembler : FORM_INSTANCE_TARGETS_BKAssemblerBase, IFORM_INSTANCE_TARGETS_BKAssembler
	{
	}


	public partial interface IFORM_INSTANCE_TARGETS_BKAssembler : IEntityAssembler<FORM_INSTANCE_TARGETS_BKDto, FORM_INSTANCE_TARGETS_BK>
	{
	}


	public partial class FORM_INSTANCE_TARGETS_BKAssemblerBase : EntityAssembler<FORM_INSTANCE_TARGETS_BKDto, FORM_INSTANCE_TARGETS_BK>
	{
		partial void OnDTOAssembled(FORM_INSTANCE_TARGETS_BKDto dto);
		partial void OnEntityAssembled(FORM_INSTANCE_TARGETS_BK entity);


		public override FORM_INSTANCE_TARGETS_BK Assemble(FORM_INSTANCE_TARGETS_BK entity, FORM_INSTANCE_TARGETS_BKDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_INSTANCE_TARGETS_BK();
			}
			entity.TARGETID = dto.TARGETID;
			entity.INSTANCE_ID = dto.INSTANCE_ID;
			entity.TARGETORDER = dto.TARGETORDER;
			entity.STATUS = dto.STATUS;
			entity.TARGETTYPE = dto.TARGETTYPE;
			entity.ALERTTIME = dto.ALERTTIME;
			return entity;
		}
		public override FORM_INSTANCE_TARGETS_BKDto Assemble(FORM_INSTANCE_TARGETS_BK entity)
		{
			FORM_INSTANCE_TARGETS_BKDto dto = new FORM_INSTANCE_TARGETS_BKDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TARGETID = entity.TARGETID;
			dto.INSTANCE_ID = entity.INSTANCE_ID;
			dto.TARGETORDER = entity.TARGETORDER;
			dto.STATUS = entity.STATUS;
			dto.TARGETTYPE = entity.TARGETTYPE;
			dto.ALERTTIME = entity.ALERTTIME;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_INSTANCE_TARGETAssembler : FORM_INSTANCE_TARGETAssemblerBase, IFORM_INSTANCE_TARGETAssembler
	{
	}


	public partial interface IFORM_INSTANCE_TARGETAssembler : IEntityAssembler<FORM_INSTANCE_TARGETDto, FORM_INSTANCE_TARGET>
	{
	}


	public partial class FORM_INSTANCE_TARGETAssemblerBase : EntityAssembler<FORM_INSTANCE_TARGETDto, FORM_INSTANCE_TARGET>
	{
		partial void OnDTOAssembled(FORM_INSTANCE_TARGETDto dto);
		partial void OnEntityAssembled(FORM_INSTANCE_TARGET entity);


		public override FORM_INSTANCE_TARGET Assemble(FORM_INSTANCE_TARGET entity, FORM_INSTANCE_TARGETDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_INSTANCE_TARGET();
			}
			entity.TARGETID = dto.TARGETID;
			entity.INSTANCE_ID = dto.INSTANCE_ID;
			entity.TARGETORDER = dto.TARGETORDER;
			entity.STATUS = dto.STATUS;
			entity.TARGETTYPE = dto.TARGETTYPE;
			entity.ALERTTIME = dto.ALERTTIME;
			entity.TARGETSOURCE = dto.TARGETSOURCE;
			return entity;
		}
		public override FORM_INSTANCE_TARGETDto Assemble(FORM_INSTANCE_TARGET entity)
		{
			FORM_INSTANCE_TARGETDto dto = new FORM_INSTANCE_TARGETDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TARGETID = entity.TARGETID;
			dto.INSTANCE_ID = entity.INSTANCE_ID;
			dto.TARGETORDER = entity.TARGETORDER;
			dto.STATUS = entity.STATUS;
			dto.TARGETTYPE = entity.TARGETTYPE;
			dto.ALERTTIME = entity.ALERTTIME;
			dto.TARGETSOURCE = entity.TARGETSOURCE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_INSTANCE_RETURN_LOGAssembler : FORM_INSTANCE_RETURN_LOGAssemblerBase, IFORM_INSTANCE_RETURN_LOGAssembler
	{
	}


	public partial interface IFORM_INSTANCE_RETURN_LOGAssembler : IEntityAssembler<FORM_INSTANCE_RETURN_LOGDto, FORM_INSTANCE_RETURN_LOG>
	{
	}


	public partial class FORM_INSTANCE_RETURN_LOGAssemblerBase : EntityAssembler<FORM_INSTANCE_RETURN_LOGDto, FORM_INSTANCE_RETURN_LOG>
	{
		partial void OnDTOAssembled(FORM_INSTANCE_RETURN_LOGDto dto);
		partial void OnEntityAssembled(FORM_INSTANCE_RETURN_LOG entity);


		public override FORM_INSTANCE_RETURN_LOG Assemble(FORM_INSTANCE_RETURN_LOG entity, FORM_INSTANCE_RETURN_LOGDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_INSTANCE_RETURN_LOG();
			}
			entity.LOG_ID = dto.LOG_ID;
			entity.INSTANCE_ID = dto.INSTANCE_ID;
			entity.RETURN_REASON = dto.RETURN_REASON;
			entity.RETURN_TIME = dto.RETURN_TIME;
			entity.RETURN_EMP = dto.RETURN_EMP;
			return entity;
		}
		public override FORM_INSTANCE_RETURN_LOGDto Assemble(FORM_INSTANCE_RETURN_LOG entity)
		{
			FORM_INSTANCE_RETURN_LOGDto dto = new FORM_INSTANCE_RETURN_LOGDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.LOG_ID = entity.LOG_ID;
			dto.INSTANCE_ID = entity.INSTANCE_ID;
			dto.RETURN_REASON = entity.RETURN_REASON;
			dto.RETURN_TIME = entity.RETURN_TIME;
			dto.RETURN_EMP = entity.RETURN_EMP;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_INSTANCE_EXPRESSIONS_BKAssembler : FORM_INSTANCE_EXPRESSIONS_BKAssemblerBase, IFORM_INSTANCE_EXPRESSIONS_BKAssembler
	{
	}


	public partial interface IFORM_INSTANCE_EXPRESSIONS_BKAssembler : IEntityAssembler<FORM_INSTANCE_EXPRESSIONS_BKDto, FORM_INSTANCE_EXPRESSIONS_BK>
	{
	}


	public partial class FORM_INSTANCE_EXPRESSIONS_BKAssemblerBase : EntityAssembler<FORM_INSTANCE_EXPRESSIONS_BKDto, FORM_INSTANCE_EXPRESSIONS_BK>
	{
		partial void OnDTOAssembled(FORM_INSTANCE_EXPRESSIONS_BKDto dto);
		partial void OnEntityAssembled(FORM_INSTANCE_EXPRESSIONS_BK entity);


		public override FORM_INSTANCE_EXPRESSIONS_BK Assemble(FORM_INSTANCE_EXPRESSIONS_BK entity, FORM_INSTANCE_EXPRESSIONS_BKDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_INSTANCE_EXPRESSIONS_BK();
			}
			entity.INSTANCE_EXPRESSION_ID = dto.INSTANCE_EXPRESSION_ID;
			entity.TEMPLATE_EXPRESSION_ID = dto.TEMPLATE_EXPRESSION_ID;
			entity.INSTANCE_ID = dto.INSTANCE_ID;
			entity.EXPRESSION_VALUE = dto.EXPRESSION_VALUE;
			return entity;
		}
		public override FORM_INSTANCE_EXPRESSIONS_BKDto Assemble(FORM_INSTANCE_EXPRESSIONS_BK entity)
		{
			FORM_INSTANCE_EXPRESSIONS_BKDto dto = new FORM_INSTANCE_EXPRESSIONS_BKDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.INSTANCE_EXPRESSION_ID = entity.INSTANCE_EXPRESSION_ID;
			dto.TEMPLATE_EXPRESSION_ID = entity.TEMPLATE_EXPRESSION_ID;
			dto.INSTANCE_ID = entity.INSTANCE_ID;
			dto.EXPRESSION_VALUE = entity.EXPRESSION_VALUE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_INSTANCE_EXPRESSIONAssembler : FORM_INSTANCE_EXPRESSIONAssemblerBase, IFORM_INSTANCE_EXPRESSIONAssembler
	{
	}


	public partial interface IFORM_INSTANCE_EXPRESSIONAssembler : IEntityAssembler<FORM_INSTANCE_EXPRESSIONDto, FORM_INSTANCE_EXPRESSION>
	{
	}


	public partial class FORM_INSTANCE_EXPRESSIONAssemblerBase : EntityAssembler<FORM_INSTANCE_EXPRESSIONDto, FORM_INSTANCE_EXPRESSION>
	{
		partial void OnDTOAssembled(FORM_INSTANCE_EXPRESSIONDto dto);
		partial void OnEntityAssembled(FORM_INSTANCE_EXPRESSION entity);


		public override FORM_INSTANCE_EXPRESSION Assemble(FORM_INSTANCE_EXPRESSION entity, FORM_INSTANCE_EXPRESSIONDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_INSTANCE_EXPRESSION();
			}
			entity.INSTANCE_EXPRESSION_ID = dto.INSTANCE_EXPRESSION_ID;
			entity.TEMPLATE_EXPRESSION_ID = dto.TEMPLATE_EXPRESSION_ID;
			entity.INSTANCE_ID = dto.INSTANCE_ID;
			entity.EXPRESSION_VALUE = dto.EXPRESSION_VALUE;
			return entity;
		}
		public override FORM_INSTANCE_EXPRESSIONDto Assemble(FORM_INSTANCE_EXPRESSION entity)
		{
			FORM_INSTANCE_EXPRESSIONDto dto = new FORM_INSTANCE_EXPRESSIONDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.INSTANCE_EXPRESSION_ID = entity.INSTANCE_EXPRESSION_ID;
			dto.TEMPLATE_EXPRESSION_ID = entity.TEMPLATE_EXPRESSION_ID;
			dto.INSTANCE_ID = entity.INSTANCE_ID;
			dto.EXPRESSION_VALUE = entity.EXPRESSION_VALUE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_INSTANCE_ELEMENTS_BKAssembler : FORM_INSTANCE_ELEMENTS_BKAssemblerBase, IFORM_INSTANCE_ELEMENTS_BKAssembler
	{
	}


	public partial interface IFORM_INSTANCE_ELEMENTS_BKAssembler : IEntityAssembler<FORM_INSTANCE_ELEMENTS_BKDto, FORM_INSTANCE_ELEMENTS_BK>
	{
	}


	public partial class FORM_INSTANCE_ELEMENTS_BKAssemblerBase : EntityAssembler<FORM_INSTANCE_ELEMENTS_BKDto, FORM_INSTANCE_ELEMENTS_BK>
	{
		partial void OnDTOAssembled(FORM_INSTANCE_ELEMENTS_BKDto dto);
		partial void OnEntityAssembled(FORM_INSTANCE_ELEMENTS_BK entity);


		public override FORM_INSTANCE_ELEMENTS_BK Assemble(FORM_INSTANCE_ELEMENTS_BK entity, FORM_INSTANCE_ELEMENTS_BKDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_INSTANCE_ELEMENTS_BK();
			}
			entity.INSTANCE_ELEMENT_ID = dto.INSTANCE_ELEMENT_ID;
			entity.INSTANCE_ID = dto.INSTANCE_ID;
			entity.ID = dto.ID;
			entity.NAME = dto.NAME;
			entity.ELEMENT_VALUE = dto.ELEMENT_VALUE;
			return entity;
		}
		public override FORM_INSTANCE_ELEMENTS_BKDto Assemble(FORM_INSTANCE_ELEMENTS_BK entity)
		{
			FORM_INSTANCE_ELEMENTS_BKDto dto = new FORM_INSTANCE_ELEMENTS_BKDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.INSTANCE_ELEMENT_ID = entity.INSTANCE_ELEMENT_ID;
			dto.INSTANCE_ID = entity.INSTANCE_ID;
			dto.ID = entity.ID;
			dto.NAME = entity.NAME;
			dto.ELEMENT_VALUE = entity.ELEMENT_VALUE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_INSTANCE_ELEMENTAssembler : FORM_INSTANCE_ELEMENTAssemblerBase, IFORM_INSTANCE_ELEMENTAssembler
	{
	}


	public partial interface IFORM_INSTANCE_ELEMENTAssembler : IEntityAssembler<FORM_INSTANCE_ELEMENTDto, FORM_INSTANCE_ELEMENT>
	{
	}


	public partial class FORM_INSTANCE_ELEMENTAssemblerBase : EntityAssembler<FORM_INSTANCE_ELEMENTDto, FORM_INSTANCE_ELEMENT>
	{
		partial void OnDTOAssembled(FORM_INSTANCE_ELEMENTDto dto);
		partial void OnEntityAssembled(FORM_INSTANCE_ELEMENT entity);


		public override FORM_INSTANCE_ELEMENT Assemble(FORM_INSTANCE_ELEMENT entity, FORM_INSTANCE_ELEMENTDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_INSTANCE_ELEMENT();
			}
			entity.INSTANCE_ELEMENT_ID = dto.INSTANCE_ELEMENT_ID;
			entity.INSTANCE_ID = dto.INSTANCE_ID;
			entity.ID = dto.ID;
			entity.NAME = dto.NAME;
			entity.ELEMENT_VALUE = dto.ELEMENT_VALUE;
			entity.SELECT_VALUE = dto.SELECT_VALUE;
			return entity;
		}
		public override FORM_INSTANCE_ELEMENTDto Assemble(FORM_INSTANCE_ELEMENT entity)
		{
			FORM_INSTANCE_ELEMENTDto dto = new FORM_INSTANCE_ELEMENTDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.INSTANCE_ELEMENT_ID = entity.INSTANCE_ELEMENT_ID;
			dto.INSTANCE_ID = entity.INSTANCE_ID;
			dto.ID = entity.ID;
			dto.NAME = entity.NAME;
			dto.ELEMENT_VALUE = entity.ELEMENT_VALUE;
			dto.SELECT_VALUE = entity.SELECT_VALUE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_INSTANCE_BLOCKAssembler : FORM_INSTANCE_BLOCKAssemblerBase, IFORM_INSTANCE_BLOCKAssembler
	{
	}


	public partial interface IFORM_INSTANCE_BLOCKAssembler : IEntityAssembler<FORM_INSTANCE_BLOCKDto, FORM_INSTANCE_BLOCK>
	{
	}


	public partial class FORM_INSTANCE_BLOCKAssemblerBase : EntityAssembler<FORM_INSTANCE_BLOCKDto, FORM_INSTANCE_BLOCK>
	{
		partial void OnDTOAssembled(FORM_INSTANCE_BLOCKDto dto);
		partial void OnEntityAssembled(FORM_INSTANCE_BLOCK entity);


		public override FORM_INSTANCE_BLOCK Assemble(FORM_INSTANCE_BLOCK entity, FORM_INSTANCE_BLOCKDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_INSTANCE_BLOCK();
			}
			entity.INSTANCE_BLOCKS_ID = dto.INSTANCE_BLOCKS_ID;
			entity.INSTANCE_ID = dto.INSTANCE_ID;
			entity.TABLE_BLOCK_ID = dto.TABLE_BLOCK_ID;
			entity.BLOCK_CONTENT = dto.BLOCK_CONTENT;
			entity.TABLE_BLOCK_TITLE = dto.TABLE_BLOCK_TITLE;
			return entity;
		}
		public override FORM_INSTANCE_BLOCKDto Assemble(FORM_INSTANCE_BLOCK entity)
		{
			FORM_INSTANCE_BLOCKDto dto = new FORM_INSTANCE_BLOCKDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.INSTANCE_BLOCKS_ID = entity.INSTANCE_BLOCKS_ID;
			dto.INSTANCE_ID = entity.INSTANCE_ID;
			dto.TABLE_BLOCK_ID = entity.TABLE_BLOCK_ID;
			dto.BLOCK_CONTENT = entity.BLOCK_CONTENT;
			dto.TABLE_BLOCK_TITLE = entity.TABLE_BLOCK_TITLE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_INSTANCE_ATTACHMENTAssembler : FORM_INSTANCE_ATTACHMENTAssemblerBase, IFORM_INSTANCE_ATTACHMENTAssembler
	{
	}


	public partial interface IFORM_INSTANCE_ATTACHMENTAssembler : IEntityAssembler<FORM_INSTANCE_ATTACHMENTDto, FORM_INSTANCE_ATTACHMENT>
	{
	}


	public partial class FORM_INSTANCE_ATTACHMENTAssemblerBase : EntityAssembler<FORM_INSTANCE_ATTACHMENTDto, FORM_INSTANCE_ATTACHMENT>
	{
		partial void OnDTOAssembled(FORM_INSTANCE_ATTACHMENTDto dto);
		partial void OnEntityAssembled(FORM_INSTANCE_ATTACHMENT entity);


		public override FORM_INSTANCE_ATTACHMENT Assemble(FORM_INSTANCE_ATTACHMENT entity, FORM_INSTANCE_ATTACHMENTDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_INSTANCE_ATTACHMENT();
			}
			entity.ATTACHMENT_ID = dto.ATTACHMENT_ID;
			entity.INSTANCE_ID = dto.INSTANCE_ID;
			entity.ATTACHMENT = dto.ATTACHMENT;
			entity.NAME = dto.NAME;
			entity.FILENAME = dto.FILENAME;
			return entity;
		}
		public override FORM_INSTANCE_ATTACHMENTDto Assemble(FORM_INSTANCE_ATTACHMENT entity)
		{
			FORM_INSTANCE_ATTACHMENTDto dto = new FORM_INSTANCE_ATTACHMENTDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ATTACHMENT_ID = entity.ATTACHMENT_ID;
			dto.INSTANCE_ID = entity.INSTANCE_ID;
			dto.ATTACHMENT = entity.ATTACHMENT;
			dto.NAME = entity.NAME;
			dto.FILENAME = entity.FILENAME;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FIXMEMBERDATUMAssembler : FIXMEMBERDATUMAssemblerBase, IFIXMEMBERDATUMAssembler
	{
	}


	public partial interface IFIXMEMBERDATUMAssembler : IEntityAssembler<FIXMEMBERDATUMDto, FIXMEMBERDATUM>
	{
	}


	public partial class FIXMEMBERDATUMAssemblerBase : EntityAssembler<FIXMEMBERDATUMDto, FIXMEMBERDATUM>
	{
		partial void OnDTOAssembled(FIXMEMBERDATUMDto dto);
		partial void OnEntityAssembled(FIXMEMBERDATUM entity);


		public override FIXMEMBERDATUM Assemble(FIXMEMBERDATUM entity, FIXMEMBERDATUMDto dto)
		{
			if (entity == null)
			{
				entity = new FIXMEMBERDATUM();
			}
			entity.學號 = dto.學號;
			entity.姓名 = dto.姓名;
			entity.職稱 = dto.職稱;
			entity.起始日 = dto.起始日;
			entity.結束日 = dto.結束日;
			entity.組別 = dto.組別;
			entity.說明 = dto.說明;
			entity.員工編號 = dto.員工編號;
			return entity;
		}
		public override FIXMEMBERDATUMDto Assemble(FIXMEMBERDATUM entity)
		{
			FIXMEMBERDATUMDto dto = new FIXMEMBERDATUMDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.學號 = entity.學號;
			dto.姓名 = entity.姓名;
			dto.職稱 = entity.職稱;
			dto.起始日 = entity.起始日;
			dto.結束日 = entity.結束日;
			dto.組別 = entity.組別;
			dto.說明 = entity.說明;
			dto.員工編號 = entity.員工編號;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class ELEARNINGITEMAssembler : ELEARNINGITEMAssemblerBase, IELEARNINGITEMAssembler
	{
	}


	public partial interface IELEARNINGITEMAssembler : IEntityAssembler<ELEARNINGITEMDto, ELEARNINGITEM>
	{
	}


	public partial class ELEARNINGITEMAssemblerBase : EntityAssembler<ELEARNINGITEMDto, ELEARNINGITEM>
	{
		partial void OnDTOAssembled(ELEARNINGITEMDto dto);
		partial void OnEntityAssembled(ELEARNINGITEM entity);


		public override ELEARNINGITEM Assemble(ELEARNINGITEM entity, ELEARNINGITEMDto dto)
		{
			if (entity == null)
			{
				entity = new ELEARNINGITEM();
			}
			entity.ITEMID = dto.ITEMID;
			entity.CLASSID = dto.CLASSID;
			entity.ITEMNAME = dto.ITEMNAME;
			entity.ITEMORDER = dto.ITEMORDER;
			entity.EXITEMID = dto.EXITEMID;
			entity.ITEMTYPE = dto.ITEMTYPE;
			entity.REFID = dto.REFID;
			entity.REFURL = dto.REFURL;
			entity.MAXEXAMTIMES = dto.MAXEXAMTIMES;
			return entity;
		}
		public override ELEARNINGITEMDto Assemble(ELEARNINGITEM entity)
		{
			ELEARNINGITEMDto dto = new ELEARNINGITEMDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ITEMID = entity.ITEMID;
			dto.CLASSID = entity.CLASSID;
			dto.ITEMNAME = entity.ITEMNAME;
			dto.ITEMORDER = entity.ITEMORDER;
			dto.EXITEMID = entity.EXITEMID;
			dto.ITEMTYPE = entity.ITEMTYPE;
			dto.REFID = entity.REFID;
			dto.REFURL = entity.REFURL;
			dto.MAXEXAMTIMES = entity.MAXEXAMTIMES;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class ELEARNINGEMPITEMLOGAssembler : ELEARNINGEMPITEMLOGAssemblerBase, IELEARNINGEMPITEMLOGAssembler
	{
	}


	public partial interface IELEARNINGEMPITEMLOGAssembler : IEntityAssembler<ELEARNINGEMPITEMLOGDto, ELEARNINGEMPITEMLOG>
	{
	}


	public partial class ELEARNINGEMPITEMLOGAssemblerBase : EntityAssembler<ELEARNINGEMPITEMLOGDto, ELEARNINGEMPITEMLOG>
	{
		partial void OnDTOAssembled(ELEARNINGEMPITEMLOGDto dto);
		partial void OnEntityAssembled(ELEARNINGEMPITEMLOG entity);


		public override ELEARNINGEMPITEMLOG Assemble(ELEARNINGEMPITEMLOG entity, ELEARNINGEMPITEMLOGDto dto)
		{
			if (entity == null)
			{
				entity = new ELEARNINGEMPITEMLOG();
			}
			entity.ITEMID = dto.ITEMID;
			entity.EMPCODE = dto.EMPCODE;
			entity.REFID = dto.REFID;
			entity.EXECUTETIME = dto.EXECUTETIME;
			entity.STATUS = dto.STATUS;
			entity.EXECUTETIMES = dto.EXECUTETIMES;
			return entity;
		}
		public override ELEARNINGEMPITEMLOGDto Assemble(ELEARNINGEMPITEMLOG entity)
		{
			ELEARNINGEMPITEMLOGDto dto = new ELEARNINGEMPITEMLOGDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ITEMID = entity.ITEMID;
			dto.EMPCODE = entity.EMPCODE;
			dto.REFID = entity.REFID;
			dto.EXECUTETIME = entity.EXECUTETIME;
			dto.STATUS = entity.STATUS;
			dto.EXECUTETIMES = entity.EXECUTETIMES;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class ELEARNINGEMPITEMAssembler : ELEARNINGEMPITEMAssemblerBase, IELEARNINGEMPITEMAssembler
	{
	}


	public partial interface IELEARNINGEMPITEMAssembler : IEntityAssembler<ELEARNINGEMPITEMDto, ELEARNINGEMPITEM>
	{
	}


	public partial class ELEARNINGEMPITEMAssemblerBase : EntityAssembler<ELEARNINGEMPITEMDto, ELEARNINGEMPITEM>
	{
		partial void OnDTOAssembled(ELEARNINGEMPITEMDto dto);
		partial void OnEntityAssembled(ELEARNINGEMPITEM entity);


		public override ELEARNINGEMPITEM Assemble(ELEARNINGEMPITEM entity, ELEARNINGEMPITEMDto dto)
		{
			if (entity == null)
			{
				entity = new ELEARNINGEMPITEM();
			}
			entity.ITEMID = dto.ITEMID;
			entity.EMPCODE = dto.EMPCODE;
			entity.REFID = dto.REFID;
			entity.EXECUTETIME = dto.EXECUTETIME;
			entity.STATUS = dto.STATUS;
			return entity;
		}
		public override ELEARNINGEMPITEMDto Assemble(ELEARNINGEMPITEM entity)
		{
			ELEARNINGEMPITEMDto dto = new ELEARNINGEMPITEMDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ITEMID = entity.ITEMID;
			dto.EMPCODE = entity.EMPCODE;
			dto.REFID = entity.REFID;
			dto.EXECUTETIME = entity.EXECUTETIME;
			dto.STATUS = entity.STATUS;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class ELEARNINGCLASSAssembler : ELEARNINGCLASSAssemblerBase, IELEARNINGCLASSAssembler
	{
	}


	public partial interface IELEARNINGCLASSAssembler : IEntityAssembler<ELEARNINGCLASSDto, ELEARNINGCLASS>
	{
	}


	public partial class ELEARNINGCLASSAssemblerBase : EntityAssembler<ELEARNINGCLASSDto, ELEARNINGCLASS>
	{
		partial void OnDTOAssembled(ELEARNINGCLASSDto dto);
		partial void OnEntityAssembled(ELEARNINGCLASS entity);


		public override ELEARNINGCLASS Assemble(ELEARNINGCLASS entity, ELEARNINGCLASSDto dto)
		{
			if (entity == null)
			{
				entity = new ELEARNINGCLASS();
			}
			entity.CLASSID = dto.CLASSID;
			entity.CLASSNAME = dto.CLASSNAME;
			entity.ALLOWBOOKING = dto.ALLOWBOOKING;
			entity.CREATER = dto.CREATER;
			entity.CREATEDATE = dto.CREATEDATE;
			entity.SDATE = dto.SDATE;
			entity.EDATE = dto.EDATE;
			entity.STATUS = dto.STATUS;
			return entity;
		}
		public override ELEARNINGCLASSDto Assemble(ELEARNINGCLASS entity)
		{
			ELEARNINGCLASSDto dto = new ELEARNINGCLASSDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.CLASSID = entity.CLASSID;
			dto.CLASSNAME = entity.CLASSNAME;
			dto.ALLOWBOOKING = entity.ALLOWBOOKING;
			dto.CREATER = entity.CREATER;
			dto.CREATEDATE = entity.CREATEDATE;
			dto.SDATE = entity.SDATE;
			dto.EDATE = entity.EDATE;
			dto.STATUS = entity.STATUS;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class ELEARNINGBOOKINGAssembler : ELEARNINGBOOKINGAssemblerBase, IELEARNINGBOOKINGAssembler
	{
	}


	public partial interface IELEARNINGBOOKINGAssembler : IEntityAssembler<ELEARNINGBOOKINGDto, ELEARNINGBOOKING>
	{
	}


	public partial class ELEARNINGBOOKINGAssemblerBase : EntityAssembler<ELEARNINGBOOKINGDto, ELEARNINGBOOKING>
	{
		partial void OnDTOAssembled(ELEARNINGBOOKINGDto dto);
		partial void OnEntityAssembled(ELEARNINGBOOKING entity);


		public override ELEARNINGBOOKING Assemble(ELEARNINGBOOKING entity, ELEARNINGBOOKINGDto dto)
		{
			if (entity == null)
			{
				entity = new ELEARNINGBOOKING();
			}
			entity.CLASSID = dto.CLASSID;
			entity.EMPCODE = dto.EMPCODE;
			entity.BOOKTIME = dto.BOOKTIME;
			entity.STATUS = dto.STATUS;
			return entity;
		}
		public override ELEARNINGBOOKINGDto Assemble(ELEARNINGBOOKING entity)
		{
			ELEARNINGBOOKINGDto dto = new ELEARNINGBOOKINGDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.CLASSID = entity.CLASSID;
			dto.EMPCODE = entity.EMPCODE;
			dto.BOOKTIME = entity.BOOKTIME;
			dto.STATUS = entity.STATUS;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUTERMFORMREQTEMPLATEDETAssembler : EDUTERMFORMREQTEMPLATEDETAssemblerBase, IEDUTERMFORMREQTEMPLATEDETAssembler
	{
	}


	public partial interface IEDUTERMFORMREQTEMPLATEDETAssembler : IEntityAssembler<EDUTERMFORMREQTEMPLATEDETDto, EDUTERMFORMREQTEMPLATEDET>
	{
	}


	public partial class EDUTERMFORMREQTEMPLATEDETAssemblerBase : EntityAssembler<EDUTERMFORMREQTEMPLATEDETDto, EDUTERMFORMREQTEMPLATEDET>
	{
		partial void OnDTOAssembled(EDUTERMFORMREQTEMPLATEDETDto dto);
		partial void OnEntityAssembled(EDUTERMFORMREQTEMPLATEDET entity);


		public override EDUTERMFORMREQTEMPLATEDET Assemble(EDUTERMFORMREQTEMPLATEDET entity, EDUTERMFORMREQTEMPLATEDETDto dto)
		{
			if (entity == null)
			{
				entity = new EDUTERMFORMREQTEMPLATEDET();
			}
			entity.DETID = dto.DETID;
			entity.TEMPLATEID = dto.TEMPLATEID;
			entity.REQTYPE = dto.REQTYPE;
			entity.REQID = dto.REQID;
			entity.REQCOUNT = dto.REQCOUNT;
			entity.NEEDPASS = dto.NEEDPASS;
			return entity;
		}
		public override EDUTERMFORMREQTEMPLATEDETDto Assemble(EDUTERMFORMREQTEMPLATEDET entity)
		{
			EDUTERMFORMREQTEMPLATEDETDto dto = new EDUTERMFORMREQTEMPLATEDETDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.DETID = entity.DETID;
			dto.TEMPLATEID = entity.TEMPLATEID;
			dto.REQTYPE = entity.REQTYPE;
			dto.REQID = entity.REQID;
			dto.REQCOUNT = entity.REQCOUNT;
			dto.NEEDPASS = entity.NEEDPASS;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUTERMFORMREQTEMPLATEAssembler : EDUTERMFORMREQTEMPLATEAssemblerBase, IEDUTERMFORMREQTEMPLATEAssembler
	{
	}


	public partial interface IEDUTERMFORMREQTEMPLATEAssembler : IEntityAssembler<EDUTERMFORMREQTEMPLATEDto, EDUTERMFORMREQTEMPLATE>
	{
	}


	public partial class EDUTERMFORMREQTEMPLATEAssemblerBase : EntityAssembler<EDUTERMFORMREQTEMPLATEDto, EDUTERMFORMREQTEMPLATE>
	{
		partial void OnDTOAssembled(EDUTERMFORMREQTEMPLATEDto dto);
		partial void OnEntityAssembled(EDUTERMFORMREQTEMPLATE entity);


		public override EDUTERMFORMREQTEMPLATE Assemble(EDUTERMFORMREQTEMPLATE entity, EDUTERMFORMREQTEMPLATEDto dto)
		{
			if (entity == null)
			{
				entity = new EDUTERMFORMREQTEMPLATE();
			}
			entity.TEMPLATEID = dto.TEMPLATEID;
			entity.TEMPLATENAME = dto.TEMPLATENAME;
			entity.CREATER = dto.CREATER;
			entity.CREATEDATE = dto.CREATEDATE;
			entity.MODIFIER = dto.MODIFIER;
			entity.MODIFYDATE = dto.MODIFYDATE;
			return entity;
		}
		public override EDUTERMFORMREQTEMPLATEDto Assemble(EDUTERMFORMREQTEMPLATE entity)
		{
			EDUTERMFORMREQTEMPLATEDto dto = new EDUTERMFORMREQTEMPLATEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TEMPLATEID = entity.TEMPLATEID;
			dto.TEMPLATENAME = entity.TEMPLATENAME;
			dto.CREATER = entity.CREATER;
			dto.CREATEDATE = entity.CREATEDATE;
			dto.MODIFIER = entity.MODIFIER;
			dto.MODIFYDATE = entity.MODIFYDATE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUTERMFORMREQAssembler : EDUTERMFORMREQAssemblerBase, IEDUTERMFORMREQAssembler
	{
	}


	public partial interface IEDUTERMFORMREQAssembler : IEntityAssembler<EDUTERMFORMREQDto, EDUTERMFORMREQ>
	{
	}


	public partial class EDUTERMFORMREQAssemblerBase : EntityAssembler<EDUTERMFORMREQDto, EDUTERMFORMREQ>
	{
		partial void OnDTOAssembled(EDUTERMFORMREQDto dto);
		partial void OnEntityAssembled(EDUTERMFORMREQ entity);


		public override EDUTERMFORMREQ Assemble(EDUTERMFORMREQ entity, EDUTERMFORMREQDto dto)
		{
			if (entity == null)
			{
				entity = new EDUTERMFORMREQ();
			}
			entity.ID = dto.ID;
			entity.EDUTERMID = dto.EDUTERMID;
			entity.REQTYPE = dto.REQTYPE;
			entity.REQID = dto.REQID;
			entity.REQCOUNT = dto.REQCOUNT;
			entity.CREATEDATE = dto.CREATEDATE;
			entity.CREATER = dto.CREATER;
			entity.NEEDPASS = dto.NEEDPASS;
			return entity;
		}
		public override EDUTERMFORMREQDto Assemble(EDUTERMFORMREQ entity)
		{
			EDUTERMFORMREQDto dto = new EDUTERMFORMREQDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.EDUTERMID = entity.EDUTERMID;
			dto.REQTYPE = entity.REQTYPE;
			dto.REQID = entity.REQID;
			dto.REQCOUNT = entity.REQCOUNT;
			dto.CREATEDATE = entity.CREATEDATE;
			dto.CREATER = entity.CREATER;
			dto.NEEDPASS = entity.NEEDPASS;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUTERMFORMINSTANCEAssembler : EDUTERMFORMINSTANCEAssemblerBase, IEDUTERMFORMINSTANCEAssembler
	{
	}


	public partial interface IEDUTERMFORMINSTANCEAssembler : IEntityAssembler<EDUTERMFORMINSTANCEDto, EDUTERMFORMINSTANCE>
	{
	}


	public partial class EDUTERMFORMINSTANCEAssemblerBase : EntityAssembler<EDUTERMFORMINSTANCEDto, EDUTERMFORMINSTANCE>
	{
		partial void OnDTOAssembled(EDUTERMFORMINSTANCEDto dto);
		partial void OnEntityAssembled(EDUTERMFORMINSTANCE entity);


		public override EDUTERMFORMINSTANCE Assemble(EDUTERMFORMINSTANCE entity, EDUTERMFORMINSTANCEDto dto)
		{
			if (entity == null)
			{
				entity = new EDUTERMFORMINSTANCE();
			}
			entity.EDUTERMID = dto.EDUTERMID;
			entity.INSTANCE_ID = dto.INSTANCE_ID;
			return entity;
		}
		public override EDUTERMFORMINSTANCEDto Assemble(EDUTERMFORMINSTANCE entity)
		{
			EDUTERMFORMINSTANCEDto dto = new EDUTERMFORMINSTANCEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EDUTERMID = entity.EDUTERMID;
			dto.INSTANCE_ID = entity.INSTANCE_ID;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUTERMAssembler : EDUTERMAssemblerBase, IEDUTERMAssembler
	{
	}


	public partial interface IEDUTERMAssembler : IEntityAssembler<EDUTERMDto, EDUTERM>
	{
	}


	public partial class EDUTERMAssemblerBase : EntityAssembler<EDUTERMDto, EDUTERM>
	{
		partial void OnDTOAssembled(EDUTERMDto dto);
		partial void OnEntityAssembled(EDUTERM entity);


		public override EDUTERM Assemble(EDUTERM entity, EDUTERMDto dto)
		{
			if (entity == null)
			{
				entity = new EDUTERM();
			}
			entity.EDUTERMID = dto.EDUTERMID;
			entity.EDUSTOPID = dto.EDUSTOPID;
			entity.EDUSTOPCODE = dto.EDUSTOPCODE;
			entity.NAME = dto.NAME;
			entity.DEPCODE = dto.DEPCODE;
			entity.NSTATION = dto.NSTATION;
			entity.CORCHID = dto.CORCHID;
			entity.CAPACITY = dto.CAPACITY;
			entity.DATEFROM = dto.DATEFROM;
			entity.DATETO = dto.DATETO;
			entity.ISCLASS = dto.ISCLASS;
			entity.ROUNDCODE = dto.ROUNDCODE;
			entity.STATUS = dto.STATUS;
			entity.DES = dto.DES;
			entity.MEMBERTYPE = dto.MEMBERTYPE;
			entity.TEACHER = dto.TEACHER;
			entity.EBM = dto.EBM;
			entity.CREATER = dto.CREATER;
			entity.PARENTEDUTERMID = dto.PARENTEDUTERMID;
			entity.EDUYEAR = dto.EDUYEAR;
			entity.JOBCODE = dto.JOBCODE;
			entity.HOSPITAL = dto.HOSPITAL;
			entity.DEPARTMENT = dto.DEPARTMENT;
			entity.HASMEMBER = dto.HASMEMBER;
			entity.HASTEACHER = dto.HASTEACHER;
			entity.SCHOOLSEQNO1 = dto.SCHOOLSEQNO1;
			entity.SCHOOLSEQNO2 = dto.SCHOOLSEQNO2;
			return entity;
		}
		public override EDUTERMDto Assemble(EDUTERM entity)
		{
			EDUTERMDto dto = new EDUTERMDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EDUTERMID = entity.EDUTERMID;
			dto.EDUSTOPID = entity.EDUSTOPID;
			dto.EDUSTOPCODE = entity.EDUSTOPCODE;
			dto.NAME = entity.NAME;
			dto.DEPCODE = entity.DEPCODE;
			dto.NSTATION = entity.NSTATION;
			dto.CORCHID = entity.CORCHID;
			dto.CAPACITY = entity.CAPACITY;
			dto.DATEFROM = entity.DATEFROM;
			dto.DATETO = entity.DATETO;
			dto.ISCLASS = entity.ISCLASS;
			dto.ROUNDCODE = entity.ROUNDCODE;
			dto.STATUS = entity.STATUS;
			dto.DES = entity.DES;
			dto.MEMBERTYPE = entity.MEMBERTYPE;
			dto.TEACHER = entity.TEACHER;
			dto.EBM = entity.EBM;
			dto.CREATER = entity.CREATER;
			dto.PARENTEDUTERMID = entity.PARENTEDUTERMID;
			dto.EDUYEAR = entity.EDUYEAR;
			dto.JOBCODE = entity.JOBCODE;
			dto.HOSPITAL = entity.HOSPITAL;
			dto.DEPARTMENT = entity.DEPARTMENT;
			dto.HASMEMBER = entity.HASMEMBER;
			dto.HASTEACHER = entity.HASTEACHER;
			dto.SCHOOLSEQNO1 = entity.SCHOOLSEQNO1;
			dto.SCHOOLSEQNO2 = entity.SCHOOLSEQNO2;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUTEAMRUNDOWNAssembler : EDUTEAMRUNDOWNAssemblerBase, IEDUTEAMRUNDOWNAssembler
	{
	}


	public partial interface IEDUTEAMRUNDOWNAssembler : IEntityAssembler<EDUTEAMRUNDOWNDto, EDUTEAMRUNDOWN>
	{
	}


	public partial class EDUTEAMRUNDOWNAssemblerBase : EntityAssembler<EDUTEAMRUNDOWNDto, EDUTEAMRUNDOWN>
	{
		partial void OnDTOAssembled(EDUTEAMRUNDOWNDto dto);
		partial void OnEntityAssembled(EDUTEAMRUNDOWN entity);


		public override EDUTEAMRUNDOWN Assemble(EDUTEAMRUNDOWN entity, EDUTEAMRUNDOWNDto dto)
		{
			if (entity == null)
			{
				entity = new EDUTEAMRUNDOWN();
			}
			entity.EDUTEAMSTOPID = dto.EDUTEAMSTOPID;
			entity.EDUTERMID = dto.EDUTERMID;
			entity.EDUTEAMCODE = dto.EDUTEAMCODE;
			entity.DATEFROM = dto.DATEFROM;
			entity.DATETO = dto.DATETO;
			return entity;
		}
		public override EDUTEAMRUNDOWNDto Assemble(EDUTEAMRUNDOWN entity)
		{
			EDUTEAMRUNDOWNDto dto = new EDUTEAMRUNDOWNDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EDUTEAMSTOPID = entity.EDUTEAMSTOPID;
			dto.EDUTERMID = entity.EDUTERMID;
			dto.EDUTEAMCODE = entity.EDUTEAMCODE;
			dto.DATEFROM = entity.DATEFROM;
			dto.DATETO = entity.DATETO;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUTEAMMEMBERRUNDOWN_TRANSLOGAssembler : EDUTEAMMEMBERRUNDOWN_TRANSLOGAssemblerBase, IEDUTEAMMEMBERRUNDOWN_TRANSLOGAssembler
	{
	}


	public partial interface IEDUTEAMMEMBERRUNDOWN_TRANSLOGAssembler : IEntityAssembler<EDUTEAMMEMBERRUNDOWN_TRANSLOGDto, EDUTEAMMEMBERRUNDOWN_TRANSLOG>
	{
	}


	public partial class EDUTEAMMEMBERRUNDOWN_TRANSLOGAssemblerBase : EntityAssembler<EDUTEAMMEMBERRUNDOWN_TRANSLOGDto, EDUTEAMMEMBERRUNDOWN_TRANSLOG>
	{
		partial void OnDTOAssembled(EDUTEAMMEMBERRUNDOWN_TRANSLOGDto dto);
		partial void OnEntityAssembled(EDUTEAMMEMBERRUNDOWN_TRANSLOG entity);


		public override EDUTEAMMEMBERRUNDOWN_TRANSLOG Assemble(EDUTEAMMEMBERRUNDOWN_TRANSLOG entity, EDUTEAMMEMBERRUNDOWN_TRANSLOGDto dto)
		{
			if (entity == null)
			{
				entity = new EDUTEAMMEMBERRUNDOWN_TRANSLOG();
			}
			entity.EDUTEAMMEMBERID = dto.EDUTEAMMEMBERID;
			entity.EDUTERMID = dto.EDUTERMID;
			entity.MEMBERID = dto.MEMBERID;
			entity.MEMBERCODE = dto.MEMBERCODE;
			entity.COACHID = dto.COACHID;
			entity.LOGID = dto.LOGID;
			entity.MODIFIER = dto.MODIFIER;
			entity.MODIFYTIME = dto.MODIFYTIME;
			entity.LOGTYPE = dto.LOGTYPE;
			return entity;
		}
		public override EDUTEAMMEMBERRUNDOWN_TRANSLOGDto Assemble(EDUTEAMMEMBERRUNDOWN_TRANSLOG entity)
		{
			EDUTEAMMEMBERRUNDOWN_TRANSLOGDto dto = new EDUTEAMMEMBERRUNDOWN_TRANSLOGDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EDUTEAMMEMBERID = entity.EDUTEAMMEMBERID;
			dto.EDUTERMID = entity.EDUTERMID;
			dto.MEMBERID = entity.MEMBERID;
			dto.MEMBERCODE = entity.MEMBERCODE;
			dto.COACHID = entity.COACHID;
			dto.LOGID = entity.LOGID;
			dto.MODIFIER = entity.MODIFIER;
			dto.MODIFYTIME = entity.MODIFYTIME;
			dto.LOGTYPE = entity.LOGTYPE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUTEAMMEMBERRUNDOWNAssembler : EDUTEAMMEMBERRUNDOWNAssemblerBase, IEDUTEAMMEMBERRUNDOWNAssembler
	{
	}


	public partial interface IEDUTEAMMEMBERRUNDOWNAssembler : IEntityAssembler<EDUTEAMMEMBERRUNDOWNDto, EDUTEAMMEMBERRUNDOWN>
	{
	}


	public partial class EDUTEAMMEMBERRUNDOWNAssemblerBase : EntityAssembler<EDUTEAMMEMBERRUNDOWNDto, EDUTEAMMEMBERRUNDOWN>
	{
		partial void OnDTOAssembled(EDUTEAMMEMBERRUNDOWNDto dto);
		partial void OnEntityAssembled(EDUTEAMMEMBERRUNDOWN entity);


		public override EDUTEAMMEMBERRUNDOWN Assemble(EDUTEAMMEMBERRUNDOWN entity, EDUTEAMMEMBERRUNDOWNDto dto)
		{
			if (entity == null)
			{
				entity = new EDUTEAMMEMBERRUNDOWN();
			}
			entity.EDUTEAMMEMBERID = dto.EDUTEAMMEMBERID;
			entity.EDUTERMID = dto.EDUTERMID;
			entity.MEMBERID = dto.MEMBERID;
			entity.MEMBERCODE = dto.MEMBERCODE;
			entity.COACHID = dto.COACHID;
			return entity;
		}
		public override EDUTEAMMEMBERRUNDOWNDto Assemble(EDUTEAMMEMBERRUNDOWN entity)
		{
			EDUTEAMMEMBERRUNDOWNDto dto = new EDUTEAMMEMBERRUNDOWNDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EDUTEAMMEMBERID = entity.EDUTEAMMEMBERID;
			dto.EDUTERMID = entity.EDUTERMID;
			dto.MEMBERID = entity.MEMBERID;
			dto.MEMBERCODE = entity.MEMBERCODE;
			dto.COACHID = entity.COACHID;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUTEAMMEMBERAssembler : EDUTEAMMEMBERAssemblerBase, IEDUTEAMMEMBERAssembler
	{
	}


	public partial interface IEDUTEAMMEMBERAssembler : IEntityAssembler<EDUTEAMMEMBERDto, EDUTEAMMEMBER>
	{
	}


	public partial class EDUTEAMMEMBERAssemblerBase : EntityAssembler<EDUTEAMMEMBERDto, EDUTEAMMEMBER>
	{
		partial void OnDTOAssembled(EDUTEAMMEMBERDto dto);
		partial void OnEntityAssembled(EDUTEAMMEMBER entity);


		public override EDUTEAMMEMBER Assemble(EDUTEAMMEMBER entity, EDUTEAMMEMBERDto dto)
		{
			if (entity == null)
			{
				entity = new EDUTEAMMEMBER();
			}
			entity.EDUTEAMMEMBERID = dto.EDUTEAMMEMBERID;
			entity.EDUTEAMCODE = dto.EDUTEAMCODE;
			entity.MEMBERCODE = dto.MEMBERCODE;
			entity.MEMBERID = dto.MEMBERID;
			entity.TUTOR = dto.TUTOR;
			entity.TUTOR2 = dto.TUTOR2;
			return entity;
		}
		public override EDUTEAMMEMBERDto Assemble(EDUTEAMMEMBER entity)
		{
			EDUTEAMMEMBERDto dto = new EDUTEAMMEMBERDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EDUTEAMMEMBERID = entity.EDUTEAMMEMBERID;
			dto.EDUTEAMCODE = entity.EDUTEAMCODE;
			dto.MEMBERCODE = entity.MEMBERCODE;
			dto.MEMBERID = entity.MEMBERID;
			dto.TUTOR = entity.TUTOR;
			dto.TUTOR2 = entity.TUTOR2;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUTEAMAssembler : EDUTEAMAssemblerBase, IEDUTEAMAssembler
	{
	}


	public partial interface IEDUTEAMAssembler : IEntityAssembler<EDUTEAMDto, EDUTEAM>
	{
	}


	public partial class EDUTEAMAssemblerBase : EntityAssembler<EDUTEAMDto, EDUTEAM>
	{
		partial void OnDTOAssembled(EDUTEAMDto dto);
		partial void OnEntityAssembled(EDUTEAM entity);


		public override EDUTEAM Assemble(EDUTEAM entity, EDUTEAMDto dto)
		{
			if (entity == null)
			{
				entity = new EDUTEAM();
			}
			entity.EDUTEAMCODE = dto.EDUTEAMCODE;
			entity.TEAMMEMBERTYPE = dto.TEAMMEMBERTYPE;
			entity.STATUS = dto.STATUS;
			entity.EDUTEAMNAME = dto.EDUTEAMNAME;
			entity.PARENTEDUTEAMCODE = dto.PARENTEDUTEAMCODE;
			entity.DISPLAYORDER = dto.DISPLAYORDER;
			entity.JOBCODE = dto.JOBCODE;
			return entity;
		}
		public override EDUTEAMDto Assemble(EDUTEAM entity)
		{
			EDUTEAMDto dto = new EDUTEAMDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EDUTEAMCODE = entity.EDUTEAMCODE;
			dto.TEAMMEMBERTYPE = entity.TEAMMEMBERTYPE;
			dto.STATUS = entity.STATUS;
			dto.EDUTEAMNAME = entity.EDUTEAMNAME;
			dto.PARENTEDUTEAMCODE = entity.PARENTEDUTEAMCODE;
			dto.DISPLAYORDER = entity.DISPLAYORDER;
			dto.JOBCODE = entity.JOBCODE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUTEACHERTYPEAssembler : EDUTEACHERTYPEAssemblerBase, IEDUTEACHERTYPEAssembler
	{
	}


	public partial interface IEDUTEACHERTYPEAssembler : IEntityAssembler<EDUTEACHERTYPEDto, EDUTEACHERTYPE>
	{
	}


	public partial class EDUTEACHERTYPEAssemblerBase : EntityAssembler<EDUTEACHERTYPEDto, EDUTEACHERTYPE>
	{
		partial void OnDTOAssembled(EDUTEACHERTYPEDto dto);
		partial void OnEntityAssembled(EDUTEACHERTYPE entity);


		public override EDUTEACHERTYPE Assemble(EDUTEACHERTYPE entity, EDUTEACHERTYPEDto dto)
		{
			if (entity == null)
			{
				entity = new EDUTEACHERTYPE();
			}
			entity.CODE = dto.CODE;
			entity.NAME = dto.NAME;
			entity.DISPLAY_ORDER = dto.DISPLAY_ORDER;
			entity.REFTYPE = dto.REFTYPE;
			return entity;
		}
		public override EDUTEACHERTYPEDto Assemble(EDUTEACHERTYPE entity)
		{
			EDUTEACHERTYPEDto dto = new EDUTEACHERTYPEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.CODE = entity.CODE;
			dto.NAME = entity.NAME;
			dto.DISPLAY_ORDER = entity.DISPLAY_ORDER;
			dto.REFTYPE = entity.REFTYPE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUSTOPACTSCHEDULEAssembler : EDUSTOPACTSCHEDULEAssemblerBase, IEDUSTOPACTSCHEDULEAssembler
	{
	}


	public partial interface IEDUSTOPACTSCHEDULEAssembler : IEntityAssembler<EDUSTOPACTSCHEDULEDto, EDUSTOPACTSCHEDULE>
	{
	}


	public partial class EDUSTOPACTSCHEDULEAssemblerBase : EntityAssembler<EDUSTOPACTSCHEDULEDto, EDUSTOPACTSCHEDULE>
	{
		partial void OnDTOAssembled(EDUSTOPACTSCHEDULEDto dto);
		partial void OnEntityAssembled(EDUSTOPACTSCHEDULE entity);


		public override EDUSTOPACTSCHEDULE Assemble(EDUSTOPACTSCHEDULE entity, EDUSTOPACTSCHEDULEDto dto)
		{
			if (entity == null)
			{
				entity = new EDUSTOPACTSCHEDULE();
			}
			entity.EDUSTOPACTSCHEDULEID = dto.EDUSTOPACTSCHEDULEID;
			entity.EDUACTTOPICID = dto.EDUACTTOPICID;
			entity.EDUTERMID = dto.EDUTERMID;
			entity.TIMEFROM = dto.TIMEFROM;
			entity.TIMETO = dto.TIMETO;
			entity.DES = dto.DES;
			entity.ACTTYPE = dto.ACTTYPE;
			entity.CORCHID = dto.CORCHID;
			entity.LOCATION = dto.LOCATION;
			entity.ACTTYPEDES = dto.ACTTYPEDES;
			entity.CREATER = dto.CREATER;
			entity.LASTMODIFIER = dto.LASTMODIFIER;
			entity.ACTNAME = dto.ACTNAME;
			entity.REFURL = dto.REFURL;
			entity.DEPTCODE = dto.DEPTCODE;
			entity.DISPLAYTIMEFROM = dto.DISPLAYTIMEFROM;
			entity.DISPLAYTIMETO = dto.DISPLAYTIMETO;
			entity.ACTRANGE = dto.ACTRANGE;
			entity.HOSPCODE = dto.HOSPCODE;
			entity.PROPERTYTYPE = dto.PROPERTYTYPE;
			entity.ALLOWBOOKING = dto.ALLOWBOOKING;
			entity.BOOKINGLIMIT = dto.BOOKINGLIMIT;
			entity.HASOUTSIDESTUDENT = dto.HASOUTSIDESTUDENT;
			entity.ENABLEREC = dto.ENABLEREC;
			entity.RECTEMPLATEID = dto.RECTEMPLATEID;
			entity.HASTARGETS = dto.HASTARGETS;
			entity.HASATTACHMENTS = dto.HASATTACHMENTS;
			return entity;
		}
		public override EDUSTOPACTSCHEDULEDto Assemble(EDUSTOPACTSCHEDULE entity)
		{
			EDUSTOPACTSCHEDULEDto dto = new EDUSTOPACTSCHEDULEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EDUSTOPACTSCHEDULEID = entity.EDUSTOPACTSCHEDULEID;
			dto.EDUACTTOPICID = entity.EDUACTTOPICID;
			dto.EDUTERMID = entity.EDUTERMID;
			dto.TIMEFROM = entity.TIMEFROM;
			dto.TIMETO = entity.TIMETO;
			dto.DES = entity.DES;
			dto.ACTTYPE = entity.ACTTYPE;
			dto.CORCHID = entity.CORCHID;
			dto.LOCATION = entity.LOCATION;
			dto.ACTTYPEDES = entity.ACTTYPEDES;
			dto.CREATER = entity.CREATER;
			dto.LASTMODIFIER = entity.LASTMODIFIER;
			dto.ACTNAME = entity.ACTNAME;
			dto.REFURL = entity.REFURL;
			dto.DEPTCODE = entity.DEPTCODE;
			dto.DISPLAYTIMEFROM = entity.DISPLAYTIMEFROM;
			dto.DISPLAYTIMETO = entity.DISPLAYTIMETO;
			dto.ACTRANGE = entity.ACTRANGE;
			dto.HOSPCODE = entity.HOSPCODE;
			dto.PROPERTYTYPE = entity.PROPERTYTYPE;
			dto.ALLOWBOOKING = entity.ALLOWBOOKING;
			dto.BOOKINGLIMIT = entity.BOOKINGLIMIT;
			dto.HASOUTSIDESTUDENT = entity.HASOUTSIDESTUDENT;
			dto.ENABLEREC = entity.ENABLEREC;
			dto.RECTEMPLATEID = entity.RECTEMPLATEID;
			dto.HASTARGETS = entity.HASTARGETS;
			dto.HASATTACHMENTS = entity.HASATTACHMENTS;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUSTOPACTATTACHMENTAssembler : EDUSTOPACTATTACHMENTAssemblerBase, IEDUSTOPACTATTACHMENTAssembler
	{
	}


	public partial interface IEDUSTOPACTATTACHMENTAssembler : IEntityAssembler<EDUSTOPACTATTACHMENTDto, EDUSTOPACTATTACHMENT>
	{
	}


	public partial class EDUSTOPACTATTACHMENTAssemblerBase : EntityAssembler<EDUSTOPACTATTACHMENTDto, EDUSTOPACTATTACHMENT>
	{
		partial void OnDTOAssembled(EDUSTOPACTATTACHMENTDto dto);
		partial void OnEntityAssembled(EDUSTOPACTATTACHMENT entity);


		public override EDUSTOPACTATTACHMENT Assemble(EDUSTOPACTATTACHMENT entity, EDUSTOPACTATTACHMENTDto dto)
		{
			if (entity == null)
			{
				entity = new EDUSTOPACTATTACHMENT();
			}
			entity.ACTATTACHMENTID = dto.ACTATTACHMENTID;
			entity.EDUSTOPACTSCHEDULEID = dto.EDUSTOPACTSCHEDULEID;
			entity.NAME = dto.NAME;
			entity.ATTACHMENT = dto.ATTACHMENT;
			entity.ISPUBLIC = dto.ISPUBLIC;
			entity.CREATEDATE = dto.CREATEDATE;
			return entity;
		}
		public override EDUSTOPACTATTACHMENTDto Assemble(EDUSTOPACTATTACHMENT entity)
		{
			EDUSTOPACTATTACHMENTDto dto = new EDUSTOPACTATTACHMENTDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ACTATTACHMENTID = entity.ACTATTACHMENTID;
			dto.EDUSTOPACTSCHEDULEID = entity.EDUSTOPACTSCHEDULEID;
			dto.NAME = entity.NAME;
			dto.ATTACHMENT = entity.ATTACHMENT;
			dto.ISPUBLIC = entity.ISPUBLIC;
			dto.CREATEDATE = entity.CREATEDATE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUSTOPAssembler : EDUSTOPAssemblerBase, IEDUSTOPAssembler
	{
	}


	public partial interface IEDUSTOPAssembler : IEntityAssembler<EDUSTOPDto, EDUSTOP>
	{
	}


	public partial class EDUSTOPAssemblerBase : EntityAssembler<EDUSTOPDto, EDUSTOP>
	{
		partial void OnDTOAssembled(EDUSTOPDto dto);
		partial void OnEntityAssembled(EDUSTOP entity);


		public override EDUSTOP Assemble(EDUSTOP entity, EDUSTOPDto dto)
		{
			if (entity == null)
			{
				entity = new EDUSTOP();
			}
			entity.EDUSTOPID = dto.EDUSTOPID;
			entity.EDUSTOPCODE = dto.EDUSTOPCODE;
			entity.NAME = dto.NAME;
			entity.DEPID = dto.DEPID;
			entity.NSTATION = dto.NSTATION;
			entity.CORCHID = dto.CORCHID;
			entity.STATUS = dto.STATUS;
			entity.DES = dto.DES;
			entity.YEARCODE = dto.YEARCODE;
			entity.PARENTEDUSTOPID = dto.PARENTEDUSTOPID;
			return entity;
		}
		public override EDUSTOPDto Assemble(EDUSTOP entity)
		{
			EDUSTOPDto dto = new EDUSTOPDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EDUSTOPID = entity.EDUSTOPID;
			dto.EDUSTOPCODE = entity.EDUSTOPCODE;
			dto.NAME = entity.NAME;
			dto.DEPID = entity.DEPID;
			dto.NSTATION = entity.NSTATION;
			dto.CORCHID = entity.CORCHID;
			dto.STATUS = entity.STATUS;
			dto.DES = entity.DES;
			dto.YEARCODE = entity.YEARCODE;
			dto.PARENTEDUSTOPID = entity.PARENTEDUSTOPID;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUSETTINGAssembler : EDUSETTINGAssemblerBase, IEDUSETTINGAssembler
	{
	}


	public partial interface IEDUSETTINGAssembler : IEntityAssembler<EDUSETTINGDto, EDUSETTING>
	{
	}


	public partial class EDUSETTINGAssemblerBase : EntityAssembler<EDUSETTINGDto, EDUSETTING>
	{
		partial void OnDTOAssembled(EDUSETTINGDto dto);
		partial void OnEntityAssembled(EDUSETTING entity);


		public override EDUSETTING Assemble(EDUSETTING entity, EDUSETTINGDto dto)
		{
			if (entity == null)
			{
				entity = new EDUSETTING();
			}
			entity.CODETYPE = dto.CODETYPE;
			entity.CODE = dto.CODE;
			entity.NAME = dto.NAME;
			entity.SETTINGVALUE = dto.SETTINGVALUE;
			entity.DES = dto.DES;
			return entity;
		}
		public override EDUSETTINGDto Assemble(EDUSETTING entity)
		{
			EDUSETTINGDto dto = new EDUSETTINGDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.CODETYPE = entity.CODETYPE;
			dto.CODE = entity.CODE;
			dto.NAME = entity.NAME;
			dto.SETTINGVALUE = entity.SETTINGVALUE;
			dto.DES = entity.DES;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUSENTENCEAssembler : EDUSENTENCEAssemblerBase, IEDUSENTENCEAssembler
	{
	}


	public partial interface IEDUSENTENCEAssembler : IEntityAssembler<EDUSENTENCEDto, EDUSENTENCE>
	{
	}


	public partial class EDUSENTENCEAssemblerBase : EntityAssembler<EDUSENTENCEDto, EDUSENTENCE>
	{
		partial void OnDTOAssembled(EDUSENTENCEDto dto);
		partial void OnEntityAssembled(EDUSENTENCE entity);


		public override EDUSENTENCE Assemble(EDUSENTENCE entity, EDUSENTENCEDto dto)
		{
			if (entity == null)
			{
				entity = new EDUSENTENCE();
			}
			entity.ID = dto.ID;
			entity.EMPCODE = dto.EMPCODE;
			entity.CREATEDATE = dto.CREATEDATE;
			entity.MODIFYDATE = dto.MODIFYDATE;
			entity.SENTENCE = dto.SENTENCE;
			entity.ISPUBLIC = dto.ISPUBLIC;
			return entity;
		}
		public override EDUSENTENCEDto Assemble(EDUSENTENCE entity)
		{
			EDUSENTENCEDto dto = new EDUSENTENCEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.EMPCODE = entity.EMPCODE;
			dto.CREATEDATE = entity.CREATEDATE;
			dto.MODIFYDATE = entity.MODIFYDATE;
			dto.SENTENCE = entity.SENTENCE;
			dto.ISPUBLIC = entity.ISPUBLIC;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUSCOREAssembler : EDUSCOREAssemblerBase, IEDUSCOREAssembler
	{
	}


	public partial interface IEDUSCOREAssembler : IEntityAssembler<EDUSCOREDto, EDUSCORE>
	{
	}


	public partial class EDUSCOREAssemblerBase : EntityAssembler<EDUSCOREDto, EDUSCORE>
	{
		partial void OnDTOAssembled(EDUSCOREDto dto);
		partial void OnEntityAssembled(EDUSCORE entity);


		public override EDUSCORE Assemble(EDUSCORE entity, EDUSCOREDto dto)
		{
			if (entity == null)
			{
				entity = new EDUSCORE();
			}
			entity.ID = dto.ID;
			entity.EMPCODE = dto.EMPCODE;
			entity.MEMBERCODE = dto.MEMBERCODE;
			entity.DEPLEVEL = dto.DEPLEVEL;
			entity.CLASSNAME = dto.CLASSNAME;
			entity.SCORE = dto.SCORE;
			entity.UPLOADER = dto.UPLOADER;
			entity.UPLOADTIME = dto.UPLOADTIME;
			entity.STATUS = dto.STATUS;
			return entity;
		}
		public override EDUSCOREDto Assemble(EDUSCORE entity)
		{
			EDUSCOREDto dto = new EDUSCOREDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.EMPCODE = entity.EMPCODE;
			dto.MEMBERCODE = entity.MEMBERCODE;
			dto.DEPLEVEL = entity.DEPLEVEL;
			dto.CLASSNAME = entity.CLASSNAME;
			dto.SCORE = entity.SCORE;
			dto.UPLOADER = entity.UPLOADER;
			dto.UPLOADTIME = entity.UPLOADTIME;
			dto.STATUS = entity.STATUS;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUREFTEACHERAssembler : EDUREFTEACHERAssemblerBase, IEDUREFTEACHERAssembler
	{
	}


	public partial interface IEDUREFTEACHERAssembler : IEntityAssembler<EDUREFTEACHERDto, EDUREFTEACHER>
	{
	}


	public partial class EDUREFTEACHERAssemblerBase : EntityAssembler<EDUREFTEACHERDto, EDUREFTEACHER>
	{
		partial void OnDTOAssembled(EDUREFTEACHERDto dto);
		partial void OnEntityAssembled(EDUREFTEACHER entity);


		public override EDUREFTEACHER Assemble(EDUREFTEACHER entity, EDUREFTEACHERDto dto)
		{
			if (entity == null)
			{
				entity = new EDUREFTEACHER();
			}
			entity.EDUREFTEACHERID = dto.EDUREFTEACHERID;
			entity.TEACHERID = dto.TEACHERID;
			entity.TEACHERTYPE = dto.TEACHERTYPE;
			entity.REFID = dto.REFID;
			entity.REFTABLE = dto.REFTABLE;
			entity.EDUTERMID = dto.EDUTERMID;
			entity.CREATEDATE = dto.CREATEDATE;
			entity.CREATEEMP = dto.CREATEEMP;
			entity.TEACHERORDER = dto.TEACHERORDER;
			return entity;
		}
		public override EDUREFTEACHERDto Assemble(EDUREFTEACHER entity)
		{
			EDUREFTEACHERDto dto = new EDUREFTEACHERDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EDUREFTEACHERID = entity.EDUREFTEACHERID;
			dto.TEACHERID = entity.TEACHERID;
			dto.TEACHERTYPE = entity.TEACHERTYPE;
			dto.REFID = entity.REFID;
			dto.REFTABLE = entity.REFTABLE;
			dto.EDUTERMID = entity.EDUTERMID;
			dto.CREATEDATE = entity.CREATEDATE;
			dto.CREATEEMP = entity.CREATEEMP;
			dto.TEACHERORDER = entity.TEACHERORDER;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUQUESTIONAssembler : EDUQUESTIONAssemblerBase, IEDUQUESTIONAssembler
	{
	}


	public partial interface IEDUQUESTIONAssembler : IEntityAssembler<EDUQUESTIONDto, EDUQUESTION>
	{
	}


	public partial class EDUQUESTIONAssemblerBase : EntityAssembler<EDUQUESTIONDto, EDUQUESTION>
	{
		partial void OnDTOAssembled(EDUQUESTIONDto dto);
		partial void OnEntityAssembled(EDUQUESTION entity);


		public override EDUQUESTION Assemble(EDUQUESTION entity, EDUQUESTIONDto dto)
		{
			if (entity == null)
			{
				entity = new EDUQUESTION();
			}
			entity.ID = dto.ID;
			entity.TARGETROLE = dto.TARGETROLE;
			entity.QUESTIONTITLE = dto.QUESTIONTITLE;
			entity.QUESTIONSUBJECT = dto.QUESTIONSUBJECT;
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.SDATE = dto.SDATE;
			entity.EDATE = dto.EDATE;
			entity.QGROUP = dto.QGROUP;
			entity.ISFORCE = dto.ISFORCE;
			return entity;
		}
		public override EDUQUESTIONDto Assemble(EDUQUESTION entity)
		{
			EDUQUESTIONDto dto = new EDUQUESTIONDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.TARGETROLE = entity.TARGETROLE;
			dto.QUESTIONTITLE = entity.QUESTIONTITLE;
			dto.QUESTIONSUBJECT = entity.QUESTIONSUBJECT;
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.SDATE = entity.SDATE;
			dto.EDATE = entity.EDATE;
			dto.QGROUP = entity.QGROUP;
			dto.ISFORCE = entity.ISFORCE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUPASSPORTTEMPLATETARGETAssembler : EDUPASSPORTTEMPLATETARGETAssemblerBase, IEDUPASSPORTTEMPLATETARGETAssembler
	{
	}


	public partial interface IEDUPASSPORTTEMPLATETARGETAssembler : IEntityAssembler<EDUPASSPORTTEMPLATETARGETDto, EDUPASSPORTTEMPLATETARGET>
	{
	}


	public partial class EDUPASSPORTTEMPLATETARGETAssemblerBase : EntityAssembler<EDUPASSPORTTEMPLATETARGETDto, EDUPASSPORTTEMPLATETARGET>
	{
		partial void OnDTOAssembled(EDUPASSPORTTEMPLATETARGETDto dto);
		partial void OnEntityAssembled(EDUPASSPORTTEMPLATETARGET entity);


		public override EDUPASSPORTTEMPLATETARGET Assemble(EDUPASSPORTTEMPLATETARGET entity, EDUPASSPORTTEMPLATETARGETDto dto)
		{
			if (entity == null)
			{
				entity = new EDUPASSPORTTEMPLATETARGET();
			}
			entity.ID = dto.ID;
			entity.TEMPLATEID = dto.TEMPLATEID;
			entity.TARGETTYPE = dto.TARGETTYPE;
			entity.TARGETID = dto.TARGETID;
			return entity;
		}
		public override EDUPASSPORTTEMPLATETARGETDto Assemble(EDUPASSPORTTEMPLATETARGET entity)
		{
			EDUPASSPORTTEMPLATETARGETDto dto = new EDUPASSPORTTEMPLATETARGETDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.TEMPLATEID = entity.TEMPLATEID;
			dto.TARGETTYPE = entity.TARGETTYPE;
			dto.TARGETID = entity.TARGETID;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUPASSPORTTEMPLATEITEMAssembler : EDUPASSPORTTEMPLATEITEMAssemblerBase, IEDUPASSPORTTEMPLATEITEMAssembler
	{
	}


	public partial interface IEDUPASSPORTTEMPLATEITEMAssembler : IEntityAssembler<EDUPASSPORTTEMPLATEITEMDto, EDUPASSPORTTEMPLATEITEM>
	{
	}


	public partial class EDUPASSPORTTEMPLATEITEMAssemblerBase : EntityAssembler<EDUPASSPORTTEMPLATEITEMDto, EDUPASSPORTTEMPLATEITEM>
	{
		partial void OnDTOAssembled(EDUPASSPORTTEMPLATEITEMDto dto);
		partial void OnEntityAssembled(EDUPASSPORTTEMPLATEITEM entity);


		public override EDUPASSPORTTEMPLATEITEM Assemble(EDUPASSPORTTEMPLATEITEM entity, EDUPASSPORTTEMPLATEITEMDto dto)
		{
			if (entity == null)
			{
				entity = new EDUPASSPORTTEMPLATEITEM();
			}
			entity.ID = dto.ID;
			entity.TEMPLATEID = dto.TEMPLATEID;
			entity.ITEMID = dto.ITEMID;
			entity.SEQ = dto.SEQ;
			entity.TITLE = dto.TITLE;
			entity.GROUPNAME = dto.GROUPNAME;
			return entity;
		}
		public override EDUPASSPORTTEMPLATEITEMDto Assemble(EDUPASSPORTTEMPLATEITEM entity)
		{
			EDUPASSPORTTEMPLATEITEMDto dto = new EDUPASSPORTTEMPLATEITEMDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.TEMPLATEID = entity.TEMPLATEID;
			dto.ITEMID = entity.ITEMID;
			dto.SEQ = entity.SEQ;
			dto.TITLE = entity.TITLE;
			dto.GROUPNAME = entity.GROUPNAME;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUPASSPORTTEMPLATEAssembler : EDUPASSPORTTEMPLATEAssemblerBase, IEDUPASSPORTTEMPLATEAssembler
	{
	}


	public partial interface IEDUPASSPORTTEMPLATEAssembler : IEntityAssembler<EDUPASSPORTTEMPLATEDto, EDUPASSPORTTEMPLATE>
	{
	}


	public partial class EDUPASSPORTTEMPLATEAssemblerBase : EntityAssembler<EDUPASSPORTTEMPLATEDto, EDUPASSPORTTEMPLATE>
	{
		partial void OnDTOAssembled(EDUPASSPORTTEMPLATEDto dto);
		partial void OnEntityAssembled(EDUPASSPORTTEMPLATE entity);


		public override EDUPASSPORTTEMPLATE Assemble(EDUPASSPORTTEMPLATE entity, EDUPASSPORTTEMPLATEDto dto)
		{
			if (entity == null)
			{
				entity = new EDUPASSPORTTEMPLATE();
			}
			entity.TEMPLATEID = dto.TEMPLATEID;
			entity.TEMPLATENAME = dto.TEMPLATENAME;
			entity.SDATE = dto.SDATE;
			entity.EDATE = dto.EDATE;
			entity.STATUS = dto.STATUS;
			entity.CREATER = dto.CREATER;
			entity.CREATEDATE = dto.CREATEDATE;
			entity.MODIFIER = dto.MODIFIER;
			entity.MODIFYDATE = dto.MODIFYDATE;
			entity.TEMPLATEDESC = dto.TEMPLATEDESC;
			entity.ALLOWADMINCONFIRM = dto.ALLOWADMINCONFIRM;
			return entity;
		}
		public override EDUPASSPORTTEMPLATEDto Assemble(EDUPASSPORTTEMPLATE entity)
		{
			EDUPASSPORTTEMPLATEDto dto = new EDUPASSPORTTEMPLATEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TEMPLATEID = entity.TEMPLATEID;
			dto.TEMPLATENAME = entity.TEMPLATENAME;
			dto.SDATE = entity.SDATE;
			dto.EDATE = entity.EDATE;
			dto.STATUS = entity.STATUS;
			dto.CREATER = entity.CREATER;
			dto.CREATEDATE = entity.CREATEDATE;
			dto.MODIFIER = entity.MODIFIER;
			dto.MODIFYDATE = entity.MODIFYDATE;
			dto.TEMPLATEDESC = entity.TEMPLATEDESC;
			dto.ALLOWADMINCONFIRM = entity.ALLOWADMINCONFIRM;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUPASSPORTPREFAssembler : EDUPASSPORTPREFAssemblerBase, IEDUPASSPORTPREFAssembler
	{
	}


	public partial interface IEDUPASSPORTPREFAssembler : IEntityAssembler<EDUPASSPORTPREFDto, EDUPASSPORTPREF>
	{
	}


	public partial class EDUPASSPORTPREFAssemblerBase : EntityAssembler<EDUPASSPORTPREFDto, EDUPASSPORTPREF>
	{
		partial void OnDTOAssembled(EDUPASSPORTPREFDto dto);
		partial void OnEntityAssembled(EDUPASSPORTPREF entity);


		public override EDUPASSPORTPREF Assemble(EDUPASSPORTPREF entity, EDUPASSPORTPREFDto dto)
		{
			if (entity == null)
			{
				entity = new EDUPASSPORTPREF();
			}
			entity.ID = dto.ID;
			entity.ITEMID = dto.ITEMID;
			entity.ITEMCODE = dto.ITEMCODE;
			return entity;
		}
		public override EDUPASSPORTPREFDto Assemble(EDUPASSPORTPREF entity)
		{
			EDUPASSPORTPREFDto dto = new EDUPASSPORTPREFDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.ITEMID = entity.ITEMID;
			dto.ITEMCODE = entity.ITEMCODE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUPASSPORTITEMTARGETAssembler : EDUPASSPORTITEMTARGETAssemblerBase, IEDUPASSPORTITEMTARGETAssembler
	{
	}


	public partial interface IEDUPASSPORTITEMTARGETAssembler : IEntityAssembler<EDUPASSPORTITEMTARGETDto, EDUPASSPORTITEMTARGET>
	{
	}


	public partial class EDUPASSPORTITEMTARGETAssemblerBase : EntityAssembler<EDUPASSPORTITEMTARGETDto, EDUPASSPORTITEMTARGET>
	{
		partial void OnDTOAssembled(EDUPASSPORTITEMTARGETDto dto);
		partial void OnEntityAssembled(EDUPASSPORTITEMTARGET entity);


		public override EDUPASSPORTITEMTARGET Assemble(EDUPASSPORTITEMTARGET entity, EDUPASSPORTITEMTARGETDto dto)
		{
			if (entity == null)
			{
				entity = new EDUPASSPORTITEMTARGET();
			}
			entity.ID = dto.ID;
			entity.ITEMID = dto.ITEMID;
			entity.TARGETTYPE = dto.TARGETTYPE;
			entity.TARGETID = dto.TARGETID;
			return entity;
		}
		public override EDUPASSPORTITEMTARGETDto Assemble(EDUPASSPORTITEMTARGET entity)
		{
			EDUPASSPORTITEMTARGETDto dto = new EDUPASSPORTITEMTARGETDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.ITEMID = entity.ITEMID;
			dto.TARGETTYPE = entity.TARGETTYPE;
			dto.TARGETID = entity.TARGETID;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUPASSPORTITEMDETAssembler : EDUPASSPORTITEMDETAssemblerBase, IEDUPASSPORTITEMDETAssembler
	{
	}


	public partial interface IEDUPASSPORTITEMDETAssembler : IEntityAssembler<EDUPASSPORTITEMDETDto, EDUPASSPORTITEMDET>
	{
	}


	public partial class EDUPASSPORTITEMDETAssemblerBase : EntityAssembler<EDUPASSPORTITEMDETDto, EDUPASSPORTITEMDET>
	{
		partial void OnDTOAssembled(EDUPASSPORTITEMDETDto dto);
		partial void OnEntityAssembled(EDUPASSPORTITEMDET entity);


		public override EDUPASSPORTITEMDET Assemble(EDUPASSPORTITEMDET entity, EDUPASSPORTITEMDETDto dto)
		{
			if (entity == null)
			{
				entity = new EDUPASSPORTITEMDET();
			}
			entity.ID = dto.ID;
			entity.ITEMID = dto.ITEMID;
			entity.FIELDDESC = dto.FIELDDESC;
			entity.FIELDTARGET = dto.FIELDTARGET;
			entity.SEQ = dto.SEQ;
			entity.FIELDTYPE = dto.FIELDTYPE;
			entity.ISNECESSARY = dto.ISNECESSARY;
			entity.SELECTOPTIONS = dto.SELECTOPTIONS;
			return entity;
		}
		public override EDUPASSPORTITEMDETDto Assemble(EDUPASSPORTITEMDET entity)
		{
			EDUPASSPORTITEMDETDto dto = new EDUPASSPORTITEMDETDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.ITEMID = entity.ITEMID;
			dto.FIELDDESC = entity.FIELDDESC;
			dto.FIELDTARGET = entity.FIELDTARGET;
			dto.SEQ = entity.SEQ;
			dto.FIELDTYPE = entity.FIELDTYPE;
			dto.ISNECESSARY = entity.ISNECESSARY;
			dto.SELECTOPTIONS = entity.SELECTOPTIONS;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUPASSPORTITEMAssembler : EDUPASSPORTITEMAssemblerBase, IEDUPASSPORTITEMAssembler
	{
	}


	public partial interface IEDUPASSPORTITEMAssembler : IEntityAssembler<EDUPASSPORTITEMDto, EDUPASSPORTITEM>
	{
	}


	public partial class EDUPASSPORTITEMAssemblerBase : EntityAssembler<EDUPASSPORTITEMDto, EDUPASSPORTITEM>
	{
		partial void OnDTOAssembled(EDUPASSPORTITEMDto dto);
		partial void OnEntityAssembled(EDUPASSPORTITEM entity);


		public override EDUPASSPORTITEM Assemble(EDUPASSPORTITEM entity, EDUPASSPORTITEMDto dto)
		{
			if (entity == null)
			{
				entity = new EDUPASSPORTITEM();
			}
			entity.ITEMID = dto.ITEMID;
			entity.ITEMNAME = dto.ITEMNAME;
			entity.CREATER = dto.CREATER;
			entity.CREATEDATE = dto.CREATEDATE;
			entity.MODIFIER = dto.MODIFIER;
			entity.MODIFYDATE = dto.MODIFYDATE;
			entity.REMARK = dto.REMARK;
			entity.STATUS = dto.STATUS;
			entity.ISNECESSARY = dto.ISNECESSARY;
			entity.ITEMDESC = dto.ITEMDESC;
			return entity;
		}
		public override EDUPASSPORTITEMDto Assemble(EDUPASSPORTITEM entity)
		{
			EDUPASSPORTITEMDto dto = new EDUPASSPORTITEMDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ITEMID = entity.ITEMID;
			dto.ITEMNAME = entity.ITEMNAME;
			dto.CREATER = entity.CREATER;
			dto.CREATEDATE = entity.CREATEDATE;
			dto.MODIFIER = entity.MODIFIER;
			dto.MODIFYDATE = entity.MODIFYDATE;
			dto.REMARK = entity.REMARK;
			dto.STATUS = entity.STATUS;
			dto.ISNECESSARY = entity.ISNECESSARY;
			dto.ITEMDESC = entity.ITEMDESC;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUPASSPORTINSTANCEAssembler : EDUPASSPORTINSTANCEAssemblerBase, IEDUPASSPORTINSTANCEAssembler
	{
	}


	public partial interface IEDUPASSPORTINSTANCEAssembler : IEntityAssembler<EDUPASSPORTINSTANCEDto, EDUPASSPORTINSTANCE>
	{
	}


	public partial class EDUPASSPORTINSTANCEAssemblerBase : EntityAssembler<EDUPASSPORTINSTANCEDto, EDUPASSPORTINSTANCE>
	{
		partial void OnDTOAssembled(EDUPASSPORTINSTANCEDto dto);
		partial void OnEntityAssembled(EDUPASSPORTINSTANCE entity);


		public override EDUPASSPORTINSTANCE Assemble(EDUPASSPORTINSTANCE entity, EDUPASSPORTINSTANCEDto dto)
		{
			if (entity == null)
			{
				entity = new EDUPASSPORTINSTANCE();
			}
			entity.INSTANCEID = dto.INSTANCEID;
			entity.TEMPLATEID = dto.TEMPLATEID;
			entity.TEMPLATENAME = dto.TEMPLATENAME;
			entity.EMPCODE = dto.EMPCODE;
			entity.CREATEDATE = dto.CREATEDATE;
			entity.JOBSERIAL = dto.JOBSERIAL;
			entity.STATUS = dto.STATUS;
			return entity;
		}
		public override EDUPASSPORTINSTANCEDto Assemble(EDUPASSPORTINSTANCE entity)
		{
			EDUPASSPORTINSTANCEDto dto = new EDUPASSPORTINSTANCEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.INSTANCEID = entity.INSTANCEID;
			dto.TEMPLATEID = entity.TEMPLATEID;
			dto.TEMPLATENAME = entity.TEMPLATENAME;
			dto.EMPCODE = entity.EMPCODE;
			dto.CREATEDATE = entity.CREATEDATE;
			dto.JOBSERIAL = entity.JOBSERIAL;
			dto.STATUS = entity.STATUS;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUPASSPORTINSITEMREJECTHIAssembler : EDUPASSPORTINSITEMREJECTHIAssemblerBase, IEDUPASSPORTINSITEMREJECTHIAssembler
	{
	}


	public partial interface IEDUPASSPORTINSITEMREJECTHIAssembler : IEntityAssembler<EDUPASSPORTINSITEMREJECTHIDto, EDUPASSPORTINSITEMREJECTHI>
	{
	}


	public partial class EDUPASSPORTINSITEMREJECTHIAssemblerBase : EntityAssembler<EDUPASSPORTINSITEMREJECTHIDto, EDUPASSPORTINSITEMREJECTHI>
	{
		partial void OnDTOAssembled(EDUPASSPORTINSITEMREJECTHIDto dto);
		partial void OnEntityAssembled(EDUPASSPORTINSITEMREJECTHI entity);


		public override EDUPASSPORTINSITEMREJECTHI Assemble(EDUPASSPORTINSITEMREJECTHI entity, EDUPASSPORTINSITEMREJECTHIDto dto)
		{
			if (entity == null)
			{
				entity = new EDUPASSPORTINSITEMREJECTHI();
			}
			entity.REJECTID = dto.REJECTID;
			entity.IITEMID = dto.IITEMID;
			entity.REJECTTIME = dto.REJECTTIME;
			entity.EMPCODE = dto.EMPCODE;
			entity.REASON = dto.REASON;
			return entity;
		}
		public override EDUPASSPORTINSITEMREJECTHIDto Assemble(EDUPASSPORTINSITEMREJECTHI entity)
		{
			EDUPASSPORTINSITEMREJECTHIDto dto = new EDUPASSPORTINSITEMREJECTHIDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.REJECTID = entity.REJECTID;
			dto.IITEMID = entity.IITEMID;
			dto.REJECTTIME = entity.REJECTTIME;
			dto.EMPCODE = entity.EMPCODE;
			dto.REASON = entity.REASON;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUPASSPORTINSITEMREFAssembler : EDUPASSPORTINSITEMREFAssemblerBase, IEDUPASSPORTINSITEMREFAssembler
	{
	}


	public partial interface IEDUPASSPORTINSITEMREFAssembler : IEntityAssembler<EDUPASSPORTINSITEMREFDto, EDUPASSPORTINSITEMREF>
	{
	}


	public partial class EDUPASSPORTINSITEMREFAssemblerBase : EntityAssembler<EDUPASSPORTINSITEMREFDto, EDUPASSPORTINSITEMREF>
	{
		partial void OnDTOAssembled(EDUPASSPORTINSITEMREFDto dto);
		partial void OnEntityAssembled(EDUPASSPORTINSITEMREF entity);


		public override EDUPASSPORTINSITEMREF Assemble(EDUPASSPORTINSITEMREF entity, EDUPASSPORTINSITEMREFDto dto)
		{
			if (entity == null)
			{
				entity = new EDUPASSPORTINSITEMREF();
			}
			entity.IITEMID = dto.IITEMID;
			entity.APPLICATIONID = dto.APPLICATIONID;
			entity.SYNCDATE = dto.SYNCDATE;
			return entity;
		}
		public override EDUPASSPORTINSITEMREFDto Assemble(EDUPASSPORTINSITEMREF entity)
		{
			EDUPASSPORTINSITEMREFDto dto = new EDUPASSPORTINSITEMREFDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.IITEMID = entity.IITEMID;
			dto.APPLICATIONID = entity.APPLICATIONID;
			dto.SYNCDATE = entity.SYNCDATE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUPASSPORTINSITEMDETAssembler : EDUPASSPORTINSITEMDETAssemblerBase, IEDUPASSPORTINSITEMDETAssembler
	{
	}


	public partial interface IEDUPASSPORTINSITEMDETAssembler : IEntityAssembler<EDUPASSPORTINSITEMDETDto, EDUPASSPORTINSITEMDET>
	{
	}


	public partial class EDUPASSPORTINSITEMDETAssemblerBase : EntityAssembler<EDUPASSPORTINSITEMDETDto, EDUPASSPORTINSITEMDET>
	{
		partial void OnDTOAssembled(EDUPASSPORTINSITEMDETDto dto);
		partial void OnEntityAssembled(EDUPASSPORTINSITEMDET entity);


		public override EDUPASSPORTINSITEMDET Assemble(EDUPASSPORTINSITEMDET entity, EDUPASSPORTINSITEMDETDto dto)
		{
			if (entity == null)
			{
				entity = new EDUPASSPORTINSITEMDET();
			}
			entity.IITDETID = dto.IITDETID;
			entity.IITEMID = dto.IITEMID;
			entity.DETID = dto.DETID;
			entity.FIELDDESC = dto.FIELDDESC;
			entity.FIELDTARGET = dto.FIELDTARGET;
			entity.SEQ = dto.SEQ;
			entity.FIELDTYPE = dto.FIELDTYPE;
			entity.ISNECESSARY = dto.ISNECESSARY;
			entity.FIELDVALUE = dto.FIELDVALUE;
			entity.SELECTOPTIONS = dto.SELECTOPTIONS;
			return entity;
		}
		public override EDUPASSPORTINSITEMDETDto Assemble(EDUPASSPORTINSITEMDET entity)
		{
			EDUPASSPORTINSITEMDETDto dto = new EDUPASSPORTINSITEMDETDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.IITDETID = entity.IITDETID;
			dto.IITEMID = entity.IITEMID;
			dto.DETID = entity.DETID;
			dto.FIELDDESC = entity.FIELDDESC;
			dto.FIELDTARGET = entity.FIELDTARGET;
			dto.SEQ = entity.SEQ;
			dto.FIELDTYPE = entity.FIELDTYPE;
			dto.ISNECESSARY = entity.ISNECESSARY;
			dto.FIELDVALUE = entity.FIELDVALUE;
			dto.SELECTOPTIONS = entity.SELECTOPTIONS;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUPASSPORTINSITEMAssembler : EDUPASSPORTINSITEMAssemblerBase, IEDUPASSPORTINSITEMAssembler
	{
	}


	public partial interface IEDUPASSPORTINSITEMAssembler : IEntityAssembler<EDUPASSPORTINSITEMDto, EDUPASSPORTINSITEM>
	{
	}


	public partial class EDUPASSPORTINSITEMAssemblerBase : EntityAssembler<EDUPASSPORTINSITEMDto, EDUPASSPORTINSITEM>
	{
		partial void OnDTOAssembled(EDUPASSPORTINSITEMDto dto);
		partial void OnEntityAssembled(EDUPASSPORTINSITEM entity);


		public override EDUPASSPORTINSITEM Assemble(EDUPASSPORTINSITEM entity, EDUPASSPORTINSITEMDto dto)
		{
			if (entity == null)
			{
				entity = new EDUPASSPORTINSITEM();
			}
			entity.IITEMID = dto.IITEMID;
			entity.INSTANCEID = dto.INSTANCEID;
			entity.ITEMID = dto.ITEMID;
			entity.ITEMNAME = dto.ITEMNAME;
			entity.SEQ = dto.SEQ;
			entity.TITLE = dto.TITLE;
			entity.GROUPNAME = dto.GROUPNAME;
			entity.STATUS = dto.STATUS;
			entity.MODIFYDATE = dto.MODIFYDATE;
			entity.MODIFIER = dto.MODIFIER;
			entity.TTARGET = dto.TTARGET;
			entity.ISNECESSARY = dto.ISNECESSARY;
			entity.ALERTDATE = dto.ALERTDATE;
			entity.SUBMITDATE = dto.SUBMITDATE;
			return entity;
		}
		public override EDUPASSPORTINSITEMDto Assemble(EDUPASSPORTINSITEM entity)
		{
			EDUPASSPORTINSITEMDto dto = new EDUPASSPORTINSITEMDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.IITEMID = entity.IITEMID;
			dto.INSTANCEID = entity.INSTANCEID;
			dto.ITEMID = entity.ITEMID;
			dto.ITEMNAME = entity.ITEMNAME;
			dto.SEQ = entity.SEQ;
			dto.TITLE = entity.TITLE;
			dto.GROUPNAME = entity.GROUPNAME;
			dto.STATUS = entity.STATUS;
			dto.MODIFYDATE = entity.MODIFYDATE;
			dto.MODIFIER = entity.MODIFIER;
			dto.TTARGET = entity.TTARGET;
			dto.ISNECESSARY = entity.ISNECESSARY;
			dto.ALERTDATE = entity.ALERTDATE;
			dto.SUBMITDATE = entity.SUBMITDATE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUNOTETEMPLATEAssembler : EDUNOTETEMPLATEAssemblerBase, IEDUNOTETEMPLATEAssembler
	{
	}


	public partial interface IEDUNOTETEMPLATEAssembler : IEntityAssembler<EDUNOTETEMPLATEDto, EDUNOTETEMPLATE>
	{
	}


	public partial class EDUNOTETEMPLATEAssemblerBase : EntityAssembler<EDUNOTETEMPLATEDto, EDUNOTETEMPLATE>
	{
		partial void OnDTOAssembled(EDUNOTETEMPLATEDto dto);
		partial void OnEntityAssembled(EDUNOTETEMPLATE entity);


		public override EDUNOTETEMPLATE Assemble(EDUNOTETEMPLATE entity, EDUNOTETEMPLATEDto dto)
		{
			if (entity == null)
			{
				entity = new EDUNOTETEMPLATE();
			}
			entity.NOTETEMPLATEID = dto.NOTETEMPLATEID;
			entity.NOTECODE = dto.NOTECODE;
			entity.VERSIONCODE = dto.VERSIONCODE;
			entity.HIERARCODE = dto.HIERARCODE;
			entity.DES = dto.DES;
			entity.SCORE = dto.SCORE;
			entity.NOTESUBTYPE = dto.NOTESUBTYPE;
			entity.DATEFROM = dto.DATEFROM;
			entity.DATETO = dto.DATETO;
			entity.STATUS = dto.STATUS;
			entity.INDENT = dto.INDENT;
			entity.KEYWORD = dto.KEYWORD;
			return entity;
		}
		public override EDUNOTETEMPLATEDto Assemble(EDUNOTETEMPLATE entity)
		{
			EDUNOTETEMPLATEDto dto = new EDUNOTETEMPLATEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.NOTETEMPLATEID = entity.NOTETEMPLATEID;
			dto.NOTECODE = entity.NOTECODE;
			dto.VERSIONCODE = entity.VERSIONCODE;
			dto.HIERARCODE = entity.HIERARCODE;
			dto.DES = entity.DES;
			dto.SCORE = entity.SCORE;
			dto.NOTESUBTYPE = entity.NOTESUBTYPE;
			dto.DATEFROM = entity.DATEFROM;
			dto.DATETO = entity.DATETO;
			dto.STATUS = entity.STATUS;
			dto.INDENT = entity.INDENT;
			dto.KEYWORD = entity.KEYWORD;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUNOTELISTAssembler : EDUNOTELISTAssemblerBase, IEDUNOTELISTAssembler
	{
	}


	public partial interface IEDUNOTELISTAssembler : IEntityAssembler<EDUNOTELISTDto, EDUNOTELIST>
	{
	}


	public partial class EDUNOTELISTAssemblerBase : EntityAssembler<EDUNOTELISTDto, EDUNOTELIST>
	{
		partial void OnDTOAssembled(EDUNOTELISTDto dto);
		partial void OnEntityAssembled(EDUNOTELIST entity);


		public override EDUNOTELIST Assemble(EDUNOTELIST entity, EDUNOTELISTDto dto)
		{
			if (entity == null)
			{
				entity = new EDUNOTELIST();
			}
			entity.NOTECODE = dto.NOTECODE;
			entity.CREATESQL = dto.CREATESQL;
			entity.DES = dto.DES;
			entity.NAME = dto.NAME;
			entity.PARENTNOTECODE = dto.PARENTNOTECODE;
			return entity;
		}
		public override EDUNOTELISTDto Assemble(EDUNOTELIST entity)
		{
			EDUNOTELISTDto dto = new EDUNOTELISTDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.NOTECODE = entity.NOTECODE;
			dto.CREATESQL = entity.CREATESQL;
			dto.DES = entity.DES;
			dto.NAME = entity.NAME;
			dto.PARENTNOTECODE = entity.PARENTNOTECODE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUNOTEITEMAssembler : EDUNOTEITEMAssemblerBase, IEDUNOTEITEMAssembler
	{
	}


	public partial interface IEDUNOTEITEMAssembler : IEntityAssembler<EDUNOTEITEMDto, EDUNOTEITEM>
	{
	}


	public partial class EDUNOTEITEMAssemblerBase : EntityAssembler<EDUNOTEITEMDto, EDUNOTEITEM>
	{
		partial void OnDTOAssembled(EDUNOTEITEMDto dto);
		partial void OnEntityAssembled(EDUNOTEITEM entity);


		public override EDUNOTEITEM Assemble(EDUNOTEITEM entity, EDUNOTEITEMDto dto)
		{
			if (entity == null)
			{
				entity = new EDUNOTEITEM();
			}
			entity.NOTEITEMID = dto.NOTEITEMID;
			entity.NOTEID = dto.NOTEID;
			entity.NOTECODE = dto.NOTECODE;
			entity.SCORE = dto.SCORE;
			entity.NOTEDES = dto.NOTEDES;
			entity.NOTEDATE = dto.NOTEDATE;
			entity.CREATER = dto.CREATER;
			return entity;
		}
		public override EDUNOTEITEMDto Assemble(EDUNOTEITEM entity)
		{
			EDUNOTEITEMDto dto = new EDUNOTEITEMDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.NOTEITEMID = entity.NOTEITEMID;
			dto.NOTEID = entity.NOTEID;
			dto.NOTECODE = entity.NOTECODE;
			dto.SCORE = entity.SCORE;
			dto.NOTEDES = entity.NOTEDES;
			dto.NOTEDATE = entity.NOTEDATE;
			dto.CREATER = entity.CREATER;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUNOTEAssembler : EDUNOTEAssemblerBase, IEDUNOTEAssembler
	{
	}


	public partial interface IEDUNOTEAssembler : IEntityAssembler<EDUNOTEDto, EDUNOTE>
	{
	}


	public partial class EDUNOTEAssemblerBase : EntityAssembler<EDUNOTEDto, EDUNOTE>
	{
		partial void OnDTOAssembled(EDUNOTEDto dto);
		partial void OnEntityAssembled(EDUNOTE entity);


		public override EDUNOTE Assemble(EDUNOTE entity, EDUNOTEDto dto)
		{
			if (entity == null)
			{
				entity = new EDUNOTE();
			}
			entity.NOTEID = dto.NOTEID;
			entity.NOTECODE = dto.NOTECODE;
			entity.VERSIONCODE = dto.VERSIONCODE;
			entity.NOTEDATE = dto.NOTEDATE;
			entity.STATUS = dto.STATUS;
			entity.CREATER = dto.CREATER;
			entity.GRADECODE = dto.GRADECODE;
			entity.CREATEDATE = dto.CREATEDATE;
			entity.UPDATEDATE = dto.UPDATEDATE;
			entity.NSTATION = dto.NSTATION;
			entity.DEPCODE = dto.DEPCODE;
			entity.WARDCODE = dto.WARDCODE;
			entity.BEDNO = dto.BEDNO;
			entity.CLINICCODE = dto.CLINICCODE;
			entity.DES = dto.DES;
			return entity;
		}
		public override EDUNOTEDto Assemble(EDUNOTE entity)
		{
			EDUNOTEDto dto = new EDUNOTEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.NOTEID = entity.NOTEID;
			dto.NOTECODE = entity.NOTECODE;
			dto.VERSIONCODE = entity.VERSIONCODE;
			dto.NOTEDATE = entity.NOTEDATE;
			dto.STATUS = entity.STATUS;
			dto.CREATER = entity.CREATER;
			dto.GRADECODE = entity.GRADECODE;
			dto.CREATEDATE = entity.CREATEDATE;
			dto.UPDATEDATE = entity.UPDATEDATE;
			dto.NSTATION = entity.NSTATION;
			dto.DEPCODE = entity.DEPCODE;
			dto.WARDCODE = entity.WARDCODE;
			dto.BEDNO = entity.BEDNO;
			dto.CLINICCODE = entity.CLINICCODE;
			dto.DES = entity.DES;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUNOTALERTSETTINGAssembler : EDUNOTALERTSETTINGAssemblerBase, IEDUNOTALERTSETTINGAssembler
	{
	}


	public partial interface IEDUNOTALERTSETTINGAssembler : IEntityAssembler<EDUNOTALERTSETTINGDto, EDUNOTALERTSETTING>
	{
	}


	public partial class EDUNOTALERTSETTINGAssemblerBase : EntityAssembler<EDUNOTALERTSETTINGDto, EDUNOTALERTSETTING>
	{
		partial void OnDTOAssembled(EDUNOTALERTSETTINGDto dto);
		partial void OnEntityAssembled(EDUNOTALERTSETTING entity);


		public override EDUNOTALERTSETTING Assemble(EDUNOTALERTSETTING entity, EDUNOTALERTSETTINGDto dto)
		{
			if (entity == null)
			{
				entity = new EDUNOTALERTSETTING();
			}
			entity.EMPCODE = dto.EMPCODE;
			entity.ALERTTYPE = dto.ALERTTYPE;
			return entity;
		}
		public override EDUNOTALERTSETTINGDto Assemble(EDUNOTALERTSETTING entity)
		{
			EDUNOTALERTSETTINGDto dto = new EDUNOTALERTSETTINGDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EMPCODE = entity.EMPCODE;
			dto.ALERTTYPE = entity.ALERTTYPE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUMENUAssembler : EDUMENUAssemblerBase, IEDUMENUAssembler
	{
	}


	public partial interface IEDUMENUAssembler : IEntityAssembler<EDUMENUDto, EDUMENU>
	{
	}


	public partial class EDUMENUAssemblerBase : EntityAssembler<EDUMENUDto, EDUMENU>
	{
		partial void OnDTOAssembled(EDUMENUDto dto);
		partial void OnEntityAssembled(EDUMENU entity);


		public override EDUMENU Assemble(EDUMENU entity, EDUMENUDto dto)
		{
			if (entity == null)
			{
				entity = new EDUMENU();
			}
			entity.MENUID = dto.MENUID;
			entity.MENUTEXT = dto.MENUTEXT;
			entity.PARENTMENUTEXT = dto.PARENTMENUTEXT;
			entity.NAVIGATEURL = dto.NAVIGATEURL;
			entity.DISPLAYORDER = dto.DISPLAYORDER;
			return entity;
		}
		public override EDUMENUDto Assemble(EDUMENU entity)
		{
			EDUMENUDto dto = new EDUMENUDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.MENUID = entity.MENUID;
			dto.MENUTEXT = entity.MENUTEXT;
			dto.PARENTMENUTEXT = entity.PARENTMENUTEXT;
			dto.NAVIGATEURL = entity.NAVIGATEURL;
			dto.DISPLAYORDER = entity.DISPLAYORDER;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUFORMTEMPLATETARGETAssembler : EDUFORMTEMPLATETARGETAssemblerBase, IEDUFORMTEMPLATETARGETAssembler
	{
	}


	public partial interface IEDUFORMTEMPLATETARGETAssembler : IEntityAssembler<EDUFORMTEMPLATETARGETDto, EDUFORMTEMPLATETARGET>
	{
	}


	public partial class EDUFORMTEMPLATETARGETAssemblerBase : EntityAssembler<EDUFORMTEMPLATETARGETDto, EDUFORMTEMPLATETARGET>
	{
		partial void OnDTOAssembled(EDUFORMTEMPLATETARGETDto dto);
		partial void OnEntityAssembled(EDUFORMTEMPLATETARGET entity);


		public override EDUFORMTEMPLATETARGET Assemble(EDUFORMTEMPLATETARGET entity, EDUFORMTEMPLATETARGETDto dto)
		{
			if (entity == null)
			{
				entity = new EDUFORMTEMPLATETARGET();
			}
			entity.FTTARGETID = dto.FTTARGETID;
			entity.FTLISTID = dto.FTLISTID;
			entity.ROLETYPE = dto.ROLETYPE;
			entity.EXPIREDATE = dto.EXPIREDATE;
			entity.SUBTEMPLATE_ID = dto.SUBTEMPLATE_ID;
			entity.USERDEFINETARGETID = dto.USERDEFINETARGETID;
			entity.TEACHERTYPE = dto.TEACHERTYPE;
			return entity;
		}
		public override EDUFORMTEMPLATETARGETDto Assemble(EDUFORMTEMPLATETARGET entity)
		{
			EDUFORMTEMPLATETARGETDto dto = new EDUFORMTEMPLATETARGETDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.FTTARGETID = entity.FTTARGETID;
			dto.FTLISTID = entity.FTLISTID;
			dto.ROLETYPE = entity.ROLETYPE;
			dto.EXPIREDATE = entity.EXPIREDATE;
			dto.SUBTEMPLATE_ID = entity.SUBTEMPLATE_ID;
			dto.USERDEFINETARGETID = entity.USERDEFINETARGETID;
			dto.TEACHERTYPE = entity.TEACHERTYPE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUFORMTEMPLATELISTAssembler : EDUFORMTEMPLATELISTAssemblerBase, IEDUFORMTEMPLATELISTAssembler
	{
	}


	public partial interface IEDUFORMTEMPLATELISTAssembler : IEntityAssembler<EDUFORMTEMPLATELISTDto, EDUFORMTEMPLATELIST>
	{
	}


	public partial class EDUFORMTEMPLATELISTAssemblerBase : EntityAssembler<EDUFORMTEMPLATELISTDto, EDUFORMTEMPLATELIST>
	{
		partial void OnDTOAssembled(EDUFORMTEMPLATELISTDto dto);
		partial void OnEntityAssembled(EDUFORMTEMPLATELIST entity);


		public override EDUFORMTEMPLATELIST Assemble(EDUFORMTEMPLATELIST entity, EDUFORMTEMPLATELISTDto dto)
		{
			if (entity == null)
			{
				entity = new EDUFORMTEMPLATELIST();
			}
			entity.FTLISTID = dto.FTLISTID;
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.CREATESQL = dto.CREATESQL;
			entity.DES = dto.DES;
			entity.NAME = dto.NAME;
			entity.EXECUTEDATE = dto.EXECUTEDATE;
			entity.TEMPOTYPE = dto.TEMPOTYPE;
			entity.TEMPOSETTINGS = dto.TEMPOSETTINGS;
			entity.EDUTERMID = dto.EDUTERMID;
			entity.EACHSTUDENT = dto.EACHSTUDENT;
			entity.AUTOFTLISTID = dto.AUTOFTLISTID;
			entity.STATUS = dto.STATUS;
			entity.CREATER = dto.CREATER;
			entity.SENDORDERSETTING = dto.SENDORDERSETTING;
			entity.EDUYEAR = dto.EDUYEAR;
			entity.SENDMONTH = dto.SENDMONTH;
			entity.UDSTUDENT = dto.UDSTUDENT;
			return entity;
		}
		public override EDUFORMTEMPLATELISTDto Assemble(EDUFORMTEMPLATELIST entity)
		{
			EDUFORMTEMPLATELISTDto dto = new EDUFORMTEMPLATELISTDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.FTLISTID = entity.FTLISTID;
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.CREATESQL = entity.CREATESQL;
			dto.DES = entity.DES;
			dto.NAME = entity.NAME;
			dto.EXECUTEDATE = entity.EXECUTEDATE;
			dto.TEMPOTYPE = entity.TEMPOTYPE;
			dto.TEMPOSETTINGS = entity.TEMPOSETTINGS;
			dto.EDUTERMID = entity.EDUTERMID;
			dto.EACHSTUDENT = entity.EACHSTUDENT;
			dto.AUTOFTLISTID = entity.AUTOFTLISTID;
			dto.STATUS = entity.STATUS;
			dto.CREATER = entity.CREATER;
			dto.SENDORDERSETTING = entity.SENDORDERSETTING;
			dto.EDUYEAR = entity.EDUYEAR;
			dto.SENDMONTH = entity.SENDMONTH;
			dto.UDSTUDENT = entity.UDSTUDENT;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUFORMSTASTICPERMISSIONAssembler : EDUFORMSTASTICPERMISSIONAssemblerBase, IEDUFORMSTASTICPERMISSIONAssembler
	{
	}


	public partial interface IEDUFORMSTASTICPERMISSIONAssembler : IEntityAssembler<EDUFORMSTASTICPERMISSIONDto, EDUFORMSTASTICPERMISSION>
	{
	}


	public partial class EDUFORMSTASTICPERMISSIONAssemblerBase : EntityAssembler<EDUFORMSTASTICPERMISSIONDto, EDUFORMSTASTICPERMISSION>
	{
		partial void OnDTOAssembled(EDUFORMSTASTICPERMISSIONDto dto);
		partial void OnEntityAssembled(EDUFORMSTASTICPERMISSION entity);


		public override EDUFORMSTASTICPERMISSION Assemble(EDUFORMSTASTICPERMISSION entity, EDUFORMSTASTICPERMISSIONDto dto)
		{
			if (entity == null)
			{
				entity = new EDUFORMSTASTICPERMISSION();
			}
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.ROLEID = dto.ROLEID;
			entity.ENABLE = dto.ENABLE;
			return entity;
		}
		public override EDUFORMSTASTICPERMISSIONDto Assemble(EDUFORMSTASTICPERMISSION entity)
		{
			EDUFORMSTASTICPERMISSIONDto dto = new EDUFORMSTASTICPERMISSIONDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.ROLEID = entity.ROLEID;
			dto.ENABLE = entity.ENABLE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUACTVIEWTARGETAssembler : EDUACTVIEWTARGETAssemblerBase, IEDUACTVIEWTARGETAssembler
	{
	}


	public partial interface IEDUACTVIEWTARGETAssembler : IEntityAssembler<EDUACTVIEWTARGETDto, EDUACTVIEWTARGET>
	{
	}


	public partial class EDUACTVIEWTARGETAssemblerBase : EntityAssembler<EDUACTVIEWTARGETDto, EDUACTVIEWTARGET>
	{
		partial void OnDTOAssembled(EDUACTVIEWTARGETDto dto);
		partial void OnEntityAssembled(EDUACTVIEWTARGET entity);


		public override EDUACTVIEWTARGET Assemble(EDUACTVIEWTARGET entity, EDUACTVIEWTARGETDto dto)
		{
			if (entity == null)
			{
				entity = new EDUACTVIEWTARGET();
			}
			entity.EDUSTOPACTSCHEDULEID = dto.EDUSTOPACTSCHEDULEID;
			entity.TARGETTYPE = dto.TARGETTYPE;
			entity.TARGETID = dto.TARGETID;
			entity.ROLETYPE = dto.ROLETYPE;
			entity.TIMEFROM = dto.TIMEFROM;
			entity.TIMETO = dto.TIMETO;
			entity.TARGETJOB = dto.TARGETJOB;
			return entity;
		}
		public override EDUACTVIEWTARGETDto Assemble(EDUACTVIEWTARGET entity)
		{
			EDUACTVIEWTARGETDto dto = new EDUACTVIEWTARGETDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EDUSTOPACTSCHEDULEID = entity.EDUSTOPACTSCHEDULEID;
			dto.TARGETTYPE = entity.TARGETTYPE;
			dto.TARGETID = entity.TARGETID;
			dto.ROLETYPE = entity.ROLETYPE;
			dto.TIMEFROM = entity.TIMEFROM;
			dto.TIMETO = entity.TIMETO;
			dto.TARGETJOB = entity.TARGETJOB;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUACTTYPEROLEREFAssembler : EDUACTTYPEROLEREFAssemblerBase, IEDUACTTYPEROLEREFAssembler
	{
	}


	public partial interface IEDUACTTYPEROLEREFAssembler : IEntityAssembler<EDUACTTYPEROLEREFDto, EDUACTTYPEROLEREF>
	{
	}


	public partial class EDUACTTYPEROLEREFAssemblerBase : EntityAssembler<EDUACTTYPEROLEREFDto, EDUACTTYPEROLEREF>
	{
		partial void OnDTOAssembled(EDUACTTYPEROLEREFDto dto);
		partial void OnEntityAssembled(EDUACTTYPEROLEREF entity);


		public override EDUACTTYPEROLEREF Assemble(EDUACTTYPEROLEREF entity, EDUACTTYPEROLEREFDto dto)
		{
			if (entity == null)
			{
				entity = new EDUACTTYPEROLEREF();
			}
			entity.ACTTYPE = dto.ACTTYPE;
			entity.ROLEID = dto.ROLEID;
			entity.ENABLEDATE = dto.ENABLEDATE;
			entity.DISABLEDATE = dto.DISABLEDATE;
			entity.STATUS = dto.STATUS;
			return entity;
		}
		public override EDUACTTYPEROLEREFDto Assemble(EDUACTTYPEROLEREF entity)
		{
			EDUACTTYPEROLEREFDto dto = new EDUACTTYPEROLEREFDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ACTTYPE = entity.ACTTYPE;
			dto.ROLEID = entity.ROLEID;
			dto.ENABLEDATE = entity.ENABLEDATE;
			dto.DISABLEDATE = entity.DISABLEDATE;
			dto.STATUS = entity.STATUS;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUACTTYPEREFAssembler : EDUACTTYPEREFAssemblerBase, IEDUACTTYPEREFAssembler
	{
	}


	public partial interface IEDUACTTYPEREFAssembler : IEntityAssembler<EDUACTTYPEREFDto, EDUACTTYPEREF>
	{
	}


	public partial class EDUACTTYPEREFAssemblerBase : EntityAssembler<EDUACTTYPEREFDto, EDUACTTYPEREF>
	{
		partial void OnDTOAssembled(EDUACTTYPEREFDto dto);
		partial void OnEntityAssembled(EDUACTTYPEREF entity);


		public override EDUACTTYPEREF Assemble(EDUACTTYPEREF entity, EDUACTTYPEREFDto dto)
		{
			if (entity == null)
			{
				entity = new EDUACTTYPEREF();
			}
			entity.EDUSTOPACTSCHEDULEID = dto.EDUSTOPACTSCHEDULEID;
			entity.CLS_ID = dto.CLS_ID;
			return entity;
		}
		public override EDUACTTYPEREFDto Assemble(EDUACTTYPEREF entity)
		{
			EDUACTTYPEREFDto dto = new EDUACTTYPEREFDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EDUSTOPACTSCHEDULEID = entity.EDUSTOPACTSCHEDULEID;
			dto.CLS_ID = entity.CLS_ID;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUACTTYPEGROUPINGAssembler : EDUACTTYPEGROUPINGAssemblerBase, IEDUACTTYPEGROUPINGAssembler
	{
	}


	public partial interface IEDUACTTYPEGROUPINGAssembler : IEntityAssembler<EDUACTTYPEGROUPINGDto, EDUACTTYPEGROUPING>
	{
	}


	public partial class EDUACTTYPEGROUPINGAssemblerBase : EntityAssembler<EDUACTTYPEGROUPINGDto, EDUACTTYPEGROUPING>
	{
		partial void OnDTOAssembled(EDUACTTYPEGROUPINGDto dto);
		partial void OnEntityAssembled(EDUACTTYPEGROUPING entity);


		public override EDUACTTYPEGROUPING Assemble(EDUACTTYPEGROUPING entity, EDUACTTYPEGROUPINGDto dto)
		{
			if (entity == null)
			{
				entity = new EDUACTTYPEGROUPING();
			}
			entity.CLS_ID = dto.CLS_ID;
			entity.CONTAIN_CLS_ID = dto.CONTAIN_CLS_ID;
			return entity;
		}
		public override EDUACTTYPEGROUPINGDto Assemble(EDUACTTYPEGROUPING entity)
		{
			EDUACTTYPEGROUPINGDto dto = new EDUACTTYPEGROUPINGDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.CLS_ID = entity.CLS_ID;
			dto.CONTAIN_CLS_ID = entity.CONTAIN_CLS_ID;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUACTTYPE_BKAssembler : EDUACTTYPE_BKAssemblerBase, IEDUACTTYPE_BKAssembler
	{
	}


	public partial interface IEDUACTTYPE_BKAssembler : IEntityAssembler<EDUACTTYPE_BKDto, EDUACTTYPE_BK>
	{
	}


	public partial class EDUACTTYPE_BKAssemblerBase : EntityAssembler<EDUACTTYPE_BKDto, EDUACTTYPE_BK>
	{
		partial void OnDTOAssembled(EDUACTTYPE_BKDto dto);
		partial void OnEntityAssembled(EDUACTTYPE_BK entity);


		public override EDUACTTYPE_BK Assemble(EDUACTTYPE_BK entity, EDUACTTYPE_BKDto dto)
		{
			if (entity == null)
			{
				entity = new EDUACTTYPE_BK();
			}
			entity.CLS_ID = dto.CLS_ID;
			entity.CLS_NAME = dto.CLS_NAME;
			entity.CLS_PID = dto.CLS_PID;
			entity.CLS_FLOOR = dto.CLS_FLOOR;
			entity.CLS_PERMISSION = dto.CLS_PERMISSION;
			entity.CLS_GROUP_KEY = dto.CLS_GROUP_KEY;
			entity.CLS_EMP_CODE = dto.CLS_EMP_CODE;
			entity.CLS_DEPT_CODE = dto.CLS_DEPT_CODE;
			entity.CLS_TYPE = dto.CLS_TYPE;
			return entity;
		}
		public override EDUACTTYPE_BKDto Assemble(EDUACTTYPE_BK entity)
		{
			EDUACTTYPE_BKDto dto = new EDUACTTYPE_BKDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.CLS_ID = entity.CLS_ID;
			dto.CLS_NAME = entity.CLS_NAME;
			dto.CLS_PID = entity.CLS_PID;
			dto.CLS_FLOOR = entity.CLS_FLOOR;
			dto.CLS_PERMISSION = entity.CLS_PERMISSION;
			dto.CLS_GROUP_KEY = entity.CLS_GROUP_KEY;
			dto.CLS_EMP_CODE = entity.CLS_EMP_CODE;
			dto.CLS_DEPT_CODE = entity.CLS_DEPT_CODE;
			dto.CLS_TYPE = entity.CLS_TYPE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUACTTYPEAssembler : EDUACTTYPEAssemblerBase, IEDUACTTYPEAssembler
	{
	}


	public partial interface IEDUACTTYPEAssembler : IEntityAssembler<EDUACTTYPEDto, EDUACTTYPE>
	{
	}


	public partial class EDUACTTYPEAssemblerBase : EntityAssembler<EDUACTTYPEDto, EDUACTTYPE>
	{
		partial void OnDTOAssembled(EDUACTTYPEDto dto);
		partial void OnEntityAssembled(EDUACTTYPE entity);


		public override EDUACTTYPE Assemble(EDUACTTYPE entity, EDUACTTYPEDto dto)
		{
			if (entity == null)
			{
				entity = new EDUACTTYPE();
			}
			entity.CLS_ID = dto.CLS_ID;
			entity.CLS_NAME = dto.CLS_NAME;
			entity.CLS_PID = dto.CLS_PID;
			entity.CLS_FLOOR = dto.CLS_FLOOR;
			entity.CLS_PERMISSION = dto.CLS_PERMISSION;
			entity.CLS_GROUP_KEY = dto.CLS_GROUP_KEY;
			entity.CLS_EMP_CODE = dto.CLS_EMP_CODE;
			entity.CLS_DEPT_CODE = dto.CLS_DEPT_CODE;
			entity.CLS_TYPE = dto.CLS_TYPE;
			return entity;
		}
		public override EDUACTTYPEDto Assemble(EDUACTTYPE entity)
		{
			EDUACTTYPEDto dto = new EDUACTTYPEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.CLS_ID = entity.CLS_ID;
			dto.CLS_NAME = entity.CLS_NAME;
			dto.CLS_PID = entity.CLS_PID;
			dto.CLS_FLOOR = entity.CLS_FLOOR;
			dto.CLS_PERMISSION = entity.CLS_PERMISSION;
			dto.CLS_GROUP_KEY = entity.CLS_GROUP_KEY;
			dto.CLS_EMP_CODE = entity.CLS_EMP_CODE;
			dto.CLS_DEPT_CODE = entity.CLS_DEPT_CODE;
			dto.CLS_TYPE = entity.CLS_TYPE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUACTTOPICAssembler : EDUACTTOPICAssemblerBase, IEDUACTTOPICAssembler
	{
	}


	public partial interface IEDUACTTOPICAssembler : IEntityAssembler<EDUACTTOPICDto, EDUACTTOPIC>
	{
	}


	public partial class EDUACTTOPICAssemblerBase : EntityAssembler<EDUACTTOPICDto, EDUACTTOPIC>
	{
		partial void OnDTOAssembled(EDUACTTOPICDto dto);
		partial void OnEntityAssembled(EDUACTTOPIC entity);


		public override EDUACTTOPIC Assemble(EDUACTTOPIC entity, EDUACTTOPICDto dto)
		{
			if (entity == null)
			{
				entity = new EDUACTTOPIC();
			}
			entity.EDUACTTOPICID = dto.EDUACTTOPICID;
			entity.EDUACTTOPICCODE = dto.EDUACTTOPICCODE;
			entity.EDUACTTOPICNAME = dto.EDUACTTOPICNAME;
			return entity;
		}
		public override EDUACTTOPICDto Assemble(EDUACTTOPIC entity)
		{
			EDUACTTOPICDto dto = new EDUACTTOPICDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EDUACTTOPICID = entity.EDUACTTOPICID;
			dto.EDUACTTOPICCODE = entity.EDUACTTOPICCODE;
			dto.EDUACTTOPICNAME = entity.EDUACTTOPICNAME;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUACTTARGETAssembler : EDUACTTARGETAssemblerBase, IEDUACTTARGETAssembler
	{
	}


	public partial interface IEDUACTTARGETAssembler : IEntityAssembler<EDUACTTARGETDto, EDUACTTARGET>
	{
	}


	public partial class EDUACTTARGETAssemblerBase : EntityAssembler<EDUACTTARGETDto, EDUACTTARGET>
	{
		partial void OnDTOAssembled(EDUACTTARGETDto dto);
		partial void OnEntityAssembled(EDUACTTARGET entity);


		public override EDUACTTARGET Assemble(EDUACTTARGET entity, EDUACTTARGETDto dto)
		{
			if (entity == null)
			{
				entity = new EDUACTTARGET();
			}
			entity.EDUSTOPACTSCHEDULEID = dto.EDUSTOPACTSCHEDULEID;
			entity.TARGETTYPE = dto.TARGETTYPE;
			entity.TARGETID = dto.TARGETID;
			entity.ROLETYPE = dto.ROLETYPE;
			entity.TIMEFROM = dto.TIMEFROM;
			entity.TIMETO = dto.TIMETO;
			entity.TARGETJOB = dto.TARGETJOB;
			entity.CHECKINTIME = dto.CHECKINTIME;
			entity.CHECKOUTTIME = dto.CHECKOUTTIME;
			entity.CREATETIME = dto.CREATETIME;
			entity.CREATER = dto.CREATER;
			return entity;
		}
		public override EDUACTTARGETDto Assemble(EDUACTTARGET entity)
		{
			EDUACTTARGETDto dto = new EDUACTTARGETDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EDUSTOPACTSCHEDULEID = entity.EDUSTOPACTSCHEDULEID;
			dto.TARGETTYPE = entity.TARGETTYPE;
			dto.TARGETID = entity.TARGETID;
			dto.ROLETYPE = entity.ROLETYPE;
			dto.TIMEFROM = entity.TIMEFROM;
			dto.TIMETO = entity.TIMETO;
			dto.TARGETJOB = entity.TARGETJOB;
			dto.CHECKINTIME = entity.CHECKINTIME;
			dto.CHECKOUTTIME = entity.CHECKOUTTIME;
			dto.CREATETIME = entity.CREATETIME;
			dto.CREATER = entity.CREATER;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EDUACTBOOKINGAssembler : EDUACTBOOKINGAssemblerBase, IEDUACTBOOKINGAssembler
	{
	}


	public partial interface IEDUACTBOOKINGAssembler : IEntityAssembler<EDUACTBOOKINGDto, EDUACTBOOKING>
	{
	}


	public partial class EDUACTBOOKINGAssemblerBase : EntityAssembler<EDUACTBOOKINGDto, EDUACTBOOKING>
	{
		partial void OnDTOAssembled(EDUACTBOOKINGDto dto);
		partial void OnEntityAssembled(EDUACTBOOKING entity);


		public override EDUACTBOOKING Assemble(EDUACTBOOKING entity, EDUACTBOOKINGDto dto)
		{
			if (entity == null)
			{
				entity = new EDUACTBOOKING();
			}
			entity.EDUSTOPACTSCHEDULEID = dto.EDUSTOPACTSCHEDULEID;
			entity.EMPCODE = dto.EMPCODE;
			entity.BOOKINGID = dto.BOOKINGID;
			entity.BOOKTIME = dto.BOOKTIME;
			return entity;
		}
		public override EDUACTBOOKINGDto Assemble(EDUACTBOOKING entity)
		{
			EDUACTBOOKINGDto dto = new EDUACTBOOKINGDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EDUSTOPACTSCHEDULEID = entity.EDUSTOPACTSCHEDULEID;
			dto.EMPCODE = entity.EMPCODE;
			dto.BOOKINGID = entity.BOOKINGID;
			dto.BOOKTIME = entity.BOOKTIME;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class DOCTORPOINTTYPEAssembler : DOCTORPOINTTYPEAssemblerBase, IDOCTORPOINTTYPEAssembler
	{
	}


	public partial interface IDOCTORPOINTTYPEAssembler : IEntityAssembler<DOCTORPOINTTYPEDto, DOCTORPOINTTYPE>
	{
	}


	public partial class DOCTORPOINTTYPEAssemblerBase : EntityAssembler<DOCTORPOINTTYPEDto, DOCTORPOINTTYPE>
	{
		partial void OnDTOAssembled(DOCTORPOINTTYPEDto dto);
		partial void OnEntityAssembled(DOCTORPOINTTYPE entity);


		public override DOCTORPOINTTYPE Assemble(DOCTORPOINTTYPE entity, DOCTORPOINTTYPEDto dto)
		{
			if (entity == null)
			{
				entity = new DOCTORPOINTTYPE();
			}
			entity.PTYPECODE = dto.PTYPECODE;
			entity.PTYPENAME = dto.PTYPENAME;
			entity.CTYPECODE = dto.CTYPECODE;
			entity.TRAININGTYPECODE = dto.TRAININGTYPECODE;
			entity.EACHCOUNT = dto.EACHCOUNT;
			entity.MEMO = dto.MEMO;
			return entity;
		}
		public override DOCTORPOINTTYPEDto Assemble(DOCTORPOINTTYPE entity)
		{
			DOCTORPOINTTYPEDto dto = new DOCTORPOINTTYPEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.PTYPECODE = entity.PTYPECODE;
			dto.PTYPENAME = entity.PTYPENAME;
			dto.CTYPECODE = entity.CTYPECODE;
			dto.TRAININGTYPECODE = entity.TRAININGTYPECODE;
			dto.EACHCOUNT = entity.EACHCOUNT;
			dto.MEMO = entity.MEMO;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class DOCTORPOINTCALTYPEAssembler : DOCTORPOINTCALTYPEAssemblerBase, IDOCTORPOINTCALTYPEAssembler
	{
	}


	public partial interface IDOCTORPOINTCALTYPEAssembler : IEntityAssembler<DOCTORPOINTCALTYPEDto, DOCTORPOINTCALTYPE>
	{
	}


	public partial class DOCTORPOINTCALTYPEAssemblerBase : EntityAssembler<DOCTORPOINTCALTYPEDto, DOCTORPOINTCALTYPE>
	{
		partial void OnDTOAssembled(DOCTORPOINTCALTYPEDto dto);
		partial void OnEntityAssembled(DOCTORPOINTCALTYPE entity);


		public override DOCTORPOINTCALTYPE Assemble(DOCTORPOINTCALTYPE entity, DOCTORPOINTCALTYPEDto dto)
		{
			if (entity == null)
			{
				entity = new DOCTORPOINTCALTYPE();
			}
			entity.CTYPECODE = dto.CTYPECODE;
			entity.CTYPENAME = dto.CTYPENAME;
			entity.CREATER = dto.CREATER;
			entity.CREATEDATE = dto.CREATEDATE;
			return entity;
		}
		public override DOCTORPOINTCALTYPEDto Assemble(DOCTORPOINTCALTYPE entity)
		{
			DOCTORPOINTCALTYPEDto dto = new DOCTORPOINTCALTYPEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.CTYPECODE = entity.CTYPECODE;
			dto.CTYPENAME = entity.CTYPENAME;
			dto.CREATER = entity.CREATER;
			dto.CREATEDATE = entity.CREATEDATE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class DOCTORPOINTAssembler : DOCTORPOINTAssemblerBase, IDOCTORPOINTAssembler
	{
	}


	public partial interface IDOCTORPOINTAssembler : IEntityAssembler<DOCTORPOINTDto, DOCTORPOINT>
	{
	}


	public partial class DOCTORPOINTAssemblerBase : EntityAssembler<DOCTORPOINTDto, DOCTORPOINT>
	{
		partial void OnDTOAssembled(DOCTORPOINTDto dto);
		partial void OnEntityAssembled(DOCTORPOINT entity);


		public override DOCTORPOINT Assemble(DOCTORPOINT entity, DOCTORPOINTDto dto)
		{
			if (entity == null)
			{
				entity = new DOCTORPOINT();
			}
			entity.POINTID = dto.POINTID;
			entity.PTYPECODE = dto.PTYPECODE;
			entity.EMPCODE = dto.EMPCODE;
			entity.CALDATE = dto.CALDATE;
			entity.TIMESCOUNT = dto.TIMESCOUNT;
			entity.MEMO = dto.MEMO;
			entity.CREATER = dto.CREATER;
			entity.CREATEDATE = dto.CREATEDATE;
			entity.STATUS = dto.STATUS;
			return entity;
		}
		public override DOCTORPOINTDto Assemble(DOCTORPOINT entity)
		{
			DOCTORPOINTDto dto = new DOCTORPOINTDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.POINTID = entity.POINTID;
			dto.PTYPECODE = entity.PTYPECODE;
			dto.EMPCODE = entity.EMPCODE;
			dto.CALDATE = entity.CALDATE;
			dto.TIMESCOUNT = entity.TIMESCOUNT;
			dto.MEMO = entity.MEMO;
			dto.CREATER = entity.CREATER;
			dto.CREATEDATE = entity.CREATEDATE;
			dto.STATUS = entity.STATUS;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class DEPSECTEMPAssembler : DEPSECTEMPAssemblerBase, IDEPSECTEMPAssembler
	{
	}


	public partial interface IDEPSECTEMPAssembler : IEntityAssembler<DEPSECTEMPDto, DEPSECTEMP>
	{
	}


	public partial class DEPSECTEMPAssemblerBase : EntityAssembler<DEPSECTEMPDto, DEPSECTEMP>
	{
		partial void OnDTOAssembled(DEPSECTEMPDto dto);
		partial void OnEntityAssembled(DEPSECTEMP entity);


		public override DEPSECTEMP Assemble(DEPSECTEMP entity, DEPSECTEMPDto dto)
		{
			if (entity == null)
			{
				entity = new DEPSECTEMP();
			}
			entity.EMPNAME = dto.EMPNAME;
			entity.EMPCODE = dto.EMPCODE;
			entity.DEPNAME = dto.DEPNAME;
			entity.DEPCODE = dto.DEPCODE;
			return entity;
		}
		public override DEPSECTEMPDto Assemble(DEPSECTEMP entity)
		{
			DEPSECTEMPDto dto = new DEPSECTEMPDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EMPNAME = entity.EMPNAME;
			dto.EMPCODE = entity.EMPCODE;
			dto.DEPNAME = entity.DEPNAME;
			dto.DEPCODE = entity.DEPCODE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class DEPSECDATUMAssembler : DEPSECDATUMAssemblerBase, IDEPSECDATUMAssembler
	{
	}


	public partial interface IDEPSECDATUMAssembler : IEntityAssembler<DEPSECDATUMDto, DEPSECDATUM>
	{
	}


	public partial class DEPSECDATUMAssemblerBase : EntityAssembler<DEPSECDATUMDto, DEPSECDATUM>
	{
		partial void OnDTOAssembled(DEPSECDATUMDto dto);
		partial void OnEntityAssembled(DEPSECDATUM entity);


		public override DEPSECDATUM Assemble(DEPSECDATUM entity, DEPSECDATUMDto dto)
		{
			if (entity == null)
			{
				entity = new DEPSECDATUM();
			}
			entity.EMP_CODE = dto.EMP_CODE;
			entity.DEPT_CODE = dto.DEPT_CODE;
			return entity;
		}
		public override DEPSECDATUMDto Assemble(DEPSECDATUM entity)
		{
			DEPSECDATUMDto dto = new DEPSECDATUMDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EMP_CODE = entity.EMP_CODE;
			dto.DEPT_CODE = entity.DEPT_CODE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class CLERKIPDNOTEDATUMAssembler : CLERKIPDNOTEDATUMAssemblerBase, ICLERKIPDNOTEDATUMAssembler
	{
	}


	public partial interface ICLERKIPDNOTEDATUMAssembler : IEntityAssembler<CLERKIPDNOTEDATUMDto, CLERKIPDNOTEDATUM>
	{
	}


	public partial class CLERKIPDNOTEDATUMAssemblerBase : EntityAssembler<CLERKIPDNOTEDATUMDto, CLERKIPDNOTEDATUM>
	{
		partial void OnDTOAssembled(CLERKIPDNOTEDATUMDto dto);
		partial void OnEntityAssembled(CLERKIPDNOTEDATUM entity);


		public override CLERKIPDNOTEDATUM Assemble(CLERKIPDNOTEDATUM entity, CLERKIPDNOTEDATUMDto dto)
		{
			if (entity == null)
			{
				entity = new CLERKIPDNOTEDATUM();
			}
			entity.EMPCODE = dto.EMPCODE;
			entity.DEPTCODE = dto.DEPTCODE;
			entity.DEPTNAME = dto.DEPTNAME;
			entity.THEDATE = dto.THEDATE;
			entity.NOTECOUNT = dto.NOTECOUNT;
			return entity;
		}
		public override CLERKIPDNOTEDATUMDto Assemble(CLERKIPDNOTEDATUM entity)
		{
			CLERKIPDNOTEDATUMDto dto = new CLERKIPDNOTEDATUMDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EMPCODE = entity.EMPCODE;
			dto.DEPTCODE = entity.DEPTCODE;
			dto.DEPTNAME = entity.DEPTNAME;
			dto.THEDATE = entity.THEDATE;
			dto.NOTECOUNT = entity.NOTECOUNT;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class CICBOOKAssembler : CICBOOKAssemblerBase, ICICBOOKAssembler
	{
	}


	public partial interface ICICBOOKAssembler : IEntityAssembler<CICBOOKDto, CICBOOK>
	{
	}


	public partial class CICBOOKAssemblerBase : EntityAssembler<CICBOOKDto, CICBOOK>
	{
		partial void OnDTOAssembled(CICBOOKDto dto);
		partial void OnEntityAssembled(CICBOOK entity);


		public override CICBOOK Assemble(CICBOOK entity, CICBOOKDto dto)
		{
			if (entity == null)
			{
				entity = new CICBOOK();
			}
			entity.ID = dto.ID;
			entity.EID = dto.EID;
			entity.EMPNAME = dto.EMPNAME;
			entity.TEACHERLIST = dto.TEACHERLIST;
			entity.SERIALNO = dto.SERIALNO;
			entity.STARTDATE = dto.STARTDATE;
			entity.ENDDATE = dto.ENDDATE;
			entity.DEPT = dto.DEPT;
			return entity;
		}
		public override CICBOOKDto Assemble(CICBOOK entity)
		{
			CICBOOKDto dto = new CICBOOKDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.EID = entity.EID;
			dto.EMPNAME = entity.EMPNAME;
			dto.TEACHERLIST = entity.TEACHERLIST;
			dto.SERIALNO = entity.SERIALNO;
			dto.STARTDATE = entity.STARTDATE;
			dto.ENDDATE = entity.ENDDATE;
			dto.DEPT = entity.DEPT;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class AUTOEDUFORMTEMPLATETARGETAssembler : AUTOEDUFORMTEMPLATETARGETAssemblerBase, IAUTOEDUFORMTEMPLATETARGETAssembler
	{
	}


	public partial interface IAUTOEDUFORMTEMPLATETARGETAssembler : IEntityAssembler<AUTOEDUFORMTEMPLATETARGETDto, AUTOEDUFORMTEMPLATETARGET>
	{
	}


	public partial class AUTOEDUFORMTEMPLATETARGETAssemblerBase : EntityAssembler<AUTOEDUFORMTEMPLATETARGETDto, AUTOEDUFORMTEMPLATETARGET>
	{
		partial void OnDTOAssembled(AUTOEDUFORMTEMPLATETARGETDto dto);
		partial void OnEntityAssembled(AUTOEDUFORMTEMPLATETARGET entity);


		public override AUTOEDUFORMTEMPLATETARGET Assemble(AUTOEDUFORMTEMPLATETARGET entity, AUTOEDUFORMTEMPLATETARGETDto dto)
		{
			if (entity == null)
			{
				entity = new AUTOEDUFORMTEMPLATETARGET();
			}
			entity.AUTOFTTARGETID = dto.AUTOFTTARGETID;
			entity.AUTOFTLISTID = dto.AUTOFTLISTID;
			entity.ROLETYPE = dto.ROLETYPE;
			entity.EXPIREDAYS = dto.EXPIREDAYS;
			entity.SUBTEMPLATE_ID = dto.SUBTEMPLATE_ID;
			entity.USERDEFINETARGETID = dto.USERDEFINETARGETID;
			entity.TEACHERTYPE = dto.TEACHERTYPE;
			entity.EXPIREDAYSTYPE = dto.EXPIREDAYSTYPE;
			return entity;
		}
		public override AUTOEDUFORMTEMPLATETARGETDto Assemble(AUTOEDUFORMTEMPLATETARGET entity)
		{
			AUTOEDUFORMTEMPLATETARGETDto dto = new AUTOEDUFORMTEMPLATETARGETDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.AUTOFTTARGETID = entity.AUTOFTTARGETID;
			dto.AUTOFTLISTID = entity.AUTOFTLISTID;
			dto.ROLETYPE = entity.ROLETYPE;
			dto.EXPIREDAYS = entity.EXPIREDAYS;
			dto.SUBTEMPLATE_ID = entity.SUBTEMPLATE_ID;
			dto.USERDEFINETARGETID = entity.USERDEFINETARGETID;
			dto.TEACHERTYPE = entity.TEACHERTYPE;
			dto.EXPIREDAYSTYPE = entity.EXPIREDAYSTYPE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class AUTOEDUFORMTEMPLATESIGNERAssembler : AUTOEDUFORMTEMPLATESIGNERAssemblerBase, IAUTOEDUFORMTEMPLATESIGNERAssembler
	{
	}


	public partial interface IAUTOEDUFORMTEMPLATESIGNERAssembler : IEntityAssembler<AUTOEDUFORMTEMPLATESIGNERDto, AUTOEDUFORMTEMPLATESIGNER>
	{
	}


	public partial class AUTOEDUFORMTEMPLATESIGNERAssemblerBase : EntityAssembler<AUTOEDUFORMTEMPLATESIGNERDto, AUTOEDUFORMTEMPLATESIGNER>
	{
		partial void OnDTOAssembled(AUTOEDUFORMTEMPLATESIGNERDto dto);
		partial void OnEntityAssembled(AUTOEDUFORMTEMPLATESIGNER entity);


		public override AUTOEDUFORMTEMPLATESIGNER Assemble(AUTOEDUFORMTEMPLATESIGNER entity, AUTOEDUFORMTEMPLATESIGNERDto dto)
		{
			if (entity == null)
			{
				entity = new AUTOEDUFORMTEMPLATESIGNER();
			}
			entity.ID = dto.ID;
			entity.AUTOFTLISTID = dto.AUTOFTLISTID;
			entity.SIGNORDER = dto.SIGNORDER;
			entity.SIGNROLETYPE = dto.SIGNROLETYPE;
			return entity;
		}
		public override AUTOEDUFORMTEMPLATESIGNERDto Assemble(AUTOEDUFORMTEMPLATESIGNER entity)
		{
			AUTOEDUFORMTEMPLATESIGNERDto dto = new AUTOEDUFORMTEMPLATESIGNERDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.AUTOFTLISTID = entity.AUTOFTLISTID;
			dto.SIGNORDER = entity.SIGNORDER;
			dto.SIGNROLETYPE = entity.SIGNROLETYPE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class AUTOEDUFORMTEMPLATELISTAssembler : AUTOEDUFORMTEMPLATELISTAssemblerBase, IAUTOEDUFORMTEMPLATELISTAssembler
	{
	}


	public partial interface IAUTOEDUFORMTEMPLATELISTAssembler : IEntityAssembler<AUTOEDUFORMTEMPLATELISTDto, AUTOEDUFORMTEMPLATELIST>
	{
	}


	public partial class AUTOEDUFORMTEMPLATELISTAssemblerBase : EntityAssembler<AUTOEDUFORMTEMPLATELISTDto, AUTOEDUFORMTEMPLATELIST>
	{
		partial void OnDTOAssembled(AUTOEDUFORMTEMPLATELISTDto dto);
		partial void OnEntityAssembled(AUTOEDUFORMTEMPLATELIST entity);


		public override AUTOEDUFORMTEMPLATELIST Assemble(AUTOEDUFORMTEMPLATELIST entity, AUTOEDUFORMTEMPLATELISTDto dto)
		{
			if (entity == null)
			{
				entity = new AUTOEDUFORMTEMPLATELIST();
			}
			entity.AUTOFTLISTID = dto.AUTOFTLISTID;
			entity.JOBCODE = dto.JOBCODE;
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.SETTINGNAME = dto.SETTINGNAME;
			entity.DES = dto.DES;
			entity.EACHSTUDENT = dto.EACHSTUDENT;
			entity.DATESHIFTTYPE = dto.DATESHIFTTYPE;
			entity.DATESHIFT = dto.DATESHIFT;
			entity.MULTITARGET = dto.MULTITARGET;
			entity.TEACHERTYPE = dto.TEACHERTYPE;
			entity.SENDFLOOR = dto.SENDFLOOR;
			entity.CREATER = dto.CREATER;
			entity.SENDORDERSETTING = dto.SENDORDERSETTING;
			entity.EDUYEAR = dto.EDUYEAR;
			entity.SDATE = dto.SDATE;
			entity.EDATE = dto.EDATE;
			return entity;
		}
		public override AUTOEDUFORMTEMPLATELISTDto Assemble(AUTOEDUFORMTEMPLATELIST entity)
		{
			AUTOEDUFORMTEMPLATELISTDto dto = new AUTOEDUFORMTEMPLATELISTDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.AUTOFTLISTID = entity.AUTOFTLISTID;
			dto.JOBCODE = entity.JOBCODE;
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.SETTINGNAME = entity.SETTINGNAME;
			dto.DES = entity.DES;
			dto.EACHSTUDENT = entity.EACHSTUDENT;
			dto.DATESHIFTTYPE = entity.DATESHIFTTYPE;
			dto.DATESHIFT = entity.DATESHIFT;
			dto.MULTITARGET = entity.MULTITARGET;
			dto.TEACHERTYPE = entity.TEACHERTYPE;
			dto.SENDFLOOR = entity.SENDFLOOR;
			dto.CREATER = entity.CREATER;
			dto.SENDORDERSETTING = entity.SENDORDERSETTING;
			dto.EDUYEAR = entity.EDUYEAR;
			dto.SDATE = entity.SDATE;
			dto.EDATE = entity.EDATE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class AUTOEDUFORMTEMPLATEEXCEPTAssembler : AUTOEDUFORMTEMPLATEEXCEPTAssemblerBase, IAUTOEDUFORMTEMPLATEEXCEPTAssembler
	{
	}


	public partial interface IAUTOEDUFORMTEMPLATEEXCEPTAssembler : IEntityAssembler<AUTOEDUFORMTEMPLATEEXCEPTDto, AUTOEDUFORMTEMPLATEEXCEPT>
	{
	}


	public partial class AUTOEDUFORMTEMPLATEEXCEPTAssemblerBase : EntityAssembler<AUTOEDUFORMTEMPLATEEXCEPTDto, AUTOEDUFORMTEMPLATEEXCEPT>
	{
		partial void OnDTOAssembled(AUTOEDUFORMTEMPLATEEXCEPTDto dto);
		partial void OnEntityAssembled(AUTOEDUFORMTEMPLATEEXCEPT entity);


		public override AUTOEDUFORMTEMPLATEEXCEPT Assemble(AUTOEDUFORMTEMPLATEEXCEPT entity, AUTOEDUFORMTEMPLATEEXCEPTDto dto)
		{
			if (entity == null)
			{
				entity = new AUTOEDUFORMTEMPLATEEXCEPT();
			}
			entity.AUTOFTLISTID = dto.AUTOFTLISTID;
			entity.EXCEPTTYPE = dto.EXCEPTTYPE;
			entity.EXCEPTKEY = dto.EXCEPTKEY;
			return entity;
		}
		public override AUTOEDUFORMTEMPLATEEXCEPTDto Assemble(AUTOEDUFORMTEMPLATEEXCEPT entity)
		{
			AUTOEDUFORMTEMPLATEEXCEPTDto dto = new AUTOEDUFORMTEMPLATEEXCEPTDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.AUTOFTLISTID = entity.AUTOFTLISTID;
			dto.EXCEPTTYPE = entity.EXCEPTTYPE;
			dto.EXCEPTKEY = entity.EXCEPTKEY;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class AUTHROLEAssembler : AUTHROLEAssemblerBase, IAUTHROLEAssembler
	{
	}


	public partial interface IAUTHROLEAssembler : IEntityAssembler<AUTHROLEDto, AUTHROLE>
	{
	}


	public partial class AUTHROLEAssemblerBase : EntityAssembler<AUTHROLEDto, AUTHROLE>
	{
		partial void OnDTOAssembled(AUTHROLEDto dto);
		partial void OnEntityAssembled(AUTHROLE entity);


		public override AUTHROLE Assemble(AUTHROLE entity, AUTHROLEDto dto)
		{
			if (entity == null)
			{
				entity = new AUTHROLE();
			}
			entity.ROLEID = dto.ROLEID;
			entity.ROLENAME = dto.ROLENAME;
			entity.ALLOWSETTING = dto.ALLOWSETTING;
			return entity;
		}
		public override AUTHROLEDto Assemble(AUTHROLE entity)
		{
			AUTHROLEDto dto = new AUTHROLEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ROLEID = entity.ROLEID;
			dto.ROLENAME = entity.ROLENAME;
			dto.ALLOWSETTING = entity.ALLOWSETTING;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class AUTHMENUAssembler : AUTHMENUAssemblerBase, IAUTHMENUAssembler
	{
	}


	public partial interface IAUTHMENUAssembler : IEntityAssembler<AUTHMENUDto, AUTHMENU>
	{
	}


	public partial class AUTHMENUAssemblerBase : EntityAssembler<AUTHMENUDto, AUTHMENU>
	{
		partial void OnDTOAssembled(AUTHMENUDto dto);
		partial void OnEntityAssembled(AUTHMENU entity);


		public override AUTHMENU Assemble(AUTHMENU entity, AUTHMENUDto dto)
		{
			if (entity == null)
			{
				entity = new AUTHMENU();
			}
			entity.MENUID = dto.MENUID;
			entity.AUTHID = dto.AUTHID;
			entity.AUTHTYPE = dto.AUTHTYPE;
			entity.ENABLETIME = dto.ENABLETIME;
			return entity;
		}
		public override AUTHMENUDto Assemble(AUTHMENU entity)
		{
			AUTHMENUDto dto = new AUTHMENUDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.MENUID = entity.MENUID;
			dto.AUTHID = entity.AUTHID;
			dto.AUTHTYPE = entity.AUTHTYPE;
			dto.ENABLETIME = entity.ENABLETIME;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class ACTTYPETREE_TEMPAssembler : ACTTYPETREE_TEMPAssemblerBase, IACTTYPETREE_TEMPAssembler
	{
	}


	public partial interface IACTTYPETREE_TEMPAssembler : IEntityAssembler<ACTTYPETREE_TEMPDto, ACTTYPETREE_TEMP>
	{
	}


	public partial class ACTTYPETREE_TEMPAssemblerBase : EntityAssembler<ACTTYPETREE_TEMPDto, ACTTYPETREE_TEMP>
	{
		partial void OnDTOAssembled(ACTTYPETREE_TEMPDto dto);
		partial void OnEntityAssembled(ACTTYPETREE_TEMP entity);


		public override ACTTYPETREE_TEMP Assemble(ACTTYPETREE_TEMP entity, ACTTYPETREE_TEMPDto dto)
		{
			if (entity == null)
			{
				entity = new ACTTYPETREE_TEMP();
			}
			entity.LEVEL = dto.LEVEL;
			entity.CLS_NAME = dto.CLS_NAME;
			return entity;
		}
		public override ACTTYPETREE_TEMPDto Assemble(ACTTYPETREE_TEMP entity)
		{
			ACTTYPETREE_TEMPDto dto = new ACTTYPETREE_TEMPDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.LEVEL = entity.LEVEL;
			dto.CLS_NAME = entity.CLS_NAME;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class ACCOUNTAssembler : ACCOUNTAssemblerBase, IACCOUNTAssembler
	{
	}


	public partial interface IACCOUNTAssembler : IEntityAssembler<ACCOUNTDto, ACCOUNT>
	{
	}


	public partial class ACCOUNTAssemblerBase : EntityAssembler<ACCOUNTDto, ACCOUNT>
	{
		partial void OnDTOAssembled(ACCOUNTDto dto);
		partial void OnEntityAssembled(ACCOUNT entity);


		public override ACCOUNT Assemble(ACCOUNT entity, ACCOUNTDto dto)
		{
			if (entity == null)
			{
				entity = new ACCOUNT();
			}
			entity.EMPCODE = dto.EMPCODE;
			entity.PWD = dto.PWD;
			entity.EMPNAME = dto.EMPNAME;
			entity.DEPTCODE = dto.DEPTCODE;
			entity.HOSPCODE = dto.HOSPCODE;
			entity.STATUS = dto.STATUS;
			entity.SDATE = dto.SDATE;
			entity.EDATE = dto.EDATE;
			entity.ID = dto.ID;
			entity.CREATER = dto.CREATER;
			entity.CREATEDATE = dto.CREATEDATE;
			return entity;
		}
		public override ACCOUNTDto Assemble(ACCOUNT entity)
		{
			ACCOUNTDto dto = new ACCOUNTDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EMPCODE = entity.EMPCODE;
			dto.PWD = entity.PWD;
			dto.EMPNAME = entity.EMPNAME;
			dto.DEPTCODE = entity.DEPTCODE;
			dto.HOSPCODE = entity.HOSPCODE;
			dto.STATUS = entity.STATUS;
			dto.SDATE = entity.SDATE;
			dto.EDATE = entity.EDATE;
			dto.ID = entity.ID;
			dto.CREATER = entity.CREATER;
			dto.CREATEDATE = entity.CREATEDATE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class ACCOUNTROLEIMPORTAssembler : ACCOUNTROLEIMPORTAssemblerBase, IACCOUNTROLEIMPORTAssembler
	{
	}


	public partial interface IACCOUNTROLEIMPORTAssembler : IEntityAssembler<ACCOUNTROLEIMPORTDto, ACCOUNTROLEIMPORT>
	{
	}


	public partial class ACCOUNTROLEIMPORTAssemblerBase : EntityAssembler<ACCOUNTROLEIMPORTDto, ACCOUNTROLEIMPORT>
	{
		partial void OnDTOAssembled(ACCOUNTROLEIMPORTDto dto);
		partial void OnEntityAssembled(ACCOUNTROLEIMPORT entity);


		public override ACCOUNTROLEIMPORT Assemble(ACCOUNTROLEIMPORT entity, ACCOUNTROLEIMPORTDto dto)
		{
			if (entity == null)
			{
				entity = new ACCOUNTROLEIMPORT();
			}
			entity.EMPCODE = dto.EMPCODE;
			entity.ROLEID = dto.ROLEID;
			return entity;
		}
		public override ACCOUNTROLEIMPORTDto Assemble(ACCOUNTROLEIMPORT entity)
		{
			ACCOUNTROLEIMPORTDto dto = new ACCOUNTROLEIMPORTDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EMPCODE = entity.EMPCODE;
			dto.ROLEID = entity.ROLEID;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class ACCOUNTROLEAssembler : ACCOUNTROLEAssemblerBase, IACCOUNTROLEAssembler
	{
	}


	public partial interface IACCOUNTROLEAssembler : IEntityAssembler<ACCOUNTROLEDto, ACCOUNTROLE>
	{
	}


	public partial class ACCOUNTROLEAssemblerBase : EntityAssembler<ACCOUNTROLEDto, ACCOUNTROLE>
	{
		partial void OnDTOAssembled(ACCOUNTROLEDto dto);
		partial void OnEntityAssembled(ACCOUNTROLE entity);


		public override ACCOUNTROLE Assemble(ACCOUNTROLE entity, ACCOUNTROLEDto dto)
		{
			if (entity == null)
			{
				entity = new ACCOUNTROLE();
			}
			entity.EMPCODE = dto.EMPCODE;
			entity.ROLEID = dto.ROLEID;
			entity.CREATEDATE = dto.CREATEDATE;
			return entity;
		}
		public override ACCOUNTROLEDto Assemble(ACCOUNTROLE entity)
		{
			ACCOUNTROLEDto dto = new ACCOUNTROLEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EMPCODE = entity.EMPCODE;
			dto.ROLEID = entity.ROLEID;
			dto.CREATEDATE = entity.CREATEDATE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


}
#pragma warning restore 1591

