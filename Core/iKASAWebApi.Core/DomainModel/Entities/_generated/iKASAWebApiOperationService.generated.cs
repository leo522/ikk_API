

#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Linq.Expressions;
using System.Collections;
using System.Collections.Generic;
using Telerik.OpenAccess;
using AppFramework.ApplicationLayer.DTO;
using AppFramework.Infrastructure.Data.Repositories;
using AppFramework.Specifications;
using KMUH.FunctionLibrary.ApplicationLayer.Services;
using KMUH.iKASAWebApi.ApplicationLayer.Assemblers;
using KMUH.iKASAWebApi.ApplicationLayer.DTO;
using KMUH.iKASAWebApi.Infrastructure.Data.Repositories;
using KMUH.iKASAWebApi.DomainModel.Entities;

namespace KMUH.iKASAWebApi.ApplicationLayer.Services
{
	public partial class iKASAWebApiOperationService : IiKASAWebApiOperationService
	{
		#region IDisposable Members


		public void Dispose()
		{
			//dispose all resources
			IDisposable context = this.unitOfWork as IDisposable;
			if (context != null)
			{
				context.Dispose();
			}
		}
		#endregion IDisposable Members


		private IiKASAWebApiContextUnitOfWork unitOfWork;
		public IiKASAWebApiContextUnitOfWork UnitOfWork
		{
			get
			{
				if (this.unitOfWork == null)
				{
					string connectionStringName = string.IsNullOrEmpty(this.ConnectionStringName) ? "iKASAWebApi" : this.ConnectionStringName;
					if (System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName] == null)
						throw new ArgumentException(string.Format("Can't find the '{0}' connectionString name in app/web.config", connectionStringName));
					var connectionString = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName].ConnectionString;
					this.unitOfWork = new iKASAWebApiContext(connectionString);
					this.DbContext.ConnectionStringName = connectionStringName;
					//this.DbContext.DbmsApplicationInfo_SetModule(connectionStringName);
				}
				return this.unitOfWork;
			}
			set
			{
				this.unitOfWork = value;
			}
		}


		public string ConnectionStringName { get; set; }


		public iKASAWebApiOperationService()
		{
			DBConnStrConfig.AddConnStrToConfig("", "iKASAWebApi");
		}


		public iKASAWebApiOperationService(String DBName)
		{
			DBConnStrConfig.AddConnStrToConfig(DBName, "iKASAWebApi");
			 ConnectionStringName = DBConnStrConfig.GetConfigConnStrName(DBName, "iKASAWebApi");
		}


		public iKASAWebApiContext DbContext { get { return this.UnitOfWork as iKASAWebApiContext; } }


		public int ExecuteNonQuery(string commandText, params System.Data.Common.DbParameter[] parameters)
		{
			return this.DbContext.ExecuteNonQuery(commandText, System.Data.CommandType.Text, parameters);
		}


		public int ExecuteNonQuery(string commandText, System.Data.CommandType commandType, params System.Data.Common.DbParameter[] parameters)
		{
			return this.DbContext.ExecuteNonQuery(commandText, commandType, parameters);
		}


		public T ExecuteScalar<T>(string commandText, params System.Data.Common.DbParameter[] parameters)
		{
			return this.DbContext.ExecuteScalar<T>(commandText, System.Data.CommandType.Text, parameters);
		}


		public T ExecuteScalar<T>(string commandText, System.Data.CommandType commandType, params System.Data.Common.DbParameter[] parameters)
		{
			return this.DbContext.ExecuteScalar<T>(commandText, commandType, parameters);
		}


		
		public IEnumerable<dynamic> ExecuteQuery(string commandText, params System.Data.Common.DbParameter[] parameters)
        {
            using (System.Data.IDbConnection connection = this.DbContext.Connection)
            {
                using (System.Data.IDbCommand command = connection.CreateCommand())
                {
                    command.CommandText = commandText;

                    foreach (var parameter in parameters)
                    {
                        command.Parameters.Add(parameter);
                    }

                    using (System.Data.IDataReader reader = command.ExecuteReader())
                    {
                        Dictionary<int, KeyValuePair<int, string>> columnNames = Enumerable.Range(0, reader.FieldCount)
                                                                               .Select(x => new KeyValuePair<int, string>(x, reader.GetName(x)))
                                                                               .ToDictionary(pair => pair.Key);

                        var list = new List<dynamic>();

                        while (reader.Read())
                        {
                            dynamic entity = new System.Dynamic.ExpandoObject();
                            var expandoDict = (IDictionary<string, object>)entity;

                            Enumerable.Range(0, reader.FieldCount)
                                      .ToList()
                                      .ForEach(x => expandoDict.Add(columnNames[x].Value, reader[x]));

                            list.Add(entity);
                        }

                        return list;
                    }
                }
            }
        }


		
		public IEnumerable<T> ExecuteQuery<T>(string commandText, params System.Data.Common.DbParameter[] parameters)
        {
            return ExecuteQuery<T>(commandText, System.Data.CommandType.Text, parameters);
        }
		
		public IEnumerable<T> ExecuteQuery<T>(string commandText, System.Data.CommandType commandType, params System.Data.Common.DbParameter[] parameters)
        {
            if (parameters.Length == 0)
                return this.DbContext.ExecuteQuery<T>(commandText, commandType);
            else
                return this.DbContext.ExecuteQuery<T>(commandText, commandType, parameters);
        }


		
		public IEnumerable<T> ExecuteQueryByMultiSource<T>(List<DbConnectionSource> dbSources, string commandText, System.Data.Common.DbParameter[] dbParameters) where T : class
        {
            return ExecuteQueryByMultiSource<T>(dbSources, "", commandText, dbParameters);
        }

        public IEnumerable<T> ExecuteQueryByMultiSource<T>(List<DbConnectionSource> dbSources, string dataSourcePropertyName, string commandText, System.Data.Common.DbParameter[] dbParameters) where T : class
        {
            var multiSourceSQL = new MultiSourceSQLRepository<T>(this.UnitOfWork, dbSources);
            multiSourceSQL.DataSourcePropertyName = dataSourcePropertyName;
            return multiSourceSQL.GetAll(commandText, dbParameters);
        }


		public void FlushChanges()
		{
			this.DbContext.FlushChanges();
		}


		public void FlushChanges(bool releaseMemory)
		{
			this.DbContext.FlushChanges(releaseMemory);
		}


		public string GenerateNewIdentity(string IdentityOwner)
		{
			return this.DbContext.GenerateNewIdentity(IdentityOwner);
		}


		public DateTime GetSysDate()
		{
			return this.DbContext.GetSysDate();
		}


		#region 移課程暫存 CRUD Operations


		private I移課程暫存Service 移課程暫存;
		public virtual I移課程暫存Service 移課程暫存Service
		{
			get
			{
				if (this.移課程暫存 == null)
				{
					I移課程暫存Assembler assembler = new 移課程暫存Assembler();
					I移課程暫存Repository repository = new 移課程暫存Repository(this.UnitOfWork);
					this.移課程暫存 = new 移課程暫存Service(assembler, repository);
				}
				return this.移課程暫存;
			}
		}


		public IQueryable<移課程暫存> 移課程暫存s
		{
			get { return this.移課程暫存Service.Repository.GetAll(); }
		}


		public IQueryable<移課程暫存> Read移課程暫存s(Expression<Func<移課程暫存, bool>> filter, int dummy)
		{
			return this.移課程暫存Service.Repository.Find(filter);
		}


		public IEnumerable<移課程暫存Dto> Read移課程暫存s()
		{
			return this.移課程暫存Service.GetAll();
		}


		public IEnumerable<移課程暫存Dto> Read移課程暫存s(Expression<Func<移課程暫存, bool>> filter)
		{
			return this.移課程暫存Service.Find(filter);
		}


		public IEnumerable<移課程暫存Dto> Read移課程暫存s(ISpecification<移課程暫存> specification)
		{
			return this.移課程暫存Service.Find(specification.GetExpression());
		}


		public IEnumerable<移課程暫存Dto> Read移課程暫存s(IQueryable<移課程暫存> query)
		{
			return this.移課程暫存Service.Assembler.Assemble(query);
		}


		public IEnumerable<移課程暫存Dto> Read移課程暫存s(string[] propertyToSearch, object[] keyWords)
		{
			return this.移課程暫存Service.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<移課程暫存Dto> Read移課程暫存s(object[] keyWords)
		{
			return this.移課程暫存Service.Find(keyWords);
		}


		public IEnumerable<移課程暫存Dto> Read移課程暫存sPaged(int startIndex, int pageSize)
		{
			return this.移課程暫存Service.Find(startIndex, pageSize);
		}


		public IEnumerable<移課程暫存Dto> Read移課程暫存sPaged(IQueryable<移課程暫存> source, int pageIndex, int pageSize)
		{
			return this.移課程暫存Service.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<移課程暫存Dto> Read移課程暫存sPaged(IQueryable<移課程暫存> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.移課程暫存Service.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<移課程暫存Dto> Read移課程暫存sFiltered(string sortExpression, string filterExpression)
		{
			return this.移課程暫存Service.Find(sortExpression, filterExpression);
		}


		public IEnumerable<移課程暫存Dto> Read移課程暫存sPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.移課程暫存Service.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<移課程暫存Dto> Read移課程暫存sPagedAndFiltered(int startIndex, int pageSize, Expression<Func<移課程暫存, bool>> filter)
		{
			return this.移課程暫存Service.Find(startIndex, pageSize, string.Empty, filter);
		}


		public 移課程暫存Dto Read移課程暫存s(string dtoKey)
		{
			return this.移課程暫存Service.GetByKey(dtoKey);
		}


		public int Count移課程暫存s()
		{
			return this.移課程暫存Service.Count();
		}


		public int Count移課程暫存s(string filterExpression)
		{
			return this.移課程暫存Service.Count(filterExpression);
		}


		public int Count移課程暫存s(Expression<Func<移課程暫存, bool>> filter)
		{
			return this.移課程暫存Service.Count(filter);
		}


		public string Create移課程暫存(移課程暫存Dto 移課程暫存, bool doSaveChanges = true)
		{
			string key = this.移課程暫存Service.Add(移課程暫存);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void Update移課程暫存(移課程暫存Dto 移課程暫存, bool doSaveChanges = true)
		{
			this.移課程暫存Service.Update(移課程暫存);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void Update移課程暫存s(IEnumerable<移課程暫存Dto> 移課程暫存s, bool doSaveChanges = true)
		{
			if (移課程暫存s == null)
			{
				return;
			}
			foreach (移課程暫存Dto instance in 移課程暫存s)
			{
				if (instance == null)
				{
					continue;
				}


				this.移課程暫存Service.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void Delete移課程暫存(移課程暫存Dto 移課程暫存, bool doSaveChanges = true)
		{
			this.移課程暫存Service.Delete(移課程暫存);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void Delete移課程暫存s(IEnumerable<移課程暫存Dto> 移課程暫存s, bool doSaveChanges = true)
		{
			if (移課程暫存s == null)
			{
				return;
			}
			foreach (移課程暫存Dto instance in 移課程暫存s)
			{
				if (instance == null)
				{
					continue;
				}


				this.移課程暫存Service.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void Save移課程暫存(移課程暫存Dto 移課程暫存, bool doSaveChanges = true)
		{
			switch (移課程暫存.RowState)
			{
				case RowState.Insert:
					this.Create移課程暫存(移課程暫存, doSaveChanges);
					break;
				case RowState.Update:
					this.Update移課程暫存(移課程暫存, doSaveChanges);
					break;
				case RowState.Delete:
					this.Delete移課程暫存(移課程暫存, doSaveChanges);
					break;
			}
		}


		public void Save移課程暫存s(IEnumerable<移課程暫存Dto> 移課程暫存s, bool doSaveChanges = true)
		{
			if (移課程暫存s == null)
			{
				return;
			}
			foreach (移課程暫存Dto instance in 移課程暫存s)
			{
				if (instance == null)
				{
					continue;
				}


				this.Save移課程暫存(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion 移課程暫存 CRUD Operations


		#region 抓MAIL暫存 CRUD Operations


		private I抓MAIL暫存Service 抓mail暫存;
		public virtual I抓MAIL暫存Service 抓MAIL暫存Service
		{
			get
			{
				if (this.抓mail暫存 == null)
				{
					I抓MAIL暫存Assembler assembler = new 抓MAIL暫存Assembler();
					I抓MAIL暫存Repository repository = new 抓MAIL暫存Repository(this.UnitOfWork);
					this.抓mail暫存 = new 抓MAIL暫存Service(assembler, repository);
				}
				return this.抓mail暫存;
			}
		}


		public IQueryable<抓MAIL暫存> 抓MAIL暫存s
		{
			get { return this.抓MAIL暫存Service.Repository.GetAll(); }
		}


		public IQueryable<抓MAIL暫存> Read抓MAIL暫存s(Expression<Func<抓MAIL暫存, bool>> filter, int dummy)
		{
			return this.抓MAIL暫存Service.Repository.Find(filter);
		}


		public IEnumerable<抓MAIL暫存Dto> Read抓MAIL暫存s()
		{
			return this.抓MAIL暫存Service.GetAll();
		}


		public IEnumerable<抓MAIL暫存Dto> Read抓MAIL暫存s(Expression<Func<抓MAIL暫存, bool>> filter)
		{
			return this.抓MAIL暫存Service.Find(filter);
		}


		public IEnumerable<抓MAIL暫存Dto> Read抓MAIL暫存s(ISpecification<抓MAIL暫存> specification)
		{
			return this.抓MAIL暫存Service.Find(specification.GetExpression());
		}


		public IEnumerable<抓MAIL暫存Dto> Read抓MAIL暫存s(IQueryable<抓MAIL暫存> query)
		{
			return this.抓MAIL暫存Service.Assembler.Assemble(query);
		}


		public IEnumerable<抓MAIL暫存Dto> Read抓MAIL暫存s(string[] propertyToSearch, object[] keyWords)
		{
			return this.抓MAIL暫存Service.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<抓MAIL暫存Dto> Read抓MAIL暫存s(object[] keyWords)
		{
			return this.抓MAIL暫存Service.Find(keyWords);
		}


		public IEnumerable<抓MAIL暫存Dto> Read抓MAIL暫存sPaged(int startIndex, int pageSize)
		{
			return this.抓MAIL暫存Service.Find(startIndex, pageSize);
		}


		public IEnumerable<抓MAIL暫存Dto> Read抓MAIL暫存sPaged(IQueryable<抓MAIL暫存> source, int pageIndex, int pageSize)
		{
			return this.抓MAIL暫存Service.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<抓MAIL暫存Dto> Read抓MAIL暫存sPaged(IQueryable<抓MAIL暫存> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.抓MAIL暫存Service.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<抓MAIL暫存Dto> Read抓MAIL暫存sFiltered(string sortExpression, string filterExpression)
		{
			return this.抓MAIL暫存Service.Find(sortExpression, filterExpression);
		}


		public IEnumerable<抓MAIL暫存Dto> Read抓MAIL暫存sPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.抓MAIL暫存Service.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<抓MAIL暫存Dto> Read抓MAIL暫存sPagedAndFiltered(int startIndex, int pageSize, Expression<Func<抓MAIL暫存, bool>> filter)
		{
			return this.抓MAIL暫存Service.Find(startIndex, pageSize, string.Empty, filter);
		}


		public 抓MAIL暫存Dto Read抓MAIL暫存s(string dtoKey)
		{
			return this.抓MAIL暫存Service.GetByKey(dtoKey);
		}


		public int Count抓MAIL暫存s()
		{
			return this.抓MAIL暫存Service.Count();
		}


		public int Count抓MAIL暫存s(string filterExpression)
		{
			return this.抓MAIL暫存Service.Count(filterExpression);
		}


		public int Count抓MAIL暫存s(Expression<Func<抓MAIL暫存, bool>> filter)
		{
			return this.抓MAIL暫存Service.Count(filter);
		}


		public string Create抓MAIL暫存(抓MAIL暫存Dto 抓mail暫存, bool doSaveChanges = true)
		{
			string key = this.抓MAIL暫存Service.Add(抓mail暫存);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void Update抓MAIL暫存(抓MAIL暫存Dto 抓mail暫存, bool doSaveChanges = true)
		{
			this.抓MAIL暫存Service.Update(抓mail暫存);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void Update抓MAIL暫存s(IEnumerable<抓MAIL暫存Dto> 抓mail暫存s, bool doSaveChanges = true)
		{
			if (抓mail暫存s == null)
			{
				return;
			}
			foreach (抓MAIL暫存Dto instance in 抓mail暫存s)
			{
				if (instance == null)
				{
					continue;
				}


				this.抓MAIL暫存Service.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void Delete抓MAIL暫存(抓MAIL暫存Dto 抓mail暫存, bool doSaveChanges = true)
		{
			this.抓MAIL暫存Service.Delete(抓mail暫存);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void Delete抓MAIL暫存s(IEnumerable<抓MAIL暫存Dto> 抓mail暫存s, bool doSaveChanges = true)
		{
			if (抓mail暫存s == null)
			{
				return;
			}
			foreach (抓MAIL暫存Dto instance in 抓mail暫存s)
			{
				if (instance == null)
				{
					continue;
				}


				this.抓MAIL暫存Service.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void Save抓MAIL暫存(抓MAIL暫存Dto 抓mail暫存, bool doSaveChanges = true)
		{
			switch (抓mail暫存.RowState)
			{
				case RowState.Insert:
					this.Create抓MAIL暫存(抓mail暫存, doSaveChanges);
					break;
				case RowState.Update:
					this.Update抓MAIL暫存(抓mail暫存, doSaveChanges);
					break;
				case RowState.Delete:
					this.Delete抓MAIL暫存(抓mail暫存, doSaveChanges);
					break;
			}
		}


		public void Save抓MAIL暫存s(IEnumerable<抓MAIL暫存Dto> 抓mail暫存s, bool doSaveChanges = true)
		{
			if (抓mail暫存s == null)
			{
				return;
			}
			foreach (抓MAIL暫存Dto instance in 抓mail暫存s)
			{
				if (instance == null)
				{
					continue;
				}


				this.Save抓MAIL暫存(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion 抓MAIL暫存 CRUD Operations


		#region 住院醫師暫存 CRUD Operations


		private I住院醫師暫存Service 住院醫師暫存;
		public virtual I住院醫師暫存Service 住院醫師暫存Service
		{
			get
			{
				if (this.住院醫師暫存 == null)
				{
					I住院醫師暫存Assembler assembler = new 住院醫師暫存Assembler();
					I住院醫師暫存Repository repository = new 住院醫師暫存Repository(this.UnitOfWork);
					this.住院醫師暫存 = new 住院醫師暫存Service(assembler, repository);
				}
				return this.住院醫師暫存;
			}
		}


		public IQueryable<住院醫師暫存> 住院醫師暫存s
		{
			get { return this.住院醫師暫存Service.Repository.GetAll(); }
		}


		public IQueryable<住院醫師暫存> Read住院醫師暫存s(Expression<Func<住院醫師暫存, bool>> filter, int dummy)
		{
			return this.住院醫師暫存Service.Repository.Find(filter);
		}


		public IEnumerable<住院醫師暫存Dto> Read住院醫師暫存s()
		{
			return this.住院醫師暫存Service.GetAll();
		}


		public IEnumerable<住院醫師暫存Dto> Read住院醫師暫存s(Expression<Func<住院醫師暫存, bool>> filter)
		{
			return this.住院醫師暫存Service.Find(filter);
		}


		public IEnumerable<住院醫師暫存Dto> Read住院醫師暫存s(ISpecification<住院醫師暫存> specification)
		{
			return this.住院醫師暫存Service.Find(specification.GetExpression());
		}


		public IEnumerable<住院醫師暫存Dto> Read住院醫師暫存s(IQueryable<住院醫師暫存> query)
		{
			return this.住院醫師暫存Service.Assembler.Assemble(query);
		}


		public IEnumerable<住院醫師暫存Dto> Read住院醫師暫存s(string[] propertyToSearch, object[] keyWords)
		{
			return this.住院醫師暫存Service.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<住院醫師暫存Dto> Read住院醫師暫存s(object[] keyWords)
		{
			return this.住院醫師暫存Service.Find(keyWords);
		}


		public IEnumerable<住院醫師暫存Dto> Read住院醫師暫存sPaged(int startIndex, int pageSize)
		{
			return this.住院醫師暫存Service.Find(startIndex, pageSize);
		}


		public IEnumerable<住院醫師暫存Dto> Read住院醫師暫存sPaged(IQueryable<住院醫師暫存> source, int pageIndex, int pageSize)
		{
			return this.住院醫師暫存Service.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<住院醫師暫存Dto> Read住院醫師暫存sPaged(IQueryable<住院醫師暫存> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.住院醫師暫存Service.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<住院醫師暫存Dto> Read住院醫師暫存sFiltered(string sortExpression, string filterExpression)
		{
			return this.住院醫師暫存Service.Find(sortExpression, filterExpression);
		}


		public IEnumerable<住院醫師暫存Dto> Read住院醫師暫存sPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.住院醫師暫存Service.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<住院醫師暫存Dto> Read住院醫師暫存sPagedAndFiltered(int startIndex, int pageSize, Expression<Func<住院醫師暫存, bool>> filter)
		{
			return this.住院醫師暫存Service.Find(startIndex, pageSize, string.Empty, filter);
		}


		public 住院醫師暫存Dto Read住院醫師暫存s(string dtoKey)
		{
			return this.住院醫師暫存Service.GetByKey(dtoKey);
		}


		public int Count住院醫師暫存s()
		{
			return this.住院醫師暫存Service.Count();
		}


		public int Count住院醫師暫存s(string filterExpression)
		{
			return this.住院醫師暫存Service.Count(filterExpression);
		}


		public int Count住院醫師暫存s(Expression<Func<住院醫師暫存, bool>> filter)
		{
			return this.住院醫師暫存Service.Count(filter);
		}


		public string Create住院醫師暫存(住院醫師暫存Dto 住院醫師暫存, bool doSaveChanges = true)
		{
			string key = this.住院醫師暫存Service.Add(住院醫師暫存);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void Update住院醫師暫存(住院醫師暫存Dto 住院醫師暫存, bool doSaveChanges = true)
		{
			this.住院醫師暫存Service.Update(住院醫師暫存);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void Update住院醫師暫存s(IEnumerable<住院醫師暫存Dto> 住院醫師暫存s, bool doSaveChanges = true)
		{
			if (住院醫師暫存s == null)
			{
				return;
			}
			foreach (住院醫師暫存Dto instance in 住院醫師暫存s)
			{
				if (instance == null)
				{
					continue;
				}


				this.住院醫師暫存Service.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void Delete住院醫師暫存(住院醫師暫存Dto 住院醫師暫存, bool doSaveChanges = true)
		{
			this.住院醫師暫存Service.Delete(住院醫師暫存);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void Delete住院醫師暫存s(IEnumerable<住院醫師暫存Dto> 住院醫師暫存s, bool doSaveChanges = true)
		{
			if (住院醫師暫存s == null)
			{
				return;
			}
			foreach (住院醫師暫存Dto instance in 住院醫師暫存s)
			{
				if (instance == null)
				{
					continue;
				}


				this.住院醫師暫存Service.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void Save住院醫師暫存(住院醫師暫存Dto 住院醫師暫存, bool doSaveChanges = true)
		{
			switch (住院醫師暫存.RowState)
			{
				case RowState.Insert:
					this.Create住院醫師暫存(住院醫師暫存, doSaveChanges);
					break;
				case RowState.Update:
					this.Update住院醫師暫存(住院醫師暫存, doSaveChanges);
					break;
				case RowState.Delete:
					this.Delete住院醫師暫存(住院醫師暫存, doSaveChanges);
					break;
			}
		}


		public void Save住院醫師暫存s(IEnumerable<住院醫師暫存Dto> 住院醫師暫存s, bool doSaveChanges = true)
		{
			if (住院醫師暫存s == null)
			{
				return;
			}
			foreach (住院醫師暫存Dto instance in 住院醫師暫存s)
			{
				if (instance == null)
				{
					continue;
				}


				this.Save住院醫師暫存(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion 住院醫師暫存 CRUD Operations


		#region 西醫受訓人員名單 CRUD Operations


		private I西醫受訓人員名單Service 西醫受訓人員名單;
		public virtual I西醫受訓人員名單Service 西醫受訓人員名單Service
		{
			get
			{
				if (this.西醫受訓人員名單 == null)
				{
					I西醫受訓人員名單Assembler assembler = new 西醫受訓人員名單Assembler();
					I西醫受訓人員名單Repository repository = new 西醫受訓人員名單Repository(this.UnitOfWork);
					this.西醫受訓人員名單 = new 西醫受訓人員名單Service(assembler, repository);
				}
				return this.西醫受訓人員名單;
			}
		}


		public IQueryable<西醫受訓人員名單> 西醫受訓人員名單s
		{
			get { return this.西醫受訓人員名單Service.Repository.GetAll(); }
		}


		public IQueryable<西醫受訓人員名單> Read西醫受訓人員名單s(Expression<Func<西醫受訓人員名單, bool>> filter, int dummy)
		{
			return this.西醫受訓人員名單Service.Repository.Find(filter);
		}


		public IEnumerable<西醫受訓人員名單Dto> Read西醫受訓人員名單s()
		{
			return this.西醫受訓人員名單Service.GetAll();
		}


		public IEnumerable<西醫受訓人員名單Dto> Read西醫受訓人員名單s(Expression<Func<西醫受訓人員名單, bool>> filter)
		{
			return this.西醫受訓人員名單Service.Find(filter);
		}


		public IEnumerable<西醫受訓人員名單Dto> Read西醫受訓人員名單s(ISpecification<西醫受訓人員名單> specification)
		{
			return this.西醫受訓人員名單Service.Find(specification.GetExpression());
		}


		public IEnumerable<西醫受訓人員名單Dto> Read西醫受訓人員名單s(IQueryable<西醫受訓人員名單> query)
		{
			return this.西醫受訓人員名單Service.Assembler.Assemble(query);
		}


		public IEnumerable<西醫受訓人員名單Dto> Read西醫受訓人員名單s(string[] propertyToSearch, object[] keyWords)
		{
			return this.西醫受訓人員名單Service.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<西醫受訓人員名單Dto> Read西醫受訓人員名單s(object[] keyWords)
		{
			return this.西醫受訓人員名單Service.Find(keyWords);
		}


		public IEnumerable<西醫受訓人員名單Dto> Read西醫受訓人員名單sPaged(int startIndex, int pageSize)
		{
			return this.西醫受訓人員名單Service.Find(startIndex, pageSize);
		}


		public IEnumerable<西醫受訓人員名單Dto> Read西醫受訓人員名單sPaged(IQueryable<西醫受訓人員名單> source, int pageIndex, int pageSize)
		{
			return this.西醫受訓人員名單Service.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<西醫受訓人員名單Dto> Read西醫受訓人員名單sPaged(IQueryable<西醫受訓人員名單> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.西醫受訓人員名單Service.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<西醫受訓人員名單Dto> Read西醫受訓人員名單sFiltered(string sortExpression, string filterExpression)
		{
			return this.西醫受訓人員名單Service.Find(sortExpression, filterExpression);
		}


		public IEnumerable<西醫受訓人員名單Dto> Read西醫受訓人員名單sPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.西醫受訓人員名單Service.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<西醫受訓人員名單Dto> Read西醫受訓人員名單sPagedAndFiltered(int startIndex, int pageSize, Expression<Func<西醫受訓人員名單, bool>> filter)
		{
			return this.西醫受訓人員名單Service.Find(startIndex, pageSize, string.Empty, filter);
		}


		public 西醫受訓人員名單Dto Read西醫受訓人員名單s(string dtoKey)
		{
			return this.西醫受訓人員名單Service.GetByKey(dtoKey);
		}


		public int Count西醫受訓人員名單s()
		{
			return this.西醫受訓人員名單Service.Count();
		}


		public int Count西醫受訓人員名單s(string filterExpression)
		{
			return this.西醫受訓人員名單Service.Count(filterExpression);
		}


		public int Count西醫受訓人員名單s(Expression<Func<西醫受訓人員名單, bool>> filter)
		{
			return this.西醫受訓人員名單Service.Count(filter);
		}


		public string Create西醫受訓人員名單(西醫受訓人員名單Dto 西醫受訓人員名單, bool doSaveChanges = true)
		{
			string key = this.西醫受訓人員名單Service.Add(西醫受訓人員名單);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void Update西醫受訓人員名單(西醫受訓人員名單Dto 西醫受訓人員名單, bool doSaveChanges = true)
		{
			this.西醫受訓人員名單Service.Update(西醫受訓人員名單);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void Update西醫受訓人員名單s(IEnumerable<西醫受訓人員名單Dto> 西醫受訓人員名單s, bool doSaveChanges = true)
		{
			if (西醫受訓人員名單s == null)
			{
				return;
			}
			foreach (西醫受訓人員名單Dto instance in 西醫受訓人員名單s)
			{
				if (instance == null)
				{
					continue;
				}


				this.西醫受訓人員名單Service.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void Delete西醫受訓人員名單(西醫受訓人員名單Dto 西醫受訓人員名單, bool doSaveChanges = true)
		{
			this.西醫受訓人員名單Service.Delete(西醫受訓人員名單);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void Delete西醫受訓人員名單s(IEnumerable<西醫受訓人員名單Dto> 西醫受訓人員名單s, bool doSaveChanges = true)
		{
			if (西醫受訓人員名單s == null)
			{
				return;
			}
			foreach (西醫受訓人員名單Dto instance in 西醫受訓人員名單s)
			{
				if (instance == null)
				{
					continue;
				}


				this.西醫受訓人員名單Service.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void Save西醫受訓人員名單(西醫受訓人員名單Dto 西醫受訓人員名單, bool doSaveChanges = true)
		{
			switch (西醫受訓人員名單.RowState)
			{
				case RowState.Insert:
					this.Create西醫受訓人員名單(西醫受訓人員名單, doSaveChanges);
					break;
				case RowState.Update:
					this.Update西醫受訓人員名單(西醫受訓人員名單, doSaveChanges);
					break;
				case RowState.Delete:
					this.Delete西醫受訓人員名單(西醫受訓人員名單, doSaveChanges);
					break;
			}
		}


		public void Save西醫受訓人員名單s(IEnumerable<西醫受訓人員名單Dto> 西醫受訓人員名單s, bool doSaveChanges = true)
		{
			if (西醫受訓人員名單s == null)
			{
				return;
			}
			foreach (西醫受訓人員名單Dto instance in 西醫受訓人員名單s)
			{
				if (instance == null)
				{
					continue;
				}


				this.Save西醫受訓人員名單(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion 西醫受訓人員名單 CRUD Operations


		#region VOTEUSERDEFINELIST CRUD Operations


		private IVOTEUSERDEFINELISTService voteuserdefinelist;
		public virtual IVOTEUSERDEFINELISTService VOTEUSERDEFINELISTService
		{
			get
			{
				if (this.voteuserdefinelist == null)
				{
					IVOTEUSERDEFINELISTAssembler assembler = new VOTEUSERDEFINELISTAssembler();
					IVOTEUSERDEFINELISTRepository repository = new VOTEUSERDEFINELISTRepository(this.UnitOfWork);
					this.voteuserdefinelist = new VOTEUSERDEFINELISTService(assembler, repository);
				}
				return this.voteuserdefinelist;
			}
		}


		public IQueryable<VOTEUSERDEFINELIST> VOTEUSERDEFINELISTs
		{
			get { return this.VOTEUSERDEFINELISTService.Repository.GetAll(); }
		}


		public IQueryable<VOTEUSERDEFINELIST> ReadVOTEUSERDEFINELISTs(Expression<Func<VOTEUSERDEFINELIST, bool>> filter, int dummy)
		{
			return this.VOTEUSERDEFINELISTService.Repository.Find(filter);
		}


		public IEnumerable<VOTEUSERDEFINELISTDto> ReadVOTEUSERDEFINELISTs()
		{
			return this.VOTEUSERDEFINELISTService.GetAll();
		}


		public IEnumerable<VOTEUSERDEFINELISTDto> ReadVOTEUSERDEFINELISTs(Expression<Func<VOTEUSERDEFINELIST, bool>> filter)
		{
			return this.VOTEUSERDEFINELISTService.Find(filter);
		}


		public IEnumerable<VOTEUSERDEFINELISTDto> ReadVOTEUSERDEFINELISTs(ISpecification<VOTEUSERDEFINELIST> specification)
		{
			return this.VOTEUSERDEFINELISTService.Find(specification.GetExpression());
		}


		public IEnumerable<VOTEUSERDEFINELISTDto> ReadVOTEUSERDEFINELISTs(IQueryable<VOTEUSERDEFINELIST> query)
		{
			return this.VOTEUSERDEFINELISTService.Assembler.Assemble(query);
		}


		public IEnumerable<VOTEUSERDEFINELISTDto> ReadVOTEUSERDEFINELISTs(string[] propertyToSearch, object[] keyWords)
		{
			return this.VOTEUSERDEFINELISTService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<VOTEUSERDEFINELISTDto> ReadVOTEUSERDEFINELISTs(object[] keyWords)
		{
			return this.VOTEUSERDEFINELISTService.Find(keyWords);
		}


		public IEnumerable<VOTEUSERDEFINELISTDto> ReadVOTEUSERDEFINELISTsPaged(int startIndex, int pageSize)
		{
			return this.VOTEUSERDEFINELISTService.Find(startIndex, pageSize);
		}


		public IEnumerable<VOTEUSERDEFINELISTDto> ReadVOTEUSERDEFINELISTsPaged(IQueryable<VOTEUSERDEFINELIST> source, int pageIndex, int pageSize)
		{
			return this.VOTEUSERDEFINELISTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<VOTEUSERDEFINELISTDto> ReadVOTEUSERDEFINELISTsPaged(IQueryable<VOTEUSERDEFINELIST> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.VOTEUSERDEFINELISTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<VOTEUSERDEFINELISTDto> ReadVOTEUSERDEFINELISTsFiltered(string sortExpression, string filterExpression)
		{
			return this.VOTEUSERDEFINELISTService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<VOTEUSERDEFINELISTDto> ReadVOTEUSERDEFINELISTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.VOTEUSERDEFINELISTService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<VOTEUSERDEFINELISTDto> ReadVOTEUSERDEFINELISTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<VOTEUSERDEFINELIST, bool>> filter)
		{
			return this.VOTEUSERDEFINELISTService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public VOTEUSERDEFINELISTDto ReadVOTEUSERDEFINELISTs(string dtoKey)
		{
			return this.VOTEUSERDEFINELISTService.GetByKey(dtoKey);
		}


		public int CountVOTEUSERDEFINELISTs()
		{
			return this.VOTEUSERDEFINELISTService.Count();
		}


		public int CountVOTEUSERDEFINELISTs(string filterExpression)
		{
			return this.VOTEUSERDEFINELISTService.Count(filterExpression);
		}


		public int CountVOTEUSERDEFINELISTs(Expression<Func<VOTEUSERDEFINELIST, bool>> filter)
		{
			return this.VOTEUSERDEFINELISTService.Count(filter);
		}


		public string CreateVOTEUSERDEFINELIST(VOTEUSERDEFINELISTDto voteuserdefinelist, bool doSaveChanges = true)
		{
			string key = this.VOTEUSERDEFINELISTService.Add(voteuserdefinelist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateVOTEUSERDEFINELIST(VOTEUSERDEFINELISTDto voteuserdefinelist, bool doSaveChanges = true)
		{
			this.VOTEUSERDEFINELISTService.Update(voteuserdefinelist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateVOTEUSERDEFINELISTs(IEnumerable<VOTEUSERDEFINELISTDto> voteuserdefinelists, bool doSaveChanges = true)
		{
			if (voteuserdefinelists == null)
			{
				return;
			}
			foreach (VOTEUSERDEFINELISTDto instance in voteuserdefinelists)
			{
				if (instance == null)
				{
					continue;
				}


				this.VOTEUSERDEFINELISTService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteVOTEUSERDEFINELIST(VOTEUSERDEFINELISTDto voteuserdefinelist, bool doSaveChanges = true)
		{
			this.VOTEUSERDEFINELISTService.Delete(voteuserdefinelist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteVOTEUSERDEFINELISTs(IEnumerable<VOTEUSERDEFINELISTDto> voteuserdefinelists, bool doSaveChanges = true)
		{
			if (voteuserdefinelists == null)
			{
				return;
			}
			foreach (VOTEUSERDEFINELISTDto instance in voteuserdefinelists)
			{
				if (instance == null)
				{
					continue;
				}


				this.VOTEUSERDEFINELISTService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveVOTEUSERDEFINELIST(VOTEUSERDEFINELISTDto voteuserdefinelist, bool doSaveChanges = true)
		{
			switch (voteuserdefinelist.RowState)
			{
				case RowState.Insert:
					this.CreateVOTEUSERDEFINELIST(voteuserdefinelist, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateVOTEUSERDEFINELIST(voteuserdefinelist, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteVOTEUSERDEFINELIST(voteuserdefinelist, doSaveChanges);
					break;
			}
		}


		public void SaveVOTEUSERDEFINELISTs(IEnumerable<VOTEUSERDEFINELISTDto> voteuserdefinelists, bool doSaveChanges = true)
		{
			if (voteuserdefinelists == null)
			{
				return;
			}
			foreach (VOTEUSERDEFINELISTDto instance in voteuserdefinelists)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveVOTEUSERDEFINELIST(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion VOTEUSERDEFINELIST CRUD Operations


		#region VOTETEMPDATUM CRUD Operations


		private IVOTETEMPDATUMService votetempdatum;
		public virtual IVOTETEMPDATUMService VOTETEMPDATUMService
		{
			get
			{
				if (this.votetempdatum == null)
				{
					IVOTETEMPDATUMAssembler assembler = new VOTETEMPDATUMAssembler();
					IVOTETEMPDATUMRepository repository = new VOTETEMPDATUMRepository(this.UnitOfWork);
					this.votetempdatum = new VOTETEMPDATUMService(assembler, repository);
				}
				return this.votetempdatum;
			}
		}


		public IQueryable<VOTETEMPDATUM> VOTETEMPDATa
		{
			get { return this.VOTETEMPDATUMService.Repository.GetAll(); }
		}


		public IQueryable<VOTETEMPDATUM> ReadVOTETEMPDATa(Expression<Func<VOTETEMPDATUM, bool>> filter, int dummy)
		{
			return this.VOTETEMPDATUMService.Repository.Find(filter);
		}


		public IEnumerable<VOTETEMPDATUMDto> ReadVOTETEMPDATa()
		{
			return this.VOTETEMPDATUMService.GetAll();
		}


		public IEnumerable<VOTETEMPDATUMDto> ReadVOTETEMPDATa(Expression<Func<VOTETEMPDATUM, bool>> filter)
		{
			return this.VOTETEMPDATUMService.Find(filter);
		}


		public IEnumerable<VOTETEMPDATUMDto> ReadVOTETEMPDATa(ISpecification<VOTETEMPDATUM> specification)
		{
			return this.VOTETEMPDATUMService.Find(specification.GetExpression());
		}


		public IEnumerable<VOTETEMPDATUMDto> ReadVOTETEMPDATa(IQueryable<VOTETEMPDATUM> query)
		{
			return this.VOTETEMPDATUMService.Assembler.Assemble(query);
		}


		public IEnumerable<VOTETEMPDATUMDto> ReadVOTETEMPDATa(string[] propertyToSearch, object[] keyWords)
		{
			return this.VOTETEMPDATUMService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<VOTETEMPDATUMDto> ReadVOTETEMPDATa(object[] keyWords)
		{
			return this.VOTETEMPDATUMService.Find(keyWords);
		}


		public IEnumerable<VOTETEMPDATUMDto> ReadVOTETEMPDATaPaged(int startIndex, int pageSize)
		{
			return this.VOTETEMPDATUMService.Find(startIndex, pageSize);
		}


		public IEnumerable<VOTETEMPDATUMDto> ReadVOTETEMPDATaPaged(IQueryable<VOTETEMPDATUM> source, int pageIndex, int pageSize)
		{
			return this.VOTETEMPDATUMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<VOTETEMPDATUMDto> ReadVOTETEMPDATaPaged(IQueryable<VOTETEMPDATUM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.VOTETEMPDATUMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<VOTETEMPDATUMDto> ReadVOTETEMPDATaFiltered(string sortExpression, string filterExpression)
		{
			return this.VOTETEMPDATUMService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<VOTETEMPDATUMDto> ReadVOTETEMPDATaPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.VOTETEMPDATUMService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<VOTETEMPDATUMDto> ReadVOTETEMPDATaPagedAndFiltered(int startIndex, int pageSize, Expression<Func<VOTETEMPDATUM, bool>> filter)
		{
			return this.VOTETEMPDATUMService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public VOTETEMPDATUMDto ReadVOTETEMPDATa(string dtoKey)
		{
			return this.VOTETEMPDATUMService.GetByKey(dtoKey);
		}


		public int CountVOTETEMPDATa()
		{
			return this.VOTETEMPDATUMService.Count();
		}


		public int CountVOTETEMPDATa(string filterExpression)
		{
			return this.VOTETEMPDATUMService.Count(filterExpression);
		}


		public int CountVOTETEMPDATa(Expression<Func<VOTETEMPDATUM, bool>> filter)
		{
			return this.VOTETEMPDATUMService.Count(filter);
		}


		public string CreateVOTETEMPDATUM(VOTETEMPDATUMDto votetempdatum, bool doSaveChanges = true)
		{
			string key = this.VOTETEMPDATUMService.Add(votetempdatum);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateVOTETEMPDATUM(VOTETEMPDATUMDto votetempdatum, bool doSaveChanges = true)
		{
			this.VOTETEMPDATUMService.Update(votetempdatum);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateVOTETEMPDATa(IEnumerable<VOTETEMPDATUMDto> votetempdata, bool doSaveChanges = true)
		{
			if (votetempdata == null)
			{
				return;
			}
			foreach (VOTETEMPDATUMDto instance in votetempdata)
			{
				if (instance == null)
				{
					continue;
				}


				this.VOTETEMPDATUMService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteVOTETEMPDATUM(VOTETEMPDATUMDto votetempdatum, bool doSaveChanges = true)
		{
			this.VOTETEMPDATUMService.Delete(votetempdatum);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteVOTETEMPDATa(IEnumerable<VOTETEMPDATUMDto> votetempdata, bool doSaveChanges = true)
		{
			if (votetempdata == null)
			{
				return;
			}
			foreach (VOTETEMPDATUMDto instance in votetempdata)
			{
				if (instance == null)
				{
					continue;
				}


				this.VOTETEMPDATUMService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveVOTETEMPDATUM(VOTETEMPDATUMDto votetempdatum, bool doSaveChanges = true)
		{
			switch (votetempdatum.RowState)
			{
				case RowState.Insert:
					this.CreateVOTETEMPDATUM(votetempdatum, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateVOTETEMPDATUM(votetempdatum, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteVOTETEMPDATUM(votetempdatum, doSaveChanges);
					break;
			}
		}


		public void SaveVOTETEMPDATa(IEnumerable<VOTETEMPDATUMDto> votetempdata, bool doSaveChanges = true)
		{
			if (votetempdata == null)
			{
				return;
			}
			foreach (VOTETEMPDATUMDto instance in votetempdata)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveVOTETEMPDATUM(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion VOTETEMPDATUM CRUD Operations


		#region VOTETARGET CRUD Operations


		private IVOTETARGETService votetarget;
		public virtual IVOTETARGETService VOTETARGETService
		{
			get
			{
				if (this.votetarget == null)
				{
					IVOTETARGETAssembler assembler = new VOTETARGETAssembler();
					IVOTETARGETRepository repository = new VOTETARGETRepository(this.UnitOfWork);
					this.votetarget = new VOTETARGETService(assembler, repository);
				}
				return this.votetarget;
			}
		}


		public IQueryable<VOTETARGET> VOTETARGETs
		{
			get { return this.VOTETARGETService.Repository.GetAll(); }
		}


		public IQueryable<VOTETARGET> ReadVOTETARGETs(Expression<Func<VOTETARGET, bool>> filter, int dummy)
		{
			return this.VOTETARGETService.Repository.Find(filter);
		}


		public IEnumerable<VOTETARGETDto> ReadVOTETARGETs()
		{
			return this.VOTETARGETService.GetAll();
		}


		public IEnumerable<VOTETARGETDto> ReadVOTETARGETs(Expression<Func<VOTETARGET, bool>> filter)
		{
			return this.VOTETARGETService.Find(filter);
		}


		public IEnumerable<VOTETARGETDto> ReadVOTETARGETs(ISpecification<VOTETARGET> specification)
		{
			return this.VOTETARGETService.Find(specification.GetExpression());
		}


		public IEnumerable<VOTETARGETDto> ReadVOTETARGETs(IQueryable<VOTETARGET> query)
		{
			return this.VOTETARGETService.Assembler.Assemble(query);
		}


		public IEnumerable<VOTETARGETDto> ReadVOTETARGETs(string[] propertyToSearch, object[] keyWords)
		{
			return this.VOTETARGETService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<VOTETARGETDto> ReadVOTETARGETs(object[] keyWords)
		{
			return this.VOTETARGETService.Find(keyWords);
		}


		public IEnumerable<VOTETARGETDto> ReadVOTETARGETsPaged(int startIndex, int pageSize)
		{
			return this.VOTETARGETService.Find(startIndex, pageSize);
		}


		public IEnumerable<VOTETARGETDto> ReadVOTETARGETsPaged(IQueryable<VOTETARGET> source, int pageIndex, int pageSize)
		{
			return this.VOTETARGETService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<VOTETARGETDto> ReadVOTETARGETsPaged(IQueryable<VOTETARGET> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.VOTETARGETService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<VOTETARGETDto> ReadVOTETARGETsFiltered(string sortExpression, string filterExpression)
		{
			return this.VOTETARGETService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<VOTETARGETDto> ReadVOTETARGETsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.VOTETARGETService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<VOTETARGETDto> ReadVOTETARGETsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<VOTETARGET, bool>> filter)
		{
			return this.VOTETARGETService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public VOTETARGETDto ReadVOTETARGETs(string dtoKey)
		{
			return this.VOTETARGETService.GetByKey(dtoKey);
		}


		public int CountVOTETARGETs()
		{
			return this.VOTETARGETService.Count();
		}


		public int CountVOTETARGETs(string filterExpression)
		{
			return this.VOTETARGETService.Count(filterExpression);
		}


		public int CountVOTETARGETs(Expression<Func<VOTETARGET, bool>> filter)
		{
			return this.VOTETARGETService.Count(filter);
		}


		public string CreateVOTETARGET(VOTETARGETDto votetarget, bool doSaveChanges = true)
		{
			string key = this.VOTETARGETService.Add(votetarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateVOTETARGET(VOTETARGETDto votetarget, bool doSaveChanges = true)
		{
			this.VOTETARGETService.Update(votetarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateVOTETARGETs(IEnumerable<VOTETARGETDto> votetargets, bool doSaveChanges = true)
		{
			if (votetargets == null)
			{
				return;
			}
			foreach (VOTETARGETDto instance in votetargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.VOTETARGETService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteVOTETARGET(VOTETARGETDto votetarget, bool doSaveChanges = true)
		{
			this.VOTETARGETService.Delete(votetarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteVOTETARGETs(IEnumerable<VOTETARGETDto> votetargets, bool doSaveChanges = true)
		{
			if (votetargets == null)
			{
				return;
			}
			foreach (VOTETARGETDto instance in votetargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.VOTETARGETService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveVOTETARGET(VOTETARGETDto votetarget, bool doSaveChanges = true)
		{
			switch (votetarget.RowState)
			{
				case RowState.Insert:
					this.CreateVOTETARGET(votetarget, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateVOTETARGET(votetarget, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteVOTETARGET(votetarget, doSaveChanges);
					break;
			}
		}


		public void SaveVOTETARGETs(IEnumerable<VOTETARGETDto> votetargets, bool doSaveChanges = true)
		{
			if (votetargets == null)
			{
				return;
			}
			foreach (VOTETARGETDto instance in votetargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveVOTETARGET(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion VOTETARGET CRUD Operations


		#region VOTEMAIN CRUD Operations


		private IVOTEMAINService votemain;
		public virtual IVOTEMAINService VOTEMAINService
		{
			get
			{
				if (this.votemain == null)
				{
					IVOTEMAINAssembler assembler = new VOTEMAINAssembler();
					IVOTEMAINRepository repository = new VOTEMAINRepository(this.UnitOfWork);
					this.votemain = new VOTEMAINService(assembler, repository);
				}
				return this.votemain;
			}
		}


		public IQueryable<VOTEMAIN> VOTEMAINs
		{
			get { return this.VOTEMAINService.Repository.GetAll(); }
		}


		public IQueryable<VOTEMAIN> ReadVOTEMAINs(Expression<Func<VOTEMAIN, bool>> filter, int dummy)
		{
			return this.VOTEMAINService.Repository.Find(filter);
		}


		public IEnumerable<VOTEMAINDto> ReadVOTEMAINs()
		{
			return this.VOTEMAINService.GetAll();
		}


		public IEnumerable<VOTEMAINDto> ReadVOTEMAINs(Expression<Func<VOTEMAIN, bool>> filter)
		{
			return this.VOTEMAINService.Find(filter);
		}


		public IEnumerable<VOTEMAINDto> ReadVOTEMAINs(ISpecification<VOTEMAIN> specification)
		{
			return this.VOTEMAINService.Find(specification.GetExpression());
		}


		public IEnumerable<VOTEMAINDto> ReadVOTEMAINs(IQueryable<VOTEMAIN> query)
		{
			return this.VOTEMAINService.Assembler.Assemble(query);
		}


		public IEnumerable<VOTEMAINDto> ReadVOTEMAINs(string[] propertyToSearch, object[] keyWords)
		{
			return this.VOTEMAINService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<VOTEMAINDto> ReadVOTEMAINs(object[] keyWords)
		{
			return this.VOTEMAINService.Find(keyWords);
		}


		public IEnumerable<VOTEMAINDto> ReadVOTEMAINsPaged(int startIndex, int pageSize)
		{
			return this.VOTEMAINService.Find(startIndex, pageSize);
		}


		public IEnumerable<VOTEMAINDto> ReadVOTEMAINsPaged(IQueryable<VOTEMAIN> source, int pageIndex, int pageSize)
		{
			return this.VOTEMAINService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<VOTEMAINDto> ReadVOTEMAINsPaged(IQueryable<VOTEMAIN> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.VOTEMAINService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<VOTEMAINDto> ReadVOTEMAINsFiltered(string sortExpression, string filterExpression)
		{
			return this.VOTEMAINService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<VOTEMAINDto> ReadVOTEMAINsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.VOTEMAINService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<VOTEMAINDto> ReadVOTEMAINsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<VOTEMAIN, bool>> filter)
		{
			return this.VOTEMAINService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public VOTEMAINDto ReadVOTEMAINs(string dtoKey)
		{
			return this.VOTEMAINService.GetByKey(dtoKey);
		}


		public int CountVOTEMAINs()
		{
			return this.VOTEMAINService.Count();
		}


		public int CountVOTEMAINs(string filterExpression)
		{
			return this.VOTEMAINService.Count(filterExpression);
		}


		public int CountVOTEMAINs(Expression<Func<VOTEMAIN, bool>> filter)
		{
			return this.VOTEMAINService.Count(filter);
		}


		public string CreateVOTEMAIN(VOTEMAINDto votemain, bool doSaveChanges = true)
		{
			string key = this.VOTEMAINService.Add(votemain);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateVOTEMAIN(VOTEMAINDto votemain, bool doSaveChanges = true)
		{
			this.VOTEMAINService.Update(votemain);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateVOTEMAINs(IEnumerable<VOTEMAINDto> votemains, bool doSaveChanges = true)
		{
			if (votemains == null)
			{
				return;
			}
			foreach (VOTEMAINDto instance in votemains)
			{
				if (instance == null)
				{
					continue;
				}


				this.VOTEMAINService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteVOTEMAIN(VOTEMAINDto votemain, bool doSaveChanges = true)
		{
			this.VOTEMAINService.Delete(votemain);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteVOTEMAINs(IEnumerable<VOTEMAINDto> votemains, bool doSaveChanges = true)
		{
			if (votemains == null)
			{
				return;
			}
			foreach (VOTEMAINDto instance in votemains)
			{
				if (instance == null)
				{
					continue;
				}


				this.VOTEMAINService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveVOTEMAIN(VOTEMAINDto votemain, bool doSaveChanges = true)
		{
			switch (votemain.RowState)
			{
				case RowState.Insert:
					this.CreateVOTEMAIN(votemain, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateVOTEMAIN(votemain, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteVOTEMAIN(votemain, doSaveChanges);
					break;
			}
		}


		public void SaveVOTEMAINs(IEnumerable<VOTEMAINDto> votemains, bool doSaveChanges = true)
		{
			if (votemains == null)
			{
				return;
			}
			foreach (VOTEMAINDto instance in votemains)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveVOTEMAIN(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion VOTEMAIN CRUD Operations


		#region VOTEJOB CRUD Operations


		private IVOTEJOBService votejob;
		public virtual IVOTEJOBService VOTEJOBService
		{
			get
			{
				if (this.votejob == null)
				{
					IVOTEJOBAssembler assembler = new VOTEJOBAssembler();
					IVOTEJOBRepository repository = new VOTEJOBRepository(this.UnitOfWork);
					this.votejob = new VOTEJOBService(assembler, repository);
				}
				return this.votejob;
			}
		}


		public IQueryable<VOTEJOB> VOTEJOBs
		{
			get { return this.VOTEJOBService.Repository.GetAll(); }
		}


		public IQueryable<VOTEJOB> ReadVOTEJOBs(Expression<Func<VOTEJOB, bool>> filter, int dummy)
		{
			return this.VOTEJOBService.Repository.Find(filter);
		}


		public IEnumerable<VOTEJOBDto> ReadVOTEJOBs()
		{
			return this.VOTEJOBService.GetAll();
		}


		public IEnumerable<VOTEJOBDto> ReadVOTEJOBs(Expression<Func<VOTEJOB, bool>> filter)
		{
			return this.VOTEJOBService.Find(filter);
		}


		public IEnumerable<VOTEJOBDto> ReadVOTEJOBs(ISpecification<VOTEJOB> specification)
		{
			return this.VOTEJOBService.Find(specification.GetExpression());
		}


		public IEnumerable<VOTEJOBDto> ReadVOTEJOBs(IQueryable<VOTEJOB> query)
		{
			return this.VOTEJOBService.Assembler.Assemble(query);
		}


		public IEnumerable<VOTEJOBDto> ReadVOTEJOBs(string[] propertyToSearch, object[] keyWords)
		{
			return this.VOTEJOBService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<VOTEJOBDto> ReadVOTEJOBs(object[] keyWords)
		{
			return this.VOTEJOBService.Find(keyWords);
		}


		public IEnumerable<VOTEJOBDto> ReadVOTEJOBsPaged(int startIndex, int pageSize)
		{
			return this.VOTEJOBService.Find(startIndex, pageSize);
		}


		public IEnumerable<VOTEJOBDto> ReadVOTEJOBsPaged(IQueryable<VOTEJOB> source, int pageIndex, int pageSize)
		{
			return this.VOTEJOBService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<VOTEJOBDto> ReadVOTEJOBsPaged(IQueryable<VOTEJOB> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.VOTEJOBService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<VOTEJOBDto> ReadVOTEJOBsFiltered(string sortExpression, string filterExpression)
		{
			return this.VOTEJOBService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<VOTEJOBDto> ReadVOTEJOBsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.VOTEJOBService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<VOTEJOBDto> ReadVOTEJOBsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<VOTEJOB, bool>> filter)
		{
			return this.VOTEJOBService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public VOTEJOBDto ReadVOTEJOBs(string dtoKey)
		{
			return this.VOTEJOBService.GetByKey(dtoKey);
		}


		public int CountVOTEJOBs()
		{
			return this.VOTEJOBService.Count();
		}


		public int CountVOTEJOBs(string filterExpression)
		{
			return this.VOTEJOBService.Count(filterExpression);
		}


		public int CountVOTEJOBs(Expression<Func<VOTEJOB, bool>> filter)
		{
			return this.VOTEJOBService.Count(filter);
		}


		public string CreateVOTEJOB(VOTEJOBDto votejob, bool doSaveChanges = true)
		{
			string key = this.VOTEJOBService.Add(votejob);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateVOTEJOB(VOTEJOBDto votejob, bool doSaveChanges = true)
		{
			this.VOTEJOBService.Update(votejob);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateVOTEJOBs(IEnumerable<VOTEJOBDto> votejobs, bool doSaveChanges = true)
		{
			if (votejobs == null)
			{
				return;
			}
			foreach (VOTEJOBDto instance in votejobs)
			{
				if (instance == null)
				{
					continue;
				}


				this.VOTEJOBService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteVOTEJOB(VOTEJOBDto votejob, bool doSaveChanges = true)
		{
			this.VOTEJOBService.Delete(votejob);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteVOTEJOBs(IEnumerable<VOTEJOBDto> votejobs, bool doSaveChanges = true)
		{
			if (votejobs == null)
			{
				return;
			}
			foreach (VOTEJOBDto instance in votejobs)
			{
				if (instance == null)
				{
					continue;
				}


				this.VOTEJOBService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveVOTEJOB(VOTEJOBDto votejob, bool doSaveChanges = true)
		{
			switch (votejob.RowState)
			{
				case RowState.Insert:
					this.CreateVOTEJOB(votejob, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateVOTEJOB(votejob, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteVOTEJOB(votejob, doSaveChanges);
					break;
			}
		}


		public void SaveVOTEJOBs(IEnumerable<VOTEJOBDto> votejobs, bool doSaveChanges = true)
		{
			if (votejobs == null)
			{
				return;
			}
			foreach (VOTEJOBDto instance in votejobs)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveVOTEJOB(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion VOTEJOB CRUD Operations


		#region VOTEINSTANCE CRUD Operations


		private IVOTEINSTANCEService voteinstance;
		public virtual IVOTEINSTANCEService VOTEINSTANCEService
		{
			get
			{
				if (this.voteinstance == null)
				{
					IVOTEINSTANCEAssembler assembler = new VOTEINSTANCEAssembler();
					IVOTEINSTANCERepository repository = new VOTEINSTANCERepository(this.UnitOfWork);
					this.voteinstance = new VOTEINSTANCEService(assembler, repository);
				}
				return this.voteinstance;
			}
		}


		public IQueryable<VOTEINSTANCE> VOTEINSTANCEs
		{
			get { return this.VOTEINSTANCEService.Repository.GetAll(); }
		}


		public IQueryable<VOTEINSTANCE> ReadVOTEINSTANCEs(Expression<Func<VOTEINSTANCE, bool>> filter, int dummy)
		{
			return this.VOTEINSTANCEService.Repository.Find(filter);
		}


		public IEnumerable<VOTEINSTANCEDto> ReadVOTEINSTANCEs()
		{
			return this.VOTEINSTANCEService.GetAll();
		}


		public IEnumerable<VOTEINSTANCEDto> ReadVOTEINSTANCEs(Expression<Func<VOTEINSTANCE, bool>> filter)
		{
			return this.VOTEINSTANCEService.Find(filter);
		}


		public IEnumerable<VOTEINSTANCEDto> ReadVOTEINSTANCEs(ISpecification<VOTEINSTANCE> specification)
		{
			return this.VOTEINSTANCEService.Find(specification.GetExpression());
		}


		public IEnumerable<VOTEINSTANCEDto> ReadVOTEINSTANCEs(IQueryable<VOTEINSTANCE> query)
		{
			return this.VOTEINSTANCEService.Assembler.Assemble(query);
		}


		public IEnumerable<VOTEINSTANCEDto> ReadVOTEINSTANCEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.VOTEINSTANCEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<VOTEINSTANCEDto> ReadVOTEINSTANCEs(object[] keyWords)
		{
			return this.VOTEINSTANCEService.Find(keyWords);
		}


		public IEnumerable<VOTEINSTANCEDto> ReadVOTEINSTANCEsPaged(int startIndex, int pageSize)
		{
			return this.VOTEINSTANCEService.Find(startIndex, pageSize);
		}


		public IEnumerable<VOTEINSTANCEDto> ReadVOTEINSTANCEsPaged(IQueryable<VOTEINSTANCE> source, int pageIndex, int pageSize)
		{
			return this.VOTEINSTANCEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<VOTEINSTANCEDto> ReadVOTEINSTANCEsPaged(IQueryable<VOTEINSTANCE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.VOTEINSTANCEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<VOTEINSTANCEDto> ReadVOTEINSTANCEsFiltered(string sortExpression, string filterExpression)
		{
			return this.VOTEINSTANCEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<VOTEINSTANCEDto> ReadVOTEINSTANCEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.VOTEINSTANCEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<VOTEINSTANCEDto> ReadVOTEINSTANCEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<VOTEINSTANCE, bool>> filter)
		{
			return this.VOTEINSTANCEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public VOTEINSTANCEDto ReadVOTEINSTANCEs(string dtoKey)
		{
			return this.VOTEINSTANCEService.GetByKey(dtoKey);
		}


		public int CountVOTEINSTANCEs()
		{
			return this.VOTEINSTANCEService.Count();
		}


		public int CountVOTEINSTANCEs(string filterExpression)
		{
			return this.VOTEINSTANCEService.Count(filterExpression);
		}


		public int CountVOTEINSTANCEs(Expression<Func<VOTEINSTANCE, bool>> filter)
		{
			return this.VOTEINSTANCEService.Count(filter);
		}


		public string CreateVOTEINSTANCE(VOTEINSTANCEDto voteinstance, bool doSaveChanges = true)
		{
			string key = this.VOTEINSTANCEService.Add(voteinstance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateVOTEINSTANCE(VOTEINSTANCEDto voteinstance, bool doSaveChanges = true)
		{
			this.VOTEINSTANCEService.Update(voteinstance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateVOTEINSTANCEs(IEnumerable<VOTEINSTANCEDto> voteinstances, bool doSaveChanges = true)
		{
			if (voteinstances == null)
			{
				return;
			}
			foreach (VOTEINSTANCEDto instance in voteinstances)
			{
				if (instance == null)
				{
					continue;
				}


				this.VOTEINSTANCEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteVOTEINSTANCE(VOTEINSTANCEDto voteinstance, bool doSaveChanges = true)
		{
			this.VOTEINSTANCEService.Delete(voteinstance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteVOTEINSTANCEs(IEnumerable<VOTEINSTANCEDto> voteinstances, bool doSaveChanges = true)
		{
			if (voteinstances == null)
			{
				return;
			}
			foreach (VOTEINSTANCEDto instance in voteinstances)
			{
				if (instance == null)
				{
					continue;
				}


				this.VOTEINSTANCEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveVOTEINSTANCE(VOTEINSTANCEDto voteinstance, bool doSaveChanges = true)
		{
			switch (voteinstance.RowState)
			{
				case RowState.Insert:
					this.CreateVOTEINSTANCE(voteinstance, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateVOTEINSTANCE(voteinstance, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteVOTEINSTANCE(voteinstance, doSaveChanges);
					break;
			}
		}


		public void SaveVOTEINSTANCEs(IEnumerable<VOTEINSTANCEDto> voteinstances, bool doSaveChanges = true)
		{
			if (voteinstances == null)
			{
				return;
			}
			foreach (VOTEINSTANCEDto instance in voteinstances)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveVOTEINSTANCE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion VOTEINSTANCE CRUD Operations


		#region VOTEINSDET CRUD Operations


		private IVOTEINSDETService voteinsdet;
		public virtual IVOTEINSDETService VOTEINSDETService
		{
			get
			{
				if (this.voteinsdet == null)
				{
					IVOTEINSDETAssembler assembler = new VOTEINSDETAssembler();
					IVOTEINSDETRepository repository = new VOTEINSDETRepository(this.UnitOfWork);
					this.voteinsdet = new VOTEINSDETService(assembler, repository);
				}
				return this.voteinsdet;
			}
		}


		public IQueryable<VOTEINSDET> VOTEINSDETs
		{
			get { return this.VOTEINSDETService.Repository.GetAll(); }
		}


		public IQueryable<VOTEINSDET> ReadVOTEINSDETs(Expression<Func<VOTEINSDET, bool>> filter, int dummy)
		{
			return this.VOTEINSDETService.Repository.Find(filter);
		}


		public IEnumerable<VOTEINSDETDto> ReadVOTEINSDETs()
		{
			return this.VOTEINSDETService.GetAll();
		}


		public IEnumerable<VOTEINSDETDto> ReadVOTEINSDETs(Expression<Func<VOTEINSDET, bool>> filter)
		{
			return this.VOTEINSDETService.Find(filter);
		}


		public IEnumerable<VOTEINSDETDto> ReadVOTEINSDETs(ISpecification<VOTEINSDET> specification)
		{
			return this.VOTEINSDETService.Find(specification.GetExpression());
		}


		public IEnumerable<VOTEINSDETDto> ReadVOTEINSDETs(IQueryable<VOTEINSDET> query)
		{
			return this.VOTEINSDETService.Assembler.Assemble(query);
		}


		public IEnumerable<VOTEINSDETDto> ReadVOTEINSDETs(string[] propertyToSearch, object[] keyWords)
		{
			return this.VOTEINSDETService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<VOTEINSDETDto> ReadVOTEINSDETs(object[] keyWords)
		{
			return this.VOTEINSDETService.Find(keyWords);
		}


		public IEnumerable<VOTEINSDETDto> ReadVOTEINSDETsPaged(int startIndex, int pageSize)
		{
			return this.VOTEINSDETService.Find(startIndex, pageSize);
		}


		public IEnumerable<VOTEINSDETDto> ReadVOTEINSDETsPaged(IQueryable<VOTEINSDET> source, int pageIndex, int pageSize)
		{
			return this.VOTEINSDETService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<VOTEINSDETDto> ReadVOTEINSDETsPaged(IQueryable<VOTEINSDET> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.VOTEINSDETService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<VOTEINSDETDto> ReadVOTEINSDETsFiltered(string sortExpression, string filterExpression)
		{
			return this.VOTEINSDETService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<VOTEINSDETDto> ReadVOTEINSDETsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.VOTEINSDETService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<VOTEINSDETDto> ReadVOTEINSDETsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<VOTEINSDET, bool>> filter)
		{
			return this.VOTEINSDETService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public VOTEINSDETDto ReadVOTEINSDETs(string dtoKey)
		{
			return this.VOTEINSDETService.GetByKey(dtoKey);
		}


		public int CountVOTEINSDETs()
		{
			return this.VOTEINSDETService.Count();
		}


		public int CountVOTEINSDETs(string filterExpression)
		{
			return this.VOTEINSDETService.Count(filterExpression);
		}


		public int CountVOTEINSDETs(Expression<Func<VOTEINSDET, bool>> filter)
		{
			return this.VOTEINSDETService.Count(filter);
		}


		public string CreateVOTEINSDET(VOTEINSDETDto voteinsdet, bool doSaveChanges = true)
		{
			string key = this.VOTEINSDETService.Add(voteinsdet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateVOTEINSDET(VOTEINSDETDto voteinsdet, bool doSaveChanges = true)
		{
			this.VOTEINSDETService.Update(voteinsdet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateVOTEINSDETs(IEnumerable<VOTEINSDETDto> voteinsdets, bool doSaveChanges = true)
		{
			if (voteinsdets == null)
			{
				return;
			}
			foreach (VOTEINSDETDto instance in voteinsdets)
			{
				if (instance == null)
				{
					continue;
				}


				this.VOTEINSDETService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteVOTEINSDET(VOTEINSDETDto voteinsdet, bool doSaveChanges = true)
		{
			this.VOTEINSDETService.Delete(voteinsdet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteVOTEINSDETs(IEnumerable<VOTEINSDETDto> voteinsdets, bool doSaveChanges = true)
		{
			if (voteinsdets == null)
			{
				return;
			}
			foreach (VOTEINSDETDto instance in voteinsdets)
			{
				if (instance == null)
				{
					continue;
				}


				this.VOTEINSDETService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveVOTEINSDET(VOTEINSDETDto voteinsdet, bool doSaveChanges = true)
		{
			switch (voteinsdet.RowState)
			{
				case RowState.Insert:
					this.CreateVOTEINSDET(voteinsdet, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateVOTEINSDET(voteinsdet, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteVOTEINSDET(voteinsdet, doSaveChanges);
					break;
			}
		}


		public void SaveVOTEINSDETs(IEnumerable<VOTEINSDETDto> voteinsdets, bool doSaveChanges = true)
		{
			if (voteinsdets == null)
			{
				return;
			}
			foreach (VOTEINSDETDto instance in voteinsdets)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveVOTEINSDET(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion VOTEINSDET CRUD Operations


		#region VOTEGROUP CRUD Operations


		private IVOTEGROUPService votegroup;
		public virtual IVOTEGROUPService VOTEGROUPService
		{
			get
			{
				if (this.votegroup == null)
				{
					IVOTEGROUPAssembler assembler = new VOTEGROUPAssembler();
					IVOTEGROUPRepository repository = new VOTEGROUPRepository(this.UnitOfWork);
					this.votegroup = new VOTEGROUPService(assembler, repository);
				}
				return this.votegroup;
			}
		}


		public IQueryable<VOTEGROUP> VOTEGROUPs
		{
			get { return this.VOTEGROUPService.Repository.GetAll(); }
		}


		public IQueryable<VOTEGROUP> ReadVOTEGROUPs(Expression<Func<VOTEGROUP, bool>> filter, int dummy)
		{
			return this.VOTEGROUPService.Repository.Find(filter);
		}


		public IEnumerable<VOTEGROUPDto> ReadVOTEGROUPs()
		{
			return this.VOTEGROUPService.GetAll();
		}


		public IEnumerable<VOTEGROUPDto> ReadVOTEGROUPs(Expression<Func<VOTEGROUP, bool>> filter)
		{
			return this.VOTEGROUPService.Find(filter);
		}


		public IEnumerable<VOTEGROUPDto> ReadVOTEGROUPs(ISpecification<VOTEGROUP> specification)
		{
			return this.VOTEGROUPService.Find(specification.GetExpression());
		}


		public IEnumerable<VOTEGROUPDto> ReadVOTEGROUPs(IQueryable<VOTEGROUP> query)
		{
			return this.VOTEGROUPService.Assembler.Assemble(query);
		}


		public IEnumerable<VOTEGROUPDto> ReadVOTEGROUPs(string[] propertyToSearch, object[] keyWords)
		{
			return this.VOTEGROUPService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<VOTEGROUPDto> ReadVOTEGROUPs(object[] keyWords)
		{
			return this.VOTEGROUPService.Find(keyWords);
		}


		public IEnumerable<VOTEGROUPDto> ReadVOTEGROUPsPaged(int startIndex, int pageSize)
		{
			return this.VOTEGROUPService.Find(startIndex, pageSize);
		}


		public IEnumerable<VOTEGROUPDto> ReadVOTEGROUPsPaged(IQueryable<VOTEGROUP> source, int pageIndex, int pageSize)
		{
			return this.VOTEGROUPService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<VOTEGROUPDto> ReadVOTEGROUPsPaged(IQueryable<VOTEGROUP> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.VOTEGROUPService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<VOTEGROUPDto> ReadVOTEGROUPsFiltered(string sortExpression, string filterExpression)
		{
			return this.VOTEGROUPService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<VOTEGROUPDto> ReadVOTEGROUPsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.VOTEGROUPService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<VOTEGROUPDto> ReadVOTEGROUPsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<VOTEGROUP, bool>> filter)
		{
			return this.VOTEGROUPService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public VOTEGROUPDto ReadVOTEGROUPs(string dtoKey)
		{
			return this.VOTEGROUPService.GetByKey(dtoKey);
		}


		public int CountVOTEGROUPs()
		{
			return this.VOTEGROUPService.Count();
		}


		public int CountVOTEGROUPs(string filterExpression)
		{
			return this.VOTEGROUPService.Count(filterExpression);
		}


		public int CountVOTEGROUPs(Expression<Func<VOTEGROUP, bool>> filter)
		{
			return this.VOTEGROUPService.Count(filter);
		}


		public string CreateVOTEGROUP(VOTEGROUPDto votegroup, bool doSaveChanges = true)
		{
			string key = this.VOTEGROUPService.Add(votegroup);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateVOTEGROUP(VOTEGROUPDto votegroup, bool doSaveChanges = true)
		{
			this.VOTEGROUPService.Update(votegroup);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateVOTEGROUPs(IEnumerable<VOTEGROUPDto> votegroups, bool doSaveChanges = true)
		{
			if (votegroups == null)
			{
				return;
			}
			foreach (VOTEGROUPDto instance in votegroups)
			{
				if (instance == null)
				{
					continue;
				}


				this.VOTEGROUPService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteVOTEGROUP(VOTEGROUPDto votegroup, bool doSaveChanges = true)
		{
			this.VOTEGROUPService.Delete(votegroup);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteVOTEGROUPs(IEnumerable<VOTEGROUPDto> votegroups, bool doSaveChanges = true)
		{
			if (votegroups == null)
			{
				return;
			}
			foreach (VOTEGROUPDto instance in votegroups)
			{
				if (instance == null)
				{
					continue;
				}


				this.VOTEGROUPService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveVOTEGROUP(VOTEGROUPDto votegroup, bool doSaveChanges = true)
		{
			switch (votegroup.RowState)
			{
				case RowState.Insert:
					this.CreateVOTEGROUP(votegroup, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateVOTEGROUP(votegroup, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteVOTEGROUP(votegroup, doSaveChanges);
					break;
			}
		}


		public void SaveVOTEGROUPs(IEnumerable<VOTEGROUPDto> votegroups, bool doSaveChanges = true)
		{
			if (votegroups == null)
			{
				return;
			}
			foreach (VOTEGROUPDto instance in votegroups)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveVOTEGROUP(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion VOTEGROUP CRUD Operations


		#region VOTEGCOND CRUD Operations


		private IVOTEGCONDService votegcond;
		public virtual IVOTEGCONDService VOTEGCONDService
		{
			get
			{
				if (this.votegcond == null)
				{
					IVOTEGCONDAssembler assembler = new VOTEGCONDAssembler();
					IVOTEGCONDRepository repository = new VOTEGCONDRepository(this.UnitOfWork);
					this.votegcond = new VOTEGCONDService(assembler, repository);
				}
				return this.votegcond;
			}
		}


		public IQueryable<VOTEGCOND> VOTEGCONDs
		{
			get { return this.VOTEGCONDService.Repository.GetAll(); }
		}


		public IQueryable<VOTEGCOND> ReadVOTEGCONDs(Expression<Func<VOTEGCOND, bool>> filter, int dummy)
		{
			return this.VOTEGCONDService.Repository.Find(filter);
		}


		public IEnumerable<VOTEGCONDDto> ReadVOTEGCONDs()
		{
			return this.VOTEGCONDService.GetAll();
		}


		public IEnumerable<VOTEGCONDDto> ReadVOTEGCONDs(Expression<Func<VOTEGCOND, bool>> filter)
		{
			return this.VOTEGCONDService.Find(filter);
		}


		public IEnumerable<VOTEGCONDDto> ReadVOTEGCONDs(ISpecification<VOTEGCOND> specification)
		{
			return this.VOTEGCONDService.Find(specification.GetExpression());
		}


		public IEnumerable<VOTEGCONDDto> ReadVOTEGCONDs(IQueryable<VOTEGCOND> query)
		{
			return this.VOTEGCONDService.Assembler.Assemble(query);
		}


		public IEnumerable<VOTEGCONDDto> ReadVOTEGCONDs(string[] propertyToSearch, object[] keyWords)
		{
			return this.VOTEGCONDService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<VOTEGCONDDto> ReadVOTEGCONDs(object[] keyWords)
		{
			return this.VOTEGCONDService.Find(keyWords);
		}


		public IEnumerable<VOTEGCONDDto> ReadVOTEGCONDsPaged(int startIndex, int pageSize)
		{
			return this.VOTEGCONDService.Find(startIndex, pageSize);
		}


		public IEnumerable<VOTEGCONDDto> ReadVOTEGCONDsPaged(IQueryable<VOTEGCOND> source, int pageIndex, int pageSize)
		{
			return this.VOTEGCONDService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<VOTEGCONDDto> ReadVOTEGCONDsPaged(IQueryable<VOTEGCOND> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.VOTEGCONDService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<VOTEGCONDDto> ReadVOTEGCONDsFiltered(string sortExpression, string filterExpression)
		{
			return this.VOTEGCONDService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<VOTEGCONDDto> ReadVOTEGCONDsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.VOTEGCONDService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<VOTEGCONDDto> ReadVOTEGCONDsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<VOTEGCOND, bool>> filter)
		{
			return this.VOTEGCONDService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public VOTEGCONDDto ReadVOTEGCONDs(string dtoKey)
		{
			return this.VOTEGCONDService.GetByKey(dtoKey);
		}


		public int CountVOTEGCONDs()
		{
			return this.VOTEGCONDService.Count();
		}


		public int CountVOTEGCONDs(string filterExpression)
		{
			return this.VOTEGCONDService.Count(filterExpression);
		}


		public int CountVOTEGCONDs(Expression<Func<VOTEGCOND, bool>> filter)
		{
			return this.VOTEGCONDService.Count(filter);
		}


		public string CreateVOTEGCOND(VOTEGCONDDto votegcond, bool doSaveChanges = true)
		{
			string key = this.VOTEGCONDService.Add(votegcond);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateVOTEGCOND(VOTEGCONDDto votegcond, bool doSaveChanges = true)
		{
			this.VOTEGCONDService.Update(votegcond);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateVOTEGCONDs(IEnumerable<VOTEGCONDDto> votegconds, bool doSaveChanges = true)
		{
			if (votegconds == null)
			{
				return;
			}
			foreach (VOTEGCONDDto instance in votegconds)
			{
				if (instance == null)
				{
					continue;
				}


				this.VOTEGCONDService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteVOTEGCOND(VOTEGCONDDto votegcond, bool doSaveChanges = true)
		{
			this.VOTEGCONDService.Delete(votegcond);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteVOTEGCONDs(IEnumerable<VOTEGCONDDto> votegconds, bool doSaveChanges = true)
		{
			if (votegconds == null)
			{
				return;
			}
			foreach (VOTEGCONDDto instance in votegconds)
			{
				if (instance == null)
				{
					continue;
				}


				this.VOTEGCONDService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveVOTEGCOND(VOTEGCONDDto votegcond, bool doSaveChanges = true)
		{
			switch (votegcond.RowState)
			{
				case RowState.Insert:
					this.CreateVOTEGCOND(votegcond, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateVOTEGCOND(votegcond, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteVOTEGCOND(votegcond, doSaveChanges);
					break;
			}
		}


		public void SaveVOTEGCONDs(IEnumerable<VOTEGCONDDto> votegconds, bool doSaveChanges = true)
		{
			if (votegconds == null)
			{
				return;
			}
			foreach (VOTEGCONDDto instance in votegconds)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveVOTEGCOND(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion VOTEGCOND CRUD Operations


		#region TRAININGTIME CRUD Operations


		private ITRAININGTIMEService trainingtime;
		public virtual ITRAININGTIMEService TRAININGTIMEService
		{
			get
			{
				if (this.trainingtime == null)
				{
					ITRAININGTIMEAssembler assembler = new TRAININGTIMEAssembler();
					ITRAININGTIMERepository repository = new TRAININGTIMERepository(this.UnitOfWork);
					this.trainingtime = new TRAININGTIMEService(assembler, repository);
				}
				return this.trainingtime;
			}
		}


		public IQueryable<TRAININGTIME> TRAININGTIMEs
		{
			get { return this.TRAININGTIMEService.Repository.GetAll(); }
		}


		public IQueryable<TRAININGTIME> ReadTRAININGTIMEs(Expression<Func<TRAININGTIME, bool>> filter, int dummy)
		{
			return this.TRAININGTIMEService.Repository.Find(filter);
		}


		public IEnumerable<TRAININGTIMEDto> ReadTRAININGTIMEs()
		{
			return this.TRAININGTIMEService.GetAll();
		}


		public IEnumerable<TRAININGTIMEDto> ReadTRAININGTIMEs(Expression<Func<TRAININGTIME, bool>> filter)
		{
			return this.TRAININGTIMEService.Find(filter);
		}


		public IEnumerable<TRAININGTIMEDto> ReadTRAININGTIMEs(ISpecification<TRAININGTIME> specification)
		{
			return this.TRAININGTIMEService.Find(specification.GetExpression());
		}


		public IEnumerable<TRAININGTIMEDto> ReadTRAININGTIMEs(IQueryable<TRAININGTIME> query)
		{
			return this.TRAININGTIMEService.Assembler.Assemble(query);
		}


		public IEnumerable<TRAININGTIMEDto> ReadTRAININGTIMEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.TRAININGTIMEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<TRAININGTIMEDto> ReadTRAININGTIMEs(object[] keyWords)
		{
			return this.TRAININGTIMEService.Find(keyWords);
		}


		public IEnumerable<TRAININGTIMEDto> ReadTRAININGTIMEsPaged(int startIndex, int pageSize)
		{
			return this.TRAININGTIMEService.Find(startIndex, pageSize);
		}


		public IEnumerable<TRAININGTIMEDto> ReadTRAININGTIMEsPaged(IQueryable<TRAININGTIME> source, int pageIndex, int pageSize)
		{
			return this.TRAININGTIMEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<TRAININGTIMEDto> ReadTRAININGTIMEsPaged(IQueryable<TRAININGTIME> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.TRAININGTIMEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<TRAININGTIMEDto> ReadTRAININGTIMEsFiltered(string sortExpression, string filterExpression)
		{
			return this.TRAININGTIMEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<TRAININGTIMEDto> ReadTRAININGTIMEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.TRAININGTIMEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<TRAININGTIMEDto> ReadTRAININGTIMEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<TRAININGTIME, bool>> filter)
		{
			return this.TRAININGTIMEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public TRAININGTIMEDto ReadTRAININGTIMEs(string dtoKey)
		{
			return this.TRAININGTIMEService.GetByKey(dtoKey);
		}


		public int CountTRAININGTIMEs()
		{
			return this.TRAININGTIMEService.Count();
		}


		public int CountTRAININGTIMEs(string filterExpression)
		{
			return this.TRAININGTIMEService.Count(filterExpression);
		}


		public int CountTRAININGTIMEs(Expression<Func<TRAININGTIME, bool>> filter)
		{
			return this.TRAININGTIMEService.Count(filter);
		}


		public string CreateTRAININGTIME(TRAININGTIMEDto trainingtime, bool doSaveChanges = true)
		{
			string key = this.TRAININGTIMEService.Add(trainingtime);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateTRAININGTIME(TRAININGTIMEDto trainingtime, bool doSaveChanges = true)
		{
			this.TRAININGTIMEService.Update(trainingtime);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateTRAININGTIMEs(IEnumerable<TRAININGTIMEDto> trainingtimes, bool doSaveChanges = true)
		{
			if (trainingtimes == null)
			{
				return;
			}
			foreach (TRAININGTIMEDto instance in trainingtimes)
			{
				if (instance == null)
				{
					continue;
				}


				this.TRAININGTIMEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteTRAININGTIME(TRAININGTIMEDto trainingtime, bool doSaveChanges = true)
		{
			this.TRAININGTIMEService.Delete(trainingtime);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteTRAININGTIMEs(IEnumerable<TRAININGTIMEDto> trainingtimes, bool doSaveChanges = true)
		{
			if (trainingtimes == null)
			{
				return;
			}
			foreach (TRAININGTIMEDto instance in trainingtimes)
			{
				if (instance == null)
				{
					continue;
				}


				this.TRAININGTIMEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveTRAININGTIME(TRAININGTIMEDto trainingtime, bool doSaveChanges = true)
		{
			switch (trainingtime.RowState)
			{
				case RowState.Insert:
					this.CreateTRAININGTIME(trainingtime, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateTRAININGTIME(trainingtime, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteTRAININGTIME(trainingtime, doSaveChanges);
					break;
			}
		}


		public void SaveTRAININGTIMEs(IEnumerable<TRAININGTIMEDto> trainingtimes, bool doSaveChanges = true)
		{
			if (trainingtimes == null)
			{
				return;
			}
			foreach (TRAININGTIMEDto instance in trainingtimes)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveTRAININGTIME(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion TRAININGTIME CRUD Operations


		#region TEST CRUD Operations


		private ITESTService test;
		public virtual ITESTService TESTService
		{
			get
			{
				if (this.test == null)
				{
					ITESTAssembler assembler = new TESTAssembler();
					ITESTRepository repository = new TESTRepository(this.UnitOfWork);
					this.test = new TESTService(assembler, repository);
				}
				return this.test;
			}
		}


		public IQueryable<TEST> TESTs
		{
			get { return this.TESTService.Repository.GetAll(); }
		}


		public IQueryable<TEST> ReadTESTs(Expression<Func<TEST, bool>> filter, int dummy)
		{
			return this.TESTService.Repository.Find(filter);
		}


		public IEnumerable<TESTDto> ReadTESTs()
		{
			return this.TESTService.GetAll();
		}


		public IEnumerable<TESTDto> ReadTESTs(Expression<Func<TEST, bool>> filter)
		{
			return this.TESTService.Find(filter);
		}


		public IEnumerable<TESTDto> ReadTESTs(ISpecification<TEST> specification)
		{
			return this.TESTService.Find(specification.GetExpression());
		}


		public IEnumerable<TESTDto> ReadTESTs(IQueryable<TEST> query)
		{
			return this.TESTService.Assembler.Assemble(query);
		}


		public IEnumerable<TESTDto> ReadTESTs(string[] propertyToSearch, object[] keyWords)
		{
			return this.TESTService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<TESTDto> ReadTESTs(object[] keyWords)
		{
			return this.TESTService.Find(keyWords);
		}


		public IEnumerable<TESTDto> ReadTESTsPaged(int startIndex, int pageSize)
		{
			return this.TESTService.Find(startIndex, pageSize);
		}


		public IEnumerable<TESTDto> ReadTESTsPaged(IQueryable<TEST> source, int pageIndex, int pageSize)
		{
			return this.TESTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<TESTDto> ReadTESTsPaged(IQueryable<TEST> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.TESTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<TESTDto> ReadTESTsFiltered(string sortExpression, string filterExpression)
		{
			return this.TESTService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<TESTDto> ReadTESTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.TESTService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<TESTDto> ReadTESTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<TEST, bool>> filter)
		{
			return this.TESTService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public TESTDto ReadTESTs(string dtoKey)
		{
			return this.TESTService.GetByKey(dtoKey);
		}


		public int CountTESTs()
		{
			return this.TESTService.Count();
		}


		public int CountTESTs(string filterExpression)
		{
			return this.TESTService.Count(filterExpression);
		}


		public int CountTESTs(Expression<Func<TEST, bool>> filter)
		{
			return this.TESTService.Count(filter);
		}


		public string CreateTEST(TESTDto test, bool doSaveChanges = true)
		{
			string key = this.TESTService.Add(test);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateTEST(TESTDto test, bool doSaveChanges = true)
		{
			this.TESTService.Update(test);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateTESTs(IEnumerable<TESTDto> tests, bool doSaveChanges = true)
		{
			if (tests == null)
			{
				return;
			}
			foreach (TESTDto instance in tests)
			{
				if (instance == null)
				{
					continue;
				}


				this.TESTService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteTEST(TESTDto test, bool doSaveChanges = true)
		{
			this.TESTService.Delete(test);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteTESTs(IEnumerable<TESTDto> tests, bool doSaveChanges = true)
		{
			if (tests == null)
			{
				return;
			}
			foreach (TESTDto instance in tests)
			{
				if (instance == null)
				{
					continue;
				}


				this.TESTService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveTEST(TESTDto test, bool doSaveChanges = true)
		{
			switch (test.RowState)
			{
				case RowState.Insert:
					this.CreateTEST(test, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateTEST(test, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteTEST(test, doSaveChanges);
					break;
			}
		}


		public void SaveTESTs(IEnumerable<TESTDto> tests, bool doSaveChanges = true)
		{
			if (tests == null)
			{
				return;
			}
			foreach (TESTDto instance in tests)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveTEST(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion TEST CRUD Operations


		#region TEACHTIMETYPE CRUD Operations


		private ITEACHTIMETYPEService teachtimetype;
		public virtual ITEACHTIMETYPEService TEACHTIMETYPEService
		{
			get
			{
				if (this.teachtimetype == null)
				{
					ITEACHTIMETYPEAssembler assembler = new TEACHTIMETYPEAssembler();
					ITEACHTIMETYPERepository repository = new TEACHTIMETYPERepository(this.UnitOfWork);
					this.teachtimetype = new TEACHTIMETYPEService(assembler, repository);
				}
				return this.teachtimetype;
			}
		}


		public IQueryable<TEACHTIMETYPE> TEACHTIMETYPEs
		{
			get { return this.TEACHTIMETYPEService.Repository.GetAll(); }
		}


		public IQueryable<TEACHTIMETYPE> ReadTEACHTIMETYPEs(Expression<Func<TEACHTIMETYPE, bool>> filter, int dummy)
		{
			return this.TEACHTIMETYPEService.Repository.Find(filter);
		}


		public IEnumerable<TEACHTIMETYPEDto> ReadTEACHTIMETYPEs()
		{
			return this.TEACHTIMETYPEService.GetAll();
		}


		public IEnumerable<TEACHTIMETYPEDto> ReadTEACHTIMETYPEs(Expression<Func<TEACHTIMETYPE, bool>> filter)
		{
			return this.TEACHTIMETYPEService.Find(filter);
		}


		public IEnumerable<TEACHTIMETYPEDto> ReadTEACHTIMETYPEs(ISpecification<TEACHTIMETYPE> specification)
		{
			return this.TEACHTIMETYPEService.Find(specification.GetExpression());
		}


		public IEnumerable<TEACHTIMETYPEDto> ReadTEACHTIMETYPEs(IQueryable<TEACHTIMETYPE> query)
		{
			return this.TEACHTIMETYPEService.Assembler.Assemble(query);
		}


		public IEnumerable<TEACHTIMETYPEDto> ReadTEACHTIMETYPEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.TEACHTIMETYPEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<TEACHTIMETYPEDto> ReadTEACHTIMETYPEs(object[] keyWords)
		{
			return this.TEACHTIMETYPEService.Find(keyWords);
		}


		public IEnumerable<TEACHTIMETYPEDto> ReadTEACHTIMETYPEsPaged(int startIndex, int pageSize)
		{
			return this.TEACHTIMETYPEService.Find(startIndex, pageSize);
		}


		public IEnumerable<TEACHTIMETYPEDto> ReadTEACHTIMETYPEsPaged(IQueryable<TEACHTIMETYPE> source, int pageIndex, int pageSize)
		{
			return this.TEACHTIMETYPEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<TEACHTIMETYPEDto> ReadTEACHTIMETYPEsPaged(IQueryable<TEACHTIMETYPE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.TEACHTIMETYPEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<TEACHTIMETYPEDto> ReadTEACHTIMETYPEsFiltered(string sortExpression, string filterExpression)
		{
			return this.TEACHTIMETYPEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<TEACHTIMETYPEDto> ReadTEACHTIMETYPEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.TEACHTIMETYPEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<TEACHTIMETYPEDto> ReadTEACHTIMETYPEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<TEACHTIMETYPE, bool>> filter)
		{
			return this.TEACHTIMETYPEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public TEACHTIMETYPEDto ReadTEACHTIMETYPEs(string dtoKey)
		{
			return this.TEACHTIMETYPEService.GetByKey(dtoKey);
		}


		public int CountTEACHTIMETYPEs()
		{
			return this.TEACHTIMETYPEService.Count();
		}


		public int CountTEACHTIMETYPEs(string filterExpression)
		{
			return this.TEACHTIMETYPEService.Count(filterExpression);
		}


		public int CountTEACHTIMETYPEs(Expression<Func<TEACHTIMETYPE, bool>> filter)
		{
			return this.TEACHTIMETYPEService.Count(filter);
		}


		public string CreateTEACHTIMETYPE(TEACHTIMETYPEDto teachtimetype, bool doSaveChanges = true)
		{
			string key = this.TEACHTIMETYPEService.Add(teachtimetype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateTEACHTIMETYPE(TEACHTIMETYPEDto teachtimetype, bool doSaveChanges = true)
		{
			this.TEACHTIMETYPEService.Update(teachtimetype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateTEACHTIMETYPEs(IEnumerable<TEACHTIMETYPEDto> teachtimetypes, bool doSaveChanges = true)
		{
			if (teachtimetypes == null)
			{
				return;
			}
			foreach (TEACHTIMETYPEDto instance in teachtimetypes)
			{
				if (instance == null)
				{
					continue;
				}


				this.TEACHTIMETYPEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteTEACHTIMETYPE(TEACHTIMETYPEDto teachtimetype, bool doSaveChanges = true)
		{
			this.TEACHTIMETYPEService.Delete(teachtimetype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteTEACHTIMETYPEs(IEnumerable<TEACHTIMETYPEDto> teachtimetypes, bool doSaveChanges = true)
		{
			if (teachtimetypes == null)
			{
				return;
			}
			foreach (TEACHTIMETYPEDto instance in teachtimetypes)
			{
				if (instance == null)
				{
					continue;
				}


				this.TEACHTIMETYPEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveTEACHTIMETYPE(TEACHTIMETYPEDto teachtimetype, bool doSaveChanges = true)
		{
			switch (teachtimetype.RowState)
			{
				case RowState.Insert:
					this.CreateTEACHTIMETYPE(teachtimetype, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateTEACHTIMETYPE(teachtimetype, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteTEACHTIMETYPE(teachtimetype, doSaveChanges);
					break;
			}
		}


		public void SaveTEACHTIMETYPEs(IEnumerable<TEACHTIMETYPEDto> teachtimetypes, bool doSaveChanges = true)
		{
			if (teachtimetypes == null)
			{
				return;
			}
			foreach (TEACHTIMETYPEDto instance in teachtimetypes)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveTEACHTIMETYPE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion TEACHTIMETYPE CRUD Operations


		#region TEACHTIMERATE CRUD Operations


		private ITEACHTIMERATEService teachtimerate;
		public virtual ITEACHTIMERATEService TEACHTIMERATEService
		{
			get
			{
				if (this.teachtimerate == null)
				{
					ITEACHTIMERATEAssembler assembler = new TEACHTIMERATEAssembler();
					ITEACHTIMERATERepository repository = new TEACHTIMERATERepository(this.UnitOfWork);
					this.teachtimerate = new TEACHTIMERATEService(assembler, repository);
				}
				return this.teachtimerate;
			}
		}


		public IQueryable<TEACHTIMERATE> TEACHTIMERATEs
		{
			get { return this.TEACHTIMERATEService.Repository.GetAll(); }
		}


		public IQueryable<TEACHTIMERATE> ReadTEACHTIMERATEs(Expression<Func<TEACHTIMERATE, bool>> filter, int dummy)
		{
			return this.TEACHTIMERATEService.Repository.Find(filter);
		}


		public IEnumerable<TEACHTIMERATEDto> ReadTEACHTIMERATEs()
		{
			return this.TEACHTIMERATEService.GetAll();
		}


		public IEnumerable<TEACHTIMERATEDto> ReadTEACHTIMERATEs(Expression<Func<TEACHTIMERATE, bool>> filter)
		{
			return this.TEACHTIMERATEService.Find(filter);
		}


		public IEnumerable<TEACHTIMERATEDto> ReadTEACHTIMERATEs(ISpecification<TEACHTIMERATE> specification)
		{
			return this.TEACHTIMERATEService.Find(specification.GetExpression());
		}


		public IEnumerable<TEACHTIMERATEDto> ReadTEACHTIMERATEs(IQueryable<TEACHTIMERATE> query)
		{
			return this.TEACHTIMERATEService.Assembler.Assemble(query);
		}


		public IEnumerable<TEACHTIMERATEDto> ReadTEACHTIMERATEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.TEACHTIMERATEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<TEACHTIMERATEDto> ReadTEACHTIMERATEs(object[] keyWords)
		{
			return this.TEACHTIMERATEService.Find(keyWords);
		}


		public IEnumerable<TEACHTIMERATEDto> ReadTEACHTIMERATEsPaged(int startIndex, int pageSize)
		{
			return this.TEACHTIMERATEService.Find(startIndex, pageSize);
		}


		public IEnumerable<TEACHTIMERATEDto> ReadTEACHTIMERATEsPaged(IQueryable<TEACHTIMERATE> source, int pageIndex, int pageSize)
		{
			return this.TEACHTIMERATEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<TEACHTIMERATEDto> ReadTEACHTIMERATEsPaged(IQueryable<TEACHTIMERATE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.TEACHTIMERATEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<TEACHTIMERATEDto> ReadTEACHTIMERATEsFiltered(string sortExpression, string filterExpression)
		{
			return this.TEACHTIMERATEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<TEACHTIMERATEDto> ReadTEACHTIMERATEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.TEACHTIMERATEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<TEACHTIMERATEDto> ReadTEACHTIMERATEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<TEACHTIMERATE, bool>> filter)
		{
			return this.TEACHTIMERATEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public TEACHTIMERATEDto ReadTEACHTIMERATEs(string dtoKey)
		{
			return this.TEACHTIMERATEService.GetByKey(dtoKey);
		}


		public int CountTEACHTIMERATEs()
		{
			return this.TEACHTIMERATEService.Count();
		}


		public int CountTEACHTIMERATEs(string filterExpression)
		{
			return this.TEACHTIMERATEService.Count(filterExpression);
		}


		public int CountTEACHTIMERATEs(Expression<Func<TEACHTIMERATE, bool>> filter)
		{
			return this.TEACHTIMERATEService.Count(filter);
		}


		public string CreateTEACHTIMERATE(TEACHTIMERATEDto teachtimerate, bool doSaveChanges = true)
		{
			string key = this.TEACHTIMERATEService.Add(teachtimerate);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateTEACHTIMERATE(TEACHTIMERATEDto teachtimerate, bool doSaveChanges = true)
		{
			this.TEACHTIMERATEService.Update(teachtimerate);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateTEACHTIMERATEs(IEnumerable<TEACHTIMERATEDto> teachtimerates, bool doSaveChanges = true)
		{
			if (teachtimerates == null)
			{
				return;
			}
			foreach (TEACHTIMERATEDto instance in teachtimerates)
			{
				if (instance == null)
				{
					continue;
				}


				this.TEACHTIMERATEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteTEACHTIMERATE(TEACHTIMERATEDto teachtimerate, bool doSaveChanges = true)
		{
			this.TEACHTIMERATEService.Delete(teachtimerate);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteTEACHTIMERATEs(IEnumerable<TEACHTIMERATEDto> teachtimerates, bool doSaveChanges = true)
		{
			if (teachtimerates == null)
			{
				return;
			}
			foreach (TEACHTIMERATEDto instance in teachtimerates)
			{
				if (instance == null)
				{
					continue;
				}


				this.TEACHTIMERATEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveTEACHTIMERATE(TEACHTIMERATEDto teachtimerate, bool doSaveChanges = true)
		{
			switch (teachtimerate.RowState)
			{
				case RowState.Insert:
					this.CreateTEACHTIMERATE(teachtimerate, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateTEACHTIMERATE(teachtimerate, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteTEACHTIMERATE(teachtimerate, doSaveChanges);
					break;
			}
		}


		public void SaveTEACHTIMERATEs(IEnumerable<TEACHTIMERATEDto> teachtimerates, bool doSaveChanges = true)
		{
			if (teachtimerates == null)
			{
				return;
			}
			foreach (TEACHTIMERATEDto instance in teachtimerates)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveTEACHTIMERATE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion TEACHTIMERATE CRUD Operations


		#region TEACHTIMEKPIREFTEMP CRUD Operations


		private ITEACHTIMEKPIREFTEMPService teachtimekpireftemp;
		public virtual ITEACHTIMEKPIREFTEMPService TEACHTIMEKPIREFTEMPService
		{
			get
			{
				if (this.teachtimekpireftemp == null)
				{
					ITEACHTIMEKPIREFTEMPAssembler assembler = new TEACHTIMEKPIREFTEMPAssembler();
					ITEACHTIMEKPIREFTEMPRepository repository = new TEACHTIMEKPIREFTEMPRepository(this.UnitOfWork);
					this.teachtimekpireftemp = new TEACHTIMEKPIREFTEMPService(assembler, repository);
				}
				return this.teachtimekpireftemp;
			}
		}


		public IQueryable<TEACHTIMEKPIREFTEMP> TEACHTIMEKPIREFTEMPs
		{
			get { return this.TEACHTIMEKPIREFTEMPService.Repository.GetAll(); }
		}


		public IQueryable<TEACHTIMEKPIREFTEMP> ReadTEACHTIMEKPIREFTEMPs(Expression<Func<TEACHTIMEKPIREFTEMP, bool>> filter, int dummy)
		{
			return this.TEACHTIMEKPIREFTEMPService.Repository.Find(filter);
		}


		public IEnumerable<TEACHTIMEKPIREFTEMPDto> ReadTEACHTIMEKPIREFTEMPs()
		{
			return this.TEACHTIMEKPIREFTEMPService.GetAll();
		}


		public IEnumerable<TEACHTIMEKPIREFTEMPDto> ReadTEACHTIMEKPIREFTEMPs(Expression<Func<TEACHTIMEKPIREFTEMP, bool>> filter)
		{
			return this.TEACHTIMEKPIREFTEMPService.Find(filter);
		}


		public IEnumerable<TEACHTIMEKPIREFTEMPDto> ReadTEACHTIMEKPIREFTEMPs(ISpecification<TEACHTIMEKPIREFTEMP> specification)
		{
			return this.TEACHTIMEKPIREFTEMPService.Find(specification.GetExpression());
		}


		public IEnumerable<TEACHTIMEKPIREFTEMPDto> ReadTEACHTIMEKPIREFTEMPs(IQueryable<TEACHTIMEKPIREFTEMP> query)
		{
			return this.TEACHTIMEKPIREFTEMPService.Assembler.Assemble(query);
		}


		public IEnumerable<TEACHTIMEKPIREFTEMPDto> ReadTEACHTIMEKPIREFTEMPs(string[] propertyToSearch, object[] keyWords)
		{
			return this.TEACHTIMEKPIREFTEMPService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<TEACHTIMEKPIREFTEMPDto> ReadTEACHTIMEKPIREFTEMPs(object[] keyWords)
		{
			return this.TEACHTIMEKPIREFTEMPService.Find(keyWords);
		}


		public IEnumerable<TEACHTIMEKPIREFTEMPDto> ReadTEACHTIMEKPIREFTEMPsPaged(int startIndex, int pageSize)
		{
			return this.TEACHTIMEKPIREFTEMPService.Find(startIndex, pageSize);
		}


		public IEnumerable<TEACHTIMEKPIREFTEMPDto> ReadTEACHTIMEKPIREFTEMPsPaged(IQueryable<TEACHTIMEKPIREFTEMP> source, int pageIndex, int pageSize)
		{
			return this.TEACHTIMEKPIREFTEMPService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<TEACHTIMEKPIREFTEMPDto> ReadTEACHTIMEKPIREFTEMPsPaged(IQueryable<TEACHTIMEKPIREFTEMP> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.TEACHTIMEKPIREFTEMPService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<TEACHTIMEKPIREFTEMPDto> ReadTEACHTIMEKPIREFTEMPsFiltered(string sortExpression, string filterExpression)
		{
			return this.TEACHTIMEKPIREFTEMPService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<TEACHTIMEKPIREFTEMPDto> ReadTEACHTIMEKPIREFTEMPsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.TEACHTIMEKPIREFTEMPService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<TEACHTIMEKPIREFTEMPDto> ReadTEACHTIMEKPIREFTEMPsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<TEACHTIMEKPIREFTEMP, bool>> filter)
		{
			return this.TEACHTIMEKPIREFTEMPService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public TEACHTIMEKPIREFTEMPDto ReadTEACHTIMEKPIREFTEMPs(string dtoKey)
		{
			return this.TEACHTIMEKPIREFTEMPService.GetByKey(dtoKey);
		}


		public int CountTEACHTIMEKPIREFTEMPs()
		{
			return this.TEACHTIMEKPIREFTEMPService.Count();
		}


		public int CountTEACHTIMEKPIREFTEMPs(string filterExpression)
		{
			return this.TEACHTIMEKPIREFTEMPService.Count(filterExpression);
		}


		public int CountTEACHTIMEKPIREFTEMPs(Expression<Func<TEACHTIMEKPIREFTEMP, bool>> filter)
		{
			return this.TEACHTIMEKPIREFTEMPService.Count(filter);
		}


		public string CreateTEACHTIMEKPIREFTEMP(TEACHTIMEKPIREFTEMPDto teachtimekpireftemp, bool doSaveChanges = true)
		{
			string key = this.TEACHTIMEKPIREFTEMPService.Add(teachtimekpireftemp);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateTEACHTIMEKPIREFTEMP(TEACHTIMEKPIREFTEMPDto teachtimekpireftemp, bool doSaveChanges = true)
		{
			this.TEACHTIMEKPIREFTEMPService.Update(teachtimekpireftemp);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateTEACHTIMEKPIREFTEMPs(IEnumerable<TEACHTIMEKPIREFTEMPDto> teachtimekpireftemps, bool doSaveChanges = true)
		{
			if (teachtimekpireftemps == null)
			{
				return;
			}
			foreach (TEACHTIMEKPIREFTEMPDto instance in teachtimekpireftemps)
			{
				if (instance == null)
				{
					continue;
				}


				this.TEACHTIMEKPIREFTEMPService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteTEACHTIMEKPIREFTEMP(TEACHTIMEKPIREFTEMPDto teachtimekpireftemp, bool doSaveChanges = true)
		{
			this.TEACHTIMEKPIREFTEMPService.Delete(teachtimekpireftemp);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteTEACHTIMEKPIREFTEMPs(IEnumerable<TEACHTIMEKPIREFTEMPDto> teachtimekpireftemps, bool doSaveChanges = true)
		{
			if (teachtimekpireftemps == null)
			{
				return;
			}
			foreach (TEACHTIMEKPIREFTEMPDto instance in teachtimekpireftemps)
			{
				if (instance == null)
				{
					continue;
				}


				this.TEACHTIMEKPIREFTEMPService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveTEACHTIMEKPIREFTEMP(TEACHTIMEKPIREFTEMPDto teachtimekpireftemp, bool doSaveChanges = true)
		{
			switch (teachtimekpireftemp.RowState)
			{
				case RowState.Insert:
					this.CreateTEACHTIMEKPIREFTEMP(teachtimekpireftemp, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateTEACHTIMEKPIREFTEMP(teachtimekpireftemp, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteTEACHTIMEKPIREFTEMP(teachtimekpireftemp, doSaveChanges);
					break;
			}
		}


		public void SaveTEACHTIMEKPIREFTEMPs(IEnumerable<TEACHTIMEKPIREFTEMPDto> teachtimekpireftemps, bool doSaveChanges = true)
		{
			if (teachtimekpireftemps == null)
			{
				return;
			}
			foreach (TEACHTIMEKPIREFTEMPDto instance in teachtimekpireftemps)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveTEACHTIMEKPIREFTEMP(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion TEACHTIMEKPIREFTEMP CRUD Operations


		#region TEACHTIMEKPIREF CRUD Operations


		private ITEACHTIMEKPIREFService teachtimekpiref;
		public virtual ITEACHTIMEKPIREFService TEACHTIMEKPIREFService
		{
			get
			{
				if (this.teachtimekpiref == null)
				{
					ITEACHTIMEKPIREFAssembler assembler = new TEACHTIMEKPIREFAssembler();
					ITEACHTIMEKPIREFRepository repository = new TEACHTIMEKPIREFRepository(this.UnitOfWork);
					this.teachtimekpiref = new TEACHTIMEKPIREFService(assembler, repository);
				}
				return this.teachtimekpiref;
			}
		}


		public IQueryable<TEACHTIMEKPIREF> TEACHTIMEKPIREFs
		{
			get { return this.TEACHTIMEKPIREFService.Repository.GetAll(); }
		}


		public IQueryable<TEACHTIMEKPIREF> ReadTEACHTIMEKPIREFs(Expression<Func<TEACHTIMEKPIREF, bool>> filter, int dummy)
		{
			return this.TEACHTIMEKPIREFService.Repository.Find(filter);
		}


		public IEnumerable<TEACHTIMEKPIREFDto> ReadTEACHTIMEKPIREFs()
		{
			return this.TEACHTIMEKPIREFService.GetAll();
		}


		public IEnumerable<TEACHTIMEKPIREFDto> ReadTEACHTIMEKPIREFs(Expression<Func<TEACHTIMEKPIREF, bool>> filter)
		{
			return this.TEACHTIMEKPIREFService.Find(filter);
		}


		public IEnumerable<TEACHTIMEKPIREFDto> ReadTEACHTIMEKPIREFs(ISpecification<TEACHTIMEKPIREF> specification)
		{
			return this.TEACHTIMEKPIREFService.Find(specification.GetExpression());
		}


		public IEnumerable<TEACHTIMEKPIREFDto> ReadTEACHTIMEKPIREFs(IQueryable<TEACHTIMEKPIREF> query)
		{
			return this.TEACHTIMEKPIREFService.Assembler.Assemble(query);
		}


		public IEnumerable<TEACHTIMEKPIREFDto> ReadTEACHTIMEKPIREFs(string[] propertyToSearch, object[] keyWords)
		{
			return this.TEACHTIMEKPIREFService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<TEACHTIMEKPIREFDto> ReadTEACHTIMEKPIREFs(object[] keyWords)
		{
			return this.TEACHTIMEKPIREFService.Find(keyWords);
		}


		public IEnumerable<TEACHTIMEKPIREFDto> ReadTEACHTIMEKPIREFsPaged(int startIndex, int pageSize)
		{
			return this.TEACHTIMEKPIREFService.Find(startIndex, pageSize);
		}


		public IEnumerable<TEACHTIMEKPIREFDto> ReadTEACHTIMEKPIREFsPaged(IQueryable<TEACHTIMEKPIREF> source, int pageIndex, int pageSize)
		{
			return this.TEACHTIMEKPIREFService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<TEACHTIMEKPIREFDto> ReadTEACHTIMEKPIREFsPaged(IQueryable<TEACHTIMEKPIREF> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.TEACHTIMEKPIREFService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<TEACHTIMEKPIREFDto> ReadTEACHTIMEKPIREFsFiltered(string sortExpression, string filterExpression)
		{
			return this.TEACHTIMEKPIREFService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<TEACHTIMEKPIREFDto> ReadTEACHTIMEKPIREFsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.TEACHTIMEKPIREFService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<TEACHTIMEKPIREFDto> ReadTEACHTIMEKPIREFsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<TEACHTIMEKPIREF, bool>> filter)
		{
			return this.TEACHTIMEKPIREFService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public TEACHTIMEKPIREFDto ReadTEACHTIMEKPIREFs(string dtoKey)
		{
			return this.TEACHTIMEKPIREFService.GetByKey(dtoKey);
		}


		public int CountTEACHTIMEKPIREFs()
		{
			return this.TEACHTIMEKPIREFService.Count();
		}


		public int CountTEACHTIMEKPIREFs(string filterExpression)
		{
			return this.TEACHTIMEKPIREFService.Count(filterExpression);
		}


		public int CountTEACHTIMEKPIREFs(Expression<Func<TEACHTIMEKPIREF, bool>> filter)
		{
			return this.TEACHTIMEKPIREFService.Count(filter);
		}


		public string CreateTEACHTIMEKPIREF(TEACHTIMEKPIREFDto teachtimekpiref, bool doSaveChanges = true)
		{
			string key = this.TEACHTIMEKPIREFService.Add(teachtimekpiref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateTEACHTIMEKPIREF(TEACHTIMEKPIREFDto teachtimekpiref, bool doSaveChanges = true)
		{
			this.TEACHTIMEKPIREFService.Update(teachtimekpiref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateTEACHTIMEKPIREFs(IEnumerable<TEACHTIMEKPIREFDto> teachtimekpirefs, bool doSaveChanges = true)
		{
			if (teachtimekpirefs == null)
			{
				return;
			}
			foreach (TEACHTIMEKPIREFDto instance in teachtimekpirefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.TEACHTIMEKPIREFService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteTEACHTIMEKPIREF(TEACHTIMEKPIREFDto teachtimekpiref, bool doSaveChanges = true)
		{
			this.TEACHTIMEKPIREFService.Delete(teachtimekpiref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteTEACHTIMEKPIREFs(IEnumerable<TEACHTIMEKPIREFDto> teachtimekpirefs, bool doSaveChanges = true)
		{
			if (teachtimekpirefs == null)
			{
				return;
			}
			foreach (TEACHTIMEKPIREFDto instance in teachtimekpirefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.TEACHTIMEKPIREFService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveTEACHTIMEKPIREF(TEACHTIMEKPIREFDto teachtimekpiref, bool doSaveChanges = true)
		{
			switch (teachtimekpiref.RowState)
			{
				case RowState.Insert:
					this.CreateTEACHTIMEKPIREF(teachtimekpiref, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateTEACHTIMEKPIREF(teachtimekpiref, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteTEACHTIMEKPIREF(teachtimekpiref, doSaveChanges);
					break;
			}
		}


		public void SaveTEACHTIMEKPIREFs(IEnumerable<TEACHTIMEKPIREFDto> teachtimekpirefs, bool doSaveChanges = true)
		{
			if (teachtimekpirefs == null)
			{
				return;
			}
			foreach (TEACHTIMEKPIREFDto instance in teachtimekpirefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveTEACHTIMEKPIREF(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion TEACHTIMEKPIREF CRUD Operations


		#region TEACHPOINTREF CRUD Operations


		private ITEACHPOINTREFService teachpointref;
		public virtual ITEACHPOINTREFService TEACHPOINTREFService
		{
			get
			{
				if (this.teachpointref == null)
				{
					ITEACHPOINTREFAssembler assembler = new TEACHPOINTREFAssembler();
					ITEACHPOINTREFRepository repository = new TEACHPOINTREFRepository(this.UnitOfWork);
					this.teachpointref = new TEACHPOINTREFService(assembler, repository);
				}
				return this.teachpointref;
			}
		}


		public IQueryable<TEACHPOINTREF> TEACHPOINTREFs
		{
			get { return this.TEACHPOINTREFService.Repository.GetAll(); }
		}


		public IQueryable<TEACHPOINTREF> ReadTEACHPOINTREFs(Expression<Func<TEACHPOINTREF, bool>> filter, int dummy)
		{
			return this.TEACHPOINTREFService.Repository.Find(filter);
		}


		public IEnumerable<TEACHPOINTREFDto> ReadTEACHPOINTREFs()
		{
			return this.TEACHPOINTREFService.GetAll();
		}


		public IEnumerable<TEACHPOINTREFDto> ReadTEACHPOINTREFs(Expression<Func<TEACHPOINTREF, bool>> filter)
		{
			return this.TEACHPOINTREFService.Find(filter);
		}


		public IEnumerable<TEACHPOINTREFDto> ReadTEACHPOINTREFs(ISpecification<TEACHPOINTREF> specification)
		{
			return this.TEACHPOINTREFService.Find(specification.GetExpression());
		}


		public IEnumerable<TEACHPOINTREFDto> ReadTEACHPOINTREFs(IQueryable<TEACHPOINTREF> query)
		{
			return this.TEACHPOINTREFService.Assembler.Assemble(query);
		}


		public IEnumerable<TEACHPOINTREFDto> ReadTEACHPOINTREFs(string[] propertyToSearch, object[] keyWords)
		{
			return this.TEACHPOINTREFService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<TEACHPOINTREFDto> ReadTEACHPOINTREFs(object[] keyWords)
		{
			return this.TEACHPOINTREFService.Find(keyWords);
		}


		public IEnumerable<TEACHPOINTREFDto> ReadTEACHPOINTREFsPaged(int startIndex, int pageSize)
		{
			return this.TEACHPOINTREFService.Find(startIndex, pageSize);
		}


		public IEnumerable<TEACHPOINTREFDto> ReadTEACHPOINTREFsPaged(IQueryable<TEACHPOINTREF> source, int pageIndex, int pageSize)
		{
			return this.TEACHPOINTREFService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<TEACHPOINTREFDto> ReadTEACHPOINTREFsPaged(IQueryable<TEACHPOINTREF> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.TEACHPOINTREFService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<TEACHPOINTREFDto> ReadTEACHPOINTREFsFiltered(string sortExpression, string filterExpression)
		{
			return this.TEACHPOINTREFService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<TEACHPOINTREFDto> ReadTEACHPOINTREFsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.TEACHPOINTREFService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<TEACHPOINTREFDto> ReadTEACHPOINTREFsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<TEACHPOINTREF, bool>> filter)
		{
			return this.TEACHPOINTREFService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public TEACHPOINTREFDto ReadTEACHPOINTREFs(string dtoKey)
		{
			return this.TEACHPOINTREFService.GetByKey(dtoKey);
		}


		public int CountTEACHPOINTREFs()
		{
			return this.TEACHPOINTREFService.Count();
		}


		public int CountTEACHPOINTREFs(string filterExpression)
		{
			return this.TEACHPOINTREFService.Count(filterExpression);
		}


		public int CountTEACHPOINTREFs(Expression<Func<TEACHPOINTREF, bool>> filter)
		{
			return this.TEACHPOINTREFService.Count(filter);
		}


		public string CreateTEACHPOINTREF(TEACHPOINTREFDto teachpointref, bool doSaveChanges = true)
		{
			string key = this.TEACHPOINTREFService.Add(teachpointref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateTEACHPOINTREF(TEACHPOINTREFDto teachpointref, bool doSaveChanges = true)
		{
			this.TEACHPOINTREFService.Update(teachpointref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateTEACHPOINTREFs(IEnumerable<TEACHPOINTREFDto> teachpointrefs, bool doSaveChanges = true)
		{
			if (teachpointrefs == null)
			{
				return;
			}
			foreach (TEACHPOINTREFDto instance in teachpointrefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.TEACHPOINTREFService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteTEACHPOINTREF(TEACHPOINTREFDto teachpointref, bool doSaveChanges = true)
		{
			this.TEACHPOINTREFService.Delete(teachpointref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteTEACHPOINTREFs(IEnumerable<TEACHPOINTREFDto> teachpointrefs, bool doSaveChanges = true)
		{
			if (teachpointrefs == null)
			{
				return;
			}
			foreach (TEACHPOINTREFDto instance in teachpointrefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.TEACHPOINTREFService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveTEACHPOINTREF(TEACHPOINTREFDto teachpointref, bool doSaveChanges = true)
		{
			switch (teachpointref.RowState)
			{
				case RowState.Insert:
					this.CreateTEACHPOINTREF(teachpointref, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateTEACHPOINTREF(teachpointref, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteTEACHPOINTREF(teachpointref, doSaveChanges);
					break;
			}
		}


		public void SaveTEACHPOINTREFs(IEnumerable<TEACHPOINTREFDto> teachpointrefs, bool doSaveChanges = true)
		{
			if (teachpointrefs == null)
			{
				return;
			}
			foreach (TEACHPOINTREFDto instance in teachpointrefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveTEACHPOINTREF(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion TEACHPOINTREF CRUD Operations


		#region TEACHPOINTJOBITEM CRUD Operations


		private ITEACHPOINTJOBITEMService teachpointjobitem;
		public virtual ITEACHPOINTJOBITEMService TEACHPOINTJOBITEMService
		{
			get
			{
				if (this.teachpointjobitem == null)
				{
					ITEACHPOINTJOBITEMAssembler assembler = new TEACHPOINTJOBITEMAssembler();
					ITEACHPOINTJOBITEMRepository repository = new TEACHPOINTJOBITEMRepository(this.UnitOfWork);
					this.teachpointjobitem = new TEACHPOINTJOBITEMService(assembler, repository);
				}
				return this.teachpointjobitem;
			}
		}


		public IQueryable<TEACHPOINTJOBITEM> TEACHPOINTJOBITEMs
		{
			get { return this.TEACHPOINTJOBITEMService.Repository.GetAll(); }
		}


		public IQueryable<TEACHPOINTJOBITEM> ReadTEACHPOINTJOBITEMs(Expression<Func<TEACHPOINTJOBITEM, bool>> filter, int dummy)
		{
			return this.TEACHPOINTJOBITEMService.Repository.Find(filter);
		}


		public IEnumerable<TEACHPOINTJOBITEMDto> ReadTEACHPOINTJOBITEMs()
		{
			return this.TEACHPOINTJOBITEMService.GetAll();
		}


		public IEnumerable<TEACHPOINTJOBITEMDto> ReadTEACHPOINTJOBITEMs(Expression<Func<TEACHPOINTJOBITEM, bool>> filter)
		{
			return this.TEACHPOINTJOBITEMService.Find(filter);
		}


		public IEnumerable<TEACHPOINTJOBITEMDto> ReadTEACHPOINTJOBITEMs(ISpecification<TEACHPOINTJOBITEM> specification)
		{
			return this.TEACHPOINTJOBITEMService.Find(specification.GetExpression());
		}


		public IEnumerable<TEACHPOINTJOBITEMDto> ReadTEACHPOINTJOBITEMs(IQueryable<TEACHPOINTJOBITEM> query)
		{
			return this.TEACHPOINTJOBITEMService.Assembler.Assemble(query);
		}


		public IEnumerable<TEACHPOINTJOBITEMDto> ReadTEACHPOINTJOBITEMs(string[] propertyToSearch, object[] keyWords)
		{
			return this.TEACHPOINTJOBITEMService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<TEACHPOINTJOBITEMDto> ReadTEACHPOINTJOBITEMs(object[] keyWords)
		{
			return this.TEACHPOINTJOBITEMService.Find(keyWords);
		}


		public IEnumerable<TEACHPOINTJOBITEMDto> ReadTEACHPOINTJOBITEMsPaged(int startIndex, int pageSize)
		{
			return this.TEACHPOINTJOBITEMService.Find(startIndex, pageSize);
		}


		public IEnumerable<TEACHPOINTJOBITEMDto> ReadTEACHPOINTJOBITEMsPaged(IQueryable<TEACHPOINTJOBITEM> source, int pageIndex, int pageSize)
		{
			return this.TEACHPOINTJOBITEMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<TEACHPOINTJOBITEMDto> ReadTEACHPOINTJOBITEMsPaged(IQueryable<TEACHPOINTJOBITEM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.TEACHPOINTJOBITEMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<TEACHPOINTJOBITEMDto> ReadTEACHPOINTJOBITEMsFiltered(string sortExpression, string filterExpression)
		{
			return this.TEACHPOINTJOBITEMService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<TEACHPOINTJOBITEMDto> ReadTEACHPOINTJOBITEMsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.TEACHPOINTJOBITEMService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<TEACHPOINTJOBITEMDto> ReadTEACHPOINTJOBITEMsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<TEACHPOINTJOBITEM, bool>> filter)
		{
			return this.TEACHPOINTJOBITEMService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public TEACHPOINTJOBITEMDto ReadTEACHPOINTJOBITEMs(string dtoKey)
		{
			return this.TEACHPOINTJOBITEMService.GetByKey(dtoKey);
		}


		public int CountTEACHPOINTJOBITEMs()
		{
			return this.TEACHPOINTJOBITEMService.Count();
		}


		public int CountTEACHPOINTJOBITEMs(string filterExpression)
		{
			return this.TEACHPOINTJOBITEMService.Count(filterExpression);
		}


		public int CountTEACHPOINTJOBITEMs(Expression<Func<TEACHPOINTJOBITEM, bool>> filter)
		{
			return this.TEACHPOINTJOBITEMService.Count(filter);
		}


		public string CreateTEACHPOINTJOBITEM(TEACHPOINTJOBITEMDto teachpointjobitem, bool doSaveChanges = true)
		{
			string key = this.TEACHPOINTJOBITEMService.Add(teachpointjobitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateTEACHPOINTJOBITEM(TEACHPOINTJOBITEMDto teachpointjobitem, bool doSaveChanges = true)
		{
			this.TEACHPOINTJOBITEMService.Update(teachpointjobitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateTEACHPOINTJOBITEMs(IEnumerable<TEACHPOINTJOBITEMDto> teachpointjobitems, bool doSaveChanges = true)
		{
			if (teachpointjobitems == null)
			{
				return;
			}
			foreach (TEACHPOINTJOBITEMDto instance in teachpointjobitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.TEACHPOINTJOBITEMService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteTEACHPOINTJOBITEM(TEACHPOINTJOBITEMDto teachpointjobitem, bool doSaveChanges = true)
		{
			this.TEACHPOINTJOBITEMService.Delete(teachpointjobitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteTEACHPOINTJOBITEMs(IEnumerable<TEACHPOINTJOBITEMDto> teachpointjobitems, bool doSaveChanges = true)
		{
			if (teachpointjobitems == null)
			{
				return;
			}
			foreach (TEACHPOINTJOBITEMDto instance in teachpointjobitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.TEACHPOINTJOBITEMService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveTEACHPOINTJOBITEM(TEACHPOINTJOBITEMDto teachpointjobitem, bool doSaveChanges = true)
		{
			switch (teachpointjobitem.RowState)
			{
				case RowState.Insert:
					this.CreateTEACHPOINTJOBITEM(teachpointjobitem, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateTEACHPOINTJOBITEM(teachpointjobitem, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteTEACHPOINTJOBITEM(teachpointjobitem, doSaveChanges);
					break;
			}
		}


		public void SaveTEACHPOINTJOBITEMs(IEnumerable<TEACHPOINTJOBITEMDto> teachpointjobitems, bool doSaveChanges = true)
		{
			if (teachpointjobitems == null)
			{
				return;
			}
			foreach (TEACHPOINTJOBITEMDto instance in teachpointjobitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveTEACHPOINTJOBITEM(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion TEACHPOINTJOBITEM CRUD Operations


		#region TEACHPOINTITEMREQUIRE CRUD Operations


		private ITEACHPOINTITEMREQUIREService teachpointitemrequire;
		public virtual ITEACHPOINTITEMREQUIREService TEACHPOINTITEMREQUIREService
		{
			get
			{
				if (this.teachpointitemrequire == null)
				{
					ITEACHPOINTITEMREQUIREAssembler assembler = new TEACHPOINTITEMREQUIREAssembler();
					ITEACHPOINTITEMREQUIRERepository repository = new TEACHPOINTITEMREQUIRERepository(this.UnitOfWork);
					this.teachpointitemrequire = new TEACHPOINTITEMREQUIREService(assembler, repository);
				}
				return this.teachpointitemrequire;
			}
		}


		public IQueryable<TEACHPOINTITEMREQUIRE> TEACHPOINTITEMREQUIREs
		{
			get { return this.TEACHPOINTITEMREQUIREService.Repository.GetAll(); }
		}


		public IQueryable<TEACHPOINTITEMREQUIRE> ReadTEACHPOINTITEMREQUIREs(Expression<Func<TEACHPOINTITEMREQUIRE, bool>> filter, int dummy)
		{
			return this.TEACHPOINTITEMREQUIREService.Repository.Find(filter);
		}


		public IEnumerable<TEACHPOINTITEMREQUIREDto> ReadTEACHPOINTITEMREQUIREs()
		{
			return this.TEACHPOINTITEMREQUIREService.GetAll();
		}


		public IEnumerable<TEACHPOINTITEMREQUIREDto> ReadTEACHPOINTITEMREQUIREs(Expression<Func<TEACHPOINTITEMREQUIRE, bool>> filter)
		{
			return this.TEACHPOINTITEMREQUIREService.Find(filter);
		}


		public IEnumerable<TEACHPOINTITEMREQUIREDto> ReadTEACHPOINTITEMREQUIREs(ISpecification<TEACHPOINTITEMREQUIRE> specification)
		{
			return this.TEACHPOINTITEMREQUIREService.Find(specification.GetExpression());
		}


		public IEnumerable<TEACHPOINTITEMREQUIREDto> ReadTEACHPOINTITEMREQUIREs(IQueryable<TEACHPOINTITEMREQUIRE> query)
		{
			return this.TEACHPOINTITEMREQUIREService.Assembler.Assemble(query);
		}


		public IEnumerable<TEACHPOINTITEMREQUIREDto> ReadTEACHPOINTITEMREQUIREs(string[] propertyToSearch, object[] keyWords)
		{
			return this.TEACHPOINTITEMREQUIREService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<TEACHPOINTITEMREQUIREDto> ReadTEACHPOINTITEMREQUIREs(object[] keyWords)
		{
			return this.TEACHPOINTITEMREQUIREService.Find(keyWords);
		}


		public IEnumerable<TEACHPOINTITEMREQUIREDto> ReadTEACHPOINTITEMREQUIREsPaged(int startIndex, int pageSize)
		{
			return this.TEACHPOINTITEMREQUIREService.Find(startIndex, pageSize);
		}


		public IEnumerable<TEACHPOINTITEMREQUIREDto> ReadTEACHPOINTITEMREQUIREsPaged(IQueryable<TEACHPOINTITEMREQUIRE> source, int pageIndex, int pageSize)
		{
			return this.TEACHPOINTITEMREQUIREService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<TEACHPOINTITEMREQUIREDto> ReadTEACHPOINTITEMREQUIREsPaged(IQueryable<TEACHPOINTITEMREQUIRE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.TEACHPOINTITEMREQUIREService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<TEACHPOINTITEMREQUIREDto> ReadTEACHPOINTITEMREQUIREsFiltered(string sortExpression, string filterExpression)
		{
			return this.TEACHPOINTITEMREQUIREService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<TEACHPOINTITEMREQUIREDto> ReadTEACHPOINTITEMREQUIREsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.TEACHPOINTITEMREQUIREService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<TEACHPOINTITEMREQUIREDto> ReadTEACHPOINTITEMREQUIREsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<TEACHPOINTITEMREQUIRE, bool>> filter)
		{
			return this.TEACHPOINTITEMREQUIREService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public TEACHPOINTITEMREQUIREDto ReadTEACHPOINTITEMREQUIREs(string dtoKey)
		{
			return this.TEACHPOINTITEMREQUIREService.GetByKey(dtoKey);
		}


		public int CountTEACHPOINTITEMREQUIREs()
		{
			return this.TEACHPOINTITEMREQUIREService.Count();
		}


		public int CountTEACHPOINTITEMREQUIREs(string filterExpression)
		{
			return this.TEACHPOINTITEMREQUIREService.Count(filterExpression);
		}


		public int CountTEACHPOINTITEMREQUIREs(Expression<Func<TEACHPOINTITEMREQUIRE, bool>> filter)
		{
			return this.TEACHPOINTITEMREQUIREService.Count(filter);
		}


		public string CreateTEACHPOINTITEMREQUIRE(TEACHPOINTITEMREQUIREDto teachpointitemrequire, bool doSaveChanges = true)
		{
			string key = this.TEACHPOINTITEMREQUIREService.Add(teachpointitemrequire);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateTEACHPOINTITEMREQUIRE(TEACHPOINTITEMREQUIREDto teachpointitemrequire, bool doSaveChanges = true)
		{
			this.TEACHPOINTITEMREQUIREService.Update(teachpointitemrequire);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateTEACHPOINTITEMREQUIREs(IEnumerable<TEACHPOINTITEMREQUIREDto> teachpointitemrequires, bool doSaveChanges = true)
		{
			if (teachpointitemrequires == null)
			{
				return;
			}
			foreach (TEACHPOINTITEMREQUIREDto instance in teachpointitemrequires)
			{
				if (instance == null)
				{
					continue;
				}


				this.TEACHPOINTITEMREQUIREService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteTEACHPOINTITEMREQUIRE(TEACHPOINTITEMREQUIREDto teachpointitemrequire, bool doSaveChanges = true)
		{
			this.TEACHPOINTITEMREQUIREService.Delete(teachpointitemrequire);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteTEACHPOINTITEMREQUIREs(IEnumerable<TEACHPOINTITEMREQUIREDto> teachpointitemrequires, bool doSaveChanges = true)
		{
			if (teachpointitemrequires == null)
			{
				return;
			}
			foreach (TEACHPOINTITEMREQUIREDto instance in teachpointitemrequires)
			{
				if (instance == null)
				{
					continue;
				}


				this.TEACHPOINTITEMREQUIREService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveTEACHPOINTITEMREQUIRE(TEACHPOINTITEMREQUIREDto teachpointitemrequire, bool doSaveChanges = true)
		{
			switch (teachpointitemrequire.RowState)
			{
				case RowState.Insert:
					this.CreateTEACHPOINTITEMREQUIRE(teachpointitemrequire, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateTEACHPOINTITEMREQUIRE(teachpointitemrequire, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteTEACHPOINTITEMREQUIRE(teachpointitemrequire, doSaveChanges);
					break;
			}
		}


		public void SaveTEACHPOINTITEMREQUIREs(IEnumerable<TEACHPOINTITEMREQUIREDto> teachpointitemrequires, bool doSaveChanges = true)
		{
			if (teachpointitemrequires == null)
			{
				return;
			}
			foreach (TEACHPOINTITEMREQUIREDto instance in teachpointitemrequires)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveTEACHPOINTITEMREQUIRE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion TEACHPOINTITEMREQUIRE CRUD Operations


		#region TEACHPOINTITEM CRUD Operations


		private ITEACHPOINTITEMService teachpointitem;
		public virtual ITEACHPOINTITEMService TEACHPOINTITEMService
		{
			get
			{
				if (this.teachpointitem == null)
				{
					ITEACHPOINTITEMAssembler assembler = new TEACHPOINTITEMAssembler();
					ITEACHPOINTITEMRepository repository = new TEACHPOINTITEMRepository(this.UnitOfWork);
					this.teachpointitem = new TEACHPOINTITEMService(assembler, repository);
				}
				return this.teachpointitem;
			}
		}


		public IQueryable<TEACHPOINTITEM> TEACHPOINTITEMs
		{
			get { return this.TEACHPOINTITEMService.Repository.GetAll(); }
		}


		public IQueryable<TEACHPOINTITEM> ReadTEACHPOINTITEMs(Expression<Func<TEACHPOINTITEM, bool>> filter, int dummy)
		{
			return this.TEACHPOINTITEMService.Repository.Find(filter);
		}


		public IEnumerable<TEACHPOINTITEMDto> ReadTEACHPOINTITEMs()
		{
			return this.TEACHPOINTITEMService.GetAll();
		}


		public IEnumerable<TEACHPOINTITEMDto> ReadTEACHPOINTITEMs(Expression<Func<TEACHPOINTITEM, bool>> filter)
		{
			return this.TEACHPOINTITEMService.Find(filter);
		}


		public IEnumerable<TEACHPOINTITEMDto> ReadTEACHPOINTITEMs(ISpecification<TEACHPOINTITEM> specification)
		{
			return this.TEACHPOINTITEMService.Find(specification.GetExpression());
		}


		public IEnumerable<TEACHPOINTITEMDto> ReadTEACHPOINTITEMs(IQueryable<TEACHPOINTITEM> query)
		{
			return this.TEACHPOINTITEMService.Assembler.Assemble(query);
		}


		public IEnumerable<TEACHPOINTITEMDto> ReadTEACHPOINTITEMs(string[] propertyToSearch, object[] keyWords)
		{
			return this.TEACHPOINTITEMService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<TEACHPOINTITEMDto> ReadTEACHPOINTITEMs(object[] keyWords)
		{
			return this.TEACHPOINTITEMService.Find(keyWords);
		}


		public IEnumerable<TEACHPOINTITEMDto> ReadTEACHPOINTITEMsPaged(int startIndex, int pageSize)
		{
			return this.TEACHPOINTITEMService.Find(startIndex, pageSize);
		}


		public IEnumerable<TEACHPOINTITEMDto> ReadTEACHPOINTITEMsPaged(IQueryable<TEACHPOINTITEM> source, int pageIndex, int pageSize)
		{
			return this.TEACHPOINTITEMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<TEACHPOINTITEMDto> ReadTEACHPOINTITEMsPaged(IQueryable<TEACHPOINTITEM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.TEACHPOINTITEMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<TEACHPOINTITEMDto> ReadTEACHPOINTITEMsFiltered(string sortExpression, string filterExpression)
		{
			return this.TEACHPOINTITEMService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<TEACHPOINTITEMDto> ReadTEACHPOINTITEMsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.TEACHPOINTITEMService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<TEACHPOINTITEMDto> ReadTEACHPOINTITEMsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<TEACHPOINTITEM, bool>> filter)
		{
			return this.TEACHPOINTITEMService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public TEACHPOINTITEMDto ReadTEACHPOINTITEMs(string dtoKey)
		{
			return this.TEACHPOINTITEMService.GetByKey(dtoKey);
		}


		public int CountTEACHPOINTITEMs()
		{
			return this.TEACHPOINTITEMService.Count();
		}


		public int CountTEACHPOINTITEMs(string filterExpression)
		{
			return this.TEACHPOINTITEMService.Count(filterExpression);
		}


		public int CountTEACHPOINTITEMs(Expression<Func<TEACHPOINTITEM, bool>> filter)
		{
			return this.TEACHPOINTITEMService.Count(filter);
		}


		public string CreateTEACHPOINTITEM(TEACHPOINTITEMDto teachpointitem, bool doSaveChanges = true)
		{
			string key = this.TEACHPOINTITEMService.Add(teachpointitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateTEACHPOINTITEM(TEACHPOINTITEMDto teachpointitem, bool doSaveChanges = true)
		{
			this.TEACHPOINTITEMService.Update(teachpointitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateTEACHPOINTITEMs(IEnumerable<TEACHPOINTITEMDto> teachpointitems, bool doSaveChanges = true)
		{
			if (teachpointitems == null)
			{
				return;
			}
			foreach (TEACHPOINTITEMDto instance in teachpointitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.TEACHPOINTITEMService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteTEACHPOINTITEM(TEACHPOINTITEMDto teachpointitem, bool doSaveChanges = true)
		{
			this.TEACHPOINTITEMService.Delete(teachpointitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteTEACHPOINTITEMs(IEnumerable<TEACHPOINTITEMDto> teachpointitems, bool doSaveChanges = true)
		{
			if (teachpointitems == null)
			{
				return;
			}
			foreach (TEACHPOINTITEMDto instance in teachpointitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.TEACHPOINTITEMService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveTEACHPOINTITEM(TEACHPOINTITEMDto teachpointitem, bool doSaveChanges = true)
		{
			switch (teachpointitem.RowState)
			{
				case RowState.Insert:
					this.CreateTEACHPOINTITEM(teachpointitem, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateTEACHPOINTITEM(teachpointitem, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteTEACHPOINTITEM(teachpointitem, doSaveChanges);
					break;
			}
		}


		public void SaveTEACHPOINTITEMs(IEnumerable<TEACHPOINTITEMDto> teachpointitems, bool doSaveChanges = true)
		{
			if (teachpointitems == null)
			{
				return;
			}
			foreach (TEACHPOINTITEMDto instance in teachpointitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveTEACHPOINTITEM(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion TEACHPOINTITEM CRUD Operations


		#region TEACHPOINTEMPITEMDATUM CRUD Operations


		private ITEACHPOINTEMPITEMDATUMService teachpointempitemdatum;
		public virtual ITEACHPOINTEMPITEMDATUMService TEACHPOINTEMPITEMDATUMService
		{
			get
			{
				if (this.teachpointempitemdatum == null)
				{
					ITEACHPOINTEMPITEMDATUMAssembler assembler = new TEACHPOINTEMPITEMDATUMAssembler();
					ITEACHPOINTEMPITEMDATUMRepository repository = new TEACHPOINTEMPITEMDATUMRepository(this.UnitOfWork);
					this.teachpointempitemdatum = new TEACHPOINTEMPITEMDATUMService(assembler, repository);
				}
				return this.teachpointempitemdatum;
			}
		}


		public IQueryable<TEACHPOINTEMPITEMDATUM> TEACHPOINTEMPITEMDATa
		{
			get { return this.TEACHPOINTEMPITEMDATUMService.Repository.GetAll(); }
		}


		public IQueryable<TEACHPOINTEMPITEMDATUM> ReadTEACHPOINTEMPITEMDATa(Expression<Func<TEACHPOINTEMPITEMDATUM, bool>> filter, int dummy)
		{
			return this.TEACHPOINTEMPITEMDATUMService.Repository.Find(filter);
		}


		public IEnumerable<TEACHPOINTEMPITEMDATUMDto> ReadTEACHPOINTEMPITEMDATa()
		{
			return this.TEACHPOINTEMPITEMDATUMService.GetAll();
		}


		public IEnumerable<TEACHPOINTEMPITEMDATUMDto> ReadTEACHPOINTEMPITEMDATa(Expression<Func<TEACHPOINTEMPITEMDATUM, bool>> filter)
		{
			return this.TEACHPOINTEMPITEMDATUMService.Find(filter);
		}


		public IEnumerable<TEACHPOINTEMPITEMDATUMDto> ReadTEACHPOINTEMPITEMDATa(ISpecification<TEACHPOINTEMPITEMDATUM> specification)
		{
			return this.TEACHPOINTEMPITEMDATUMService.Find(specification.GetExpression());
		}


		public IEnumerable<TEACHPOINTEMPITEMDATUMDto> ReadTEACHPOINTEMPITEMDATa(IQueryable<TEACHPOINTEMPITEMDATUM> query)
		{
			return this.TEACHPOINTEMPITEMDATUMService.Assembler.Assemble(query);
		}


		public IEnumerable<TEACHPOINTEMPITEMDATUMDto> ReadTEACHPOINTEMPITEMDATa(string[] propertyToSearch, object[] keyWords)
		{
			return this.TEACHPOINTEMPITEMDATUMService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<TEACHPOINTEMPITEMDATUMDto> ReadTEACHPOINTEMPITEMDATa(object[] keyWords)
		{
			return this.TEACHPOINTEMPITEMDATUMService.Find(keyWords);
		}


		public IEnumerable<TEACHPOINTEMPITEMDATUMDto> ReadTEACHPOINTEMPITEMDATaPaged(int startIndex, int pageSize)
		{
			return this.TEACHPOINTEMPITEMDATUMService.Find(startIndex, pageSize);
		}


		public IEnumerable<TEACHPOINTEMPITEMDATUMDto> ReadTEACHPOINTEMPITEMDATaPaged(IQueryable<TEACHPOINTEMPITEMDATUM> source, int pageIndex, int pageSize)
		{
			return this.TEACHPOINTEMPITEMDATUMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<TEACHPOINTEMPITEMDATUMDto> ReadTEACHPOINTEMPITEMDATaPaged(IQueryable<TEACHPOINTEMPITEMDATUM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.TEACHPOINTEMPITEMDATUMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<TEACHPOINTEMPITEMDATUMDto> ReadTEACHPOINTEMPITEMDATaFiltered(string sortExpression, string filterExpression)
		{
			return this.TEACHPOINTEMPITEMDATUMService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<TEACHPOINTEMPITEMDATUMDto> ReadTEACHPOINTEMPITEMDATaPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.TEACHPOINTEMPITEMDATUMService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<TEACHPOINTEMPITEMDATUMDto> ReadTEACHPOINTEMPITEMDATaPagedAndFiltered(int startIndex, int pageSize, Expression<Func<TEACHPOINTEMPITEMDATUM, bool>> filter)
		{
			return this.TEACHPOINTEMPITEMDATUMService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public TEACHPOINTEMPITEMDATUMDto ReadTEACHPOINTEMPITEMDATa(string dtoKey)
		{
			return this.TEACHPOINTEMPITEMDATUMService.GetByKey(dtoKey);
		}


		public int CountTEACHPOINTEMPITEMDATa()
		{
			return this.TEACHPOINTEMPITEMDATUMService.Count();
		}


		public int CountTEACHPOINTEMPITEMDATa(string filterExpression)
		{
			return this.TEACHPOINTEMPITEMDATUMService.Count(filterExpression);
		}


		public int CountTEACHPOINTEMPITEMDATa(Expression<Func<TEACHPOINTEMPITEMDATUM, bool>> filter)
		{
			return this.TEACHPOINTEMPITEMDATUMService.Count(filter);
		}


		public string CreateTEACHPOINTEMPITEMDATUM(TEACHPOINTEMPITEMDATUMDto teachpointempitemdatum, bool doSaveChanges = true)
		{
			string key = this.TEACHPOINTEMPITEMDATUMService.Add(teachpointempitemdatum);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateTEACHPOINTEMPITEMDATUM(TEACHPOINTEMPITEMDATUMDto teachpointempitemdatum, bool doSaveChanges = true)
		{
			this.TEACHPOINTEMPITEMDATUMService.Update(teachpointempitemdatum);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateTEACHPOINTEMPITEMDATa(IEnumerable<TEACHPOINTEMPITEMDATUMDto> teachpointempitemdata, bool doSaveChanges = true)
		{
			if (teachpointempitemdata == null)
			{
				return;
			}
			foreach (TEACHPOINTEMPITEMDATUMDto instance in teachpointempitemdata)
			{
				if (instance == null)
				{
					continue;
				}


				this.TEACHPOINTEMPITEMDATUMService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteTEACHPOINTEMPITEMDATUM(TEACHPOINTEMPITEMDATUMDto teachpointempitemdatum, bool doSaveChanges = true)
		{
			this.TEACHPOINTEMPITEMDATUMService.Delete(teachpointempitemdatum);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteTEACHPOINTEMPITEMDATa(IEnumerable<TEACHPOINTEMPITEMDATUMDto> teachpointempitemdata, bool doSaveChanges = true)
		{
			if (teachpointempitemdata == null)
			{
				return;
			}
			foreach (TEACHPOINTEMPITEMDATUMDto instance in teachpointempitemdata)
			{
				if (instance == null)
				{
					continue;
				}


				this.TEACHPOINTEMPITEMDATUMService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveTEACHPOINTEMPITEMDATUM(TEACHPOINTEMPITEMDATUMDto teachpointempitemdatum, bool doSaveChanges = true)
		{
			switch (teachpointempitemdatum.RowState)
			{
				case RowState.Insert:
					this.CreateTEACHPOINTEMPITEMDATUM(teachpointempitemdatum, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateTEACHPOINTEMPITEMDATUM(teachpointempitemdatum, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteTEACHPOINTEMPITEMDATUM(teachpointempitemdatum, doSaveChanges);
					break;
			}
		}


		public void SaveTEACHPOINTEMPITEMDATa(IEnumerable<TEACHPOINTEMPITEMDATUMDto> teachpointempitemdata, bool doSaveChanges = true)
		{
			if (teachpointempitemdata == null)
			{
				return;
			}
			foreach (TEACHPOINTEMPITEMDATUMDto instance in teachpointempitemdata)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveTEACHPOINTEMPITEMDATUM(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion TEACHPOINTEMPITEMDATUM CRUD Operations


		#region TEACHPOINTCALCTYPEREF CRUD Operations


		private ITEACHPOINTCALCTYPEREFService teachpointcalctyperef;
		public virtual ITEACHPOINTCALCTYPEREFService TEACHPOINTCALCTYPEREFService
		{
			get
			{
				if (this.teachpointcalctyperef == null)
				{
					ITEACHPOINTCALCTYPEREFAssembler assembler = new TEACHPOINTCALCTYPEREFAssembler();
					ITEACHPOINTCALCTYPEREFRepository repository = new TEACHPOINTCALCTYPEREFRepository(this.UnitOfWork);
					this.teachpointcalctyperef = new TEACHPOINTCALCTYPEREFService(assembler, repository);
				}
				return this.teachpointcalctyperef;
			}
		}


		public IQueryable<TEACHPOINTCALCTYPEREF> TEACHPOINTCALCTYPEREFs
		{
			get { return this.TEACHPOINTCALCTYPEREFService.Repository.GetAll(); }
		}


		public IQueryable<TEACHPOINTCALCTYPEREF> ReadTEACHPOINTCALCTYPEREFs(Expression<Func<TEACHPOINTCALCTYPEREF, bool>> filter, int dummy)
		{
			return this.TEACHPOINTCALCTYPEREFService.Repository.Find(filter);
		}


		public IEnumerable<TEACHPOINTCALCTYPEREFDto> ReadTEACHPOINTCALCTYPEREFs()
		{
			return this.TEACHPOINTCALCTYPEREFService.GetAll();
		}


		public IEnumerable<TEACHPOINTCALCTYPEREFDto> ReadTEACHPOINTCALCTYPEREFs(Expression<Func<TEACHPOINTCALCTYPEREF, bool>> filter)
		{
			return this.TEACHPOINTCALCTYPEREFService.Find(filter);
		}


		public IEnumerable<TEACHPOINTCALCTYPEREFDto> ReadTEACHPOINTCALCTYPEREFs(ISpecification<TEACHPOINTCALCTYPEREF> specification)
		{
			return this.TEACHPOINTCALCTYPEREFService.Find(specification.GetExpression());
		}


		public IEnumerable<TEACHPOINTCALCTYPEREFDto> ReadTEACHPOINTCALCTYPEREFs(IQueryable<TEACHPOINTCALCTYPEREF> query)
		{
			return this.TEACHPOINTCALCTYPEREFService.Assembler.Assemble(query);
		}


		public IEnumerable<TEACHPOINTCALCTYPEREFDto> ReadTEACHPOINTCALCTYPEREFs(string[] propertyToSearch, object[] keyWords)
		{
			return this.TEACHPOINTCALCTYPEREFService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<TEACHPOINTCALCTYPEREFDto> ReadTEACHPOINTCALCTYPEREFs(object[] keyWords)
		{
			return this.TEACHPOINTCALCTYPEREFService.Find(keyWords);
		}


		public IEnumerable<TEACHPOINTCALCTYPEREFDto> ReadTEACHPOINTCALCTYPEREFsPaged(int startIndex, int pageSize)
		{
			return this.TEACHPOINTCALCTYPEREFService.Find(startIndex, pageSize);
		}


		public IEnumerable<TEACHPOINTCALCTYPEREFDto> ReadTEACHPOINTCALCTYPEREFsPaged(IQueryable<TEACHPOINTCALCTYPEREF> source, int pageIndex, int pageSize)
		{
			return this.TEACHPOINTCALCTYPEREFService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<TEACHPOINTCALCTYPEREFDto> ReadTEACHPOINTCALCTYPEREFsPaged(IQueryable<TEACHPOINTCALCTYPEREF> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.TEACHPOINTCALCTYPEREFService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<TEACHPOINTCALCTYPEREFDto> ReadTEACHPOINTCALCTYPEREFsFiltered(string sortExpression, string filterExpression)
		{
			return this.TEACHPOINTCALCTYPEREFService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<TEACHPOINTCALCTYPEREFDto> ReadTEACHPOINTCALCTYPEREFsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.TEACHPOINTCALCTYPEREFService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<TEACHPOINTCALCTYPEREFDto> ReadTEACHPOINTCALCTYPEREFsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<TEACHPOINTCALCTYPEREF, bool>> filter)
		{
			return this.TEACHPOINTCALCTYPEREFService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public TEACHPOINTCALCTYPEREFDto ReadTEACHPOINTCALCTYPEREFs(string dtoKey)
		{
			return this.TEACHPOINTCALCTYPEREFService.GetByKey(dtoKey);
		}


		public int CountTEACHPOINTCALCTYPEREFs()
		{
			return this.TEACHPOINTCALCTYPEREFService.Count();
		}


		public int CountTEACHPOINTCALCTYPEREFs(string filterExpression)
		{
			return this.TEACHPOINTCALCTYPEREFService.Count(filterExpression);
		}


		public int CountTEACHPOINTCALCTYPEREFs(Expression<Func<TEACHPOINTCALCTYPEREF, bool>> filter)
		{
			return this.TEACHPOINTCALCTYPEREFService.Count(filter);
		}


		public string CreateTEACHPOINTCALCTYPEREF(TEACHPOINTCALCTYPEREFDto teachpointcalctyperef, bool doSaveChanges = true)
		{
			string key = this.TEACHPOINTCALCTYPEREFService.Add(teachpointcalctyperef);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateTEACHPOINTCALCTYPEREF(TEACHPOINTCALCTYPEREFDto teachpointcalctyperef, bool doSaveChanges = true)
		{
			this.TEACHPOINTCALCTYPEREFService.Update(teachpointcalctyperef);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateTEACHPOINTCALCTYPEREFs(IEnumerable<TEACHPOINTCALCTYPEREFDto> teachpointcalctyperefs, bool doSaveChanges = true)
		{
			if (teachpointcalctyperefs == null)
			{
				return;
			}
			foreach (TEACHPOINTCALCTYPEREFDto instance in teachpointcalctyperefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.TEACHPOINTCALCTYPEREFService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteTEACHPOINTCALCTYPEREF(TEACHPOINTCALCTYPEREFDto teachpointcalctyperef, bool doSaveChanges = true)
		{
			this.TEACHPOINTCALCTYPEREFService.Delete(teachpointcalctyperef);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteTEACHPOINTCALCTYPEREFs(IEnumerable<TEACHPOINTCALCTYPEREFDto> teachpointcalctyperefs, bool doSaveChanges = true)
		{
			if (teachpointcalctyperefs == null)
			{
				return;
			}
			foreach (TEACHPOINTCALCTYPEREFDto instance in teachpointcalctyperefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.TEACHPOINTCALCTYPEREFService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveTEACHPOINTCALCTYPEREF(TEACHPOINTCALCTYPEREFDto teachpointcalctyperef, bool doSaveChanges = true)
		{
			switch (teachpointcalctyperef.RowState)
			{
				case RowState.Insert:
					this.CreateTEACHPOINTCALCTYPEREF(teachpointcalctyperef, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateTEACHPOINTCALCTYPEREF(teachpointcalctyperef, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteTEACHPOINTCALCTYPEREF(teachpointcalctyperef, doSaveChanges);
					break;
			}
		}


		public void SaveTEACHPOINTCALCTYPEREFs(IEnumerable<TEACHPOINTCALCTYPEREFDto> teachpointcalctyperefs, bool doSaveChanges = true)
		{
			if (teachpointcalctyperefs == null)
			{
				return;
			}
			foreach (TEACHPOINTCALCTYPEREFDto instance in teachpointcalctyperefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveTEACHPOINTCALCTYPEREF(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion TEACHPOINTCALCTYPEREF CRUD Operations


		#region TEACHPOINTCALCTYPE CRUD Operations


		private ITEACHPOINTCALCTYPEService teachpointcalctype;
		public virtual ITEACHPOINTCALCTYPEService TEACHPOINTCALCTYPEService
		{
			get
			{
				if (this.teachpointcalctype == null)
				{
					ITEACHPOINTCALCTYPEAssembler assembler = new TEACHPOINTCALCTYPEAssembler();
					ITEACHPOINTCALCTYPERepository repository = new TEACHPOINTCALCTYPERepository(this.UnitOfWork);
					this.teachpointcalctype = new TEACHPOINTCALCTYPEService(assembler, repository);
				}
				return this.teachpointcalctype;
			}
		}


		public IQueryable<TEACHPOINTCALCTYPE> TEACHPOINTCALCTYPEs
		{
			get { return this.TEACHPOINTCALCTYPEService.Repository.GetAll(); }
		}


		public IQueryable<TEACHPOINTCALCTYPE> ReadTEACHPOINTCALCTYPEs(Expression<Func<TEACHPOINTCALCTYPE, bool>> filter, int dummy)
		{
			return this.TEACHPOINTCALCTYPEService.Repository.Find(filter);
		}


		public IEnumerable<TEACHPOINTCALCTYPEDto> ReadTEACHPOINTCALCTYPEs()
		{
			return this.TEACHPOINTCALCTYPEService.GetAll();
		}


		public IEnumerable<TEACHPOINTCALCTYPEDto> ReadTEACHPOINTCALCTYPEs(Expression<Func<TEACHPOINTCALCTYPE, bool>> filter)
		{
			return this.TEACHPOINTCALCTYPEService.Find(filter);
		}


		public IEnumerable<TEACHPOINTCALCTYPEDto> ReadTEACHPOINTCALCTYPEs(ISpecification<TEACHPOINTCALCTYPE> specification)
		{
			return this.TEACHPOINTCALCTYPEService.Find(specification.GetExpression());
		}


		public IEnumerable<TEACHPOINTCALCTYPEDto> ReadTEACHPOINTCALCTYPEs(IQueryable<TEACHPOINTCALCTYPE> query)
		{
			return this.TEACHPOINTCALCTYPEService.Assembler.Assemble(query);
		}


		public IEnumerable<TEACHPOINTCALCTYPEDto> ReadTEACHPOINTCALCTYPEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.TEACHPOINTCALCTYPEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<TEACHPOINTCALCTYPEDto> ReadTEACHPOINTCALCTYPEs(object[] keyWords)
		{
			return this.TEACHPOINTCALCTYPEService.Find(keyWords);
		}


		public IEnumerable<TEACHPOINTCALCTYPEDto> ReadTEACHPOINTCALCTYPEsPaged(int startIndex, int pageSize)
		{
			return this.TEACHPOINTCALCTYPEService.Find(startIndex, pageSize);
		}


		public IEnumerable<TEACHPOINTCALCTYPEDto> ReadTEACHPOINTCALCTYPEsPaged(IQueryable<TEACHPOINTCALCTYPE> source, int pageIndex, int pageSize)
		{
			return this.TEACHPOINTCALCTYPEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<TEACHPOINTCALCTYPEDto> ReadTEACHPOINTCALCTYPEsPaged(IQueryable<TEACHPOINTCALCTYPE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.TEACHPOINTCALCTYPEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<TEACHPOINTCALCTYPEDto> ReadTEACHPOINTCALCTYPEsFiltered(string sortExpression, string filterExpression)
		{
			return this.TEACHPOINTCALCTYPEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<TEACHPOINTCALCTYPEDto> ReadTEACHPOINTCALCTYPEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.TEACHPOINTCALCTYPEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<TEACHPOINTCALCTYPEDto> ReadTEACHPOINTCALCTYPEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<TEACHPOINTCALCTYPE, bool>> filter)
		{
			return this.TEACHPOINTCALCTYPEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public TEACHPOINTCALCTYPEDto ReadTEACHPOINTCALCTYPEs(string dtoKey)
		{
			return this.TEACHPOINTCALCTYPEService.GetByKey(dtoKey);
		}


		public int CountTEACHPOINTCALCTYPEs()
		{
			return this.TEACHPOINTCALCTYPEService.Count();
		}


		public int CountTEACHPOINTCALCTYPEs(string filterExpression)
		{
			return this.TEACHPOINTCALCTYPEService.Count(filterExpression);
		}


		public int CountTEACHPOINTCALCTYPEs(Expression<Func<TEACHPOINTCALCTYPE, bool>> filter)
		{
			return this.TEACHPOINTCALCTYPEService.Count(filter);
		}


		public string CreateTEACHPOINTCALCTYPE(TEACHPOINTCALCTYPEDto teachpointcalctype, bool doSaveChanges = true)
		{
			string key = this.TEACHPOINTCALCTYPEService.Add(teachpointcalctype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateTEACHPOINTCALCTYPE(TEACHPOINTCALCTYPEDto teachpointcalctype, bool doSaveChanges = true)
		{
			this.TEACHPOINTCALCTYPEService.Update(teachpointcalctype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateTEACHPOINTCALCTYPEs(IEnumerable<TEACHPOINTCALCTYPEDto> teachpointcalctypes, bool doSaveChanges = true)
		{
			if (teachpointcalctypes == null)
			{
				return;
			}
			foreach (TEACHPOINTCALCTYPEDto instance in teachpointcalctypes)
			{
				if (instance == null)
				{
					continue;
				}


				this.TEACHPOINTCALCTYPEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteTEACHPOINTCALCTYPE(TEACHPOINTCALCTYPEDto teachpointcalctype, bool doSaveChanges = true)
		{
			this.TEACHPOINTCALCTYPEService.Delete(teachpointcalctype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteTEACHPOINTCALCTYPEs(IEnumerable<TEACHPOINTCALCTYPEDto> teachpointcalctypes, bool doSaveChanges = true)
		{
			if (teachpointcalctypes == null)
			{
				return;
			}
			foreach (TEACHPOINTCALCTYPEDto instance in teachpointcalctypes)
			{
				if (instance == null)
				{
					continue;
				}


				this.TEACHPOINTCALCTYPEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveTEACHPOINTCALCTYPE(TEACHPOINTCALCTYPEDto teachpointcalctype, bool doSaveChanges = true)
		{
			switch (teachpointcalctype.RowState)
			{
				case RowState.Insert:
					this.CreateTEACHPOINTCALCTYPE(teachpointcalctype, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateTEACHPOINTCALCTYPE(teachpointcalctype, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteTEACHPOINTCALCTYPE(teachpointcalctype, doSaveChanges);
					break;
			}
		}


		public void SaveTEACHPOINTCALCTYPEs(IEnumerable<TEACHPOINTCALCTYPEDto> teachpointcalctypes, bool doSaveChanges = true)
		{
			if (teachpointcalctypes == null)
			{
				return;
			}
			foreach (TEACHPOINTCALCTYPEDto instance in teachpointcalctypes)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveTEACHPOINTCALCTYPE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion TEACHPOINTCALCTYPE CRUD Operations


		#region SCORESETTINGSCORETYPE CRUD Operations


		private ISCORESETTINGSCORETYPEService scoresettingscoretype;
		public virtual ISCORESETTINGSCORETYPEService SCORESETTINGSCORETYPEService
		{
			get
			{
				if (this.scoresettingscoretype == null)
				{
					ISCORESETTINGSCORETYPEAssembler assembler = new SCORESETTINGSCORETYPEAssembler();
					ISCORESETTINGSCORETYPERepository repository = new SCORESETTINGSCORETYPERepository(this.UnitOfWork);
					this.scoresettingscoretype = new SCORESETTINGSCORETYPEService(assembler, repository);
				}
				return this.scoresettingscoretype;
			}
		}


		public IQueryable<SCORESETTINGSCORETYPE> SCORESETTINGSCORETYPEs
		{
			get { return this.SCORESETTINGSCORETYPEService.Repository.GetAll(); }
		}


		public IQueryable<SCORESETTINGSCORETYPE> ReadSCORESETTINGSCORETYPEs(Expression<Func<SCORESETTINGSCORETYPE, bool>> filter, int dummy)
		{
			return this.SCORESETTINGSCORETYPEService.Repository.Find(filter);
		}


		public IEnumerable<SCORESETTINGSCORETYPEDto> ReadSCORESETTINGSCORETYPEs()
		{
			return this.SCORESETTINGSCORETYPEService.GetAll();
		}


		public IEnumerable<SCORESETTINGSCORETYPEDto> ReadSCORESETTINGSCORETYPEs(Expression<Func<SCORESETTINGSCORETYPE, bool>> filter)
		{
			return this.SCORESETTINGSCORETYPEService.Find(filter);
		}


		public IEnumerable<SCORESETTINGSCORETYPEDto> ReadSCORESETTINGSCORETYPEs(ISpecification<SCORESETTINGSCORETYPE> specification)
		{
			return this.SCORESETTINGSCORETYPEService.Find(specification.GetExpression());
		}


		public IEnumerable<SCORESETTINGSCORETYPEDto> ReadSCORESETTINGSCORETYPEs(IQueryable<SCORESETTINGSCORETYPE> query)
		{
			return this.SCORESETTINGSCORETYPEService.Assembler.Assemble(query);
		}


		public IEnumerable<SCORESETTINGSCORETYPEDto> ReadSCORESETTINGSCORETYPEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.SCORESETTINGSCORETYPEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<SCORESETTINGSCORETYPEDto> ReadSCORESETTINGSCORETYPEs(object[] keyWords)
		{
			return this.SCORESETTINGSCORETYPEService.Find(keyWords);
		}


		public IEnumerable<SCORESETTINGSCORETYPEDto> ReadSCORESETTINGSCORETYPEsPaged(int startIndex, int pageSize)
		{
			return this.SCORESETTINGSCORETYPEService.Find(startIndex, pageSize);
		}


		public IEnumerable<SCORESETTINGSCORETYPEDto> ReadSCORESETTINGSCORETYPEsPaged(IQueryable<SCORESETTINGSCORETYPE> source, int pageIndex, int pageSize)
		{
			return this.SCORESETTINGSCORETYPEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<SCORESETTINGSCORETYPEDto> ReadSCORESETTINGSCORETYPEsPaged(IQueryable<SCORESETTINGSCORETYPE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.SCORESETTINGSCORETYPEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<SCORESETTINGSCORETYPEDto> ReadSCORESETTINGSCORETYPEsFiltered(string sortExpression, string filterExpression)
		{
			return this.SCORESETTINGSCORETYPEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<SCORESETTINGSCORETYPEDto> ReadSCORESETTINGSCORETYPEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.SCORESETTINGSCORETYPEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<SCORESETTINGSCORETYPEDto> ReadSCORESETTINGSCORETYPEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<SCORESETTINGSCORETYPE, bool>> filter)
		{
			return this.SCORESETTINGSCORETYPEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public SCORESETTINGSCORETYPEDto ReadSCORESETTINGSCORETYPEs(string dtoKey)
		{
			return this.SCORESETTINGSCORETYPEService.GetByKey(dtoKey);
		}


		public int CountSCORESETTINGSCORETYPEs()
		{
			return this.SCORESETTINGSCORETYPEService.Count();
		}


		public int CountSCORESETTINGSCORETYPEs(string filterExpression)
		{
			return this.SCORESETTINGSCORETYPEService.Count(filterExpression);
		}


		public int CountSCORESETTINGSCORETYPEs(Expression<Func<SCORESETTINGSCORETYPE, bool>> filter)
		{
			return this.SCORESETTINGSCORETYPEService.Count(filter);
		}


		public string CreateSCORESETTINGSCORETYPE(SCORESETTINGSCORETYPEDto scoresettingscoretype, bool doSaveChanges = true)
		{
			string key = this.SCORESETTINGSCORETYPEService.Add(scoresettingscoretype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateSCORESETTINGSCORETYPE(SCORESETTINGSCORETYPEDto scoresettingscoretype, bool doSaveChanges = true)
		{
			this.SCORESETTINGSCORETYPEService.Update(scoresettingscoretype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateSCORESETTINGSCORETYPEs(IEnumerable<SCORESETTINGSCORETYPEDto> scoresettingscoretypes, bool doSaveChanges = true)
		{
			if (scoresettingscoretypes == null)
			{
				return;
			}
			foreach (SCORESETTINGSCORETYPEDto instance in scoresettingscoretypes)
			{
				if (instance == null)
				{
					continue;
				}


				this.SCORESETTINGSCORETYPEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteSCORESETTINGSCORETYPE(SCORESETTINGSCORETYPEDto scoresettingscoretype, bool doSaveChanges = true)
		{
			this.SCORESETTINGSCORETYPEService.Delete(scoresettingscoretype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteSCORESETTINGSCORETYPEs(IEnumerable<SCORESETTINGSCORETYPEDto> scoresettingscoretypes, bool doSaveChanges = true)
		{
			if (scoresettingscoretypes == null)
			{
				return;
			}
			foreach (SCORESETTINGSCORETYPEDto instance in scoresettingscoretypes)
			{
				if (instance == null)
				{
					continue;
				}


				this.SCORESETTINGSCORETYPEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveSCORESETTINGSCORETYPE(SCORESETTINGSCORETYPEDto scoresettingscoretype, bool doSaveChanges = true)
		{
			switch (scoresettingscoretype.RowState)
			{
				case RowState.Insert:
					this.CreateSCORESETTINGSCORETYPE(scoresettingscoretype, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateSCORESETTINGSCORETYPE(scoresettingscoretype, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteSCORESETTINGSCORETYPE(scoresettingscoretype, doSaveChanges);
					break;
			}
		}


		public void SaveSCORESETTINGSCORETYPEs(IEnumerable<SCORESETTINGSCORETYPEDto> scoresettingscoretypes, bool doSaveChanges = true)
		{
			if (scoresettingscoretypes == null)
			{
				return;
			}
			foreach (SCORESETTINGSCORETYPEDto instance in scoresettingscoretypes)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveSCORESETTINGSCORETYPE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion SCORESETTINGSCORETYPE CRUD Operations


		#region SCORESETTINGJOB CRUD Operations


		private ISCORESETTINGJOBService scoresettingjob;
		public virtual ISCORESETTINGJOBService SCORESETTINGJOBService
		{
			get
			{
				if (this.scoresettingjob == null)
				{
					ISCORESETTINGJOBAssembler assembler = new SCORESETTINGJOBAssembler();
					ISCORESETTINGJOBRepository repository = new SCORESETTINGJOBRepository(this.UnitOfWork);
					this.scoresettingjob = new SCORESETTINGJOBService(assembler, repository);
				}
				return this.scoresettingjob;
			}
		}


		public IQueryable<SCORESETTINGJOB> SCORESETTINGJOBs
		{
			get { return this.SCORESETTINGJOBService.Repository.GetAll(); }
		}


		public IQueryable<SCORESETTINGJOB> ReadSCORESETTINGJOBs(Expression<Func<SCORESETTINGJOB, bool>> filter, int dummy)
		{
			return this.SCORESETTINGJOBService.Repository.Find(filter);
		}


		public IEnumerable<SCORESETTINGJOBDto> ReadSCORESETTINGJOBs()
		{
			return this.SCORESETTINGJOBService.GetAll();
		}


		public IEnumerable<SCORESETTINGJOBDto> ReadSCORESETTINGJOBs(Expression<Func<SCORESETTINGJOB, bool>> filter)
		{
			return this.SCORESETTINGJOBService.Find(filter);
		}


		public IEnumerable<SCORESETTINGJOBDto> ReadSCORESETTINGJOBs(ISpecification<SCORESETTINGJOB> specification)
		{
			return this.SCORESETTINGJOBService.Find(specification.GetExpression());
		}


		public IEnumerable<SCORESETTINGJOBDto> ReadSCORESETTINGJOBs(IQueryable<SCORESETTINGJOB> query)
		{
			return this.SCORESETTINGJOBService.Assembler.Assemble(query);
		}


		public IEnumerable<SCORESETTINGJOBDto> ReadSCORESETTINGJOBs(string[] propertyToSearch, object[] keyWords)
		{
			return this.SCORESETTINGJOBService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<SCORESETTINGJOBDto> ReadSCORESETTINGJOBs(object[] keyWords)
		{
			return this.SCORESETTINGJOBService.Find(keyWords);
		}


		public IEnumerable<SCORESETTINGJOBDto> ReadSCORESETTINGJOBsPaged(int startIndex, int pageSize)
		{
			return this.SCORESETTINGJOBService.Find(startIndex, pageSize);
		}


		public IEnumerable<SCORESETTINGJOBDto> ReadSCORESETTINGJOBsPaged(IQueryable<SCORESETTINGJOB> source, int pageIndex, int pageSize)
		{
			return this.SCORESETTINGJOBService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<SCORESETTINGJOBDto> ReadSCORESETTINGJOBsPaged(IQueryable<SCORESETTINGJOB> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.SCORESETTINGJOBService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<SCORESETTINGJOBDto> ReadSCORESETTINGJOBsFiltered(string sortExpression, string filterExpression)
		{
			return this.SCORESETTINGJOBService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<SCORESETTINGJOBDto> ReadSCORESETTINGJOBsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.SCORESETTINGJOBService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<SCORESETTINGJOBDto> ReadSCORESETTINGJOBsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<SCORESETTINGJOB, bool>> filter)
		{
			return this.SCORESETTINGJOBService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public SCORESETTINGJOBDto ReadSCORESETTINGJOBs(string dtoKey)
		{
			return this.SCORESETTINGJOBService.GetByKey(dtoKey);
		}


		public int CountSCORESETTINGJOBs()
		{
			return this.SCORESETTINGJOBService.Count();
		}


		public int CountSCORESETTINGJOBs(string filterExpression)
		{
			return this.SCORESETTINGJOBService.Count(filterExpression);
		}


		public int CountSCORESETTINGJOBs(Expression<Func<SCORESETTINGJOB, bool>> filter)
		{
			return this.SCORESETTINGJOBService.Count(filter);
		}


		public string CreateSCORESETTINGJOB(SCORESETTINGJOBDto scoresettingjob, bool doSaveChanges = true)
		{
			string key = this.SCORESETTINGJOBService.Add(scoresettingjob);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateSCORESETTINGJOB(SCORESETTINGJOBDto scoresettingjob, bool doSaveChanges = true)
		{
			this.SCORESETTINGJOBService.Update(scoresettingjob);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateSCORESETTINGJOBs(IEnumerable<SCORESETTINGJOBDto> scoresettingjobs, bool doSaveChanges = true)
		{
			if (scoresettingjobs == null)
			{
				return;
			}
			foreach (SCORESETTINGJOBDto instance in scoresettingjobs)
			{
				if (instance == null)
				{
					continue;
				}


				this.SCORESETTINGJOBService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteSCORESETTINGJOB(SCORESETTINGJOBDto scoresettingjob, bool doSaveChanges = true)
		{
			this.SCORESETTINGJOBService.Delete(scoresettingjob);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteSCORESETTINGJOBs(IEnumerable<SCORESETTINGJOBDto> scoresettingjobs, bool doSaveChanges = true)
		{
			if (scoresettingjobs == null)
			{
				return;
			}
			foreach (SCORESETTINGJOBDto instance in scoresettingjobs)
			{
				if (instance == null)
				{
					continue;
				}


				this.SCORESETTINGJOBService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveSCORESETTINGJOB(SCORESETTINGJOBDto scoresettingjob, bool doSaveChanges = true)
		{
			switch (scoresettingjob.RowState)
			{
				case RowState.Insert:
					this.CreateSCORESETTINGJOB(scoresettingjob, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateSCORESETTINGJOB(scoresettingjob, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteSCORESETTINGJOB(scoresettingjob, doSaveChanges);
					break;
			}
		}


		public void SaveSCORESETTINGJOBs(IEnumerable<SCORESETTINGJOBDto> scoresettingjobs, bool doSaveChanges = true)
		{
			if (scoresettingjobs == null)
			{
				return;
			}
			foreach (SCORESETTINGJOBDto instance in scoresettingjobs)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveSCORESETTINGJOB(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion SCORESETTINGJOB CRUD Operations


		#region SCORESETTINGDETAIL CRUD Operations


		private ISCORESETTINGDETAILService scoresettingdetail;
		public virtual ISCORESETTINGDETAILService SCORESETTINGDETAILService
		{
			get
			{
				if (this.scoresettingdetail == null)
				{
					ISCORESETTINGDETAILAssembler assembler = new SCORESETTINGDETAILAssembler();
					ISCORESETTINGDETAILRepository repository = new SCORESETTINGDETAILRepository(this.UnitOfWork);
					this.scoresettingdetail = new SCORESETTINGDETAILService(assembler, repository);
				}
				return this.scoresettingdetail;
			}
		}


		public IQueryable<SCORESETTINGDETAIL> SCORESETTINGDETAILs
		{
			get { return this.SCORESETTINGDETAILService.Repository.GetAll(); }
		}


		public IQueryable<SCORESETTINGDETAIL> ReadSCORESETTINGDETAILs(Expression<Func<SCORESETTINGDETAIL, bool>> filter, int dummy)
		{
			return this.SCORESETTINGDETAILService.Repository.Find(filter);
		}


		public IEnumerable<SCORESETTINGDETAILDto> ReadSCORESETTINGDETAILs()
		{
			return this.SCORESETTINGDETAILService.GetAll();
		}


		public IEnumerable<SCORESETTINGDETAILDto> ReadSCORESETTINGDETAILs(Expression<Func<SCORESETTINGDETAIL, bool>> filter)
		{
			return this.SCORESETTINGDETAILService.Find(filter);
		}


		public IEnumerable<SCORESETTINGDETAILDto> ReadSCORESETTINGDETAILs(ISpecification<SCORESETTINGDETAIL> specification)
		{
			return this.SCORESETTINGDETAILService.Find(specification.GetExpression());
		}


		public IEnumerable<SCORESETTINGDETAILDto> ReadSCORESETTINGDETAILs(IQueryable<SCORESETTINGDETAIL> query)
		{
			return this.SCORESETTINGDETAILService.Assembler.Assemble(query);
		}


		public IEnumerable<SCORESETTINGDETAILDto> ReadSCORESETTINGDETAILs(string[] propertyToSearch, object[] keyWords)
		{
			return this.SCORESETTINGDETAILService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<SCORESETTINGDETAILDto> ReadSCORESETTINGDETAILs(object[] keyWords)
		{
			return this.SCORESETTINGDETAILService.Find(keyWords);
		}


		public IEnumerable<SCORESETTINGDETAILDto> ReadSCORESETTINGDETAILsPaged(int startIndex, int pageSize)
		{
			return this.SCORESETTINGDETAILService.Find(startIndex, pageSize);
		}


		public IEnumerable<SCORESETTINGDETAILDto> ReadSCORESETTINGDETAILsPaged(IQueryable<SCORESETTINGDETAIL> source, int pageIndex, int pageSize)
		{
			return this.SCORESETTINGDETAILService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<SCORESETTINGDETAILDto> ReadSCORESETTINGDETAILsPaged(IQueryable<SCORESETTINGDETAIL> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.SCORESETTINGDETAILService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<SCORESETTINGDETAILDto> ReadSCORESETTINGDETAILsFiltered(string sortExpression, string filterExpression)
		{
			return this.SCORESETTINGDETAILService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<SCORESETTINGDETAILDto> ReadSCORESETTINGDETAILsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.SCORESETTINGDETAILService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<SCORESETTINGDETAILDto> ReadSCORESETTINGDETAILsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<SCORESETTINGDETAIL, bool>> filter)
		{
			return this.SCORESETTINGDETAILService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public SCORESETTINGDETAILDto ReadSCORESETTINGDETAILs(string dtoKey)
		{
			return this.SCORESETTINGDETAILService.GetByKey(dtoKey);
		}


		public int CountSCORESETTINGDETAILs()
		{
			return this.SCORESETTINGDETAILService.Count();
		}


		public int CountSCORESETTINGDETAILs(string filterExpression)
		{
			return this.SCORESETTINGDETAILService.Count(filterExpression);
		}


		public int CountSCORESETTINGDETAILs(Expression<Func<SCORESETTINGDETAIL, bool>> filter)
		{
			return this.SCORESETTINGDETAILService.Count(filter);
		}


		public string CreateSCORESETTINGDETAIL(SCORESETTINGDETAILDto scoresettingdetail, bool doSaveChanges = true)
		{
			string key = this.SCORESETTINGDETAILService.Add(scoresettingdetail);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateSCORESETTINGDETAIL(SCORESETTINGDETAILDto scoresettingdetail, bool doSaveChanges = true)
		{
			this.SCORESETTINGDETAILService.Update(scoresettingdetail);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateSCORESETTINGDETAILs(IEnumerable<SCORESETTINGDETAILDto> scoresettingdetails, bool doSaveChanges = true)
		{
			if (scoresettingdetails == null)
			{
				return;
			}
			foreach (SCORESETTINGDETAILDto instance in scoresettingdetails)
			{
				if (instance == null)
				{
					continue;
				}


				this.SCORESETTINGDETAILService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteSCORESETTINGDETAIL(SCORESETTINGDETAILDto scoresettingdetail, bool doSaveChanges = true)
		{
			this.SCORESETTINGDETAILService.Delete(scoresettingdetail);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteSCORESETTINGDETAILs(IEnumerable<SCORESETTINGDETAILDto> scoresettingdetails, bool doSaveChanges = true)
		{
			if (scoresettingdetails == null)
			{
				return;
			}
			foreach (SCORESETTINGDETAILDto instance in scoresettingdetails)
			{
				if (instance == null)
				{
					continue;
				}


				this.SCORESETTINGDETAILService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveSCORESETTINGDETAIL(SCORESETTINGDETAILDto scoresettingdetail, bool doSaveChanges = true)
		{
			switch (scoresettingdetail.RowState)
			{
				case RowState.Insert:
					this.CreateSCORESETTINGDETAIL(scoresettingdetail, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateSCORESETTINGDETAIL(scoresettingdetail, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteSCORESETTINGDETAIL(scoresettingdetail, doSaveChanges);
					break;
			}
		}


		public void SaveSCORESETTINGDETAILs(IEnumerable<SCORESETTINGDETAILDto> scoresettingdetails, bool doSaveChanges = true)
		{
			if (scoresettingdetails == null)
			{
				return;
			}
			foreach (SCORESETTINGDETAILDto instance in scoresettingdetails)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveSCORESETTINGDETAIL(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion SCORESETTINGDETAIL CRUD Operations


		#region SCORESETTING CRUD Operations


		private ISCORESETTINGService scoresetting;
		public virtual ISCORESETTINGService SCORESETTINGService
		{
			get
			{
				if (this.scoresetting == null)
				{
					ISCORESETTINGAssembler assembler = new SCORESETTINGAssembler();
					ISCORESETTINGRepository repository = new SCORESETTINGRepository(this.UnitOfWork);
					this.scoresetting = new SCORESETTINGService(assembler, repository);
				}
				return this.scoresetting;
			}
		}


		public IQueryable<SCORESETTING> SCORESETTINGs
		{
			get { return this.SCORESETTINGService.Repository.GetAll(); }
		}


		public IQueryable<SCORESETTING> ReadSCORESETTINGs(Expression<Func<SCORESETTING, bool>> filter, int dummy)
		{
			return this.SCORESETTINGService.Repository.Find(filter);
		}


		public IEnumerable<SCORESETTINGDto> ReadSCORESETTINGs()
		{
			return this.SCORESETTINGService.GetAll();
		}


		public IEnumerable<SCORESETTINGDto> ReadSCORESETTINGs(Expression<Func<SCORESETTING, bool>> filter)
		{
			return this.SCORESETTINGService.Find(filter);
		}


		public IEnumerable<SCORESETTINGDto> ReadSCORESETTINGs(ISpecification<SCORESETTING> specification)
		{
			return this.SCORESETTINGService.Find(specification.GetExpression());
		}


		public IEnumerable<SCORESETTINGDto> ReadSCORESETTINGs(IQueryable<SCORESETTING> query)
		{
			return this.SCORESETTINGService.Assembler.Assemble(query);
		}


		public IEnumerable<SCORESETTINGDto> ReadSCORESETTINGs(string[] propertyToSearch, object[] keyWords)
		{
			return this.SCORESETTINGService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<SCORESETTINGDto> ReadSCORESETTINGs(object[] keyWords)
		{
			return this.SCORESETTINGService.Find(keyWords);
		}


		public IEnumerable<SCORESETTINGDto> ReadSCORESETTINGsPaged(int startIndex, int pageSize)
		{
			return this.SCORESETTINGService.Find(startIndex, pageSize);
		}


		public IEnumerable<SCORESETTINGDto> ReadSCORESETTINGsPaged(IQueryable<SCORESETTING> source, int pageIndex, int pageSize)
		{
			return this.SCORESETTINGService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<SCORESETTINGDto> ReadSCORESETTINGsPaged(IQueryable<SCORESETTING> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.SCORESETTINGService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<SCORESETTINGDto> ReadSCORESETTINGsFiltered(string sortExpression, string filterExpression)
		{
			return this.SCORESETTINGService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<SCORESETTINGDto> ReadSCORESETTINGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.SCORESETTINGService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<SCORESETTINGDto> ReadSCORESETTINGsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<SCORESETTING, bool>> filter)
		{
			return this.SCORESETTINGService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public SCORESETTINGDto ReadSCORESETTINGs(string dtoKey)
		{
			return this.SCORESETTINGService.GetByKey(dtoKey);
		}


		public int CountSCORESETTINGs()
		{
			return this.SCORESETTINGService.Count();
		}


		public int CountSCORESETTINGs(string filterExpression)
		{
			return this.SCORESETTINGService.Count(filterExpression);
		}


		public int CountSCORESETTINGs(Expression<Func<SCORESETTING, bool>> filter)
		{
			return this.SCORESETTINGService.Count(filter);
		}


		public string CreateSCORESETTING(SCORESETTINGDto scoresetting, bool doSaveChanges = true)
		{
			string key = this.SCORESETTINGService.Add(scoresetting);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateSCORESETTING(SCORESETTINGDto scoresetting, bool doSaveChanges = true)
		{
			this.SCORESETTINGService.Update(scoresetting);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateSCORESETTINGs(IEnumerable<SCORESETTINGDto> scoresettings, bool doSaveChanges = true)
		{
			if (scoresettings == null)
			{
				return;
			}
			foreach (SCORESETTINGDto instance in scoresettings)
			{
				if (instance == null)
				{
					continue;
				}


				this.SCORESETTINGService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteSCORESETTING(SCORESETTINGDto scoresetting, bool doSaveChanges = true)
		{
			this.SCORESETTINGService.Delete(scoresetting);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteSCORESETTINGs(IEnumerable<SCORESETTINGDto> scoresettings, bool doSaveChanges = true)
		{
			if (scoresettings == null)
			{
				return;
			}
			foreach (SCORESETTINGDto instance in scoresettings)
			{
				if (instance == null)
				{
					continue;
				}


				this.SCORESETTINGService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveSCORESETTING(SCORESETTINGDto scoresetting, bool doSaveChanges = true)
		{
			switch (scoresetting.RowState)
			{
				case RowState.Insert:
					this.CreateSCORESETTING(scoresetting, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateSCORESETTING(scoresetting, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteSCORESETTING(scoresetting, doSaveChanges);
					break;
			}
		}


		public void SaveSCORESETTINGs(IEnumerable<SCORESETTINGDto> scoresettings, bool doSaveChanges = true)
		{
			if (scoresettings == null)
			{
				return;
			}
			foreach (SCORESETTINGDto instance in scoresettings)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveSCORESETTING(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion SCORESETTING CRUD Operations


		#region SCOREINSTANCEDETAIL CRUD Operations


		private ISCOREINSTANCEDETAILService scoreinstancedetail;
		public virtual ISCOREINSTANCEDETAILService SCOREINSTANCEDETAILService
		{
			get
			{
				if (this.scoreinstancedetail == null)
				{
					ISCOREINSTANCEDETAILAssembler assembler = new SCOREINSTANCEDETAILAssembler();
					ISCOREINSTANCEDETAILRepository repository = new SCOREINSTANCEDETAILRepository(this.UnitOfWork);
					this.scoreinstancedetail = new SCOREINSTANCEDETAILService(assembler, repository);
				}
				return this.scoreinstancedetail;
			}
		}


		public IQueryable<SCOREINSTANCEDETAIL> SCOREINSTANCEDETAILs
		{
			get { return this.SCOREINSTANCEDETAILService.Repository.GetAll(); }
		}


		public IQueryable<SCOREINSTANCEDETAIL> ReadSCOREINSTANCEDETAILs(Expression<Func<SCOREINSTANCEDETAIL, bool>> filter, int dummy)
		{
			return this.SCOREINSTANCEDETAILService.Repository.Find(filter);
		}


		public IEnumerable<SCOREINSTANCEDETAILDto> ReadSCOREINSTANCEDETAILs()
		{
			return this.SCOREINSTANCEDETAILService.GetAll();
		}


		public IEnumerable<SCOREINSTANCEDETAILDto> ReadSCOREINSTANCEDETAILs(Expression<Func<SCOREINSTANCEDETAIL, bool>> filter)
		{
			return this.SCOREINSTANCEDETAILService.Find(filter);
		}


		public IEnumerable<SCOREINSTANCEDETAILDto> ReadSCOREINSTANCEDETAILs(ISpecification<SCOREINSTANCEDETAIL> specification)
		{
			return this.SCOREINSTANCEDETAILService.Find(specification.GetExpression());
		}


		public IEnumerable<SCOREINSTANCEDETAILDto> ReadSCOREINSTANCEDETAILs(IQueryable<SCOREINSTANCEDETAIL> query)
		{
			return this.SCOREINSTANCEDETAILService.Assembler.Assemble(query);
		}


		public IEnumerable<SCOREINSTANCEDETAILDto> ReadSCOREINSTANCEDETAILs(string[] propertyToSearch, object[] keyWords)
		{
			return this.SCOREINSTANCEDETAILService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<SCOREINSTANCEDETAILDto> ReadSCOREINSTANCEDETAILs(object[] keyWords)
		{
			return this.SCOREINSTANCEDETAILService.Find(keyWords);
		}


		public IEnumerable<SCOREINSTANCEDETAILDto> ReadSCOREINSTANCEDETAILsPaged(int startIndex, int pageSize)
		{
			return this.SCOREINSTANCEDETAILService.Find(startIndex, pageSize);
		}


		public IEnumerable<SCOREINSTANCEDETAILDto> ReadSCOREINSTANCEDETAILsPaged(IQueryable<SCOREINSTANCEDETAIL> source, int pageIndex, int pageSize)
		{
			return this.SCOREINSTANCEDETAILService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<SCOREINSTANCEDETAILDto> ReadSCOREINSTANCEDETAILsPaged(IQueryable<SCOREINSTANCEDETAIL> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.SCOREINSTANCEDETAILService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<SCOREINSTANCEDETAILDto> ReadSCOREINSTANCEDETAILsFiltered(string sortExpression, string filterExpression)
		{
			return this.SCOREINSTANCEDETAILService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<SCOREINSTANCEDETAILDto> ReadSCOREINSTANCEDETAILsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.SCOREINSTANCEDETAILService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<SCOREINSTANCEDETAILDto> ReadSCOREINSTANCEDETAILsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<SCOREINSTANCEDETAIL, bool>> filter)
		{
			return this.SCOREINSTANCEDETAILService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public SCOREINSTANCEDETAILDto ReadSCOREINSTANCEDETAILs(string dtoKey)
		{
			return this.SCOREINSTANCEDETAILService.GetByKey(dtoKey);
		}


		public int CountSCOREINSTANCEDETAILs()
		{
			return this.SCOREINSTANCEDETAILService.Count();
		}


		public int CountSCOREINSTANCEDETAILs(string filterExpression)
		{
			return this.SCOREINSTANCEDETAILService.Count(filterExpression);
		}


		public int CountSCOREINSTANCEDETAILs(Expression<Func<SCOREINSTANCEDETAIL, bool>> filter)
		{
			return this.SCOREINSTANCEDETAILService.Count(filter);
		}


		public string CreateSCOREINSTANCEDETAIL(SCOREINSTANCEDETAILDto scoreinstancedetail, bool doSaveChanges = true)
		{
			string key = this.SCOREINSTANCEDETAILService.Add(scoreinstancedetail);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateSCOREINSTANCEDETAIL(SCOREINSTANCEDETAILDto scoreinstancedetail, bool doSaveChanges = true)
		{
			this.SCOREINSTANCEDETAILService.Update(scoreinstancedetail);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateSCOREINSTANCEDETAILs(IEnumerable<SCOREINSTANCEDETAILDto> scoreinstancedetails, bool doSaveChanges = true)
		{
			if (scoreinstancedetails == null)
			{
				return;
			}
			foreach (SCOREINSTANCEDETAILDto instance in scoreinstancedetails)
			{
				if (instance == null)
				{
					continue;
				}


				this.SCOREINSTANCEDETAILService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteSCOREINSTANCEDETAIL(SCOREINSTANCEDETAILDto scoreinstancedetail, bool doSaveChanges = true)
		{
			this.SCOREINSTANCEDETAILService.Delete(scoreinstancedetail);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteSCOREINSTANCEDETAILs(IEnumerable<SCOREINSTANCEDETAILDto> scoreinstancedetails, bool doSaveChanges = true)
		{
			if (scoreinstancedetails == null)
			{
				return;
			}
			foreach (SCOREINSTANCEDETAILDto instance in scoreinstancedetails)
			{
				if (instance == null)
				{
					continue;
				}


				this.SCOREINSTANCEDETAILService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveSCOREINSTANCEDETAIL(SCOREINSTANCEDETAILDto scoreinstancedetail, bool doSaveChanges = true)
		{
			switch (scoreinstancedetail.RowState)
			{
				case RowState.Insert:
					this.CreateSCOREINSTANCEDETAIL(scoreinstancedetail, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateSCOREINSTANCEDETAIL(scoreinstancedetail, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteSCOREINSTANCEDETAIL(scoreinstancedetail, doSaveChanges);
					break;
			}
		}


		public void SaveSCOREINSTANCEDETAILs(IEnumerable<SCOREINSTANCEDETAILDto> scoreinstancedetails, bool doSaveChanges = true)
		{
			if (scoreinstancedetails == null)
			{
				return;
			}
			foreach (SCOREINSTANCEDETAILDto instance in scoreinstancedetails)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveSCOREINSTANCEDETAIL(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion SCOREINSTANCEDETAIL CRUD Operations


		#region SCOREINSTANCE CRUD Operations


		private ISCOREINSTANCEService scoreinstance;
		public virtual ISCOREINSTANCEService SCOREINSTANCEService
		{
			get
			{
				if (this.scoreinstance == null)
				{
					ISCOREINSTANCEAssembler assembler = new SCOREINSTANCEAssembler();
					ISCOREINSTANCERepository repository = new SCOREINSTANCERepository(this.UnitOfWork);
					this.scoreinstance = new SCOREINSTANCEService(assembler, repository);
				}
				return this.scoreinstance;
			}
		}


		public IQueryable<SCOREINSTANCE> SCOREINSTANCEs
		{
			get { return this.SCOREINSTANCEService.Repository.GetAll(); }
		}


		public IQueryable<SCOREINSTANCE> ReadSCOREINSTANCEs(Expression<Func<SCOREINSTANCE, bool>> filter, int dummy)
		{
			return this.SCOREINSTANCEService.Repository.Find(filter);
		}


		public IEnumerable<SCOREINSTANCEDto> ReadSCOREINSTANCEs()
		{
			return this.SCOREINSTANCEService.GetAll();
		}


		public IEnumerable<SCOREINSTANCEDto> ReadSCOREINSTANCEs(Expression<Func<SCOREINSTANCE, bool>> filter)
		{
			return this.SCOREINSTANCEService.Find(filter);
		}


		public IEnumerable<SCOREINSTANCEDto> ReadSCOREINSTANCEs(ISpecification<SCOREINSTANCE> specification)
		{
			return this.SCOREINSTANCEService.Find(specification.GetExpression());
		}


		public IEnumerable<SCOREINSTANCEDto> ReadSCOREINSTANCEs(IQueryable<SCOREINSTANCE> query)
		{
			return this.SCOREINSTANCEService.Assembler.Assemble(query);
		}


		public IEnumerable<SCOREINSTANCEDto> ReadSCOREINSTANCEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.SCOREINSTANCEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<SCOREINSTANCEDto> ReadSCOREINSTANCEs(object[] keyWords)
		{
			return this.SCOREINSTANCEService.Find(keyWords);
		}


		public IEnumerable<SCOREINSTANCEDto> ReadSCOREINSTANCEsPaged(int startIndex, int pageSize)
		{
			return this.SCOREINSTANCEService.Find(startIndex, pageSize);
		}


		public IEnumerable<SCOREINSTANCEDto> ReadSCOREINSTANCEsPaged(IQueryable<SCOREINSTANCE> source, int pageIndex, int pageSize)
		{
			return this.SCOREINSTANCEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<SCOREINSTANCEDto> ReadSCOREINSTANCEsPaged(IQueryable<SCOREINSTANCE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.SCOREINSTANCEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<SCOREINSTANCEDto> ReadSCOREINSTANCEsFiltered(string sortExpression, string filterExpression)
		{
			return this.SCOREINSTANCEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<SCOREINSTANCEDto> ReadSCOREINSTANCEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.SCOREINSTANCEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<SCOREINSTANCEDto> ReadSCOREINSTANCEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<SCOREINSTANCE, bool>> filter)
		{
			return this.SCOREINSTANCEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public SCOREINSTANCEDto ReadSCOREINSTANCEs(string dtoKey)
		{
			return this.SCOREINSTANCEService.GetByKey(dtoKey);
		}


		public int CountSCOREINSTANCEs()
		{
			return this.SCOREINSTANCEService.Count();
		}


		public int CountSCOREINSTANCEs(string filterExpression)
		{
			return this.SCOREINSTANCEService.Count(filterExpression);
		}


		public int CountSCOREINSTANCEs(Expression<Func<SCOREINSTANCE, bool>> filter)
		{
			return this.SCOREINSTANCEService.Count(filter);
		}


		public string CreateSCOREINSTANCE(SCOREINSTANCEDto scoreinstance, bool doSaveChanges = true)
		{
			string key = this.SCOREINSTANCEService.Add(scoreinstance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateSCOREINSTANCE(SCOREINSTANCEDto scoreinstance, bool doSaveChanges = true)
		{
			this.SCOREINSTANCEService.Update(scoreinstance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateSCOREINSTANCEs(IEnumerable<SCOREINSTANCEDto> scoreinstances, bool doSaveChanges = true)
		{
			if (scoreinstances == null)
			{
				return;
			}
			foreach (SCOREINSTANCEDto instance in scoreinstances)
			{
				if (instance == null)
				{
					continue;
				}


				this.SCOREINSTANCEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteSCOREINSTANCE(SCOREINSTANCEDto scoreinstance, bool doSaveChanges = true)
		{
			this.SCOREINSTANCEService.Delete(scoreinstance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteSCOREINSTANCEs(IEnumerable<SCOREINSTANCEDto> scoreinstances, bool doSaveChanges = true)
		{
			if (scoreinstances == null)
			{
				return;
			}
			foreach (SCOREINSTANCEDto instance in scoreinstances)
			{
				if (instance == null)
				{
					continue;
				}


				this.SCOREINSTANCEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveSCOREINSTANCE(SCOREINSTANCEDto scoreinstance, bool doSaveChanges = true)
		{
			switch (scoreinstance.RowState)
			{
				case RowState.Insert:
					this.CreateSCOREINSTANCE(scoreinstance, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateSCOREINSTANCE(scoreinstance, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteSCOREINSTANCE(scoreinstance, doSaveChanges);
					break;
			}
		}


		public void SaveSCOREINSTANCEs(IEnumerable<SCOREINSTANCEDto> scoreinstances, bool doSaveChanges = true)
		{
			if (scoreinstances == null)
			{
				return;
			}
			foreach (SCOREINSTANCEDto instance in scoreinstances)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveSCOREINSTANCE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion SCOREINSTANCE CRUD Operations


		#region SCHEDULERLOG CRUD Operations


		private ISCHEDULERLOGService schedulerlog;
		public virtual ISCHEDULERLOGService SCHEDULERLOGService
		{
			get
			{
				if (this.schedulerlog == null)
				{
					ISCHEDULERLOGAssembler assembler = new SCHEDULERLOGAssembler();
					ISCHEDULERLOGRepository repository = new SCHEDULERLOGRepository(this.UnitOfWork);
					this.schedulerlog = new SCHEDULERLOGService(assembler, repository);
				}
				return this.schedulerlog;
			}
		}


		public IQueryable<SCHEDULERLOG> SCHEDULERLOGs
		{
			get { return this.SCHEDULERLOGService.Repository.GetAll(); }
		}


		public IQueryable<SCHEDULERLOG> ReadSCHEDULERLOGs(Expression<Func<SCHEDULERLOG, bool>> filter, int dummy)
		{
			return this.SCHEDULERLOGService.Repository.Find(filter);
		}


		public IEnumerable<SCHEDULERLOGDto> ReadSCHEDULERLOGs()
		{
			return this.SCHEDULERLOGService.GetAll();
		}


		public IEnumerable<SCHEDULERLOGDto> ReadSCHEDULERLOGs(Expression<Func<SCHEDULERLOG, bool>> filter)
		{
			return this.SCHEDULERLOGService.Find(filter);
		}


		public IEnumerable<SCHEDULERLOGDto> ReadSCHEDULERLOGs(ISpecification<SCHEDULERLOG> specification)
		{
			return this.SCHEDULERLOGService.Find(specification.GetExpression());
		}


		public IEnumerable<SCHEDULERLOGDto> ReadSCHEDULERLOGs(IQueryable<SCHEDULERLOG> query)
		{
			return this.SCHEDULERLOGService.Assembler.Assemble(query);
		}


		public IEnumerable<SCHEDULERLOGDto> ReadSCHEDULERLOGs(string[] propertyToSearch, object[] keyWords)
		{
			return this.SCHEDULERLOGService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<SCHEDULERLOGDto> ReadSCHEDULERLOGs(object[] keyWords)
		{
			return this.SCHEDULERLOGService.Find(keyWords);
		}


		public IEnumerable<SCHEDULERLOGDto> ReadSCHEDULERLOGsPaged(int startIndex, int pageSize)
		{
			return this.SCHEDULERLOGService.Find(startIndex, pageSize);
		}


		public IEnumerable<SCHEDULERLOGDto> ReadSCHEDULERLOGsPaged(IQueryable<SCHEDULERLOG> source, int pageIndex, int pageSize)
		{
			return this.SCHEDULERLOGService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<SCHEDULERLOGDto> ReadSCHEDULERLOGsPaged(IQueryable<SCHEDULERLOG> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.SCHEDULERLOGService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<SCHEDULERLOGDto> ReadSCHEDULERLOGsFiltered(string sortExpression, string filterExpression)
		{
			return this.SCHEDULERLOGService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<SCHEDULERLOGDto> ReadSCHEDULERLOGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.SCHEDULERLOGService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<SCHEDULERLOGDto> ReadSCHEDULERLOGsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<SCHEDULERLOG, bool>> filter)
		{
			return this.SCHEDULERLOGService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public SCHEDULERLOGDto ReadSCHEDULERLOGs(string dtoKey)
		{
			return this.SCHEDULERLOGService.GetByKey(dtoKey);
		}


		public int CountSCHEDULERLOGs()
		{
			return this.SCHEDULERLOGService.Count();
		}


		public int CountSCHEDULERLOGs(string filterExpression)
		{
			return this.SCHEDULERLOGService.Count(filterExpression);
		}


		public int CountSCHEDULERLOGs(Expression<Func<SCHEDULERLOG, bool>> filter)
		{
			return this.SCHEDULERLOGService.Count(filter);
		}


		public string CreateSCHEDULERLOG(SCHEDULERLOGDto schedulerlog, bool doSaveChanges = true)
		{
			string key = this.SCHEDULERLOGService.Add(schedulerlog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateSCHEDULERLOG(SCHEDULERLOGDto schedulerlog, bool doSaveChanges = true)
		{
			this.SCHEDULERLOGService.Update(schedulerlog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateSCHEDULERLOGs(IEnumerable<SCHEDULERLOGDto> schedulerlogs, bool doSaveChanges = true)
		{
			if (schedulerlogs == null)
			{
				return;
			}
			foreach (SCHEDULERLOGDto instance in schedulerlogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.SCHEDULERLOGService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteSCHEDULERLOG(SCHEDULERLOGDto schedulerlog, bool doSaveChanges = true)
		{
			this.SCHEDULERLOGService.Delete(schedulerlog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteSCHEDULERLOGs(IEnumerable<SCHEDULERLOGDto> schedulerlogs, bool doSaveChanges = true)
		{
			if (schedulerlogs == null)
			{
				return;
			}
			foreach (SCHEDULERLOGDto instance in schedulerlogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.SCHEDULERLOGService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveSCHEDULERLOG(SCHEDULERLOGDto schedulerlog, bool doSaveChanges = true)
		{
			switch (schedulerlog.RowState)
			{
				case RowState.Insert:
					this.CreateSCHEDULERLOG(schedulerlog, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateSCHEDULERLOG(schedulerlog, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteSCHEDULERLOG(schedulerlog, doSaveChanges);
					break;
			}
		}


		public void SaveSCHEDULERLOGs(IEnumerable<SCHEDULERLOGDto> schedulerlogs, bool doSaveChanges = true)
		{
			if (schedulerlogs == null)
			{
				return;
			}
			foreach (SCHEDULERLOGDto instance in schedulerlogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveSCHEDULERLOG(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion SCHEDULERLOG CRUD Operations


		#region R分級資料 CRUD Operations


		private IR分級資料Service r分級資料;
		public virtual IR分級資料Service R分級資料Service
		{
			get
			{
				if (this.r分級資料 == null)
				{
					IR分級資料Assembler assembler = new R分級資料Assembler();
					IR分級資料Repository repository = new R分級資料Repository(this.UnitOfWork);
					this.r分級資料 = new R分級資料Service(assembler, repository);
				}
				return this.r分級資料;
			}
		}


		public IQueryable<R分級資料> R分級資料s
		{
			get { return this.R分級資料Service.Repository.GetAll(); }
		}


		public IQueryable<R分級資料> ReadR分級資料s(Expression<Func<R分級資料, bool>> filter, int dummy)
		{
			return this.R分級資料Service.Repository.Find(filter);
		}


		public IEnumerable<R分級資料Dto> ReadR分級資料s()
		{
			return this.R分級資料Service.GetAll();
		}


		public IEnumerable<R分級資料Dto> ReadR分級資料s(Expression<Func<R分級資料, bool>> filter)
		{
			return this.R分級資料Service.Find(filter);
		}


		public IEnumerable<R分級資料Dto> ReadR分級資料s(ISpecification<R分級資料> specification)
		{
			return this.R分級資料Service.Find(specification.GetExpression());
		}


		public IEnumerable<R分級資料Dto> ReadR分級資料s(IQueryable<R分級資料> query)
		{
			return this.R分級資料Service.Assembler.Assemble(query);
		}


		public IEnumerable<R分級資料Dto> ReadR分級資料s(string[] propertyToSearch, object[] keyWords)
		{
			return this.R分級資料Service.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<R分級資料Dto> ReadR分級資料s(object[] keyWords)
		{
			return this.R分級資料Service.Find(keyWords);
		}


		public IEnumerable<R分級資料Dto> ReadR分級資料sPaged(int startIndex, int pageSize)
		{
			return this.R分級資料Service.Find(startIndex, pageSize);
		}


		public IEnumerable<R分級資料Dto> ReadR分級資料sPaged(IQueryable<R分級資料> source, int pageIndex, int pageSize)
		{
			return this.R分級資料Service.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<R分級資料Dto> ReadR分級資料sPaged(IQueryable<R分級資料> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.R分級資料Service.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<R分級資料Dto> ReadR分級資料sFiltered(string sortExpression, string filterExpression)
		{
			return this.R分級資料Service.Find(sortExpression, filterExpression);
		}


		public IEnumerable<R分級資料Dto> ReadR分級資料sPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.R分級資料Service.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<R分級資料Dto> ReadR分級資料sPagedAndFiltered(int startIndex, int pageSize, Expression<Func<R分級資料, bool>> filter)
		{
			return this.R分級資料Service.Find(startIndex, pageSize, string.Empty, filter);
		}


		public R分級資料Dto ReadR分級資料s(string dtoKey)
		{
			return this.R分級資料Service.GetByKey(dtoKey);
		}


		public int CountR分級資料s()
		{
			return this.R分級資料Service.Count();
		}


		public int CountR分級資料s(string filterExpression)
		{
			return this.R分級資料Service.Count(filterExpression);
		}


		public int CountR分級資料s(Expression<Func<R分級資料, bool>> filter)
		{
			return this.R分級資料Service.Count(filter);
		}


		public string CreateR分級資料(R分級資料Dto r分級資料, bool doSaveChanges = true)
		{
			string key = this.R分級資料Service.Add(r分級資料);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateR分級資料(R分級資料Dto r分級資料, bool doSaveChanges = true)
		{
			this.R分級資料Service.Update(r分級資料);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateR分級資料s(IEnumerable<R分級資料Dto> r分級資料s, bool doSaveChanges = true)
		{
			if (r分級資料s == null)
			{
				return;
			}
			foreach (R分級資料Dto instance in r分級資料s)
			{
				if (instance == null)
				{
					continue;
				}


				this.R分級資料Service.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteR分級資料(R分級資料Dto r分級資料, bool doSaveChanges = true)
		{
			this.R分級資料Service.Delete(r分級資料);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteR分級資料s(IEnumerable<R分級資料Dto> r分級資料s, bool doSaveChanges = true)
		{
			if (r分級資料s == null)
			{
				return;
			}
			foreach (R分級資料Dto instance in r分級資料s)
			{
				if (instance == null)
				{
					continue;
				}


				this.R分級資料Service.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveR分級資料(R分級資料Dto r分級資料, bool doSaveChanges = true)
		{
			switch (r分級資料.RowState)
			{
				case RowState.Insert:
					this.CreateR分級資料(r分級資料, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateR分級資料(r分級資料, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteR分級資料(r分級資料, doSaveChanges);
					break;
			}
		}


		public void SaveR分級資料s(IEnumerable<R分級資料Dto> r分級資料s, bool doSaveChanges = true)
		{
			if (r分級資料s == null)
			{
				return;
			}
			foreach (R分級資料Dto instance in r分級資料s)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveR分級資料(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion R分級資料 CRUD Operations


		#region REPORTDATATEMP CRUD Operations


		private IREPORTDATATEMPService reportdatatemp;
		public virtual IREPORTDATATEMPService REPORTDATATEMPService
		{
			get
			{
				if (this.reportdatatemp == null)
				{
					IREPORTDATATEMPAssembler assembler = new REPORTDATATEMPAssembler();
					IREPORTDATATEMPRepository repository = new REPORTDATATEMPRepository(this.UnitOfWork);
					this.reportdatatemp = new REPORTDATATEMPService(assembler, repository);
				}
				return this.reportdatatemp;
			}
		}


		public IQueryable<REPORTDATATEMP> REPORTDATATEMPs
		{
			get { return this.REPORTDATATEMPService.Repository.GetAll(); }
		}


		public IQueryable<REPORTDATATEMP> ReadREPORTDATATEMPs(Expression<Func<REPORTDATATEMP, bool>> filter, int dummy)
		{
			return this.REPORTDATATEMPService.Repository.Find(filter);
		}


		public IEnumerable<REPORTDATATEMPDto> ReadREPORTDATATEMPs()
		{
			return this.REPORTDATATEMPService.GetAll();
		}


		public IEnumerable<REPORTDATATEMPDto> ReadREPORTDATATEMPs(Expression<Func<REPORTDATATEMP, bool>> filter)
		{
			return this.REPORTDATATEMPService.Find(filter);
		}


		public IEnumerable<REPORTDATATEMPDto> ReadREPORTDATATEMPs(ISpecification<REPORTDATATEMP> specification)
		{
			return this.REPORTDATATEMPService.Find(specification.GetExpression());
		}


		public IEnumerable<REPORTDATATEMPDto> ReadREPORTDATATEMPs(IQueryable<REPORTDATATEMP> query)
		{
			return this.REPORTDATATEMPService.Assembler.Assemble(query);
		}


		public IEnumerable<REPORTDATATEMPDto> ReadREPORTDATATEMPs(string[] propertyToSearch, object[] keyWords)
		{
			return this.REPORTDATATEMPService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<REPORTDATATEMPDto> ReadREPORTDATATEMPs(object[] keyWords)
		{
			return this.REPORTDATATEMPService.Find(keyWords);
		}


		public IEnumerable<REPORTDATATEMPDto> ReadREPORTDATATEMPsPaged(int startIndex, int pageSize)
		{
			return this.REPORTDATATEMPService.Find(startIndex, pageSize);
		}


		public IEnumerable<REPORTDATATEMPDto> ReadREPORTDATATEMPsPaged(IQueryable<REPORTDATATEMP> source, int pageIndex, int pageSize)
		{
			return this.REPORTDATATEMPService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<REPORTDATATEMPDto> ReadREPORTDATATEMPsPaged(IQueryable<REPORTDATATEMP> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.REPORTDATATEMPService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<REPORTDATATEMPDto> ReadREPORTDATATEMPsFiltered(string sortExpression, string filterExpression)
		{
			return this.REPORTDATATEMPService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<REPORTDATATEMPDto> ReadREPORTDATATEMPsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.REPORTDATATEMPService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<REPORTDATATEMPDto> ReadREPORTDATATEMPsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<REPORTDATATEMP, bool>> filter)
		{
			return this.REPORTDATATEMPService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public REPORTDATATEMPDto ReadREPORTDATATEMPs(string dtoKey)
		{
			return this.REPORTDATATEMPService.GetByKey(dtoKey);
		}


		public int CountREPORTDATATEMPs()
		{
			return this.REPORTDATATEMPService.Count();
		}


		public int CountREPORTDATATEMPs(string filterExpression)
		{
			return this.REPORTDATATEMPService.Count(filterExpression);
		}


		public int CountREPORTDATATEMPs(Expression<Func<REPORTDATATEMP, bool>> filter)
		{
			return this.REPORTDATATEMPService.Count(filter);
		}


		public string CreateREPORTDATATEMP(REPORTDATATEMPDto reportdatatemp, bool doSaveChanges = true)
		{
			string key = this.REPORTDATATEMPService.Add(reportdatatemp);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateREPORTDATATEMP(REPORTDATATEMPDto reportdatatemp, bool doSaveChanges = true)
		{
			this.REPORTDATATEMPService.Update(reportdatatemp);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateREPORTDATATEMPs(IEnumerable<REPORTDATATEMPDto> reportdatatemps, bool doSaveChanges = true)
		{
			if (reportdatatemps == null)
			{
				return;
			}
			foreach (REPORTDATATEMPDto instance in reportdatatemps)
			{
				if (instance == null)
				{
					continue;
				}


				this.REPORTDATATEMPService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteREPORTDATATEMP(REPORTDATATEMPDto reportdatatemp, bool doSaveChanges = true)
		{
			this.REPORTDATATEMPService.Delete(reportdatatemp);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteREPORTDATATEMPs(IEnumerable<REPORTDATATEMPDto> reportdatatemps, bool doSaveChanges = true)
		{
			if (reportdatatemps == null)
			{
				return;
			}
			foreach (REPORTDATATEMPDto instance in reportdatatemps)
			{
				if (instance == null)
				{
					continue;
				}


				this.REPORTDATATEMPService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveREPORTDATATEMP(REPORTDATATEMPDto reportdatatemp, bool doSaveChanges = true)
		{
			switch (reportdatatemp.RowState)
			{
				case RowState.Insert:
					this.CreateREPORTDATATEMP(reportdatatemp, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateREPORTDATATEMP(reportdatatemp, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteREPORTDATATEMP(reportdatatemp, doSaveChanges);
					break;
			}
		}


		public void SaveREPORTDATATEMPs(IEnumerable<REPORTDATATEMPDto> reportdatatemps, bool doSaveChanges = true)
		{
			if (reportdatatemps == null)
			{
				return;
			}
			foreach (REPORTDATATEMPDto instance in reportdatatemps)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveREPORTDATATEMP(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion REPORTDATATEMP CRUD Operations


		#region RECORDTEMPLATE CRUD Operations


		private IRECORDTEMPLATEService recordtemplate;
		public virtual IRECORDTEMPLATEService RECORDTEMPLATEService
		{
			get
			{
				if (this.recordtemplate == null)
				{
					IRECORDTEMPLATEAssembler assembler = new RECORDTEMPLATEAssembler();
					IRECORDTEMPLATERepository repository = new RECORDTEMPLATERepository(this.UnitOfWork);
					this.recordtemplate = new RECORDTEMPLATEService(assembler, repository);
				}
				return this.recordtemplate;
			}
		}


		public IQueryable<RECORDTEMPLATE> RECORDTEMPLATEs
		{
			get { return this.RECORDTEMPLATEService.Repository.GetAll(); }
		}


		public IQueryable<RECORDTEMPLATE> ReadRECORDTEMPLATEs(Expression<Func<RECORDTEMPLATE, bool>> filter, int dummy)
		{
			return this.RECORDTEMPLATEService.Repository.Find(filter);
		}


		public IEnumerable<RECORDTEMPLATEDto> ReadRECORDTEMPLATEs()
		{
			return this.RECORDTEMPLATEService.GetAll();
		}


		public IEnumerable<RECORDTEMPLATEDto> ReadRECORDTEMPLATEs(Expression<Func<RECORDTEMPLATE, bool>> filter)
		{
			return this.RECORDTEMPLATEService.Find(filter);
		}


		public IEnumerable<RECORDTEMPLATEDto> ReadRECORDTEMPLATEs(ISpecification<RECORDTEMPLATE> specification)
		{
			return this.RECORDTEMPLATEService.Find(specification.GetExpression());
		}


		public IEnumerable<RECORDTEMPLATEDto> ReadRECORDTEMPLATEs(IQueryable<RECORDTEMPLATE> query)
		{
			return this.RECORDTEMPLATEService.Assembler.Assemble(query);
		}


		public IEnumerable<RECORDTEMPLATEDto> ReadRECORDTEMPLATEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.RECORDTEMPLATEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<RECORDTEMPLATEDto> ReadRECORDTEMPLATEs(object[] keyWords)
		{
			return this.RECORDTEMPLATEService.Find(keyWords);
		}


		public IEnumerable<RECORDTEMPLATEDto> ReadRECORDTEMPLATEsPaged(int startIndex, int pageSize)
		{
			return this.RECORDTEMPLATEService.Find(startIndex, pageSize);
		}


		public IEnumerable<RECORDTEMPLATEDto> ReadRECORDTEMPLATEsPaged(IQueryable<RECORDTEMPLATE> source, int pageIndex, int pageSize)
		{
			return this.RECORDTEMPLATEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<RECORDTEMPLATEDto> ReadRECORDTEMPLATEsPaged(IQueryable<RECORDTEMPLATE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.RECORDTEMPLATEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<RECORDTEMPLATEDto> ReadRECORDTEMPLATEsFiltered(string sortExpression, string filterExpression)
		{
			return this.RECORDTEMPLATEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<RECORDTEMPLATEDto> ReadRECORDTEMPLATEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.RECORDTEMPLATEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<RECORDTEMPLATEDto> ReadRECORDTEMPLATEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<RECORDTEMPLATE, bool>> filter)
		{
			return this.RECORDTEMPLATEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public RECORDTEMPLATEDto ReadRECORDTEMPLATEs(string dtoKey)
		{
			return this.RECORDTEMPLATEService.GetByKey(dtoKey);
		}


		public int CountRECORDTEMPLATEs()
		{
			return this.RECORDTEMPLATEService.Count();
		}


		public int CountRECORDTEMPLATEs(string filterExpression)
		{
			return this.RECORDTEMPLATEService.Count(filterExpression);
		}


		public int CountRECORDTEMPLATEs(Expression<Func<RECORDTEMPLATE, bool>> filter)
		{
			return this.RECORDTEMPLATEService.Count(filter);
		}


		public string CreateRECORDTEMPLATE(RECORDTEMPLATEDto recordtemplate, bool doSaveChanges = true)
		{
			string key = this.RECORDTEMPLATEService.Add(recordtemplate);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateRECORDTEMPLATE(RECORDTEMPLATEDto recordtemplate, bool doSaveChanges = true)
		{
			this.RECORDTEMPLATEService.Update(recordtemplate);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateRECORDTEMPLATEs(IEnumerable<RECORDTEMPLATEDto> recordtemplates, bool doSaveChanges = true)
		{
			if (recordtemplates == null)
			{
				return;
			}
			foreach (RECORDTEMPLATEDto instance in recordtemplates)
			{
				if (instance == null)
				{
					continue;
				}


				this.RECORDTEMPLATEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteRECORDTEMPLATE(RECORDTEMPLATEDto recordtemplate, bool doSaveChanges = true)
		{
			this.RECORDTEMPLATEService.Delete(recordtemplate);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteRECORDTEMPLATEs(IEnumerable<RECORDTEMPLATEDto> recordtemplates, bool doSaveChanges = true)
		{
			if (recordtemplates == null)
			{
				return;
			}
			foreach (RECORDTEMPLATEDto instance in recordtemplates)
			{
				if (instance == null)
				{
					continue;
				}


				this.RECORDTEMPLATEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveRECORDTEMPLATE(RECORDTEMPLATEDto recordtemplate, bool doSaveChanges = true)
		{
			switch (recordtemplate.RowState)
			{
				case RowState.Insert:
					this.CreateRECORDTEMPLATE(recordtemplate, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateRECORDTEMPLATE(recordtemplate, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteRECORDTEMPLATE(recordtemplate, doSaveChanges);
					break;
			}
		}


		public void SaveRECORDTEMPLATEs(IEnumerable<RECORDTEMPLATEDto> recordtemplates, bool doSaveChanges = true)
		{
			if (recordtemplates == null)
			{
				return;
			}
			foreach (RECORDTEMPLATEDto instance in recordtemplates)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveRECORDTEMPLATE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion RECORDTEMPLATE CRUD Operations


		#region RECORDINSVIEWER CRUD Operations


		private IRECORDINSVIEWERService recordinsviewer;
		public virtual IRECORDINSVIEWERService RECORDINSVIEWERService
		{
			get
			{
				if (this.recordinsviewer == null)
				{
					IRECORDINSVIEWERAssembler assembler = new RECORDINSVIEWERAssembler();
					IRECORDINSVIEWERRepository repository = new RECORDINSVIEWERRepository(this.UnitOfWork);
					this.recordinsviewer = new RECORDINSVIEWERService(assembler, repository);
				}
				return this.recordinsviewer;
			}
		}


		public IQueryable<RECORDINSVIEWER> RECORDINSVIEWERs
		{
			get { return this.RECORDINSVIEWERService.Repository.GetAll(); }
		}


		public IQueryable<RECORDINSVIEWER> ReadRECORDINSVIEWERs(Expression<Func<RECORDINSVIEWER, bool>> filter, int dummy)
		{
			return this.RECORDINSVIEWERService.Repository.Find(filter);
		}


		public IEnumerable<RECORDINSVIEWERDto> ReadRECORDINSVIEWERs()
		{
			return this.RECORDINSVIEWERService.GetAll();
		}


		public IEnumerable<RECORDINSVIEWERDto> ReadRECORDINSVIEWERs(Expression<Func<RECORDINSVIEWER, bool>> filter)
		{
			return this.RECORDINSVIEWERService.Find(filter);
		}


		public IEnumerable<RECORDINSVIEWERDto> ReadRECORDINSVIEWERs(ISpecification<RECORDINSVIEWER> specification)
		{
			return this.RECORDINSVIEWERService.Find(specification.GetExpression());
		}


		public IEnumerable<RECORDINSVIEWERDto> ReadRECORDINSVIEWERs(IQueryable<RECORDINSVIEWER> query)
		{
			return this.RECORDINSVIEWERService.Assembler.Assemble(query);
		}


		public IEnumerable<RECORDINSVIEWERDto> ReadRECORDINSVIEWERs(string[] propertyToSearch, object[] keyWords)
		{
			return this.RECORDINSVIEWERService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<RECORDINSVIEWERDto> ReadRECORDINSVIEWERs(object[] keyWords)
		{
			return this.RECORDINSVIEWERService.Find(keyWords);
		}


		public IEnumerable<RECORDINSVIEWERDto> ReadRECORDINSVIEWERsPaged(int startIndex, int pageSize)
		{
			return this.RECORDINSVIEWERService.Find(startIndex, pageSize);
		}


		public IEnumerable<RECORDINSVIEWERDto> ReadRECORDINSVIEWERsPaged(IQueryable<RECORDINSVIEWER> source, int pageIndex, int pageSize)
		{
			return this.RECORDINSVIEWERService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<RECORDINSVIEWERDto> ReadRECORDINSVIEWERsPaged(IQueryable<RECORDINSVIEWER> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.RECORDINSVIEWERService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<RECORDINSVIEWERDto> ReadRECORDINSVIEWERsFiltered(string sortExpression, string filterExpression)
		{
			return this.RECORDINSVIEWERService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<RECORDINSVIEWERDto> ReadRECORDINSVIEWERsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.RECORDINSVIEWERService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<RECORDINSVIEWERDto> ReadRECORDINSVIEWERsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<RECORDINSVIEWER, bool>> filter)
		{
			return this.RECORDINSVIEWERService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public RECORDINSVIEWERDto ReadRECORDINSVIEWERs(string dtoKey)
		{
			return this.RECORDINSVIEWERService.GetByKey(dtoKey);
		}


		public int CountRECORDINSVIEWERs()
		{
			return this.RECORDINSVIEWERService.Count();
		}


		public int CountRECORDINSVIEWERs(string filterExpression)
		{
			return this.RECORDINSVIEWERService.Count(filterExpression);
		}


		public int CountRECORDINSVIEWERs(Expression<Func<RECORDINSVIEWER, bool>> filter)
		{
			return this.RECORDINSVIEWERService.Count(filter);
		}


		public string CreateRECORDINSVIEWER(RECORDINSVIEWERDto recordinsviewer, bool doSaveChanges = true)
		{
			string key = this.RECORDINSVIEWERService.Add(recordinsviewer);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateRECORDINSVIEWER(RECORDINSVIEWERDto recordinsviewer, bool doSaveChanges = true)
		{
			this.RECORDINSVIEWERService.Update(recordinsviewer);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateRECORDINSVIEWERs(IEnumerable<RECORDINSVIEWERDto> recordinsviewers, bool doSaveChanges = true)
		{
			if (recordinsviewers == null)
			{
				return;
			}
			foreach (RECORDINSVIEWERDto instance in recordinsviewers)
			{
				if (instance == null)
				{
					continue;
				}


				this.RECORDINSVIEWERService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteRECORDINSVIEWER(RECORDINSVIEWERDto recordinsviewer, bool doSaveChanges = true)
		{
			this.RECORDINSVIEWERService.Delete(recordinsviewer);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteRECORDINSVIEWERs(IEnumerable<RECORDINSVIEWERDto> recordinsviewers, bool doSaveChanges = true)
		{
			if (recordinsviewers == null)
			{
				return;
			}
			foreach (RECORDINSVIEWERDto instance in recordinsviewers)
			{
				if (instance == null)
				{
					continue;
				}


				this.RECORDINSVIEWERService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveRECORDINSVIEWER(RECORDINSVIEWERDto recordinsviewer, bool doSaveChanges = true)
		{
			switch (recordinsviewer.RowState)
			{
				case RowState.Insert:
					this.CreateRECORDINSVIEWER(recordinsviewer, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateRECORDINSVIEWER(recordinsviewer, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteRECORDINSVIEWER(recordinsviewer, doSaveChanges);
					break;
			}
		}


		public void SaveRECORDINSVIEWERs(IEnumerable<RECORDINSVIEWERDto> recordinsviewers, bool doSaveChanges = true)
		{
			if (recordinsviewers == null)
			{
				return;
			}
			foreach (RECORDINSVIEWERDto instance in recordinsviewers)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveRECORDINSVIEWER(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion RECORDINSVIEWER CRUD Operations


		#region RECORDINSTANCEREJECTLOG CRUD Operations


		private IRECORDINSTANCEREJECTLOGService recordinstancerejectlog;
		public virtual IRECORDINSTANCEREJECTLOGService RECORDINSTANCEREJECTLOGService
		{
			get
			{
				if (this.recordinstancerejectlog == null)
				{
					IRECORDINSTANCEREJECTLOGAssembler assembler = new RECORDINSTANCEREJECTLOGAssembler();
					IRECORDINSTANCEREJECTLOGRepository repository = new RECORDINSTANCEREJECTLOGRepository(this.UnitOfWork);
					this.recordinstancerejectlog = new RECORDINSTANCEREJECTLOGService(assembler, repository);
				}
				return this.recordinstancerejectlog;
			}
		}


		public IQueryable<RECORDINSTANCEREJECTLOG> RECORDINSTANCEREJECTLOGs
		{
			get { return this.RECORDINSTANCEREJECTLOGService.Repository.GetAll(); }
		}


		public IQueryable<RECORDINSTANCEREJECTLOG> ReadRECORDINSTANCEREJECTLOGs(Expression<Func<RECORDINSTANCEREJECTLOG, bool>> filter, int dummy)
		{
			return this.RECORDINSTANCEREJECTLOGService.Repository.Find(filter);
		}


		public IEnumerable<RECORDINSTANCEREJECTLOGDto> ReadRECORDINSTANCEREJECTLOGs()
		{
			return this.RECORDINSTANCEREJECTLOGService.GetAll();
		}


		public IEnumerable<RECORDINSTANCEREJECTLOGDto> ReadRECORDINSTANCEREJECTLOGs(Expression<Func<RECORDINSTANCEREJECTLOG, bool>> filter)
		{
			return this.RECORDINSTANCEREJECTLOGService.Find(filter);
		}


		public IEnumerable<RECORDINSTANCEREJECTLOGDto> ReadRECORDINSTANCEREJECTLOGs(ISpecification<RECORDINSTANCEREJECTLOG> specification)
		{
			return this.RECORDINSTANCEREJECTLOGService.Find(specification.GetExpression());
		}


		public IEnumerable<RECORDINSTANCEREJECTLOGDto> ReadRECORDINSTANCEREJECTLOGs(IQueryable<RECORDINSTANCEREJECTLOG> query)
		{
			return this.RECORDINSTANCEREJECTLOGService.Assembler.Assemble(query);
		}


		public IEnumerable<RECORDINSTANCEREJECTLOGDto> ReadRECORDINSTANCEREJECTLOGs(string[] propertyToSearch, object[] keyWords)
		{
			return this.RECORDINSTANCEREJECTLOGService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<RECORDINSTANCEREJECTLOGDto> ReadRECORDINSTANCEREJECTLOGs(object[] keyWords)
		{
			return this.RECORDINSTANCEREJECTLOGService.Find(keyWords);
		}


		public IEnumerable<RECORDINSTANCEREJECTLOGDto> ReadRECORDINSTANCEREJECTLOGsPaged(int startIndex, int pageSize)
		{
			return this.RECORDINSTANCEREJECTLOGService.Find(startIndex, pageSize);
		}


		public IEnumerable<RECORDINSTANCEREJECTLOGDto> ReadRECORDINSTANCEREJECTLOGsPaged(IQueryable<RECORDINSTANCEREJECTLOG> source, int pageIndex, int pageSize)
		{
			return this.RECORDINSTANCEREJECTLOGService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<RECORDINSTANCEREJECTLOGDto> ReadRECORDINSTANCEREJECTLOGsPaged(IQueryable<RECORDINSTANCEREJECTLOG> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.RECORDINSTANCEREJECTLOGService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<RECORDINSTANCEREJECTLOGDto> ReadRECORDINSTANCEREJECTLOGsFiltered(string sortExpression, string filterExpression)
		{
			return this.RECORDINSTANCEREJECTLOGService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<RECORDINSTANCEREJECTLOGDto> ReadRECORDINSTANCEREJECTLOGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.RECORDINSTANCEREJECTLOGService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<RECORDINSTANCEREJECTLOGDto> ReadRECORDINSTANCEREJECTLOGsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<RECORDINSTANCEREJECTLOG, bool>> filter)
		{
			return this.RECORDINSTANCEREJECTLOGService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public RECORDINSTANCEREJECTLOGDto ReadRECORDINSTANCEREJECTLOGs(string dtoKey)
		{
			return this.RECORDINSTANCEREJECTLOGService.GetByKey(dtoKey);
		}


		public int CountRECORDINSTANCEREJECTLOGs()
		{
			return this.RECORDINSTANCEREJECTLOGService.Count();
		}


		public int CountRECORDINSTANCEREJECTLOGs(string filterExpression)
		{
			return this.RECORDINSTANCEREJECTLOGService.Count(filterExpression);
		}


		public int CountRECORDINSTANCEREJECTLOGs(Expression<Func<RECORDINSTANCEREJECTLOG, bool>> filter)
		{
			return this.RECORDINSTANCEREJECTLOGService.Count(filter);
		}


		public string CreateRECORDINSTANCEREJECTLOG(RECORDINSTANCEREJECTLOGDto recordinstancerejectlog, bool doSaveChanges = true)
		{
			string key = this.RECORDINSTANCEREJECTLOGService.Add(recordinstancerejectlog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateRECORDINSTANCEREJECTLOG(RECORDINSTANCEREJECTLOGDto recordinstancerejectlog, bool doSaveChanges = true)
		{
			this.RECORDINSTANCEREJECTLOGService.Update(recordinstancerejectlog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateRECORDINSTANCEREJECTLOGs(IEnumerable<RECORDINSTANCEREJECTLOGDto> recordinstancerejectlogs, bool doSaveChanges = true)
		{
			if (recordinstancerejectlogs == null)
			{
				return;
			}
			foreach (RECORDINSTANCEREJECTLOGDto instance in recordinstancerejectlogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.RECORDINSTANCEREJECTLOGService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteRECORDINSTANCEREJECTLOG(RECORDINSTANCEREJECTLOGDto recordinstancerejectlog, bool doSaveChanges = true)
		{
			this.RECORDINSTANCEREJECTLOGService.Delete(recordinstancerejectlog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteRECORDINSTANCEREJECTLOGs(IEnumerable<RECORDINSTANCEREJECTLOGDto> recordinstancerejectlogs, bool doSaveChanges = true)
		{
			if (recordinstancerejectlogs == null)
			{
				return;
			}
			foreach (RECORDINSTANCEREJECTLOGDto instance in recordinstancerejectlogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.RECORDINSTANCEREJECTLOGService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveRECORDINSTANCEREJECTLOG(RECORDINSTANCEREJECTLOGDto recordinstancerejectlog, bool doSaveChanges = true)
		{
			switch (recordinstancerejectlog.RowState)
			{
				case RowState.Insert:
					this.CreateRECORDINSTANCEREJECTLOG(recordinstancerejectlog, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateRECORDINSTANCEREJECTLOG(recordinstancerejectlog, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteRECORDINSTANCEREJECTLOG(recordinstancerejectlog, doSaveChanges);
					break;
			}
		}


		public void SaveRECORDINSTANCEREJECTLOGs(IEnumerable<RECORDINSTANCEREJECTLOGDto> recordinstancerejectlogs, bool doSaveChanges = true)
		{
			if (recordinstancerejectlogs == null)
			{
				return;
			}
			foreach (RECORDINSTANCEREJECTLOGDto instance in recordinstancerejectlogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveRECORDINSTANCEREJECTLOG(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion RECORDINSTANCEREJECTLOG CRUD Operations


		#region RECORDINSTANCE CRUD Operations


		private IRECORDINSTANCEService recordinstance;
		public virtual IRECORDINSTANCEService RECORDINSTANCEService
		{
			get
			{
				if (this.recordinstance == null)
				{
					IRECORDINSTANCEAssembler assembler = new RECORDINSTANCEAssembler();
					IRECORDINSTANCERepository repository = new RECORDINSTANCERepository(this.UnitOfWork);
					this.recordinstance = new RECORDINSTANCEService(assembler, repository);
				}
				return this.recordinstance;
			}
		}


		public IQueryable<RECORDINSTANCE> RECORDINSTANCEs
		{
			get { return this.RECORDINSTANCEService.Repository.GetAll(); }
		}


		public IQueryable<RECORDINSTANCE> ReadRECORDINSTANCEs(Expression<Func<RECORDINSTANCE, bool>> filter, int dummy)
		{
			return this.RECORDINSTANCEService.Repository.Find(filter);
		}


		public IEnumerable<RECORDINSTANCEDto> ReadRECORDINSTANCEs()
		{
			return this.RECORDINSTANCEService.GetAll();
		}


		public IEnumerable<RECORDINSTANCEDto> ReadRECORDINSTANCEs(Expression<Func<RECORDINSTANCE, bool>> filter)
		{
			return this.RECORDINSTANCEService.Find(filter);
		}


		public IEnumerable<RECORDINSTANCEDto> ReadRECORDINSTANCEs(ISpecification<RECORDINSTANCE> specification)
		{
			return this.RECORDINSTANCEService.Find(specification.GetExpression());
		}


		public IEnumerable<RECORDINSTANCEDto> ReadRECORDINSTANCEs(IQueryable<RECORDINSTANCE> query)
		{
			return this.RECORDINSTANCEService.Assembler.Assemble(query);
		}


		public IEnumerable<RECORDINSTANCEDto> ReadRECORDINSTANCEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.RECORDINSTANCEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<RECORDINSTANCEDto> ReadRECORDINSTANCEs(object[] keyWords)
		{
			return this.RECORDINSTANCEService.Find(keyWords);
		}


		public IEnumerable<RECORDINSTANCEDto> ReadRECORDINSTANCEsPaged(int startIndex, int pageSize)
		{
			return this.RECORDINSTANCEService.Find(startIndex, pageSize);
		}


		public IEnumerable<RECORDINSTANCEDto> ReadRECORDINSTANCEsPaged(IQueryable<RECORDINSTANCE> source, int pageIndex, int pageSize)
		{
			return this.RECORDINSTANCEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<RECORDINSTANCEDto> ReadRECORDINSTANCEsPaged(IQueryable<RECORDINSTANCE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.RECORDINSTANCEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<RECORDINSTANCEDto> ReadRECORDINSTANCEsFiltered(string sortExpression, string filterExpression)
		{
			return this.RECORDINSTANCEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<RECORDINSTANCEDto> ReadRECORDINSTANCEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.RECORDINSTANCEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<RECORDINSTANCEDto> ReadRECORDINSTANCEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<RECORDINSTANCE, bool>> filter)
		{
			return this.RECORDINSTANCEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public RECORDINSTANCEDto ReadRECORDINSTANCEs(string dtoKey)
		{
			return this.RECORDINSTANCEService.GetByKey(dtoKey);
		}


		public int CountRECORDINSTANCEs()
		{
			return this.RECORDINSTANCEService.Count();
		}


		public int CountRECORDINSTANCEs(string filterExpression)
		{
			return this.RECORDINSTANCEService.Count(filterExpression);
		}


		public int CountRECORDINSTANCEs(Expression<Func<RECORDINSTANCE, bool>> filter)
		{
			return this.RECORDINSTANCEService.Count(filter);
		}


		public string CreateRECORDINSTANCE(RECORDINSTANCEDto recordinstance, bool doSaveChanges = true)
		{
			string key = this.RECORDINSTANCEService.Add(recordinstance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateRECORDINSTANCE(RECORDINSTANCEDto recordinstance, bool doSaveChanges = true)
		{
			this.RECORDINSTANCEService.Update(recordinstance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateRECORDINSTANCEs(IEnumerable<RECORDINSTANCEDto> recordinstances, bool doSaveChanges = true)
		{
			if (recordinstances == null)
			{
				return;
			}
			foreach (RECORDINSTANCEDto instance in recordinstances)
			{
				if (instance == null)
				{
					continue;
				}


				this.RECORDINSTANCEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteRECORDINSTANCE(RECORDINSTANCEDto recordinstance, bool doSaveChanges = true)
		{
			this.RECORDINSTANCEService.Delete(recordinstance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteRECORDINSTANCEs(IEnumerable<RECORDINSTANCEDto> recordinstances, bool doSaveChanges = true)
		{
			if (recordinstances == null)
			{
				return;
			}
			foreach (RECORDINSTANCEDto instance in recordinstances)
			{
				if (instance == null)
				{
					continue;
				}


				this.RECORDINSTANCEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveRECORDINSTANCE(RECORDINSTANCEDto recordinstance, bool doSaveChanges = true)
		{
			switch (recordinstance.RowState)
			{
				case RowState.Insert:
					this.CreateRECORDINSTANCE(recordinstance, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateRECORDINSTANCE(recordinstance, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteRECORDINSTANCE(recordinstance, doSaveChanges);
					break;
			}
		}


		public void SaveRECORDINSTANCEs(IEnumerable<RECORDINSTANCEDto> recordinstances, bool doSaveChanges = true)
		{
			if (recordinstances == null)
			{
				return;
			}
			foreach (RECORDINSTANCEDto instance in recordinstances)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveRECORDINSTANCE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion RECORDINSTANCE CRUD Operations


		#region RECORDINSSIGNIN CRUD Operations


		private IRECORDINSSIGNINService recordinssignin;
		public virtual IRECORDINSSIGNINService RECORDINSSIGNINService
		{
			get
			{
				if (this.recordinssignin == null)
				{
					IRECORDINSSIGNINAssembler assembler = new RECORDINSSIGNINAssembler();
					IRECORDINSSIGNINRepository repository = new RECORDINSSIGNINRepository(this.UnitOfWork);
					this.recordinssignin = new RECORDINSSIGNINService(assembler, repository);
				}
				return this.recordinssignin;
			}
		}


		public IQueryable<RECORDINSSIGNIN> RECORDINSSIGNINs
		{
			get { return this.RECORDINSSIGNINService.Repository.GetAll(); }
		}


		public IQueryable<RECORDINSSIGNIN> ReadRECORDINSSIGNINs(Expression<Func<RECORDINSSIGNIN, bool>> filter, int dummy)
		{
			return this.RECORDINSSIGNINService.Repository.Find(filter);
		}


		public IEnumerable<RECORDINSSIGNINDto> ReadRECORDINSSIGNINs()
		{
			return this.RECORDINSSIGNINService.GetAll();
		}


		public IEnumerable<RECORDINSSIGNINDto> ReadRECORDINSSIGNINs(Expression<Func<RECORDINSSIGNIN, bool>> filter)
		{
			return this.RECORDINSSIGNINService.Find(filter);
		}


		public IEnumerable<RECORDINSSIGNINDto> ReadRECORDINSSIGNINs(ISpecification<RECORDINSSIGNIN> specification)
		{
			return this.RECORDINSSIGNINService.Find(specification.GetExpression());
		}


		public IEnumerable<RECORDINSSIGNINDto> ReadRECORDINSSIGNINs(IQueryable<RECORDINSSIGNIN> query)
		{
			return this.RECORDINSSIGNINService.Assembler.Assemble(query);
		}


		public IEnumerable<RECORDINSSIGNINDto> ReadRECORDINSSIGNINs(string[] propertyToSearch, object[] keyWords)
		{
			return this.RECORDINSSIGNINService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<RECORDINSSIGNINDto> ReadRECORDINSSIGNINs(object[] keyWords)
		{
			return this.RECORDINSSIGNINService.Find(keyWords);
		}


		public IEnumerable<RECORDINSSIGNINDto> ReadRECORDINSSIGNINsPaged(int startIndex, int pageSize)
		{
			return this.RECORDINSSIGNINService.Find(startIndex, pageSize);
		}


		public IEnumerable<RECORDINSSIGNINDto> ReadRECORDINSSIGNINsPaged(IQueryable<RECORDINSSIGNIN> source, int pageIndex, int pageSize)
		{
			return this.RECORDINSSIGNINService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<RECORDINSSIGNINDto> ReadRECORDINSSIGNINsPaged(IQueryable<RECORDINSSIGNIN> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.RECORDINSSIGNINService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<RECORDINSSIGNINDto> ReadRECORDINSSIGNINsFiltered(string sortExpression, string filterExpression)
		{
			return this.RECORDINSSIGNINService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<RECORDINSSIGNINDto> ReadRECORDINSSIGNINsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.RECORDINSSIGNINService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<RECORDINSSIGNINDto> ReadRECORDINSSIGNINsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<RECORDINSSIGNIN, bool>> filter)
		{
			return this.RECORDINSSIGNINService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public RECORDINSSIGNINDto ReadRECORDINSSIGNINs(string dtoKey)
		{
			return this.RECORDINSSIGNINService.GetByKey(dtoKey);
		}


		public int CountRECORDINSSIGNINs()
		{
			return this.RECORDINSSIGNINService.Count();
		}


		public int CountRECORDINSSIGNINs(string filterExpression)
		{
			return this.RECORDINSSIGNINService.Count(filterExpression);
		}


		public int CountRECORDINSSIGNINs(Expression<Func<RECORDINSSIGNIN, bool>> filter)
		{
			return this.RECORDINSSIGNINService.Count(filter);
		}


		public string CreateRECORDINSSIGNIN(RECORDINSSIGNINDto recordinssignin, bool doSaveChanges = true)
		{
			string key = this.RECORDINSSIGNINService.Add(recordinssignin);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateRECORDINSSIGNIN(RECORDINSSIGNINDto recordinssignin, bool doSaveChanges = true)
		{
			this.RECORDINSSIGNINService.Update(recordinssignin);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateRECORDINSSIGNINs(IEnumerable<RECORDINSSIGNINDto> recordinssignins, bool doSaveChanges = true)
		{
			if (recordinssignins == null)
			{
				return;
			}
			foreach (RECORDINSSIGNINDto instance in recordinssignins)
			{
				if (instance == null)
				{
					continue;
				}


				this.RECORDINSSIGNINService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteRECORDINSSIGNIN(RECORDINSSIGNINDto recordinssignin, bool doSaveChanges = true)
		{
			this.RECORDINSSIGNINService.Delete(recordinssignin);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteRECORDINSSIGNINs(IEnumerable<RECORDINSSIGNINDto> recordinssignins, bool doSaveChanges = true)
		{
			if (recordinssignins == null)
			{
				return;
			}
			foreach (RECORDINSSIGNINDto instance in recordinssignins)
			{
				if (instance == null)
				{
					continue;
				}


				this.RECORDINSSIGNINService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveRECORDINSSIGNIN(RECORDINSSIGNINDto recordinssignin, bool doSaveChanges = true)
		{
			switch (recordinssignin.RowState)
			{
				case RowState.Insert:
					this.CreateRECORDINSSIGNIN(recordinssignin, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateRECORDINSSIGNIN(recordinssignin, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteRECORDINSSIGNIN(recordinssignin, doSaveChanges);
					break;
			}
		}


		public void SaveRECORDINSSIGNINs(IEnumerable<RECORDINSSIGNINDto> recordinssignins, bool doSaveChanges = true)
		{
			if (recordinssignins == null)
			{
				return;
			}
			foreach (RECORDINSSIGNINDto instance in recordinssignins)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveRECORDINSSIGNIN(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion RECORDINSSIGNIN CRUD Operations


		#region RECORDINSREADER CRUD Operations


		private IRECORDINSREADERService recordinsreader;
		public virtual IRECORDINSREADERService RECORDINSREADERService
		{
			get
			{
				if (this.recordinsreader == null)
				{
					IRECORDINSREADERAssembler assembler = new RECORDINSREADERAssembler();
					IRECORDINSREADERRepository repository = new RECORDINSREADERRepository(this.UnitOfWork);
					this.recordinsreader = new RECORDINSREADERService(assembler, repository);
				}
				return this.recordinsreader;
			}
		}


		public IQueryable<RECORDINSREADER> RECORDINSREADERs
		{
			get { return this.RECORDINSREADERService.Repository.GetAll(); }
		}


		public IQueryable<RECORDINSREADER> ReadRECORDINSREADERs(Expression<Func<RECORDINSREADER, bool>> filter, int dummy)
		{
			return this.RECORDINSREADERService.Repository.Find(filter);
		}


		public IEnumerable<RECORDINSREADERDto> ReadRECORDINSREADERs()
		{
			return this.RECORDINSREADERService.GetAll();
		}


		public IEnumerable<RECORDINSREADERDto> ReadRECORDINSREADERs(Expression<Func<RECORDINSREADER, bool>> filter)
		{
			return this.RECORDINSREADERService.Find(filter);
		}


		public IEnumerable<RECORDINSREADERDto> ReadRECORDINSREADERs(ISpecification<RECORDINSREADER> specification)
		{
			return this.RECORDINSREADERService.Find(specification.GetExpression());
		}


		public IEnumerable<RECORDINSREADERDto> ReadRECORDINSREADERs(IQueryable<RECORDINSREADER> query)
		{
			return this.RECORDINSREADERService.Assembler.Assemble(query);
		}


		public IEnumerable<RECORDINSREADERDto> ReadRECORDINSREADERs(string[] propertyToSearch, object[] keyWords)
		{
			return this.RECORDINSREADERService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<RECORDINSREADERDto> ReadRECORDINSREADERs(object[] keyWords)
		{
			return this.RECORDINSREADERService.Find(keyWords);
		}


		public IEnumerable<RECORDINSREADERDto> ReadRECORDINSREADERsPaged(int startIndex, int pageSize)
		{
			return this.RECORDINSREADERService.Find(startIndex, pageSize);
		}


		public IEnumerable<RECORDINSREADERDto> ReadRECORDINSREADERsPaged(IQueryable<RECORDINSREADER> source, int pageIndex, int pageSize)
		{
			return this.RECORDINSREADERService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<RECORDINSREADERDto> ReadRECORDINSREADERsPaged(IQueryable<RECORDINSREADER> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.RECORDINSREADERService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<RECORDINSREADERDto> ReadRECORDINSREADERsFiltered(string sortExpression, string filterExpression)
		{
			return this.RECORDINSREADERService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<RECORDINSREADERDto> ReadRECORDINSREADERsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.RECORDINSREADERService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<RECORDINSREADERDto> ReadRECORDINSREADERsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<RECORDINSREADER, bool>> filter)
		{
			return this.RECORDINSREADERService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public RECORDINSREADERDto ReadRECORDINSREADERs(string dtoKey)
		{
			return this.RECORDINSREADERService.GetByKey(dtoKey);
		}


		public int CountRECORDINSREADERs()
		{
			return this.RECORDINSREADERService.Count();
		}


		public int CountRECORDINSREADERs(string filterExpression)
		{
			return this.RECORDINSREADERService.Count(filterExpression);
		}


		public int CountRECORDINSREADERs(Expression<Func<RECORDINSREADER, bool>> filter)
		{
			return this.RECORDINSREADERService.Count(filter);
		}


		public string CreateRECORDINSREADER(RECORDINSREADERDto recordinsreader, bool doSaveChanges = true)
		{
			string key = this.RECORDINSREADERService.Add(recordinsreader);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateRECORDINSREADER(RECORDINSREADERDto recordinsreader, bool doSaveChanges = true)
		{
			this.RECORDINSREADERService.Update(recordinsreader);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateRECORDINSREADERs(IEnumerable<RECORDINSREADERDto> recordinsreaders, bool doSaveChanges = true)
		{
			if (recordinsreaders == null)
			{
				return;
			}
			foreach (RECORDINSREADERDto instance in recordinsreaders)
			{
				if (instance == null)
				{
					continue;
				}


				this.RECORDINSREADERService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteRECORDINSREADER(RECORDINSREADERDto recordinsreader, bool doSaveChanges = true)
		{
			this.RECORDINSREADERService.Delete(recordinsreader);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteRECORDINSREADERs(IEnumerable<RECORDINSREADERDto> recordinsreaders, bool doSaveChanges = true)
		{
			if (recordinsreaders == null)
			{
				return;
			}
			foreach (RECORDINSREADERDto instance in recordinsreaders)
			{
				if (instance == null)
				{
					continue;
				}


				this.RECORDINSREADERService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveRECORDINSREADER(RECORDINSREADERDto recordinsreader, bool doSaveChanges = true)
		{
			switch (recordinsreader.RowState)
			{
				case RowState.Insert:
					this.CreateRECORDINSREADER(recordinsreader, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateRECORDINSREADER(recordinsreader, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteRECORDINSREADER(recordinsreader, doSaveChanges);
					break;
			}
		}


		public void SaveRECORDINSREADERs(IEnumerable<RECORDINSREADERDto> recordinsreaders, bool doSaveChanges = true)
		{
			if (recordinsreaders == null)
			{
				return;
			}
			foreach (RECORDINSREADERDto instance in recordinsreaders)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveRECORDINSREADER(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion RECORDINSREADER CRUD Operations


		#region RECORDINSDET CRUD Operations


		private IRECORDINSDETService recordinsdet;
		public virtual IRECORDINSDETService RECORDINSDETService
		{
			get
			{
				if (this.recordinsdet == null)
				{
					IRECORDINSDETAssembler assembler = new RECORDINSDETAssembler();
					IRECORDINSDETRepository repository = new RECORDINSDETRepository(this.UnitOfWork);
					this.recordinsdet = new RECORDINSDETService(assembler, repository);
				}
				return this.recordinsdet;
			}
		}


		public IQueryable<RECORDINSDET> RECORDINSDETs
		{
			get { return this.RECORDINSDETService.Repository.GetAll(); }
		}


		public IQueryable<RECORDINSDET> ReadRECORDINSDETs(Expression<Func<RECORDINSDET, bool>> filter, int dummy)
		{
			return this.RECORDINSDETService.Repository.Find(filter);
		}


		public IEnumerable<RECORDINSDETDto> ReadRECORDINSDETs()
		{
			return this.RECORDINSDETService.GetAll();
		}


		public IEnumerable<RECORDINSDETDto> ReadRECORDINSDETs(Expression<Func<RECORDINSDET, bool>> filter)
		{
			return this.RECORDINSDETService.Find(filter);
		}


		public IEnumerable<RECORDINSDETDto> ReadRECORDINSDETs(ISpecification<RECORDINSDET> specification)
		{
			return this.RECORDINSDETService.Find(specification.GetExpression());
		}


		public IEnumerable<RECORDINSDETDto> ReadRECORDINSDETs(IQueryable<RECORDINSDET> query)
		{
			return this.RECORDINSDETService.Assembler.Assemble(query);
		}


		public IEnumerable<RECORDINSDETDto> ReadRECORDINSDETs(string[] propertyToSearch, object[] keyWords)
		{
			return this.RECORDINSDETService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<RECORDINSDETDto> ReadRECORDINSDETs(object[] keyWords)
		{
			return this.RECORDINSDETService.Find(keyWords);
		}


		public IEnumerable<RECORDINSDETDto> ReadRECORDINSDETsPaged(int startIndex, int pageSize)
		{
			return this.RECORDINSDETService.Find(startIndex, pageSize);
		}


		public IEnumerable<RECORDINSDETDto> ReadRECORDINSDETsPaged(IQueryable<RECORDINSDET> source, int pageIndex, int pageSize)
		{
			return this.RECORDINSDETService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<RECORDINSDETDto> ReadRECORDINSDETsPaged(IQueryable<RECORDINSDET> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.RECORDINSDETService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<RECORDINSDETDto> ReadRECORDINSDETsFiltered(string sortExpression, string filterExpression)
		{
			return this.RECORDINSDETService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<RECORDINSDETDto> ReadRECORDINSDETsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.RECORDINSDETService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<RECORDINSDETDto> ReadRECORDINSDETsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<RECORDINSDET, bool>> filter)
		{
			return this.RECORDINSDETService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public RECORDINSDETDto ReadRECORDINSDETs(string dtoKey)
		{
			return this.RECORDINSDETService.GetByKey(dtoKey);
		}


		public int CountRECORDINSDETs()
		{
			return this.RECORDINSDETService.Count();
		}


		public int CountRECORDINSDETs(string filterExpression)
		{
			return this.RECORDINSDETService.Count(filterExpression);
		}


		public int CountRECORDINSDETs(Expression<Func<RECORDINSDET, bool>> filter)
		{
			return this.RECORDINSDETService.Count(filter);
		}


		public string CreateRECORDINSDET(RECORDINSDETDto recordinsdet, bool doSaveChanges = true)
		{
			string key = this.RECORDINSDETService.Add(recordinsdet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateRECORDINSDET(RECORDINSDETDto recordinsdet, bool doSaveChanges = true)
		{
			this.RECORDINSDETService.Update(recordinsdet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateRECORDINSDETs(IEnumerable<RECORDINSDETDto> recordinsdets, bool doSaveChanges = true)
		{
			if (recordinsdets == null)
			{
				return;
			}
			foreach (RECORDINSDETDto instance in recordinsdets)
			{
				if (instance == null)
				{
					continue;
				}


				this.RECORDINSDETService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteRECORDINSDET(RECORDINSDETDto recordinsdet, bool doSaveChanges = true)
		{
			this.RECORDINSDETService.Delete(recordinsdet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteRECORDINSDETs(IEnumerable<RECORDINSDETDto> recordinsdets, bool doSaveChanges = true)
		{
			if (recordinsdets == null)
			{
				return;
			}
			foreach (RECORDINSDETDto instance in recordinsdets)
			{
				if (instance == null)
				{
					continue;
				}


				this.RECORDINSDETService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveRECORDINSDET(RECORDINSDETDto recordinsdet, bool doSaveChanges = true)
		{
			switch (recordinsdet.RowState)
			{
				case RowState.Insert:
					this.CreateRECORDINSDET(recordinsdet, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateRECORDINSDET(recordinsdet, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteRECORDINSDET(recordinsdet, doSaveChanges);
					break;
			}
		}


		public void SaveRECORDINSDETs(IEnumerable<RECORDINSDETDto> recordinsdets, bool doSaveChanges = true)
		{
			if (recordinsdets == null)
			{
				return;
			}
			foreach (RECORDINSDETDto instance in recordinsdets)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveRECORDINSDET(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion RECORDINSDET CRUD Operations


		#region RECORDEDUACTREF CRUD Operations


		private IRECORDEDUACTREFService recordeduactref;
		public virtual IRECORDEDUACTREFService RECORDEDUACTREFService
		{
			get
			{
				if (this.recordeduactref == null)
				{
					IRECORDEDUACTREFAssembler assembler = new RECORDEDUACTREFAssembler();
					IRECORDEDUACTREFRepository repository = new RECORDEDUACTREFRepository(this.UnitOfWork);
					this.recordeduactref = new RECORDEDUACTREFService(assembler, repository);
				}
				return this.recordeduactref;
			}
		}


		public IQueryable<RECORDEDUACTREF> RECORDEDUACTREFs
		{
			get { return this.RECORDEDUACTREFService.Repository.GetAll(); }
		}


		public IQueryable<RECORDEDUACTREF> ReadRECORDEDUACTREFs(Expression<Func<RECORDEDUACTREF, bool>> filter, int dummy)
		{
			return this.RECORDEDUACTREFService.Repository.Find(filter);
		}


		public IEnumerable<RECORDEDUACTREFDto> ReadRECORDEDUACTREFs()
		{
			return this.RECORDEDUACTREFService.GetAll();
		}


		public IEnumerable<RECORDEDUACTREFDto> ReadRECORDEDUACTREFs(Expression<Func<RECORDEDUACTREF, bool>> filter)
		{
			return this.RECORDEDUACTREFService.Find(filter);
		}


		public IEnumerable<RECORDEDUACTREFDto> ReadRECORDEDUACTREFs(ISpecification<RECORDEDUACTREF> specification)
		{
			return this.RECORDEDUACTREFService.Find(specification.GetExpression());
		}


		public IEnumerable<RECORDEDUACTREFDto> ReadRECORDEDUACTREFs(IQueryable<RECORDEDUACTREF> query)
		{
			return this.RECORDEDUACTREFService.Assembler.Assemble(query);
		}


		public IEnumerable<RECORDEDUACTREFDto> ReadRECORDEDUACTREFs(string[] propertyToSearch, object[] keyWords)
		{
			return this.RECORDEDUACTREFService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<RECORDEDUACTREFDto> ReadRECORDEDUACTREFs(object[] keyWords)
		{
			return this.RECORDEDUACTREFService.Find(keyWords);
		}


		public IEnumerable<RECORDEDUACTREFDto> ReadRECORDEDUACTREFsPaged(int startIndex, int pageSize)
		{
			return this.RECORDEDUACTREFService.Find(startIndex, pageSize);
		}


		public IEnumerable<RECORDEDUACTREFDto> ReadRECORDEDUACTREFsPaged(IQueryable<RECORDEDUACTREF> source, int pageIndex, int pageSize)
		{
			return this.RECORDEDUACTREFService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<RECORDEDUACTREFDto> ReadRECORDEDUACTREFsPaged(IQueryable<RECORDEDUACTREF> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.RECORDEDUACTREFService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<RECORDEDUACTREFDto> ReadRECORDEDUACTREFsFiltered(string sortExpression, string filterExpression)
		{
			return this.RECORDEDUACTREFService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<RECORDEDUACTREFDto> ReadRECORDEDUACTREFsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.RECORDEDUACTREFService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<RECORDEDUACTREFDto> ReadRECORDEDUACTREFsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<RECORDEDUACTREF, bool>> filter)
		{
			return this.RECORDEDUACTREFService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public RECORDEDUACTREFDto ReadRECORDEDUACTREFs(string dtoKey)
		{
			return this.RECORDEDUACTREFService.GetByKey(dtoKey);
		}


		public int CountRECORDEDUACTREFs()
		{
			return this.RECORDEDUACTREFService.Count();
		}


		public int CountRECORDEDUACTREFs(string filterExpression)
		{
			return this.RECORDEDUACTREFService.Count(filterExpression);
		}


		public int CountRECORDEDUACTREFs(Expression<Func<RECORDEDUACTREF, bool>> filter)
		{
			return this.RECORDEDUACTREFService.Count(filter);
		}


		public string CreateRECORDEDUACTREF(RECORDEDUACTREFDto recordeduactref, bool doSaveChanges = true)
		{
			string key = this.RECORDEDUACTREFService.Add(recordeduactref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateRECORDEDUACTREF(RECORDEDUACTREFDto recordeduactref, bool doSaveChanges = true)
		{
			this.RECORDEDUACTREFService.Update(recordeduactref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateRECORDEDUACTREFs(IEnumerable<RECORDEDUACTREFDto> recordeduactrefs, bool doSaveChanges = true)
		{
			if (recordeduactrefs == null)
			{
				return;
			}
			foreach (RECORDEDUACTREFDto instance in recordeduactrefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.RECORDEDUACTREFService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteRECORDEDUACTREF(RECORDEDUACTREFDto recordeduactref, bool doSaveChanges = true)
		{
			this.RECORDEDUACTREFService.Delete(recordeduactref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteRECORDEDUACTREFs(IEnumerable<RECORDEDUACTREFDto> recordeduactrefs, bool doSaveChanges = true)
		{
			if (recordeduactrefs == null)
			{
				return;
			}
			foreach (RECORDEDUACTREFDto instance in recordeduactrefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.RECORDEDUACTREFService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveRECORDEDUACTREF(RECORDEDUACTREFDto recordeduactref, bool doSaveChanges = true)
		{
			switch (recordeduactref.RowState)
			{
				case RowState.Insert:
					this.CreateRECORDEDUACTREF(recordeduactref, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateRECORDEDUACTREF(recordeduactref, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteRECORDEDUACTREF(recordeduactref, doSaveChanges);
					break;
			}
		}


		public void SaveRECORDEDUACTREFs(IEnumerable<RECORDEDUACTREFDto> recordeduactrefs, bool doSaveChanges = true)
		{
			if (recordeduactrefs == null)
			{
				return;
			}
			foreach (RECORDEDUACTREFDto instance in recordeduactrefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveRECORDEDUACTREF(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion RECORDEDUACTREF CRUD Operations


		#region PSNOPD CRUD Operations


		private IPSNOPDService psnopd;
		public virtual IPSNOPDService PSNOPDService
		{
			get
			{
				if (this.psnopd == null)
				{
					IPSNOPDAssembler assembler = new PSNOPDAssembler();
					IPSNOPDRepository repository = new PSNOPDRepository(this.UnitOfWork);
					this.psnopd = new PSNOPDService(assembler, repository);
				}
				return this.psnopd;
			}
		}


		public IQueryable<PSNOPD> PSNOPDs
		{
			get { return this.PSNOPDService.Repository.GetAll(); }
		}


		public IQueryable<PSNOPD> ReadPSNOPDs(Expression<Func<PSNOPD, bool>> filter, int dummy)
		{
			return this.PSNOPDService.Repository.Find(filter);
		}


		public IEnumerable<PSNOPDDto> ReadPSNOPDs()
		{
			return this.PSNOPDService.GetAll();
		}


		public IEnumerable<PSNOPDDto> ReadPSNOPDs(Expression<Func<PSNOPD, bool>> filter)
		{
			return this.PSNOPDService.Find(filter);
		}


		public IEnumerable<PSNOPDDto> ReadPSNOPDs(ISpecification<PSNOPD> specification)
		{
			return this.PSNOPDService.Find(specification.GetExpression());
		}


		public IEnumerable<PSNOPDDto> ReadPSNOPDs(IQueryable<PSNOPD> query)
		{
			return this.PSNOPDService.Assembler.Assemble(query);
		}


		public IEnumerable<PSNOPDDto> ReadPSNOPDs(string[] propertyToSearch, object[] keyWords)
		{
			return this.PSNOPDService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<PSNOPDDto> ReadPSNOPDs(object[] keyWords)
		{
			return this.PSNOPDService.Find(keyWords);
		}


		public IEnumerable<PSNOPDDto> ReadPSNOPDsPaged(int startIndex, int pageSize)
		{
			return this.PSNOPDService.Find(startIndex, pageSize);
		}


		public IEnumerable<PSNOPDDto> ReadPSNOPDsPaged(IQueryable<PSNOPD> source, int pageIndex, int pageSize)
		{
			return this.PSNOPDService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<PSNOPDDto> ReadPSNOPDsPaged(IQueryable<PSNOPD> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.PSNOPDService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<PSNOPDDto> ReadPSNOPDsFiltered(string sortExpression, string filterExpression)
		{
			return this.PSNOPDService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<PSNOPDDto> ReadPSNOPDsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.PSNOPDService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<PSNOPDDto> ReadPSNOPDsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<PSNOPD, bool>> filter)
		{
			return this.PSNOPDService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public PSNOPDDto ReadPSNOPDs(string dtoKey)
		{
			return this.PSNOPDService.GetByKey(dtoKey);
		}


		public int CountPSNOPDs()
		{
			return this.PSNOPDService.Count();
		}


		public int CountPSNOPDs(string filterExpression)
		{
			return this.PSNOPDService.Count(filterExpression);
		}


		public int CountPSNOPDs(Expression<Func<PSNOPD, bool>> filter)
		{
			return this.PSNOPDService.Count(filter);
		}


		public string CreatePSNOPD(PSNOPDDto psnopd, bool doSaveChanges = true)
		{
			string key = this.PSNOPDService.Add(psnopd);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdatePSNOPD(PSNOPDDto psnopd, bool doSaveChanges = true)
		{
			this.PSNOPDService.Update(psnopd);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdatePSNOPDs(IEnumerable<PSNOPDDto> psnopds, bool doSaveChanges = true)
		{
			if (psnopds == null)
			{
				return;
			}
			foreach (PSNOPDDto instance in psnopds)
			{
				if (instance == null)
				{
					continue;
				}


				this.PSNOPDService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeletePSNOPD(PSNOPDDto psnopd, bool doSaveChanges = true)
		{
			this.PSNOPDService.Delete(psnopd);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeletePSNOPDs(IEnumerable<PSNOPDDto> psnopds, bool doSaveChanges = true)
		{
			if (psnopds == null)
			{
				return;
			}
			foreach (PSNOPDDto instance in psnopds)
			{
				if (instance == null)
				{
					continue;
				}


				this.PSNOPDService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SavePSNOPD(PSNOPDDto psnopd, bool doSaveChanges = true)
		{
			switch (psnopd.RowState)
			{
				case RowState.Insert:
					this.CreatePSNOPD(psnopd, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdatePSNOPD(psnopd, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeletePSNOPD(psnopd, doSaveChanges);
					break;
			}
		}


		public void SavePSNOPDs(IEnumerable<PSNOPDDto> psnopds, bool doSaveChanges = true)
		{
			if (psnopds == null)
			{
				return;
			}
			foreach (PSNOPDDto instance in psnopds)
			{
				if (instance == null)
				{
					continue;
				}


				this.SavePSNOPD(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion PSNOPD CRUD Operations


		#region PASSPORTSTUDENTAPPLICATIONITEMFAILLOG CRUD Operations


		private IPASSPORTSTUDENTAPPLICATIONITEMFAILLOGService passportstudentapplicationitemfaillog;
		public virtual IPASSPORTSTUDENTAPPLICATIONITEMFAILLOGService PASSPORTSTUDENTAPPLICATIONITEMFAILLOGService
		{
			get
			{
				if (this.passportstudentapplicationitemfaillog == null)
				{
					IPASSPORTSTUDENTAPPLICATIONITEMFAILLOGAssembler assembler = new PASSPORTSTUDENTAPPLICATIONITEMFAILLOGAssembler();
					IPASSPORTSTUDENTAPPLICATIONITEMFAILLOGRepository repository = new PASSPORTSTUDENTAPPLICATIONITEMFAILLOGRepository(this.UnitOfWork);
					this.passportstudentapplicationitemfaillog = new PASSPORTSTUDENTAPPLICATIONITEMFAILLOGService(assembler, repository);
				}
				return this.passportstudentapplicationitemfaillog;
			}
		}


		public IQueryable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOG> PASSPORTSTUDENTAPPLICATIONITEMFAILLOGs
		{
			get { return this.PASSPORTSTUDENTAPPLICATIONITEMFAILLOGService.Repository.GetAll(); }
		}


		public IQueryable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOG> ReadPASSPORTSTUDENTAPPLICATIONITEMFAILLOGs(Expression<Func<PASSPORTSTUDENTAPPLICATIONITEMFAILLOG, bool>> filter, int dummy)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEMFAILLOGService.Repository.Find(filter);
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto> ReadPASSPORTSTUDENTAPPLICATIONITEMFAILLOGs()
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEMFAILLOGService.GetAll();
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto> ReadPASSPORTSTUDENTAPPLICATIONITEMFAILLOGs(Expression<Func<PASSPORTSTUDENTAPPLICATIONITEMFAILLOG, bool>> filter)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEMFAILLOGService.Find(filter);
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto> ReadPASSPORTSTUDENTAPPLICATIONITEMFAILLOGs(ISpecification<PASSPORTSTUDENTAPPLICATIONITEMFAILLOG> specification)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEMFAILLOGService.Find(specification.GetExpression());
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto> ReadPASSPORTSTUDENTAPPLICATIONITEMFAILLOGs(IQueryable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOG> query)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEMFAILLOGService.Assembler.Assemble(query);
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto> ReadPASSPORTSTUDENTAPPLICATIONITEMFAILLOGs(string[] propertyToSearch, object[] keyWords)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEMFAILLOGService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto> ReadPASSPORTSTUDENTAPPLICATIONITEMFAILLOGs(object[] keyWords)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEMFAILLOGService.Find(keyWords);
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto> ReadPASSPORTSTUDENTAPPLICATIONITEMFAILLOGsPaged(int startIndex, int pageSize)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEMFAILLOGService.Find(startIndex, pageSize);
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto> ReadPASSPORTSTUDENTAPPLICATIONITEMFAILLOGsPaged(IQueryable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOG> source, int pageIndex, int pageSize)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEMFAILLOGService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto> ReadPASSPORTSTUDENTAPPLICATIONITEMFAILLOGsPaged(IQueryable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOG> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.PASSPORTSTUDENTAPPLICATIONITEMFAILLOGService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto> ReadPASSPORTSTUDENTAPPLICATIONITEMFAILLOGsFiltered(string sortExpression, string filterExpression)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEMFAILLOGService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto> ReadPASSPORTSTUDENTAPPLICATIONITEMFAILLOGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEMFAILLOGService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto> ReadPASSPORTSTUDENTAPPLICATIONITEMFAILLOGsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<PASSPORTSTUDENTAPPLICATIONITEMFAILLOG, bool>> filter)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEMFAILLOGService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto ReadPASSPORTSTUDENTAPPLICATIONITEMFAILLOGs(string dtoKey)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEMFAILLOGService.GetByKey(dtoKey);
		}


		public int CountPASSPORTSTUDENTAPPLICATIONITEMFAILLOGs()
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEMFAILLOGService.Count();
		}


		public int CountPASSPORTSTUDENTAPPLICATIONITEMFAILLOGs(string filterExpression)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEMFAILLOGService.Count(filterExpression);
		}


		public int CountPASSPORTSTUDENTAPPLICATIONITEMFAILLOGs(Expression<Func<PASSPORTSTUDENTAPPLICATIONITEMFAILLOG, bool>> filter)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEMFAILLOGService.Count(filter);
		}


		public string CreatePASSPORTSTUDENTAPPLICATIONITEMFAILLOG(PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto passportstudentapplicationitemfaillog, bool doSaveChanges = true)
		{
			string key = this.PASSPORTSTUDENTAPPLICATIONITEMFAILLOGService.Add(passportstudentapplicationitemfaillog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdatePASSPORTSTUDENTAPPLICATIONITEMFAILLOG(PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto passportstudentapplicationitemfaillog, bool doSaveChanges = true)
		{
			this.PASSPORTSTUDENTAPPLICATIONITEMFAILLOGService.Update(passportstudentapplicationitemfaillog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdatePASSPORTSTUDENTAPPLICATIONITEMFAILLOGs(IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto> passportstudentapplicationitemfaillogs, bool doSaveChanges = true)
		{
			if (passportstudentapplicationitemfaillogs == null)
			{
				return;
			}
			foreach (PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto instance in passportstudentapplicationitemfaillogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.PASSPORTSTUDENTAPPLICATIONITEMFAILLOGService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeletePASSPORTSTUDENTAPPLICATIONITEMFAILLOG(PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto passportstudentapplicationitemfaillog, bool doSaveChanges = true)
		{
			this.PASSPORTSTUDENTAPPLICATIONITEMFAILLOGService.Delete(passportstudentapplicationitemfaillog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeletePASSPORTSTUDENTAPPLICATIONITEMFAILLOGs(IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto> passportstudentapplicationitemfaillogs, bool doSaveChanges = true)
		{
			if (passportstudentapplicationitemfaillogs == null)
			{
				return;
			}
			foreach (PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto instance in passportstudentapplicationitemfaillogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.PASSPORTSTUDENTAPPLICATIONITEMFAILLOGService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SavePASSPORTSTUDENTAPPLICATIONITEMFAILLOG(PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto passportstudentapplicationitemfaillog, bool doSaveChanges = true)
		{
			switch (passportstudentapplicationitemfaillog.RowState)
			{
				case RowState.Insert:
					this.CreatePASSPORTSTUDENTAPPLICATIONITEMFAILLOG(passportstudentapplicationitemfaillog, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdatePASSPORTSTUDENTAPPLICATIONITEMFAILLOG(passportstudentapplicationitemfaillog, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeletePASSPORTSTUDENTAPPLICATIONITEMFAILLOG(passportstudentapplicationitemfaillog, doSaveChanges);
					break;
			}
		}


		public void SavePASSPORTSTUDENTAPPLICATIONITEMFAILLOGs(IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto> passportstudentapplicationitemfaillogs, bool doSaveChanges = true)
		{
			if (passportstudentapplicationitemfaillogs == null)
			{
				return;
			}
			foreach (PASSPORTSTUDENTAPPLICATIONITEMFAILLOGDto instance in passportstudentapplicationitemfaillogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.SavePASSPORTSTUDENTAPPLICATIONITEMFAILLOG(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion PASSPORTSTUDENTAPPLICATIONITEMFAILLOG CRUD Operations


		#region PASSPORTSTUDENTAPPLICATIONITEM_BK2 CRUD Operations


		private IPASSPORTSTUDENTAPPLICATIONITEM_BK2Service passportstudentapplicationitem_bk2;
		public virtual IPASSPORTSTUDENTAPPLICATIONITEM_BK2Service PASSPORTSTUDENTAPPLICATIONITEM_BK2Service
		{
			get
			{
				if (this.passportstudentapplicationitem_bk2 == null)
				{
					IPASSPORTSTUDENTAPPLICATIONITEM_BK2Assembler assembler = new PASSPORTSTUDENTAPPLICATIONITEM_BK2Assembler();
					IPASSPORTSTUDENTAPPLICATIONITEM_BK2Repository repository = new PASSPORTSTUDENTAPPLICATIONITEM_BK2Repository(this.UnitOfWork);
					this.passportstudentapplicationitem_bk2 = new PASSPORTSTUDENTAPPLICATIONITEM_BK2Service(assembler, repository);
				}
				return this.passportstudentapplicationitem_bk2;
			}
		}


		public IQueryable<PASSPORTSTUDENTAPPLICATIONITEM_BK2> PASSPORTSTUDENTAPPLICATIONITEM_BK2
		{
			get { return this.PASSPORTSTUDENTAPPLICATIONITEM_BK2Service.Repository.GetAll(); }
		}


		public IQueryable<PASSPORTSTUDENTAPPLICATIONITEM_BK2> ReadPASSPORTSTUDENTAPPLICATIONITEM_BK2(Expression<Func<PASSPORTSTUDENTAPPLICATIONITEM_BK2, bool>> filter, int dummy)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEM_BK2Service.Repository.Find(filter);
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BK2()
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEM_BK2Service.GetAll();
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BK2(Expression<Func<PASSPORTSTUDENTAPPLICATIONITEM_BK2, bool>> filter)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEM_BK2Service.Find(filter);
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BK2(ISpecification<PASSPORTSTUDENTAPPLICATIONITEM_BK2> specification)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEM_BK2Service.Find(specification.GetExpression());
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BK2(IQueryable<PASSPORTSTUDENTAPPLICATIONITEM_BK2> query)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEM_BK2Service.Assembler.Assemble(query);
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BK2(string[] propertyToSearch, object[] keyWords)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEM_BK2Service.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BK2(object[] keyWords)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEM_BK2Service.Find(keyWords);
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BK2Paged(int startIndex, int pageSize)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEM_BK2Service.Find(startIndex, pageSize);
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BK2Paged(IQueryable<PASSPORTSTUDENTAPPLICATIONITEM_BK2> source, int pageIndex, int pageSize)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEM_BK2Service.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BK2Paged(IQueryable<PASSPORTSTUDENTAPPLICATIONITEM_BK2> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.PASSPORTSTUDENTAPPLICATIONITEM_BK2Service.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BK2Filtered(string sortExpression, string filterExpression)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEM_BK2Service.Find(sortExpression, filterExpression);
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BK2PagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEM_BK2Service.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BK2PagedAndFiltered(int startIndex, int pageSize, Expression<Func<PASSPORTSTUDENTAPPLICATIONITEM_BK2, bool>> filter)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEM_BK2Service.Find(startIndex, pageSize, string.Empty, filter);
		}


		public PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto ReadPASSPORTSTUDENTAPPLICATIONITEM_BK2(string dtoKey)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEM_BK2Service.GetByKey(dtoKey);
		}


		public int CountPASSPORTSTUDENTAPPLICATIONITEM_BK2()
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEM_BK2Service.Count();
		}


		public int CountPASSPORTSTUDENTAPPLICATIONITEM_BK2(string filterExpression)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEM_BK2Service.Count(filterExpression);
		}


		public int CountPASSPORTSTUDENTAPPLICATIONITEM_BK2(Expression<Func<PASSPORTSTUDENTAPPLICATIONITEM_BK2, bool>> filter)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEM_BK2Service.Count(filter);
		}


		public string CreatePASSPORTSTUDENTAPPLICATIONITEM_BK2(PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto passportstudentapplicationitem_bk2, bool doSaveChanges = true)
		{
			string key = this.PASSPORTSTUDENTAPPLICATIONITEM_BK2Service.Add(passportstudentapplicationitem_bk2);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdatePASSPORTSTUDENTAPPLICATIONITEM_BK2(PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto passportstudentapplicationitem_bk2, bool doSaveChanges = true)
		{
			this.PASSPORTSTUDENTAPPLICATIONITEM_BK2Service.Update(passportstudentapplicationitem_bk2);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdatePASSPORTSTUDENTAPPLICATIONITEM_BK2(IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto> passportstudentapplicationitem_bk2, bool doSaveChanges = true)
		{
			if (passportstudentapplicationitem_bk2 == null)
			{
				return;
			}
			foreach (PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto instance in passportstudentapplicationitem_bk2)
			{
				if (instance == null)
				{
					continue;
				}


				this.PASSPORTSTUDENTAPPLICATIONITEM_BK2Service.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeletePASSPORTSTUDENTAPPLICATIONITEM_BK2(PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto passportstudentapplicationitem_bk2, bool doSaveChanges = true)
		{
			this.PASSPORTSTUDENTAPPLICATIONITEM_BK2Service.Delete(passportstudentapplicationitem_bk2);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeletePASSPORTSTUDENTAPPLICATIONITEM_BK2(IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto> passportstudentapplicationitem_bk2, bool doSaveChanges = true)
		{
			if (passportstudentapplicationitem_bk2 == null)
			{
				return;
			}
			foreach (PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto instance in passportstudentapplicationitem_bk2)
			{
				if (instance == null)
				{
					continue;
				}


				this.PASSPORTSTUDENTAPPLICATIONITEM_BK2Service.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SavePASSPORTSTUDENTAPPLICATIONITEM_BK2(PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto passportstudentapplicationitem_bk2, bool doSaveChanges = true)
		{
			switch (passportstudentapplicationitem_bk2.RowState)
			{
				case RowState.Insert:
					this.CreatePASSPORTSTUDENTAPPLICATIONITEM_BK2(passportstudentapplicationitem_bk2, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdatePASSPORTSTUDENTAPPLICATIONITEM_BK2(passportstudentapplicationitem_bk2, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeletePASSPORTSTUDENTAPPLICATIONITEM_BK2(passportstudentapplicationitem_bk2, doSaveChanges);
					break;
			}
		}


		public void SavePASSPORTSTUDENTAPPLICATIONITEM_BK2(IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto> passportstudentapplicationitem_bk2, bool doSaveChanges = true)
		{
			if (passportstudentapplicationitem_bk2 == null)
			{
				return;
			}
			foreach (PASSPORTSTUDENTAPPLICATIONITEM_BK2Dto instance in passportstudentapplicationitem_bk2)
			{
				if (instance == null)
				{
					continue;
				}


				this.SavePASSPORTSTUDENTAPPLICATIONITEM_BK2(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion PASSPORTSTUDENTAPPLICATIONITEM_BK2 CRUD Operations


		#region PASSPORTSTUDENTAPPLICATIONITEM_BK CRUD Operations


		private IPASSPORTSTUDENTAPPLICATIONITEM_BKService passportstudentapplicationitem_bk;
		public virtual IPASSPORTSTUDENTAPPLICATIONITEM_BKService PASSPORTSTUDENTAPPLICATIONITEM_BKService
		{
			get
			{
				if (this.passportstudentapplicationitem_bk == null)
				{
					IPASSPORTSTUDENTAPPLICATIONITEM_BKAssembler assembler = new PASSPORTSTUDENTAPPLICATIONITEM_BKAssembler();
					IPASSPORTSTUDENTAPPLICATIONITEM_BKRepository repository = new PASSPORTSTUDENTAPPLICATIONITEM_BKRepository(this.UnitOfWork);
					this.passportstudentapplicationitem_bk = new PASSPORTSTUDENTAPPLICATIONITEM_BKService(assembler, repository);
				}
				return this.passportstudentapplicationitem_bk;
			}
		}


		public IQueryable<PASSPORTSTUDENTAPPLICATIONITEM_BK> PASSPORTSTUDENTAPPLICATIONITEM_BKs
		{
			get { return this.PASSPORTSTUDENTAPPLICATIONITEM_BKService.Repository.GetAll(); }
		}


		public IQueryable<PASSPORTSTUDENTAPPLICATIONITEM_BK> ReadPASSPORTSTUDENTAPPLICATIONITEM_BKs(Expression<Func<PASSPORTSTUDENTAPPLICATIONITEM_BK, bool>> filter, int dummy)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEM_BKService.Repository.Find(filter);
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BKDto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BKs()
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEM_BKService.GetAll();
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BKDto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BKs(Expression<Func<PASSPORTSTUDENTAPPLICATIONITEM_BK, bool>> filter)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEM_BKService.Find(filter);
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BKDto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BKs(ISpecification<PASSPORTSTUDENTAPPLICATIONITEM_BK> specification)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEM_BKService.Find(specification.GetExpression());
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BKDto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BKs(IQueryable<PASSPORTSTUDENTAPPLICATIONITEM_BK> query)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEM_BKService.Assembler.Assemble(query);
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BKDto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BKs(string[] propertyToSearch, object[] keyWords)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEM_BKService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BKDto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BKs(object[] keyWords)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEM_BKService.Find(keyWords);
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BKDto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BKsPaged(int startIndex, int pageSize)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEM_BKService.Find(startIndex, pageSize);
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BKDto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BKsPaged(IQueryable<PASSPORTSTUDENTAPPLICATIONITEM_BK> source, int pageIndex, int pageSize)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEM_BKService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BKDto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BKsPaged(IQueryable<PASSPORTSTUDENTAPPLICATIONITEM_BK> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.PASSPORTSTUDENTAPPLICATIONITEM_BKService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BKDto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BKsFiltered(string sortExpression, string filterExpression)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEM_BKService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BKDto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BKsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEM_BKService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BKDto> ReadPASSPORTSTUDENTAPPLICATIONITEM_BKsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<PASSPORTSTUDENTAPPLICATIONITEM_BK, bool>> filter)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEM_BKService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public PASSPORTSTUDENTAPPLICATIONITEM_BKDto ReadPASSPORTSTUDENTAPPLICATIONITEM_BKs(string dtoKey)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEM_BKService.GetByKey(dtoKey);
		}


		public int CountPASSPORTSTUDENTAPPLICATIONITEM_BKs()
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEM_BKService.Count();
		}


		public int CountPASSPORTSTUDENTAPPLICATIONITEM_BKs(string filterExpression)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEM_BKService.Count(filterExpression);
		}


		public int CountPASSPORTSTUDENTAPPLICATIONITEM_BKs(Expression<Func<PASSPORTSTUDENTAPPLICATIONITEM_BK, bool>> filter)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEM_BKService.Count(filter);
		}


		public string CreatePASSPORTSTUDENTAPPLICATIONITEM_BK(PASSPORTSTUDENTAPPLICATIONITEM_BKDto passportstudentapplicationitem_bk, bool doSaveChanges = true)
		{
			string key = this.PASSPORTSTUDENTAPPLICATIONITEM_BKService.Add(passportstudentapplicationitem_bk);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdatePASSPORTSTUDENTAPPLICATIONITEM_BK(PASSPORTSTUDENTAPPLICATIONITEM_BKDto passportstudentapplicationitem_bk, bool doSaveChanges = true)
		{
			this.PASSPORTSTUDENTAPPLICATIONITEM_BKService.Update(passportstudentapplicationitem_bk);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdatePASSPORTSTUDENTAPPLICATIONITEM_BKs(IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BKDto> passportstudentapplicationitem_bks, bool doSaveChanges = true)
		{
			if (passportstudentapplicationitem_bks == null)
			{
				return;
			}
			foreach (PASSPORTSTUDENTAPPLICATIONITEM_BKDto instance in passportstudentapplicationitem_bks)
			{
				if (instance == null)
				{
					continue;
				}


				this.PASSPORTSTUDENTAPPLICATIONITEM_BKService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeletePASSPORTSTUDENTAPPLICATIONITEM_BK(PASSPORTSTUDENTAPPLICATIONITEM_BKDto passportstudentapplicationitem_bk, bool doSaveChanges = true)
		{
			this.PASSPORTSTUDENTAPPLICATIONITEM_BKService.Delete(passportstudentapplicationitem_bk);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeletePASSPORTSTUDENTAPPLICATIONITEM_BKs(IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BKDto> passportstudentapplicationitem_bks, bool doSaveChanges = true)
		{
			if (passportstudentapplicationitem_bks == null)
			{
				return;
			}
			foreach (PASSPORTSTUDENTAPPLICATIONITEM_BKDto instance in passportstudentapplicationitem_bks)
			{
				if (instance == null)
				{
					continue;
				}


				this.PASSPORTSTUDENTAPPLICATIONITEM_BKService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SavePASSPORTSTUDENTAPPLICATIONITEM_BK(PASSPORTSTUDENTAPPLICATIONITEM_BKDto passportstudentapplicationitem_bk, bool doSaveChanges = true)
		{
			switch (passportstudentapplicationitem_bk.RowState)
			{
				case RowState.Insert:
					this.CreatePASSPORTSTUDENTAPPLICATIONITEM_BK(passportstudentapplicationitem_bk, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdatePASSPORTSTUDENTAPPLICATIONITEM_BK(passportstudentapplicationitem_bk, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeletePASSPORTSTUDENTAPPLICATIONITEM_BK(passportstudentapplicationitem_bk, doSaveChanges);
					break;
			}
		}


		public void SavePASSPORTSTUDENTAPPLICATIONITEM_BKs(IEnumerable<PASSPORTSTUDENTAPPLICATIONITEM_BKDto> passportstudentapplicationitem_bks, bool doSaveChanges = true)
		{
			if (passportstudentapplicationitem_bks == null)
			{
				return;
			}
			foreach (PASSPORTSTUDENTAPPLICATIONITEM_BKDto instance in passportstudentapplicationitem_bks)
			{
				if (instance == null)
				{
					continue;
				}


				this.SavePASSPORTSTUDENTAPPLICATIONITEM_BK(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion PASSPORTSTUDENTAPPLICATIONITEM_BK CRUD Operations


		#region PASSPORTSTUDENTAPPLICATIONITEM CRUD Operations


		private IPASSPORTSTUDENTAPPLICATIONITEMService passportstudentapplicationitem;
		public virtual IPASSPORTSTUDENTAPPLICATIONITEMService PASSPORTSTUDENTAPPLICATIONITEMService
		{
			get
			{
				if (this.passportstudentapplicationitem == null)
				{
					IPASSPORTSTUDENTAPPLICATIONITEMAssembler assembler = new PASSPORTSTUDENTAPPLICATIONITEMAssembler();
					IPASSPORTSTUDENTAPPLICATIONITEMRepository repository = new PASSPORTSTUDENTAPPLICATIONITEMRepository(this.UnitOfWork);
					this.passportstudentapplicationitem = new PASSPORTSTUDENTAPPLICATIONITEMService(assembler, repository);
				}
				return this.passportstudentapplicationitem;
			}
		}


		public IQueryable<PASSPORTSTUDENTAPPLICATIONITEM> PASSPORTSTUDENTAPPLICATIONITEMs
		{
			get { return this.PASSPORTSTUDENTAPPLICATIONITEMService.Repository.GetAll(); }
		}


		public IQueryable<PASSPORTSTUDENTAPPLICATIONITEM> ReadPASSPORTSTUDENTAPPLICATIONITEMs(Expression<Func<PASSPORTSTUDENTAPPLICATIONITEM, bool>> filter, int dummy)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEMService.Repository.Find(filter);
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMDto> ReadPASSPORTSTUDENTAPPLICATIONITEMs()
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEMService.GetAll();
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMDto> ReadPASSPORTSTUDENTAPPLICATIONITEMs(Expression<Func<PASSPORTSTUDENTAPPLICATIONITEM, bool>> filter)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEMService.Find(filter);
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMDto> ReadPASSPORTSTUDENTAPPLICATIONITEMs(ISpecification<PASSPORTSTUDENTAPPLICATIONITEM> specification)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEMService.Find(specification.GetExpression());
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMDto> ReadPASSPORTSTUDENTAPPLICATIONITEMs(IQueryable<PASSPORTSTUDENTAPPLICATIONITEM> query)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEMService.Assembler.Assemble(query);
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMDto> ReadPASSPORTSTUDENTAPPLICATIONITEMs(string[] propertyToSearch, object[] keyWords)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEMService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMDto> ReadPASSPORTSTUDENTAPPLICATIONITEMs(object[] keyWords)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEMService.Find(keyWords);
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMDto> ReadPASSPORTSTUDENTAPPLICATIONITEMsPaged(int startIndex, int pageSize)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEMService.Find(startIndex, pageSize);
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMDto> ReadPASSPORTSTUDENTAPPLICATIONITEMsPaged(IQueryable<PASSPORTSTUDENTAPPLICATIONITEM> source, int pageIndex, int pageSize)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMDto> ReadPASSPORTSTUDENTAPPLICATIONITEMsPaged(IQueryable<PASSPORTSTUDENTAPPLICATIONITEM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.PASSPORTSTUDENTAPPLICATIONITEMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMDto> ReadPASSPORTSTUDENTAPPLICATIONITEMsFiltered(string sortExpression, string filterExpression)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEMService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMDto> ReadPASSPORTSTUDENTAPPLICATIONITEMsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEMService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMDto> ReadPASSPORTSTUDENTAPPLICATIONITEMsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<PASSPORTSTUDENTAPPLICATIONITEM, bool>> filter)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEMService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public PASSPORTSTUDENTAPPLICATIONITEMDto ReadPASSPORTSTUDENTAPPLICATIONITEMs(string dtoKey)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEMService.GetByKey(dtoKey);
		}


		public int CountPASSPORTSTUDENTAPPLICATIONITEMs()
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEMService.Count();
		}


		public int CountPASSPORTSTUDENTAPPLICATIONITEMs(string filterExpression)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEMService.Count(filterExpression);
		}


		public int CountPASSPORTSTUDENTAPPLICATIONITEMs(Expression<Func<PASSPORTSTUDENTAPPLICATIONITEM, bool>> filter)
		{
			return this.PASSPORTSTUDENTAPPLICATIONITEMService.Count(filter);
		}


		public string CreatePASSPORTSTUDENTAPPLICATIONITEM(PASSPORTSTUDENTAPPLICATIONITEMDto passportstudentapplicationitem, bool doSaveChanges = true)
		{
			string key = this.PASSPORTSTUDENTAPPLICATIONITEMService.Add(passportstudentapplicationitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdatePASSPORTSTUDENTAPPLICATIONITEM(PASSPORTSTUDENTAPPLICATIONITEMDto passportstudentapplicationitem, bool doSaveChanges = true)
		{
			this.PASSPORTSTUDENTAPPLICATIONITEMService.Update(passportstudentapplicationitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdatePASSPORTSTUDENTAPPLICATIONITEMs(IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMDto> passportstudentapplicationitems, bool doSaveChanges = true)
		{
			if (passportstudentapplicationitems == null)
			{
				return;
			}
			foreach (PASSPORTSTUDENTAPPLICATIONITEMDto instance in passportstudentapplicationitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.PASSPORTSTUDENTAPPLICATIONITEMService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeletePASSPORTSTUDENTAPPLICATIONITEM(PASSPORTSTUDENTAPPLICATIONITEMDto passportstudentapplicationitem, bool doSaveChanges = true)
		{
			this.PASSPORTSTUDENTAPPLICATIONITEMService.Delete(passportstudentapplicationitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeletePASSPORTSTUDENTAPPLICATIONITEMs(IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMDto> passportstudentapplicationitems, bool doSaveChanges = true)
		{
			if (passportstudentapplicationitems == null)
			{
				return;
			}
			foreach (PASSPORTSTUDENTAPPLICATIONITEMDto instance in passportstudentapplicationitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.PASSPORTSTUDENTAPPLICATIONITEMService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SavePASSPORTSTUDENTAPPLICATIONITEM(PASSPORTSTUDENTAPPLICATIONITEMDto passportstudentapplicationitem, bool doSaveChanges = true)
		{
			switch (passportstudentapplicationitem.RowState)
			{
				case RowState.Insert:
					this.CreatePASSPORTSTUDENTAPPLICATIONITEM(passportstudentapplicationitem, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdatePASSPORTSTUDENTAPPLICATIONITEM(passportstudentapplicationitem, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeletePASSPORTSTUDENTAPPLICATIONITEM(passportstudentapplicationitem, doSaveChanges);
					break;
			}
		}


		public void SavePASSPORTSTUDENTAPPLICATIONITEMs(IEnumerable<PASSPORTSTUDENTAPPLICATIONITEMDto> passportstudentapplicationitems, bool doSaveChanges = true)
		{
			if (passportstudentapplicationitems == null)
			{
				return;
			}
			foreach (PASSPORTSTUDENTAPPLICATIONITEMDto instance in passportstudentapplicationitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.SavePASSPORTSTUDENTAPPLICATIONITEM(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion PASSPORTSTUDENTAPPLICATIONITEM CRUD Operations


		#region PASSPORTSPECIALLIST CRUD Operations


		private IPASSPORTSPECIALLISTService passportspeciallist;
		public virtual IPASSPORTSPECIALLISTService PASSPORTSPECIALLISTService
		{
			get
			{
				if (this.passportspeciallist == null)
				{
					IPASSPORTSPECIALLISTAssembler assembler = new PASSPORTSPECIALLISTAssembler();
					IPASSPORTSPECIALLISTRepository repository = new PASSPORTSPECIALLISTRepository(this.UnitOfWork);
					this.passportspeciallist = new PASSPORTSPECIALLISTService(assembler, repository);
				}
				return this.passportspeciallist;
			}
		}


		public IQueryable<PASSPORTSPECIALLIST> PASSPORTSPECIALLISTs
		{
			get { return this.PASSPORTSPECIALLISTService.Repository.GetAll(); }
		}


		public IQueryable<PASSPORTSPECIALLIST> ReadPASSPORTSPECIALLISTs(Expression<Func<PASSPORTSPECIALLIST, bool>> filter, int dummy)
		{
			return this.PASSPORTSPECIALLISTService.Repository.Find(filter);
		}


		public IEnumerable<PASSPORTSPECIALLISTDto> ReadPASSPORTSPECIALLISTs()
		{
			return this.PASSPORTSPECIALLISTService.GetAll();
		}


		public IEnumerable<PASSPORTSPECIALLISTDto> ReadPASSPORTSPECIALLISTs(Expression<Func<PASSPORTSPECIALLIST, bool>> filter)
		{
			return this.PASSPORTSPECIALLISTService.Find(filter);
		}


		public IEnumerable<PASSPORTSPECIALLISTDto> ReadPASSPORTSPECIALLISTs(ISpecification<PASSPORTSPECIALLIST> specification)
		{
			return this.PASSPORTSPECIALLISTService.Find(specification.GetExpression());
		}


		public IEnumerable<PASSPORTSPECIALLISTDto> ReadPASSPORTSPECIALLISTs(IQueryable<PASSPORTSPECIALLIST> query)
		{
			return this.PASSPORTSPECIALLISTService.Assembler.Assemble(query);
		}


		public IEnumerable<PASSPORTSPECIALLISTDto> ReadPASSPORTSPECIALLISTs(string[] propertyToSearch, object[] keyWords)
		{
			return this.PASSPORTSPECIALLISTService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<PASSPORTSPECIALLISTDto> ReadPASSPORTSPECIALLISTs(object[] keyWords)
		{
			return this.PASSPORTSPECIALLISTService.Find(keyWords);
		}


		public IEnumerable<PASSPORTSPECIALLISTDto> ReadPASSPORTSPECIALLISTsPaged(int startIndex, int pageSize)
		{
			return this.PASSPORTSPECIALLISTService.Find(startIndex, pageSize);
		}


		public IEnumerable<PASSPORTSPECIALLISTDto> ReadPASSPORTSPECIALLISTsPaged(IQueryable<PASSPORTSPECIALLIST> source, int pageIndex, int pageSize)
		{
			return this.PASSPORTSPECIALLISTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<PASSPORTSPECIALLISTDto> ReadPASSPORTSPECIALLISTsPaged(IQueryable<PASSPORTSPECIALLIST> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.PASSPORTSPECIALLISTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<PASSPORTSPECIALLISTDto> ReadPASSPORTSPECIALLISTsFiltered(string sortExpression, string filterExpression)
		{
			return this.PASSPORTSPECIALLISTService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<PASSPORTSPECIALLISTDto> ReadPASSPORTSPECIALLISTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.PASSPORTSPECIALLISTService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<PASSPORTSPECIALLISTDto> ReadPASSPORTSPECIALLISTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<PASSPORTSPECIALLIST, bool>> filter)
		{
			return this.PASSPORTSPECIALLISTService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public PASSPORTSPECIALLISTDto ReadPASSPORTSPECIALLISTs(string dtoKey)
		{
			return this.PASSPORTSPECIALLISTService.GetByKey(dtoKey);
		}


		public int CountPASSPORTSPECIALLISTs()
		{
			return this.PASSPORTSPECIALLISTService.Count();
		}


		public int CountPASSPORTSPECIALLISTs(string filterExpression)
		{
			return this.PASSPORTSPECIALLISTService.Count(filterExpression);
		}


		public int CountPASSPORTSPECIALLISTs(Expression<Func<PASSPORTSPECIALLIST, bool>> filter)
		{
			return this.PASSPORTSPECIALLISTService.Count(filter);
		}


		public string CreatePASSPORTSPECIALLIST(PASSPORTSPECIALLISTDto passportspeciallist, bool doSaveChanges = true)
		{
			string key = this.PASSPORTSPECIALLISTService.Add(passportspeciallist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdatePASSPORTSPECIALLIST(PASSPORTSPECIALLISTDto passportspeciallist, bool doSaveChanges = true)
		{
			this.PASSPORTSPECIALLISTService.Update(passportspeciallist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdatePASSPORTSPECIALLISTs(IEnumerable<PASSPORTSPECIALLISTDto> passportspeciallists, bool doSaveChanges = true)
		{
			if (passportspeciallists == null)
			{
				return;
			}
			foreach (PASSPORTSPECIALLISTDto instance in passportspeciallists)
			{
				if (instance == null)
				{
					continue;
				}


				this.PASSPORTSPECIALLISTService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeletePASSPORTSPECIALLIST(PASSPORTSPECIALLISTDto passportspeciallist, bool doSaveChanges = true)
		{
			this.PASSPORTSPECIALLISTService.Delete(passportspeciallist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeletePASSPORTSPECIALLISTs(IEnumerable<PASSPORTSPECIALLISTDto> passportspeciallists, bool doSaveChanges = true)
		{
			if (passportspeciallists == null)
			{
				return;
			}
			foreach (PASSPORTSPECIALLISTDto instance in passportspeciallists)
			{
				if (instance == null)
				{
					continue;
				}


				this.PASSPORTSPECIALLISTService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SavePASSPORTSPECIALLIST(PASSPORTSPECIALLISTDto passportspeciallist, bool doSaveChanges = true)
		{
			switch (passportspeciallist.RowState)
			{
				case RowState.Insert:
					this.CreatePASSPORTSPECIALLIST(passportspeciallist, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdatePASSPORTSPECIALLIST(passportspeciallist, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeletePASSPORTSPECIALLIST(passportspeciallist, doSaveChanges);
					break;
			}
		}


		public void SavePASSPORTSPECIALLISTs(IEnumerable<PASSPORTSPECIALLISTDto> passportspeciallists, bool doSaveChanges = true)
		{
			if (passportspeciallists == null)
			{
				return;
			}
			foreach (PASSPORTSPECIALLISTDto instance in passportspeciallists)
			{
				if (instance == null)
				{
					continue;
				}


				this.SavePASSPORTSPECIALLIST(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion PASSPORTSPECIALLIST CRUD Operations


		#region PASSPORTJOBTITLEITEM_BK CRUD Operations


		private IPASSPORTJOBTITLEITEM_BKService passportjobtitleitem_bk;
		public virtual IPASSPORTJOBTITLEITEM_BKService PASSPORTJOBTITLEITEM_BKService
		{
			get
			{
				if (this.passportjobtitleitem_bk == null)
				{
					IPASSPORTJOBTITLEITEM_BKAssembler assembler = new PASSPORTJOBTITLEITEM_BKAssembler();
					IPASSPORTJOBTITLEITEM_BKRepository repository = new PASSPORTJOBTITLEITEM_BKRepository(this.UnitOfWork);
					this.passportjobtitleitem_bk = new PASSPORTJOBTITLEITEM_BKService(assembler, repository);
				}
				return this.passportjobtitleitem_bk;
			}
		}


		public IQueryable<PASSPORTJOBTITLEITEM_BK> PASSPORTJOBTITLEITEM_BKs
		{
			get { return this.PASSPORTJOBTITLEITEM_BKService.Repository.GetAll(); }
		}


		public IQueryable<PASSPORTJOBTITLEITEM_BK> ReadPASSPORTJOBTITLEITEM_BKs(Expression<Func<PASSPORTJOBTITLEITEM_BK, bool>> filter, int dummy)
		{
			return this.PASSPORTJOBTITLEITEM_BKService.Repository.Find(filter);
		}


		public IEnumerable<PASSPORTJOBTITLEITEM_BKDto> ReadPASSPORTJOBTITLEITEM_BKs()
		{
			return this.PASSPORTJOBTITLEITEM_BKService.GetAll();
		}


		public IEnumerable<PASSPORTJOBTITLEITEM_BKDto> ReadPASSPORTJOBTITLEITEM_BKs(Expression<Func<PASSPORTJOBTITLEITEM_BK, bool>> filter)
		{
			return this.PASSPORTJOBTITLEITEM_BKService.Find(filter);
		}


		public IEnumerable<PASSPORTJOBTITLEITEM_BKDto> ReadPASSPORTJOBTITLEITEM_BKs(ISpecification<PASSPORTJOBTITLEITEM_BK> specification)
		{
			return this.PASSPORTJOBTITLEITEM_BKService.Find(specification.GetExpression());
		}


		public IEnumerable<PASSPORTJOBTITLEITEM_BKDto> ReadPASSPORTJOBTITLEITEM_BKs(IQueryable<PASSPORTJOBTITLEITEM_BK> query)
		{
			return this.PASSPORTJOBTITLEITEM_BKService.Assembler.Assemble(query);
		}


		public IEnumerable<PASSPORTJOBTITLEITEM_BKDto> ReadPASSPORTJOBTITLEITEM_BKs(string[] propertyToSearch, object[] keyWords)
		{
			return this.PASSPORTJOBTITLEITEM_BKService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<PASSPORTJOBTITLEITEM_BKDto> ReadPASSPORTJOBTITLEITEM_BKs(object[] keyWords)
		{
			return this.PASSPORTJOBTITLEITEM_BKService.Find(keyWords);
		}


		public IEnumerable<PASSPORTJOBTITLEITEM_BKDto> ReadPASSPORTJOBTITLEITEM_BKsPaged(int startIndex, int pageSize)
		{
			return this.PASSPORTJOBTITLEITEM_BKService.Find(startIndex, pageSize);
		}


		public IEnumerable<PASSPORTJOBTITLEITEM_BKDto> ReadPASSPORTJOBTITLEITEM_BKsPaged(IQueryable<PASSPORTJOBTITLEITEM_BK> source, int pageIndex, int pageSize)
		{
			return this.PASSPORTJOBTITLEITEM_BKService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<PASSPORTJOBTITLEITEM_BKDto> ReadPASSPORTJOBTITLEITEM_BKsPaged(IQueryable<PASSPORTJOBTITLEITEM_BK> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.PASSPORTJOBTITLEITEM_BKService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<PASSPORTJOBTITLEITEM_BKDto> ReadPASSPORTJOBTITLEITEM_BKsFiltered(string sortExpression, string filterExpression)
		{
			return this.PASSPORTJOBTITLEITEM_BKService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<PASSPORTJOBTITLEITEM_BKDto> ReadPASSPORTJOBTITLEITEM_BKsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.PASSPORTJOBTITLEITEM_BKService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<PASSPORTJOBTITLEITEM_BKDto> ReadPASSPORTJOBTITLEITEM_BKsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<PASSPORTJOBTITLEITEM_BK, bool>> filter)
		{
			return this.PASSPORTJOBTITLEITEM_BKService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public PASSPORTJOBTITLEITEM_BKDto ReadPASSPORTJOBTITLEITEM_BKs(string dtoKey)
		{
			return this.PASSPORTJOBTITLEITEM_BKService.GetByKey(dtoKey);
		}


		public int CountPASSPORTJOBTITLEITEM_BKs()
		{
			return this.PASSPORTJOBTITLEITEM_BKService.Count();
		}


		public int CountPASSPORTJOBTITLEITEM_BKs(string filterExpression)
		{
			return this.PASSPORTJOBTITLEITEM_BKService.Count(filterExpression);
		}


		public int CountPASSPORTJOBTITLEITEM_BKs(Expression<Func<PASSPORTJOBTITLEITEM_BK, bool>> filter)
		{
			return this.PASSPORTJOBTITLEITEM_BKService.Count(filter);
		}


		public string CreatePASSPORTJOBTITLEITEM_BK(PASSPORTJOBTITLEITEM_BKDto passportjobtitleitem_bk, bool doSaveChanges = true)
		{
			string key = this.PASSPORTJOBTITLEITEM_BKService.Add(passportjobtitleitem_bk);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdatePASSPORTJOBTITLEITEM_BK(PASSPORTJOBTITLEITEM_BKDto passportjobtitleitem_bk, bool doSaveChanges = true)
		{
			this.PASSPORTJOBTITLEITEM_BKService.Update(passportjobtitleitem_bk);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdatePASSPORTJOBTITLEITEM_BKs(IEnumerable<PASSPORTJOBTITLEITEM_BKDto> passportjobtitleitem_bks, bool doSaveChanges = true)
		{
			if (passportjobtitleitem_bks == null)
			{
				return;
			}
			foreach (PASSPORTJOBTITLEITEM_BKDto instance in passportjobtitleitem_bks)
			{
				if (instance == null)
				{
					continue;
				}


				this.PASSPORTJOBTITLEITEM_BKService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeletePASSPORTJOBTITLEITEM_BK(PASSPORTJOBTITLEITEM_BKDto passportjobtitleitem_bk, bool doSaveChanges = true)
		{
			this.PASSPORTJOBTITLEITEM_BKService.Delete(passportjobtitleitem_bk);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeletePASSPORTJOBTITLEITEM_BKs(IEnumerable<PASSPORTJOBTITLEITEM_BKDto> passportjobtitleitem_bks, bool doSaveChanges = true)
		{
			if (passportjobtitleitem_bks == null)
			{
				return;
			}
			foreach (PASSPORTJOBTITLEITEM_BKDto instance in passportjobtitleitem_bks)
			{
				if (instance == null)
				{
					continue;
				}


				this.PASSPORTJOBTITLEITEM_BKService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SavePASSPORTJOBTITLEITEM_BK(PASSPORTJOBTITLEITEM_BKDto passportjobtitleitem_bk, bool doSaveChanges = true)
		{
			switch (passportjobtitleitem_bk.RowState)
			{
				case RowState.Insert:
					this.CreatePASSPORTJOBTITLEITEM_BK(passportjobtitleitem_bk, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdatePASSPORTJOBTITLEITEM_BK(passportjobtitleitem_bk, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeletePASSPORTJOBTITLEITEM_BK(passportjobtitleitem_bk, doSaveChanges);
					break;
			}
		}


		public void SavePASSPORTJOBTITLEITEM_BKs(IEnumerable<PASSPORTJOBTITLEITEM_BKDto> passportjobtitleitem_bks, bool doSaveChanges = true)
		{
			if (passportjobtitleitem_bks == null)
			{
				return;
			}
			foreach (PASSPORTJOBTITLEITEM_BKDto instance in passportjobtitleitem_bks)
			{
				if (instance == null)
				{
					continue;
				}


				this.SavePASSPORTJOBTITLEITEM_BK(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion PASSPORTJOBTITLEITEM_BK CRUD Operations


		#region PASSPORTJOBTITLEITEM CRUD Operations


		private IPASSPORTJOBTITLEITEMService passportjobtitleitem;
		public virtual IPASSPORTJOBTITLEITEMService PASSPORTJOBTITLEITEMService
		{
			get
			{
				if (this.passportjobtitleitem == null)
				{
					IPASSPORTJOBTITLEITEMAssembler assembler = new PASSPORTJOBTITLEITEMAssembler();
					IPASSPORTJOBTITLEITEMRepository repository = new PASSPORTJOBTITLEITEMRepository(this.UnitOfWork);
					this.passportjobtitleitem = new PASSPORTJOBTITLEITEMService(assembler, repository);
				}
				return this.passportjobtitleitem;
			}
		}


		public IQueryable<PASSPORTJOBTITLEITEM> PASSPORTJOBTITLEITEMs
		{
			get { return this.PASSPORTJOBTITLEITEMService.Repository.GetAll(); }
		}


		public IQueryable<PASSPORTJOBTITLEITEM> ReadPASSPORTJOBTITLEITEMs(Expression<Func<PASSPORTJOBTITLEITEM, bool>> filter, int dummy)
		{
			return this.PASSPORTJOBTITLEITEMService.Repository.Find(filter);
		}


		public IEnumerable<PASSPORTJOBTITLEITEMDto> ReadPASSPORTJOBTITLEITEMs()
		{
			return this.PASSPORTJOBTITLEITEMService.GetAll();
		}


		public IEnumerable<PASSPORTJOBTITLEITEMDto> ReadPASSPORTJOBTITLEITEMs(Expression<Func<PASSPORTJOBTITLEITEM, bool>> filter)
		{
			return this.PASSPORTJOBTITLEITEMService.Find(filter);
		}


		public IEnumerable<PASSPORTJOBTITLEITEMDto> ReadPASSPORTJOBTITLEITEMs(ISpecification<PASSPORTJOBTITLEITEM> specification)
		{
			return this.PASSPORTJOBTITLEITEMService.Find(specification.GetExpression());
		}


		public IEnumerable<PASSPORTJOBTITLEITEMDto> ReadPASSPORTJOBTITLEITEMs(IQueryable<PASSPORTJOBTITLEITEM> query)
		{
			return this.PASSPORTJOBTITLEITEMService.Assembler.Assemble(query);
		}


		public IEnumerable<PASSPORTJOBTITLEITEMDto> ReadPASSPORTJOBTITLEITEMs(string[] propertyToSearch, object[] keyWords)
		{
			return this.PASSPORTJOBTITLEITEMService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<PASSPORTJOBTITLEITEMDto> ReadPASSPORTJOBTITLEITEMs(object[] keyWords)
		{
			return this.PASSPORTJOBTITLEITEMService.Find(keyWords);
		}


		public IEnumerable<PASSPORTJOBTITLEITEMDto> ReadPASSPORTJOBTITLEITEMsPaged(int startIndex, int pageSize)
		{
			return this.PASSPORTJOBTITLEITEMService.Find(startIndex, pageSize);
		}


		public IEnumerable<PASSPORTJOBTITLEITEMDto> ReadPASSPORTJOBTITLEITEMsPaged(IQueryable<PASSPORTJOBTITLEITEM> source, int pageIndex, int pageSize)
		{
			return this.PASSPORTJOBTITLEITEMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<PASSPORTJOBTITLEITEMDto> ReadPASSPORTJOBTITLEITEMsPaged(IQueryable<PASSPORTJOBTITLEITEM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.PASSPORTJOBTITLEITEMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<PASSPORTJOBTITLEITEMDto> ReadPASSPORTJOBTITLEITEMsFiltered(string sortExpression, string filterExpression)
		{
			return this.PASSPORTJOBTITLEITEMService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<PASSPORTJOBTITLEITEMDto> ReadPASSPORTJOBTITLEITEMsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.PASSPORTJOBTITLEITEMService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<PASSPORTJOBTITLEITEMDto> ReadPASSPORTJOBTITLEITEMsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<PASSPORTJOBTITLEITEM, bool>> filter)
		{
			return this.PASSPORTJOBTITLEITEMService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public PASSPORTJOBTITLEITEMDto ReadPASSPORTJOBTITLEITEMs(string dtoKey)
		{
			return this.PASSPORTJOBTITLEITEMService.GetByKey(dtoKey);
		}


		public int CountPASSPORTJOBTITLEITEMs()
		{
			return this.PASSPORTJOBTITLEITEMService.Count();
		}


		public int CountPASSPORTJOBTITLEITEMs(string filterExpression)
		{
			return this.PASSPORTJOBTITLEITEMService.Count(filterExpression);
		}


		public int CountPASSPORTJOBTITLEITEMs(Expression<Func<PASSPORTJOBTITLEITEM, bool>> filter)
		{
			return this.PASSPORTJOBTITLEITEMService.Count(filter);
		}


		public string CreatePASSPORTJOBTITLEITEM(PASSPORTJOBTITLEITEMDto passportjobtitleitem, bool doSaveChanges = true)
		{
			string key = this.PASSPORTJOBTITLEITEMService.Add(passportjobtitleitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdatePASSPORTJOBTITLEITEM(PASSPORTJOBTITLEITEMDto passportjobtitleitem, bool doSaveChanges = true)
		{
			this.PASSPORTJOBTITLEITEMService.Update(passportjobtitleitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdatePASSPORTJOBTITLEITEMs(IEnumerable<PASSPORTJOBTITLEITEMDto> passportjobtitleitems, bool doSaveChanges = true)
		{
			if (passportjobtitleitems == null)
			{
				return;
			}
			foreach (PASSPORTJOBTITLEITEMDto instance in passportjobtitleitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.PASSPORTJOBTITLEITEMService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeletePASSPORTJOBTITLEITEM(PASSPORTJOBTITLEITEMDto passportjobtitleitem, bool doSaveChanges = true)
		{
			this.PASSPORTJOBTITLEITEMService.Delete(passportjobtitleitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeletePASSPORTJOBTITLEITEMs(IEnumerable<PASSPORTJOBTITLEITEMDto> passportjobtitleitems, bool doSaveChanges = true)
		{
			if (passportjobtitleitems == null)
			{
				return;
			}
			foreach (PASSPORTJOBTITLEITEMDto instance in passportjobtitleitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.PASSPORTJOBTITLEITEMService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SavePASSPORTJOBTITLEITEM(PASSPORTJOBTITLEITEMDto passportjobtitleitem, bool doSaveChanges = true)
		{
			switch (passportjobtitleitem.RowState)
			{
				case RowState.Insert:
					this.CreatePASSPORTJOBTITLEITEM(passportjobtitleitem, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdatePASSPORTJOBTITLEITEM(passportjobtitleitem, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeletePASSPORTJOBTITLEITEM(passportjobtitleitem, doSaveChanges);
					break;
			}
		}


		public void SavePASSPORTJOBTITLEITEMs(IEnumerable<PASSPORTJOBTITLEITEMDto> passportjobtitleitems, bool doSaveChanges = true)
		{
			if (passportjobtitleitems == null)
			{
				return;
			}
			foreach (PASSPORTJOBTITLEITEMDto instance in passportjobtitleitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.SavePASSPORTJOBTITLEITEM(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion PASSPORTJOBTITLEITEM CRUD Operations


		#region PASSPORTJOBFINALMAN CRUD Operations


		private IPASSPORTJOBFINALMANService passportjobfinalman;
		public virtual IPASSPORTJOBFINALMANService PASSPORTJOBFINALMANService
		{
			get
			{
				if (this.passportjobfinalman == null)
				{
					IPASSPORTJOBFINALMANAssembler assembler = new PASSPORTJOBFINALMANAssembler();
					IPASSPORTJOBFINALMANRepository repository = new PASSPORTJOBFINALMANRepository(this.UnitOfWork);
					this.passportjobfinalman = new PASSPORTJOBFINALMANService(assembler, repository);
				}
				return this.passportjobfinalman;
			}
		}


		public IQueryable<PASSPORTJOBFINALMAN> PASSPORTJOBFINALMen
		{
			get { return this.PASSPORTJOBFINALMANService.Repository.GetAll(); }
		}


		public IQueryable<PASSPORTJOBFINALMAN> ReadPASSPORTJOBFINALMen(Expression<Func<PASSPORTJOBFINALMAN, bool>> filter, int dummy)
		{
			return this.PASSPORTJOBFINALMANService.Repository.Find(filter);
		}


		public IEnumerable<PASSPORTJOBFINALMANDto> ReadPASSPORTJOBFINALMen()
		{
			return this.PASSPORTJOBFINALMANService.GetAll();
		}


		public IEnumerable<PASSPORTJOBFINALMANDto> ReadPASSPORTJOBFINALMen(Expression<Func<PASSPORTJOBFINALMAN, bool>> filter)
		{
			return this.PASSPORTJOBFINALMANService.Find(filter);
		}


		public IEnumerable<PASSPORTJOBFINALMANDto> ReadPASSPORTJOBFINALMen(ISpecification<PASSPORTJOBFINALMAN> specification)
		{
			return this.PASSPORTJOBFINALMANService.Find(specification.GetExpression());
		}


		public IEnumerable<PASSPORTJOBFINALMANDto> ReadPASSPORTJOBFINALMen(IQueryable<PASSPORTJOBFINALMAN> query)
		{
			return this.PASSPORTJOBFINALMANService.Assembler.Assemble(query);
		}


		public IEnumerable<PASSPORTJOBFINALMANDto> ReadPASSPORTJOBFINALMen(string[] propertyToSearch, object[] keyWords)
		{
			return this.PASSPORTJOBFINALMANService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<PASSPORTJOBFINALMANDto> ReadPASSPORTJOBFINALMen(object[] keyWords)
		{
			return this.PASSPORTJOBFINALMANService.Find(keyWords);
		}


		public IEnumerable<PASSPORTJOBFINALMANDto> ReadPASSPORTJOBFINALMenPaged(int startIndex, int pageSize)
		{
			return this.PASSPORTJOBFINALMANService.Find(startIndex, pageSize);
		}


		public IEnumerable<PASSPORTJOBFINALMANDto> ReadPASSPORTJOBFINALMenPaged(IQueryable<PASSPORTJOBFINALMAN> source, int pageIndex, int pageSize)
		{
			return this.PASSPORTJOBFINALMANService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<PASSPORTJOBFINALMANDto> ReadPASSPORTJOBFINALMenPaged(IQueryable<PASSPORTJOBFINALMAN> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.PASSPORTJOBFINALMANService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<PASSPORTJOBFINALMANDto> ReadPASSPORTJOBFINALMenFiltered(string sortExpression, string filterExpression)
		{
			return this.PASSPORTJOBFINALMANService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<PASSPORTJOBFINALMANDto> ReadPASSPORTJOBFINALMenPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.PASSPORTJOBFINALMANService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<PASSPORTJOBFINALMANDto> ReadPASSPORTJOBFINALMenPagedAndFiltered(int startIndex, int pageSize, Expression<Func<PASSPORTJOBFINALMAN, bool>> filter)
		{
			return this.PASSPORTJOBFINALMANService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public PASSPORTJOBFINALMANDto ReadPASSPORTJOBFINALMen(string dtoKey)
		{
			return this.PASSPORTJOBFINALMANService.GetByKey(dtoKey);
		}


		public int CountPASSPORTJOBFINALMen()
		{
			return this.PASSPORTJOBFINALMANService.Count();
		}


		public int CountPASSPORTJOBFINALMen(string filterExpression)
		{
			return this.PASSPORTJOBFINALMANService.Count(filterExpression);
		}


		public int CountPASSPORTJOBFINALMen(Expression<Func<PASSPORTJOBFINALMAN, bool>> filter)
		{
			return this.PASSPORTJOBFINALMANService.Count(filter);
		}


		public string CreatePASSPORTJOBFINALMAN(PASSPORTJOBFINALMANDto passportjobfinalman, bool doSaveChanges = true)
		{
			string key = this.PASSPORTJOBFINALMANService.Add(passportjobfinalman);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdatePASSPORTJOBFINALMAN(PASSPORTJOBFINALMANDto passportjobfinalman, bool doSaveChanges = true)
		{
			this.PASSPORTJOBFINALMANService.Update(passportjobfinalman);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdatePASSPORTJOBFINALMen(IEnumerable<PASSPORTJOBFINALMANDto> passportjobfinalmen, bool doSaveChanges = true)
		{
			if (passportjobfinalmen == null)
			{
				return;
			}
			foreach (PASSPORTJOBFINALMANDto instance in passportjobfinalmen)
			{
				if (instance == null)
				{
					continue;
				}


				this.PASSPORTJOBFINALMANService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeletePASSPORTJOBFINALMAN(PASSPORTJOBFINALMANDto passportjobfinalman, bool doSaveChanges = true)
		{
			this.PASSPORTJOBFINALMANService.Delete(passportjobfinalman);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeletePASSPORTJOBFINALMen(IEnumerable<PASSPORTJOBFINALMANDto> passportjobfinalmen, bool doSaveChanges = true)
		{
			if (passportjobfinalmen == null)
			{
				return;
			}
			foreach (PASSPORTJOBFINALMANDto instance in passportjobfinalmen)
			{
				if (instance == null)
				{
					continue;
				}


				this.PASSPORTJOBFINALMANService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SavePASSPORTJOBFINALMAN(PASSPORTJOBFINALMANDto passportjobfinalman, bool doSaveChanges = true)
		{
			switch (passportjobfinalman.RowState)
			{
				case RowState.Insert:
					this.CreatePASSPORTJOBFINALMAN(passportjobfinalman, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdatePASSPORTJOBFINALMAN(passportjobfinalman, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeletePASSPORTJOBFINALMAN(passportjobfinalman, doSaveChanges);
					break;
			}
		}


		public void SavePASSPORTJOBFINALMen(IEnumerable<PASSPORTJOBFINALMANDto> passportjobfinalmen, bool doSaveChanges = true)
		{
			if (passportjobfinalmen == null)
			{
				return;
			}
			foreach (PASSPORTJOBFINALMANDto instance in passportjobfinalmen)
			{
				if (instance == null)
				{
					continue;
				}


				this.SavePASSPORTJOBFINALMAN(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion PASSPORTJOBFINALMAN CRUD Operations


		#region PASSPORTDOCGRADE CRUD Operations


		private IPASSPORTDOCGRADEService passportdocgrade;
		public virtual IPASSPORTDOCGRADEService PASSPORTDOCGRADEService
		{
			get
			{
				if (this.passportdocgrade == null)
				{
					IPASSPORTDOCGRADEAssembler assembler = new PASSPORTDOCGRADEAssembler();
					IPASSPORTDOCGRADERepository repository = new PASSPORTDOCGRADERepository(this.UnitOfWork);
					this.passportdocgrade = new PASSPORTDOCGRADEService(assembler, repository);
				}
				return this.passportdocgrade;
			}
		}


		public IQueryable<PASSPORTDOCGRADE> PASSPORTDOCGRADEs
		{
			get { return this.PASSPORTDOCGRADEService.Repository.GetAll(); }
		}


		public IQueryable<PASSPORTDOCGRADE> ReadPASSPORTDOCGRADEs(Expression<Func<PASSPORTDOCGRADE, bool>> filter, int dummy)
		{
			return this.PASSPORTDOCGRADEService.Repository.Find(filter);
		}


		public IEnumerable<PASSPORTDOCGRADEDto> ReadPASSPORTDOCGRADEs()
		{
			return this.PASSPORTDOCGRADEService.GetAll();
		}


		public IEnumerable<PASSPORTDOCGRADEDto> ReadPASSPORTDOCGRADEs(Expression<Func<PASSPORTDOCGRADE, bool>> filter)
		{
			return this.PASSPORTDOCGRADEService.Find(filter);
		}


		public IEnumerable<PASSPORTDOCGRADEDto> ReadPASSPORTDOCGRADEs(ISpecification<PASSPORTDOCGRADE> specification)
		{
			return this.PASSPORTDOCGRADEService.Find(specification.GetExpression());
		}


		public IEnumerable<PASSPORTDOCGRADEDto> ReadPASSPORTDOCGRADEs(IQueryable<PASSPORTDOCGRADE> query)
		{
			return this.PASSPORTDOCGRADEService.Assembler.Assemble(query);
		}


		public IEnumerable<PASSPORTDOCGRADEDto> ReadPASSPORTDOCGRADEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.PASSPORTDOCGRADEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<PASSPORTDOCGRADEDto> ReadPASSPORTDOCGRADEs(object[] keyWords)
		{
			return this.PASSPORTDOCGRADEService.Find(keyWords);
		}


		public IEnumerable<PASSPORTDOCGRADEDto> ReadPASSPORTDOCGRADEsPaged(int startIndex, int pageSize)
		{
			return this.PASSPORTDOCGRADEService.Find(startIndex, pageSize);
		}


		public IEnumerable<PASSPORTDOCGRADEDto> ReadPASSPORTDOCGRADEsPaged(IQueryable<PASSPORTDOCGRADE> source, int pageIndex, int pageSize)
		{
			return this.PASSPORTDOCGRADEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<PASSPORTDOCGRADEDto> ReadPASSPORTDOCGRADEsPaged(IQueryable<PASSPORTDOCGRADE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.PASSPORTDOCGRADEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<PASSPORTDOCGRADEDto> ReadPASSPORTDOCGRADEsFiltered(string sortExpression, string filterExpression)
		{
			return this.PASSPORTDOCGRADEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<PASSPORTDOCGRADEDto> ReadPASSPORTDOCGRADEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.PASSPORTDOCGRADEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<PASSPORTDOCGRADEDto> ReadPASSPORTDOCGRADEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<PASSPORTDOCGRADE, bool>> filter)
		{
			return this.PASSPORTDOCGRADEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public PASSPORTDOCGRADEDto ReadPASSPORTDOCGRADEs(string dtoKey)
		{
			return this.PASSPORTDOCGRADEService.GetByKey(dtoKey);
		}


		public int CountPASSPORTDOCGRADEs()
		{
			return this.PASSPORTDOCGRADEService.Count();
		}


		public int CountPASSPORTDOCGRADEs(string filterExpression)
		{
			return this.PASSPORTDOCGRADEService.Count(filterExpression);
		}


		public int CountPASSPORTDOCGRADEs(Expression<Func<PASSPORTDOCGRADE, bool>> filter)
		{
			return this.PASSPORTDOCGRADEService.Count(filter);
		}


		public string CreatePASSPORTDOCGRADE(PASSPORTDOCGRADEDto passportdocgrade, bool doSaveChanges = true)
		{
			string key = this.PASSPORTDOCGRADEService.Add(passportdocgrade);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdatePASSPORTDOCGRADE(PASSPORTDOCGRADEDto passportdocgrade, bool doSaveChanges = true)
		{
			this.PASSPORTDOCGRADEService.Update(passportdocgrade);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdatePASSPORTDOCGRADEs(IEnumerable<PASSPORTDOCGRADEDto> passportdocgrades, bool doSaveChanges = true)
		{
			if (passportdocgrades == null)
			{
				return;
			}
			foreach (PASSPORTDOCGRADEDto instance in passportdocgrades)
			{
				if (instance == null)
				{
					continue;
				}


				this.PASSPORTDOCGRADEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeletePASSPORTDOCGRADE(PASSPORTDOCGRADEDto passportdocgrade, bool doSaveChanges = true)
		{
			this.PASSPORTDOCGRADEService.Delete(passportdocgrade);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeletePASSPORTDOCGRADEs(IEnumerable<PASSPORTDOCGRADEDto> passportdocgrades, bool doSaveChanges = true)
		{
			if (passportdocgrades == null)
			{
				return;
			}
			foreach (PASSPORTDOCGRADEDto instance in passportdocgrades)
			{
				if (instance == null)
				{
					continue;
				}


				this.PASSPORTDOCGRADEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SavePASSPORTDOCGRADE(PASSPORTDOCGRADEDto passportdocgrade, bool doSaveChanges = true)
		{
			switch (passportdocgrade.RowState)
			{
				case RowState.Insert:
					this.CreatePASSPORTDOCGRADE(passportdocgrade, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdatePASSPORTDOCGRADE(passportdocgrade, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeletePASSPORTDOCGRADE(passportdocgrade, doSaveChanges);
					break;
			}
		}


		public void SavePASSPORTDOCGRADEs(IEnumerable<PASSPORTDOCGRADEDto> passportdocgrades, bool doSaveChanges = true)
		{
			if (passportdocgrades == null)
			{
				return;
			}
			foreach (PASSPORTDOCGRADEDto instance in passportdocgrades)
			{
				if (instance == null)
				{
					continue;
				}


				this.SavePASSPORTDOCGRADE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion PASSPORTDOCGRADE CRUD Operations


		#region PASSPORTCHECKITEM CRUD Operations


		private IPASSPORTCHECKITEMService passportcheckitem;
		public virtual IPASSPORTCHECKITEMService PASSPORTCHECKITEMService
		{
			get
			{
				if (this.passportcheckitem == null)
				{
					IPASSPORTCHECKITEMAssembler assembler = new PASSPORTCHECKITEMAssembler();
					IPASSPORTCHECKITEMRepository repository = new PASSPORTCHECKITEMRepository(this.UnitOfWork);
					this.passportcheckitem = new PASSPORTCHECKITEMService(assembler, repository);
				}
				return this.passportcheckitem;
			}
		}


		public IQueryable<PASSPORTCHECKITEM> PASSPORTCHECKITEMs
		{
			get { return this.PASSPORTCHECKITEMService.Repository.GetAll(); }
		}


		public IQueryable<PASSPORTCHECKITEM> ReadPASSPORTCHECKITEMs(Expression<Func<PASSPORTCHECKITEM, bool>> filter, int dummy)
		{
			return this.PASSPORTCHECKITEMService.Repository.Find(filter);
		}


		public IEnumerable<PASSPORTCHECKITEMDto> ReadPASSPORTCHECKITEMs()
		{
			return this.PASSPORTCHECKITEMService.GetAll();
		}


		public IEnumerable<PASSPORTCHECKITEMDto> ReadPASSPORTCHECKITEMs(Expression<Func<PASSPORTCHECKITEM, bool>> filter)
		{
			return this.PASSPORTCHECKITEMService.Find(filter);
		}


		public IEnumerable<PASSPORTCHECKITEMDto> ReadPASSPORTCHECKITEMs(ISpecification<PASSPORTCHECKITEM> specification)
		{
			return this.PASSPORTCHECKITEMService.Find(specification.GetExpression());
		}


		public IEnumerable<PASSPORTCHECKITEMDto> ReadPASSPORTCHECKITEMs(IQueryable<PASSPORTCHECKITEM> query)
		{
			return this.PASSPORTCHECKITEMService.Assembler.Assemble(query);
		}


		public IEnumerable<PASSPORTCHECKITEMDto> ReadPASSPORTCHECKITEMs(string[] propertyToSearch, object[] keyWords)
		{
			return this.PASSPORTCHECKITEMService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<PASSPORTCHECKITEMDto> ReadPASSPORTCHECKITEMs(object[] keyWords)
		{
			return this.PASSPORTCHECKITEMService.Find(keyWords);
		}


		public IEnumerable<PASSPORTCHECKITEMDto> ReadPASSPORTCHECKITEMsPaged(int startIndex, int pageSize)
		{
			return this.PASSPORTCHECKITEMService.Find(startIndex, pageSize);
		}


		public IEnumerable<PASSPORTCHECKITEMDto> ReadPASSPORTCHECKITEMsPaged(IQueryable<PASSPORTCHECKITEM> source, int pageIndex, int pageSize)
		{
			return this.PASSPORTCHECKITEMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<PASSPORTCHECKITEMDto> ReadPASSPORTCHECKITEMsPaged(IQueryable<PASSPORTCHECKITEM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.PASSPORTCHECKITEMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<PASSPORTCHECKITEMDto> ReadPASSPORTCHECKITEMsFiltered(string sortExpression, string filterExpression)
		{
			return this.PASSPORTCHECKITEMService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<PASSPORTCHECKITEMDto> ReadPASSPORTCHECKITEMsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.PASSPORTCHECKITEMService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<PASSPORTCHECKITEMDto> ReadPASSPORTCHECKITEMsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<PASSPORTCHECKITEM, bool>> filter)
		{
			return this.PASSPORTCHECKITEMService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public PASSPORTCHECKITEMDto ReadPASSPORTCHECKITEMs(string dtoKey)
		{
			return this.PASSPORTCHECKITEMService.GetByKey(dtoKey);
		}


		public int CountPASSPORTCHECKITEMs()
		{
			return this.PASSPORTCHECKITEMService.Count();
		}


		public int CountPASSPORTCHECKITEMs(string filterExpression)
		{
			return this.PASSPORTCHECKITEMService.Count(filterExpression);
		}


		public int CountPASSPORTCHECKITEMs(Expression<Func<PASSPORTCHECKITEM, bool>> filter)
		{
			return this.PASSPORTCHECKITEMService.Count(filter);
		}


		public string CreatePASSPORTCHECKITEM(PASSPORTCHECKITEMDto passportcheckitem, bool doSaveChanges = true)
		{
			string key = this.PASSPORTCHECKITEMService.Add(passportcheckitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdatePASSPORTCHECKITEM(PASSPORTCHECKITEMDto passportcheckitem, bool doSaveChanges = true)
		{
			this.PASSPORTCHECKITEMService.Update(passportcheckitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdatePASSPORTCHECKITEMs(IEnumerable<PASSPORTCHECKITEMDto> passportcheckitems, bool doSaveChanges = true)
		{
			if (passportcheckitems == null)
			{
				return;
			}
			foreach (PASSPORTCHECKITEMDto instance in passportcheckitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.PASSPORTCHECKITEMService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeletePASSPORTCHECKITEM(PASSPORTCHECKITEMDto passportcheckitem, bool doSaveChanges = true)
		{
			this.PASSPORTCHECKITEMService.Delete(passportcheckitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeletePASSPORTCHECKITEMs(IEnumerable<PASSPORTCHECKITEMDto> passportcheckitems, bool doSaveChanges = true)
		{
			if (passportcheckitems == null)
			{
				return;
			}
			foreach (PASSPORTCHECKITEMDto instance in passportcheckitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.PASSPORTCHECKITEMService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SavePASSPORTCHECKITEM(PASSPORTCHECKITEMDto passportcheckitem, bool doSaveChanges = true)
		{
			switch (passportcheckitem.RowState)
			{
				case RowState.Insert:
					this.CreatePASSPORTCHECKITEM(passportcheckitem, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdatePASSPORTCHECKITEM(passportcheckitem, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeletePASSPORTCHECKITEM(passportcheckitem, doSaveChanges);
					break;
			}
		}


		public void SavePASSPORTCHECKITEMs(IEnumerable<PASSPORTCHECKITEMDto> passportcheckitems, bool doSaveChanges = true)
		{
			if (passportcheckitems == null)
			{
				return;
			}
			foreach (PASSPORTCHECKITEMDto instance in passportcheckitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.SavePASSPORTCHECKITEM(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion PASSPORTCHECKITEM CRUD Operations


		#region OSCECERT CRUD Operations


		private IOSCECERTService oscecert;
		public virtual IOSCECERTService OSCECERTService
		{
			get
			{
				if (this.oscecert == null)
				{
					IOSCECERTAssembler assembler = new OSCECERTAssembler();
					IOSCECERTRepository repository = new OSCECERTRepository(this.UnitOfWork);
					this.oscecert = new OSCECERTService(assembler, repository);
				}
				return this.oscecert;
			}
		}


		public IQueryable<OSCECERT> OSCECERTs
		{
			get { return this.OSCECERTService.Repository.GetAll(); }
		}


		public IQueryable<OSCECERT> ReadOSCECERTs(Expression<Func<OSCECERT, bool>> filter, int dummy)
		{
			return this.OSCECERTService.Repository.Find(filter);
		}


		public IEnumerable<OSCECERTDto> ReadOSCECERTs()
		{
			return this.OSCECERTService.GetAll();
		}


		public IEnumerable<OSCECERTDto> ReadOSCECERTs(Expression<Func<OSCECERT, bool>> filter)
		{
			return this.OSCECERTService.Find(filter);
		}


		public IEnumerable<OSCECERTDto> ReadOSCECERTs(ISpecification<OSCECERT> specification)
		{
			return this.OSCECERTService.Find(specification.GetExpression());
		}


		public IEnumerable<OSCECERTDto> ReadOSCECERTs(IQueryable<OSCECERT> query)
		{
			return this.OSCECERTService.Assembler.Assemble(query);
		}


		public IEnumerable<OSCECERTDto> ReadOSCECERTs(string[] propertyToSearch, object[] keyWords)
		{
			return this.OSCECERTService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<OSCECERTDto> ReadOSCECERTs(object[] keyWords)
		{
			return this.OSCECERTService.Find(keyWords);
		}


		public IEnumerable<OSCECERTDto> ReadOSCECERTsPaged(int startIndex, int pageSize)
		{
			return this.OSCECERTService.Find(startIndex, pageSize);
		}


		public IEnumerable<OSCECERTDto> ReadOSCECERTsPaged(IQueryable<OSCECERT> source, int pageIndex, int pageSize)
		{
			return this.OSCECERTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<OSCECERTDto> ReadOSCECERTsPaged(IQueryable<OSCECERT> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.OSCECERTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<OSCECERTDto> ReadOSCECERTsFiltered(string sortExpression, string filterExpression)
		{
			return this.OSCECERTService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<OSCECERTDto> ReadOSCECERTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.OSCECERTService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<OSCECERTDto> ReadOSCECERTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<OSCECERT, bool>> filter)
		{
			return this.OSCECERTService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public OSCECERTDto ReadOSCECERTs(string dtoKey)
		{
			return this.OSCECERTService.GetByKey(dtoKey);
		}


		public int CountOSCECERTs()
		{
			return this.OSCECERTService.Count();
		}


		public int CountOSCECERTs(string filterExpression)
		{
			return this.OSCECERTService.Count(filterExpression);
		}


		public int CountOSCECERTs(Expression<Func<OSCECERT, bool>> filter)
		{
			return this.OSCECERTService.Count(filter);
		}


		public string CreateOSCECERT(OSCECERTDto oscecert, bool doSaveChanges = true)
		{
			string key = this.OSCECERTService.Add(oscecert);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateOSCECERT(OSCECERTDto oscecert, bool doSaveChanges = true)
		{
			this.OSCECERTService.Update(oscecert);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateOSCECERTs(IEnumerable<OSCECERTDto> oscecerts, bool doSaveChanges = true)
		{
			if (oscecerts == null)
			{
				return;
			}
			foreach (OSCECERTDto instance in oscecerts)
			{
				if (instance == null)
				{
					continue;
				}


				this.OSCECERTService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteOSCECERT(OSCECERTDto oscecert, bool doSaveChanges = true)
		{
			this.OSCECERTService.Delete(oscecert);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteOSCECERTs(IEnumerable<OSCECERTDto> oscecerts, bool doSaveChanges = true)
		{
			if (oscecerts == null)
			{
				return;
			}
			foreach (OSCECERTDto instance in oscecerts)
			{
				if (instance == null)
				{
					continue;
				}


				this.OSCECERTService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveOSCECERT(OSCECERTDto oscecert, bool doSaveChanges = true)
		{
			switch (oscecert.RowState)
			{
				case RowState.Insert:
					this.CreateOSCECERT(oscecert, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateOSCECERT(oscecert, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteOSCECERT(oscecert, doSaveChanges);
					break;
			}
		}


		public void SaveOSCECERTs(IEnumerable<OSCECERTDto> oscecerts, bool doSaveChanges = true)
		{
			if (oscecerts == null)
			{
				return;
			}
			foreach (OSCECERTDto instance in oscecerts)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveOSCECERT(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion OSCECERT CRUD Operations


		#region OSCEBLOCKTIME CRUD Operations


		private IOSCEBLOCKTIMEService osceblocktime;
		public virtual IOSCEBLOCKTIMEService OSCEBLOCKTIMEService
		{
			get
			{
				if (this.osceblocktime == null)
				{
					IOSCEBLOCKTIMEAssembler assembler = new OSCEBLOCKTIMEAssembler();
					IOSCEBLOCKTIMERepository repository = new OSCEBLOCKTIMERepository(this.UnitOfWork);
					this.osceblocktime = new OSCEBLOCKTIMEService(assembler, repository);
				}
				return this.osceblocktime;
			}
		}


		public IQueryable<OSCEBLOCKTIME> OSCEBLOCKTIMEs
		{
			get { return this.OSCEBLOCKTIMEService.Repository.GetAll(); }
		}


		public IQueryable<OSCEBLOCKTIME> ReadOSCEBLOCKTIMEs(Expression<Func<OSCEBLOCKTIME, bool>> filter, int dummy)
		{
			return this.OSCEBLOCKTIMEService.Repository.Find(filter);
		}


		public IEnumerable<OSCEBLOCKTIMEDto> ReadOSCEBLOCKTIMEs()
		{
			return this.OSCEBLOCKTIMEService.GetAll();
		}


		public IEnumerable<OSCEBLOCKTIMEDto> ReadOSCEBLOCKTIMEs(Expression<Func<OSCEBLOCKTIME, bool>> filter)
		{
			return this.OSCEBLOCKTIMEService.Find(filter);
		}


		public IEnumerable<OSCEBLOCKTIMEDto> ReadOSCEBLOCKTIMEs(ISpecification<OSCEBLOCKTIME> specification)
		{
			return this.OSCEBLOCKTIMEService.Find(specification.GetExpression());
		}


		public IEnumerable<OSCEBLOCKTIMEDto> ReadOSCEBLOCKTIMEs(IQueryable<OSCEBLOCKTIME> query)
		{
			return this.OSCEBLOCKTIMEService.Assembler.Assemble(query);
		}


		public IEnumerable<OSCEBLOCKTIMEDto> ReadOSCEBLOCKTIMEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.OSCEBLOCKTIMEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<OSCEBLOCKTIMEDto> ReadOSCEBLOCKTIMEs(object[] keyWords)
		{
			return this.OSCEBLOCKTIMEService.Find(keyWords);
		}


		public IEnumerable<OSCEBLOCKTIMEDto> ReadOSCEBLOCKTIMEsPaged(int startIndex, int pageSize)
		{
			return this.OSCEBLOCKTIMEService.Find(startIndex, pageSize);
		}


		public IEnumerable<OSCEBLOCKTIMEDto> ReadOSCEBLOCKTIMEsPaged(IQueryable<OSCEBLOCKTIME> source, int pageIndex, int pageSize)
		{
			return this.OSCEBLOCKTIMEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<OSCEBLOCKTIMEDto> ReadOSCEBLOCKTIMEsPaged(IQueryable<OSCEBLOCKTIME> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.OSCEBLOCKTIMEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<OSCEBLOCKTIMEDto> ReadOSCEBLOCKTIMEsFiltered(string sortExpression, string filterExpression)
		{
			return this.OSCEBLOCKTIMEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<OSCEBLOCKTIMEDto> ReadOSCEBLOCKTIMEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.OSCEBLOCKTIMEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<OSCEBLOCKTIMEDto> ReadOSCEBLOCKTIMEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<OSCEBLOCKTIME, bool>> filter)
		{
			return this.OSCEBLOCKTIMEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public OSCEBLOCKTIMEDto ReadOSCEBLOCKTIMEs(string dtoKey)
		{
			return this.OSCEBLOCKTIMEService.GetByKey(dtoKey);
		}


		public int CountOSCEBLOCKTIMEs()
		{
			return this.OSCEBLOCKTIMEService.Count();
		}


		public int CountOSCEBLOCKTIMEs(string filterExpression)
		{
			return this.OSCEBLOCKTIMEService.Count(filterExpression);
		}


		public int CountOSCEBLOCKTIMEs(Expression<Func<OSCEBLOCKTIME, bool>> filter)
		{
			return this.OSCEBLOCKTIMEService.Count(filter);
		}


		public string CreateOSCEBLOCKTIME(OSCEBLOCKTIMEDto osceblocktime, bool doSaveChanges = true)
		{
			string key = this.OSCEBLOCKTIMEService.Add(osceblocktime);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateOSCEBLOCKTIME(OSCEBLOCKTIMEDto osceblocktime, bool doSaveChanges = true)
		{
			this.OSCEBLOCKTIMEService.Update(osceblocktime);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateOSCEBLOCKTIMEs(IEnumerable<OSCEBLOCKTIMEDto> osceblocktimes, bool doSaveChanges = true)
		{
			if (osceblocktimes == null)
			{
				return;
			}
			foreach (OSCEBLOCKTIMEDto instance in osceblocktimes)
			{
				if (instance == null)
				{
					continue;
				}


				this.OSCEBLOCKTIMEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteOSCEBLOCKTIME(OSCEBLOCKTIMEDto osceblocktime, bool doSaveChanges = true)
		{
			this.OSCEBLOCKTIMEService.Delete(osceblocktime);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteOSCEBLOCKTIMEs(IEnumerable<OSCEBLOCKTIMEDto> osceblocktimes, bool doSaveChanges = true)
		{
			if (osceblocktimes == null)
			{
				return;
			}
			foreach (OSCEBLOCKTIMEDto instance in osceblocktimes)
			{
				if (instance == null)
				{
					continue;
				}


				this.OSCEBLOCKTIMEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveOSCEBLOCKTIME(OSCEBLOCKTIMEDto osceblocktime, bool doSaveChanges = true)
		{
			switch (osceblocktime.RowState)
			{
				case RowState.Insert:
					this.CreateOSCEBLOCKTIME(osceblocktime, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateOSCEBLOCKTIME(osceblocktime, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteOSCEBLOCKTIME(osceblocktime, doSaveChanges);
					break;
			}
		}


		public void SaveOSCEBLOCKTIMEs(IEnumerable<OSCEBLOCKTIMEDto> osceblocktimes, bool doSaveChanges = true)
		{
			if (osceblocktimes == null)
			{
				return;
			}
			foreach (OSCEBLOCKTIMEDto instance in osceblocktimes)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveOSCEBLOCKTIME(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion OSCEBLOCKTIME CRUD Operations


		#region NURSELIST CRUD Operations


		private INURSELISTService nurselist;
		public virtual INURSELISTService NURSELISTService
		{
			get
			{
				if (this.nurselist == null)
				{
					INURSELISTAssembler assembler = new NURSELISTAssembler();
					INURSELISTRepository repository = new NURSELISTRepository(this.UnitOfWork);
					this.nurselist = new NURSELISTService(assembler, repository);
				}
				return this.nurselist;
			}
		}


		public IQueryable<NURSELIST> NURSELISTs
		{
			get { return this.NURSELISTService.Repository.GetAll(); }
		}


		public IQueryable<NURSELIST> ReadNURSELISTs(Expression<Func<NURSELIST, bool>> filter, int dummy)
		{
			return this.NURSELISTService.Repository.Find(filter);
		}


		public IEnumerable<NURSELISTDto> ReadNURSELISTs()
		{
			return this.NURSELISTService.GetAll();
		}


		public IEnumerable<NURSELISTDto> ReadNURSELISTs(Expression<Func<NURSELIST, bool>> filter)
		{
			return this.NURSELISTService.Find(filter);
		}


		public IEnumerable<NURSELISTDto> ReadNURSELISTs(ISpecification<NURSELIST> specification)
		{
			return this.NURSELISTService.Find(specification.GetExpression());
		}


		public IEnumerable<NURSELISTDto> ReadNURSELISTs(IQueryable<NURSELIST> query)
		{
			return this.NURSELISTService.Assembler.Assemble(query);
		}


		public IEnumerable<NURSELISTDto> ReadNURSELISTs(string[] propertyToSearch, object[] keyWords)
		{
			return this.NURSELISTService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<NURSELISTDto> ReadNURSELISTs(object[] keyWords)
		{
			return this.NURSELISTService.Find(keyWords);
		}


		public IEnumerable<NURSELISTDto> ReadNURSELISTsPaged(int startIndex, int pageSize)
		{
			return this.NURSELISTService.Find(startIndex, pageSize);
		}


		public IEnumerable<NURSELISTDto> ReadNURSELISTsPaged(IQueryable<NURSELIST> source, int pageIndex, int pageSize)
		{
			return this.NURSELISTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<NURSELISTDto> ReadNURSELISTsPaged(IQueryable<NURSELIST> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.NURSELISTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<NURSELISTDto> ReadNURSELISTsFiltered(string sortExpression, string filterExpression)
		{
			return this.NURSELISTService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<NURSELISTDto> ReadNURSELISTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.NURSELISTService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<NURSELISTDto> ReadNURSELISTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<NURSELIST, bool>> filter)
		{
			return this.NURSELISTService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public NURSELISTDto ReadNURSELISTs(string dtoKey)
		{
			return this.NURSELISTService.GetByKey(dtoKey);
		}


		public int CountNURSELISTs()
		{
			return this.NURSELISTService.Count();
		}


		public int CountNURSELISTs(string filterExpression)
		{
			return this.NURSELISTService.Count(filterExpression);
		}


		public int CountNURSELISTs(Expression<Func<NURSELIST, bool>> filter)
		{
			return this.NURSELISTService.Count(filter);
		}


		public string CreateNURSELIST(NURSELISTDto nurselist, bool doSaveChanges = true)
		{
			string key = this.NURSELISTService.Add(nurselist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateNURSELIST(NURSELISTDto nurselist, bool doSaveChanges = true)
		{
			this.NURSELISTService.Update(nurselist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateNURSELISTs(IEnumerable<NURSELISTDto> nurselists, bool doSaveChanges = true)
		{
			if (nurselists == null)
			{
				return;
			}
			foreach (NURSELISTDto instance in nurselists)
			{
				if (instance == null)
				{
					continue;
				}


				this.NURSELISTService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteNURSELIST(NURSELISTDto nurselist, bool doSaveChanges = true)
		{
			this.NURSELISTService.Delete(nurselist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteNURSELISTs(IEnumerable<NURSELISTDto> nurselists, bool doSaveChanges = true)
		{
			if (nurselists == null)
			{
				return;
			}
			foreach (NURSELISTDto instance in nurselists)
			{
				if (instance == null)
				{
					continue;
				}


				this.NURSELISTService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveNURSELIST(NURSELISTDto nurselist, bool doSaveChanges = true)
		{
			switch (nurselist.RowState)
			{
				case RowState.Insert:
					this.CreateNURSELIST(nurselist, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateNURSELIST(nurselist, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteNURSELIST(nurselist, doSaveChanges);
					break;
			}
		}


		public void SaveNURSELISTs(IEnumerable<NURSELISTDto> nurselists, bool doSaveChanges = true)
		{
			if (nurselists == null)
			{
				return;
			}
			foreach (NURSELISTDto instance in nurselists)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveNURSELIST(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion NURSELIST CRUD Operations


		#region NNOTEITEM CRUD Operations


		private INNOTEITEMService nnoteitem;
		public virtual INNOTEITEMService NNOTEITEMService
		{
			get
			{
				if (this.nnoteitem == null)
				{
					INNOTEITEMAssembler assembler = new NNOTEITEMAssembler();
					INNOTEITEMRepository repository = new NNOTEITEMRepository(this.UnitOfWork);
					this.nnoteitem = new NNOTEITEMService(assembler, repository);
				}
				return this.nnoteitem;
			}
		}


		public IQueryable<NNOTEITEM> NNOTEITEMs
		{
			get { return this.NNOTEITEMService.Repository.GetAll(); }
		}


		public IQueryable<NNOTEITEM> ReadNNOTEITEMs(Expression<Func<NNOTEITEM, bool>> filter, int dummy)
		{
			return this.NNOTEITEMService.Repository.Find(filter);
		}


		public IEnumerable<NNOTEITEMDto> ReadNNOTEITEMs()
		{
			return this.NNOTEITEMService.GetAll();
		}


		public IEnumerable<NNOTEITEMDto> ReadNNOTEITEMs(Expression<Func<NNOTEITEM, bool>> filter)
		{
			return this.NNOTEITEMService.Find(filter);
		}


		public IEnumerable<NNOTEITEMDto> ReadNNOTEITEMs(ISpecification<NNOTEITEM> specification)
		{
			return this.NNOTEITEMService.Find(specification.GetExpression());
		}


		public IEnumerable<NNOTEITEMDto> ReadNNOTEITEMs(IQueryable<NNOTEITEM> query)
		{
			return this.NNOTEITEMService.Assembler.Assemble(query);
		}


		public IEnumerable<NNOTEITEMDto> ReadNNOTEITEMs(string[] propertyToSearch, object[] keyWords)
		{
			return this.NNOTEITEMService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<NNOTEITEMDto> ReadNNOTEITEMs(object[] keyWords)
		{
			return this.NNOTEITEMService.Find(keyWords);
		}


		public IEnumerable<NNOTEITEMDto> ReadNNOTEITEMsPaged(int startIndex, int pageSize)
		{
			return this.NNOTEITEMService.Find(startIndex, pageSize);
		}


		public IEnumerable<NNOTEITEMDto> ReadNNOTEITEMsPaged(IQueryable<NNOTEITEM> source, int pageIndex, int pageSize)
		{
			return this.NNOTEITEMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<NNOTEITEMDto> ReadNNOTEITEMsPaged(IQueryable<NNOTEITEM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.NNOTEITEMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<NNOTEITEMDto> ReadNNOTEITEMsFiltered(string sortExpression, string filterExpression)
		{
			return this.NNOTEITEMService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<NNOTEITEMDto> ReadNNOTEITEMsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.NNOTEITEMService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<NNOTEITEMDto> ReadNNOTEITEMsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<NNOTEITEM, bool>> filter)
		{
			return this.NNOTEITEMService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public NNOTEITEMDto ReadNNOTEITEMs(string dtoKey)
		{
			return this.NNOTEITEMService.GetByKey(dtoKey);
		}


		public int CountNNOTEITEMs()
		{
			return this.NNOTEITEMService.Count();
		}


		public int CountNNOTEITEMs(string filterExpression)
		{
			return this.NNOTEITEMService.Count(filterExpression);
		}


		public int CountNNOTEITEMs(Expression<Func<NNOTEITEM, bool>> filter)
		{
			return this.NNOTEITEMService.Count(filter);
		}


		public string CreateNNOTEITEM(NNOTEITEMDto nnoteitem, bool doSaveChanges = true)
		{
			string key = this.NNOTEITEMService.Add(nnoteitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateNNOTEITEM(NNOTEITEMDto nnoteitem, bool doSaveChanges = true)
		{
			this.NNOTEITEMService.Update(nnoteitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateNNOTEITEMs(IEnumerable<NNOTEITEMDto> nnoteitems, bool doSaveChanges = true)
		{
			if (nnoteitems == null)
			{
				return;
			}
			foreach (NNOTEITEMDto instance in nnoteitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.NNOTEITEMService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteNNOTEITEM(NNOTEITEMDto nnoteitem, bool doSaveChanges = true)
		{
			this.NNOTEITEMService.Delete(nnoteitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteNNOTEITEMs(IEnumerable<NNOTEITEMDto> nnoteitems, bool doSaveChanges = true)
		{
			if (nnoteitems == null)
			{
				return;
			}
			foreach (NNOTEITEMDto instance in nnoteitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.NNOTEITEMService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveNNOTEITEM(NNOTEITEMDto nnoteitem, bool doSaveChanges = true)
		{
			switch (nnoteitem.RowState)
			{
				case RowState.Insert:
					this.CreateNNOTEITEM(nnoteitem, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateNNOTEITEM(nnoteitem, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteNNOTEITEM(nnoteitem, doSaveChanges);
					break;
			}
		}


		public void SaveNNOTEITEMs(IEnumerable<NNOTEITEMDto> nnoteitems, bool doSaveChanges = true)
		{
			if (nnoteitems == null)
			{
				return;
			}
			foreach (NNOTEITEMDto instance in nnoteitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveNNOTEITEM(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion NNOTEITEM CRUD Operations


		#region NNOTE CRUD Operations


		private INNOTEService nnote;
		public virtual INNOTEService NNOTEService
		{
			get
			{
				if (this.nnote == null)
				{
					INNOTEAssembler assembler = new NNOTEAssembler();
					INNOTERepository repository = new NNOTERepository(this.UnitOfWork);
					this.nnote = new NNOTEService(assembler, repository);
				}
				return this.nnote;
			}
		}


		public IQueryable<NNOTE> NNOTEs
		{
			get { return this.NNOTEService.Repository.GetAll(); }
		}


		public IQueryable<NNOTE> ReadNNOTEs(Expression<Func<NNOTE, bool>> filter, int dummy)
		{
			return this.NNOTEService.Repository.Find(filter);
		}


		public IEnumerable<NNOTEDto> ReadNNOTEs()
		{
			return this.NNOTEService.GetAll();
		}


		public IEnumerable<NNOTEDto> ReadNNOTEs(Expression<Func<NNOTE, bool>> filter)
		{
			return this.NNOTEService.Find(filter);
		}


		public IEnumerable<NNOTEDto> ReadNNOTEs(ISpecification<NNOTE> specification)
		{
			return this.NNOTEService.Find(specification.GetExpression());
		}


		public IEnumerable<NNOTEDto> ReadNNOTEs(IQueryable<NNOTE> query)
		{
			return this.NNOTEService.Assembler.Assemble(query);
		}


		public IEnumerable<NNOTEDto> ReadNNOTEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.NNOTEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<NNOTEDto> ReadNNOTEs(object[] keyWords)
		{
			return this.NNOTEService.Find(keyWords);
		}


		public IEnumerable<NNOTEDto> ReadNNOTEsPaged(int startIndex, int pageSize)
		{
			return this.NNOTEService.Find(startIndex, pageSize);
		}


		public IEnumerable<NNOTEDto> ReadNNOTEsPaged(IQueryable<NNOTE> source, int pageIndex, int pageSize)
		{
			return this.NNOTEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<NNOTEDto> ReadNNOTEsPaged(IQueryable<NNOTE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.NNOTEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<NNOTEDto> ReadNNOTEsFiltered(string sortExpression, string filterExpression)
		{
			return this.NNOTEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<NNOTEDto> ReadNNOTEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.NNOTEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<NNOTEDto> ReadNNOTEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<NNOTE, bool>> filter)
		{
			return this.NNOTEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public NNOTEDto ReadNNOTEs(string dtoKey)
		{
			return this.NNOTEService.GetByKey(dtoKey);
		}


		public int CountNNOTEs()
		{
			return this.NNOTEService.Count();
		}


		public int CountNNOTEs(string filterExpression)
		{
			return this.NNOTEService.Count(filterExpression);
		}


		public int CountNNOTEs(Expression<Func<NNOTE, bool>> filter)
		{
			return this.NNOTEService.Count(filter);
		}


		public string CreateNNOTE(NNOTEDto nnote, bool doSaveChanges = true)
		{
			string key = this.NNOTEService.Add(nnote);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateNNOTE(NNOTEDto nnote, bool doSaveChanges = true)
		{
			this.NNOTEService.Update(nnote);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateNNOTEs(IEnumerable<NNOTEDto> nnotes, bool doSaveChanges = true)
		{
			if (nnotes == null)
			{
				return;
			}
			foreach (NNOTEDto instance in nnotes)
			{
				if (instance == null)
				{
					continue;
				}


				this.NNOTEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteNNOTE(NNOTEDto nnote, bool doSaveChanges = true)
		{
			this.NNOTEService.Delete(nnote);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteNNOTEs(IEnumerable<NNOTEDto> nnotes, bool doSaveChanges = true)
		{
			if (nnotes == null)
			{
				return;
			}
			foreach (NNOTEDto instance in nnotes)
			{
				if (instance == null)
				{
					continue;
				}


				this.NNOTEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveNNOTE(NNOTEDto nnote, bool doSaveChanges = true)
		{
			switch (nnote.RowState)
			{
				case RowState.Insert:
					this.CreateNNOTE(nnote, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateNNOTE(nnote, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteNNOTE(nnote, doSaveChanges);
					break;
			}
		}


		public void SaveNNOTEs(IEnumerable<NNOTEDto> nnotes, bool doSaveChanges = true)
		{
			if (nnotes == null)
			{
				return;
			}
			foreach (NNOTEDto instance in nnotes)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveNNOTE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion NNOTE CRUD Operations


		#region NEWSVIEWTARGET CRUD Operations


		private INEWSVIEWTARGETService newsviewtarget;
		public virtual INEWSVIEWTARGETService NEWSVIEWTARGETService
		{
			get
			{
				if (this.newsviewtarget == null)
				{
					INEWSVIEWTARGETAssembler assembler = new NEWSVIEWTARGETAssembler();
					INEWSVIEWTARGETRepository repository = new NEWSVIEWTARGETRepository(this.UnitOfWork);
					this.newsviewtarget = new NEWSVIEWTARGETService(assembler, repository);
				}
				return this.newsviewtarget;
			}
		}


		public IQueryable<NEWSVIEWTARGET> NEWSVIEWTARGETs
		{
			get { return this.NEWSVIEWTARGETService.Repository.GetAll(); }
		}


		public IQueryable<NEWSVIEWTARGET> ReadNEWSVIEWTARGETs(Expression<Func<NEWSVIEWTARGET, bool>> filter, int dummy)
		{
			return this.NEWSVIEWTARGETService.Repository.Find(filter);
		}


		public IEnumerable<NEWSVIEWTARGETDto> ReadNEWSVIEWTARGETs()
		{
			return this.NEWSVIEWTARGETService.GetAll();
		}


		public IEnumerable<NEWSVIEWTARGETDto> ReadNEWSVIEWTARGETs(Expression<Func<NEWSVIEWTARGET, bool>> filter)
		{
			return this.NEWSVIEWTARGETService.Find(filter);
		}


		public IEnumerable<NEWSVIEWTARGETDto> ReadNEWSVIEWTARGETs(ISpecification<NEWSVIEWTARGET> specification)
		{
			return this.NEWSVIEWTARGETService.Find(specification.GetExpression());
		}


		public IEnumerable<NEWSVIEWTARGETDto> ReadNEWSVIEWTARGETs(IQueryable<NEWSVIEWTARGET> query)
		{
			return this.NEWSVIEWTARGETService.Assembler.Assemble(query);
		}


		public IEnumerable<NEWSVIEWTARGETDto> ReadNEWSVIEWTARGETs(string[] propertyToSearch, object[] keyWords)
		{
			return this.NEWSVIEWTARGETService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<NEWSVIEWTARGETDto> ReadNEWSVIEWTARGETs(object[] keyWords)
		{
			return this.NEWSVIEWTARGETService.Find(keyWords);
		}


		public IEnumerable<NEWSVIEWTARGETDto> ReadNEWSVIEWTARGETsPaged(int startIndex, int pageSize)
		{
			return this.NEWSVIEWTARGETService.Find(startIndex, pageSize);
		}


		public IEnumerable<NEWSVIEWTARGETDto> ReadNEWSVIEWTARGETsPaged(IQueryable<NEWSVIEWTARGET> source, int pageIndex, int pageSize)
		{
			return this.NEWSVIEWTARGETService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<NEWSVIEWTARGETDto> ReadNEWSVIEWTARGETsPaged(IQueryable<NEWSVIEWTARGET> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.NEWSVIEWTARGETService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<NEWSVIEWTARGETDto> ReadNEWSVIEWTARGETsFiltered(string sortExpression, string filterExpression)
		{
			return this.NEWSVIEWTARGETService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<NEWSVIEWTARGETDto> ReadNEWSVIEWTARGETsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.NEWSVIEWTARGETService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<NEWSVIEWTARGETDto> ReadNEWSVIEWTARGETsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<NEWSVIEWTARGET, bool>> filter)
		{
			return this.NEWSVIEWTARGETService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public NEWSVIEWTARGETDto ReadNEWSVIEWTARGETs(string dtoKey)
		{
			return this.NEWSVIEWTARGETService.GetByKey(dtoKey);
		}


		public int CountNEWSVIEWTARGETs()
		{
			return this.NEWSVIEWTARGETService.Count();
		}


		public int CountNEWSVIEWTARGETs(string filterExpression)
		{
			return this.NEWSVIEWTARGETService.Count(filterExpression);
		}


		public int CountNEWSVIEWTARGETs(Expression<Func<NEWSVIEWTARGET, bool>> filter)
		{
			return this.NEWSVIEWTARGETService.Count(filter);
		}


		public string CreateNEWSVIEWTARGET(NEWSVIEWTARGETDto newsviewtarget, bool doSaveChanges = true)
		{
			string key = this.NEWSVIEWTARGETService.Add(newsviewtarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateNEWSVIEWTARGET(NEWSVIEWTARGETDto newsviewtarget, bool doSaveChanges = true)
		{
			this.NEWSVIEWTARGETService.Update(newsviewtarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateNEWSVIEWTARGETs(IEnumerable<NEWSVIEWTARGETDto> newsviewtargets, bool doSaveChanges = true)
		{
			if (newsviewtargets == null)
			{
				return;
			}
			foreach (NEWSVIEWTARGETDto instance in newsviewtargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.NEWSVIEWTARGETService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteNEWSVIEWTARGET(NEWSVIEWTARGETDto newsviewtarget, bool doSaveChanges = true)
		{
			this.NEWSVIEWTARGETService.Delete(newsviewtarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteNEWSVIEWTARGETs(IEnumerable<NEWSVIEWTARGETDto> newsviewtargets, bool doSaveChanges = true)
		{
			if (newsviewtargets == null)
			{
				return;
			}
			foreach (NEWSVIEWTARGETDto instance in newsviewtargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.NEWSVIEWTARGETService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveNEWSVIEWTARGET(NEWSVIEWTARGETDto newsviewtarget, bool doSaveChanges = true)
		{
			switch (newsviewtarget.RowState)
			{
				case RowState.Insert:
					this.CreateNEWSVIEWTARGET(newsviewtarget, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateNEWSVIEWTARGET(newsviewtarget, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteNEWSVIEWTARGET(newsviewtarget, doSaveChanges);
					break;
			}
		}


		public void SaveNEWSVIEWTARGETs(IEnumerable<NEWSVIEWTARGETDto> newsviewtargets, bool doSaveChanges = true)
		{
			if (newsviewtargets == null)
			{
				return;
			}
			foreach (NEWSVIEWTARGETDto instance in newsviewtargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveNEWSVIEWTARGET(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion NEWSVIEWTARGET CRUD Operations


		#region NEWS_ATTACHMENT CRUD Operations


		private INEWS_ATTACHMENTService news_attachment;
		public virtual INEWS_ATTACHMENTService NEWS_ATTACHMENTService
		{
			get
			{
				if (this.news_attachment == null)
				{
					INEWS_ATTACHMENTAssembler assembler = new NEWS_ATTACHMENTAssembler();
					INEWS_ATTACHMENTRepository repository = new NEWS_ATTACHMENTRepository(this.UnitOfWork);
					this.news_attachment = new NEWS_ATTACHMENTService(assembler, repository);
				}
				return this.news_attachment;
			}
		}


		public IQueryable<NEWS_ATTACHMENT> NEWS_ATTACHMENTs
		{
			get { return this.NEWS_ATTACHMENTService.Repository.GetAll(); }
		}


		public IQueryable<NEWS_ATTACHMENT> ReadNEWS_ATTACHMENTs(Expression<Func<NEWS_ATTACHMENT, bool>> filter, int dummy)
		{
			return this.NEWS_ATTACHMENTService.Repository.Find(filter);
		}


		public IEnumerable<NEWS_ATTACHMENTDto> ReadNEWS_ATTACHMENTs()
		{
			return this.NEWS_ATTACHMENTService.GetAll();
		}


		public IEnumerable<NEWS_ATTACHMENTDto> ReadNEWS_ATTACHMENTs(Expression<Func<NEWS_ATTACHMENT, bool>> filter)
		{
			return this.NEWS_ATTACHMENTService.Find(filter);
		}


		public IEnumerable<NEWS_ATTACHMENTDto> ReadNEWS_ATTACHMENTs(ISpecification<NEWS_ATTACHMENT> specification)
		{
			return this.NEWS_ATTACHMENTService.Find(specification.GetExpression());
		}


		public IEnumerable<NEWS_ATTACHMENTDto> ReadNEWS_ATTACHMENTs(IQueryable<NEWS_ATTACHMENT> query)
		{
			return this.NEWS_ATTACHMENTService.Assembler.Assemble(query);
		}


		public IEnumerable<NEWS_ATTACHMENTDto> ReadNEWS_ATTACHMENTs(string[] propertyToSearch, object[] keyWords)
		{
			return this.NEWS_ATTACHMENTService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<NEWS_ATTACHMENTDto> ReadNEWS_ATTACHMENTs(object[] keyWords)
		{
			return this.NEWS_ATTACHMENTService.Find(keyWords);
		}


		public IEnumerable<NEWS_ATTACHMENTDto> ReadNEWS_ATTACHMENTsPaged(int startIndex, int pageSize)
		{
			return this.NEWS_ATTACHMENTService.Find(startIndex, pageSize);
		}


		public IEnumerable<NEWS_ATTACHMENTDto> ReadNEWS_ATTACHMENTsPaged(IQueryable<NEWS_ATTACHMENT> source, int pageIndex, int pageSize)
		{
			return this.NEWS_ATTACHMENTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<NEWS_ATTACHMENTDto> ReadNEWS_ATTACHMENTsPaged(IQueryable<NEWS_ATTACHMENT> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.NEWS_ATTACHMENTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<NEWS_ATTACHMENTDto> ReadNEWS_ATTACHMENTsFiltered(string sortExpression, string filterExpression)
		{
			return this.NEWS_ATTACHMENTService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<NEWS_ATTACHMENTDto> ReadNEWS_ATTACHMENTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.NEWS_ATTACHMENTService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<NEWS_ATTACHMENTDto> ReadNEWS_ATTACHMENTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<NEWS_ATTACHMENT, bool>> filter)
		{
			return this.NEWS_ATTACHMENTService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public NEWS_ATTACHMENTDto ReadNEWS_ATTACHMENTs(string dtoKey)
		{
			return this.NEWS_ATTACHMENTService.GetByKey(dtoKey);
		}


		public int CountNEWS_ATTACHMENTs()
		{
			return this.NEWS_ATTACHMENTService.Count();
		}


		public int CountNEWS_ATTACHMENTs(string filterExpression)
		{
			return this.NEWS_ATTACHMENTService.Count(filterExpression);
		}


		public int CountNEWS_ATTACHMENTs(Expression<Func<NEWS_ATTACHMENT, bool>> filter)
		{
			return this.NEWS_ATTACHMENTService.Count(filter);
		}


		public string CreateNEWS_ATTACHMENT(NEWS_ATTACHMENTDto news_attachment, bool doSaveChanges = true)
		{
			string key = this.NEWS_ATTACHMENTService.Add(news_attachment);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateNEWS_ATTACHMENT(NEWS_ATTACHMENTDto news_attachment, bool doSaveChanges = true)
		{
			this.NEWS_ATTACHMENTService.Update(news_attachment);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateNEWS_ATTACHMENTs(IEnumerable<NEWS_ATTACHMENTDto> news_attachments, bool doSaveChanges = true)
		{
			if (news_attachments == null)
			{
				return;
			}
			foreach (NEWS_ATTACHMENTDto instance in news_attachments)
			{
				if (instance == null)
				{
					continue;
				}


				this.NEWS_ATTACHMENTService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteNEWS_ATTACHMENT(NEWS_ATTACHMENTDto news_attachment, bool doSaveChanges = true)
		{
			this.NEWS_ATTACHMENTService.Delete(news_attachment);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteNEWS_ATTACHMENTs(IEnumerable<NEWS_ATTACHMENTDto> news_attachments, bool doSaveChanges = true)
		{
			if (news_attachments == null)
			{
				return;
			}
			foreach (NEWS_ATTACHMENTDto instance in news_attachments)
			{
				if (instance == null)
				{
					continue;
				}


				this.NEWS_ATTACHMENTService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveNEWS_ATTACHMENT(NEWS_ATTACHMENTDto news_attachment, bool doSaveChanges = true)
		{
			switch (news_attachment.RowState)
			{
				case RowState.Insert:
					this.CreateNEWS_ATTACHMENT(news_attachment, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateNEWS_ATTACHMENT(news_attachment, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteNEWS_ATTACHMENT(news_attachment, doSaveChanges);
					break;
			}
		}


		public void SaveNEWS_ATTACHMENTs(IEnumerable<NEWS_ATTACHMENTDto> news_attachments, bool doSaveChanges = true)
		{
			if (news_attachments == null)
			{
				return;
			}
			foreach (NEWS_ATTACHMENTDto instance in news_attachments)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveNEWS_ATTACHMENT(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion NEWS_ATTACHMENT CRUD Operations


		#region NEWS CRUD Operations


		private INEWSService news;
		public virtual INEWSService NEWSService
		{
			get
			{
				if (this.news == null)
				{
					INEWSAssembler assembler = new NEWSAssembler();
					INEWSRepository repository = new NEWSRepository(this.UnitOfWork);
					this.news = new NEWSService(assembler, repository);
				}
				return this.news;
			}
		}


		public IQueryable<NEWS> NEWS
		{
			get { return this.NEWSService.Repository.GetAll(); }
		}


		public IQueryable<NEWS> ReadNEWS(Expression<Func<NEWS, bool>> filter, int dummy)
		{
			return this.NEWSService.Repository.Find(filter);
		}


		public IEnumerable<NEWSDto> ReadNEWS()
		{
			return this.NEWSService.GetAll();
		}


		public IEnumerable<NEWSDto> ReadNEWS(Expression<Func<NEWS, bool>> filter)
		{
			return this.NEWSService.Find(filter);
		}


		public IEnumerable<NEWSDto> ReadNEWS(ISpecification<NEWS> specification)
		{
			return this.NEWSService.Find(specification.GetExpression());
		}


		public IEnumerable<NEWSDto> ReadNEWS(IQueryable<NEWS> query)
		{
			return this.NEWSService.Assembler.Assemble(query);
		}


		public IEnumerable<NEWSDto> ReadNEWS(string[] propertyToSearch, object[] keyWords)
		{
			return this.NEWSService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<NEWSDto> ReadNEWS(object[] keyWords)
		{
			return this.NEWSService.Find(keyWords);
		}


		public IEnumerable<NEWSDto> ReadNEWSPaged(int startIndex, int pageSize)
		{
			return this.NEWSService.Find(startIndex, pageSize);
		}


		public IEnumerable<NEWSDto> ReadNEWSPaged(IQueryable<NEWS> source, int pageIndex, int pageSize)
		{
			return this.NEWSService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<NEWSDto> ReadNEWSPaged(IQueryable<NEWS> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.NEWSService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<NEWSDto> ReadNEWSFiltered(string sortExpression, string filterExpression)
		{
			return this.NEWSService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<NEWSDto> ReadNEWSPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.NEWSService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<NEWSDto> ReadNEWSPagedAndFiltered(int startIndex, int pageSize, Expression<Func<NEWS, bool>> filter)
		{
			return this.NEWSService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public NEWSDto ReadNEWS(string dtoKey)
		{
			return this.NEWSService.GetByKey(dtoKey);
		}


		public int CountNEWS()
		{
			return this.NEWSService.Count();
		}


		public int CountNEWS(string filterExpression)
		{
			return this.NEWSService.Count(filterExpression);
		}


		public int CountNEWS(Expression<Func<NEWS, bool>> filter)
		{
			return this.NEWSService.Count(filter);
		}


		public string CreateNEWS(NEWSDto news, bool doSaveChanges = true)
		{
			string key = this.NEWSService.Add(news);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateNEWS(NEWSDto news, bool doSaveChanges = true)
		{
			this.NEWSService.Update(news);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateNEWS(IEnumerable<NEWSDto> news, bool doSaveChanges = true)
		{
			if (news == null)
			{
				return;
			}
			foreach (NEWSDto instance in news)
			{
				if (instance == null)
				{
					continue;
				}


				this.NEWSService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteNEWS(NEWSDto news, bool doSaveChanges = true)
		{
			this.NEWSService.Delete(news);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteNEWS(IEnumerable<NEWSDto> news, bool doSaveChanges = true)
		{
			if (news == null)
			{
				return;
			}
			foreach (NEWSDto instance in news)
			{
				if (instance == null)
				{
					continue;
				}


				this.NEWSService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveNEWS(NEWSDto news, bool doSaveChanges = true)
		{
			switch (news.RowState)
			{
				case RowState.Insert:
					this.CreateNEWS(news, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateNEWS(news, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteNEWS(news, doSaveChanges);
					break;
			}
		}


		public void SaveNEWS(IEnumerable<NEWSDto> news, bool doSaveChanges = true)
		{
			if (news == null)
			{
				return;
			}
			foreach (NEWSDto instance in news)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveNEWS(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion NEWS CRUD Operations


		#region MYLISTDET CRUD Operations


		private IMYLISTDETService mylistdet;
		public virtual IMYLISTDETService MYLISTDETService
		{
			get
			{
				if (this.mylistdet == null)
				{
					IMYLISTDETAssembler assembler = new MYLISTDETAssembler();
					IMYLISTDETRepository repository = new MYLISTDETRepository(this.UnitOfWork);
					this.mylistdet = new MYLISTDETService(assembler, repository);
				}
				return this.mylistdet;
			}
		}


		public IQueryable<MYLISTDET> MYLISTDETs
		{
			get { return this.MYLISTDETService.Repository.GetAll(); }
		}


		public IQueryable<MYLISTDET> ReadMYLISTDETs(Expression<Func<MYLISTDET, bool>> filter, int dummy)
		{
			return this.MYLISTDETService.Repository.Find(filter);
		}


		public IEnumerable<MYLISTDETDto> ReadMYLISTDETs()
		{
			return this.MYLISTDETService.GetAll();
		}


		public IEnumerable<MYLISTDETDto> ReadMYLISTDETs(Expression<Func<MYLISTDET, bool>> filter)
		{
			return this.MYLISTDETService.Find(filter);
		}


		public IEnumerable<MYLISTDETDto> ReadMYLISTDETs(ISpecification<MYLISTDET> specification)
		{
			return this.MYLISTDETService.Find(specification.GetExpression());
		}


		public IEnumerable<MYLISTDETDto> ReadMYLISTDETs(IQueryable<MYLISTDET> query)
		{
			return this.MYLISTDETService.Assembler.Assemble(query);
		}


		public IEnumerable<MYLISTDETDto> ReadMYLISTDETs(string[] propertyToSearch, object[] keyWords)
		{
			return this.MYLISTDETService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<MYLISTDETDto> ReadMYLISTDETs(object[] keyWords)
		{
			return this.MYLISTDETService.Find(keyWords);
		}


		public IEnumerable<MYLISTDETDto> ReadMYLISTDETsPaged(int startIndex, int pageSize)
		{
			return this.MYLISTDETService.Find(startIndex, pageSize);
		}


		public IEnumerable<MYLISTDETDto> ReadMYLISTDETsPaged(IQueryable<MYLISTDET> source, int pageIndex, int pageSize)
		{
			return this.MYLISTDETService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<MYLISTDETDto> ReadMYLISTDETsPaged(IQueryable<MYLISTDET> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.MYLISTDETService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<MYLISTDETDto> ReadMYLISTDETsFiltered(string sortExpression, string filterExpression)
		{
			return this.MYLISTDETService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<MYLISTDETDto> ReadMYLISTDETsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.MYLISTDETService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<MYLISTDETDto> ReadMYLISTDETsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<MYLISTDET, bool>> filter)
		{
			return this.MYLISTDETService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public MYLISTDETDto ReadMYLISTDETs(string dtoKey)
		{
			return this.MYLISTDETService.GetByKey(dtoKey);
		}


		public int CountMYLISTDETs()
		{
			return this.MYLISTDETService.Count();
		}


		public int CountMYLISTDETs(string filterExpression)
		{
			return this.MYLISTDETService.Count(filterExpression);
		}


		public int CountMYLISTDETs(Expression<Func<MYLISTDET, bool>> filter)
		{
			return this.MYLISTDETService.Count(filter);
		}


		public string CreateMYLISTDET(MYLISTDETDto mylistdet, bool doSaveChanges = true)
		{
			string key = this.MYLISTDETService.Add(mylistdet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateMYLISTDET(MYLISTDETDto mylistdet, bool doSaveChanges = true)
		{
			this.MYLISTDETService.Update(mylistdet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateMYLISTDETs(IEnumerable<MYLISTDETDto> mylistdets, bool doSaveChanges = true)
		{
			if (mylistdets == null)
			{
				return;
			}
			foreach (MYLISTDETDto instance in mylistdets)
			{
				if (instance == null)
				{
					continue;
				}


				this.MYLISTDETService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteMYLISTDET(MYLISTDETDto mylistdet, bool doSaveChanges = true)
		{
			this.MYLISTDETService.Delete(mylistdet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteMYLISTDETs(IEnumerable<MYLISTDETDto> mylistdets, bool doSaveChanges = true)
		{
			if (mylistdets == null)
			{
				return;
			}
			foreach (MYLISTDETDto instance in mylistdets)
			{
				if (instance == null)
				{
					continue;
				}


				this.MYLISTDETService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveMYLISTDET(MYLISTDETDto mylistdet, bool doSaveChanges = true)
		{
			switch (mylistdet.RowState)
			{
				case RowState.Insert:
					this.CreateMYLISTDET(mylistdet, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateMYLISTDET(mylistdet, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteMYLISTDET(mylistdet, doSaveChanges);
					break;
			}
		}


		public void SaveMYLISTDETs(IEnumerable<MYLISTDETDto> mylistdets, bool doSaveChanges = true)
		{
			if (mylistdets == null)
			{
				return;
			}
			foreach (MYLISTDETDto instance in mylistdets)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveMYLISTDET(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion MYLISTDET CRUD Operations


		#region MYLIST CRUD Operations


		private IMYLISTService mylist;
		public virtual IMYLISTService MYLISTService
		{
			get
			{
				if (this.mylist == null)
				{
					IMYLISTAssembler assembler = new MYLISTAssembler();
					IMYLISTRepository repository = new MYLISTRepository(this.UnitOfWork);
					this.mylist = new MYLISTService(assembler, repository);
				}
				return this.mylist;
			}
		}


		public IQueryable<MYLIST> MYLISTs
		{
			get { return this.MYLISTService.Repository.GetAll(); }
		}


		public IQueryable<MYLIST> ReadMYLISTs(Expression<Func<MYLIST, bool>> filter, int dummy)
		{
			return this.MYLISTService.Repository.Find(filter);
		}


		public IEnumerable<MYLISTDto> ReadMYLISTs()
		{
			return this.MYLISTService.GetAll();
		}


		public IEnumerable<MYLISTDto> ReadMYLISTs(Expression<Func<MYLIST, bool>> filter)
		{
			return this.MYLISTService.Find(filter);
		}


		public IEnumerable<MYLISTDto> ReadMYLISTs(ISpecification<MYLIST> specification)
		{
			return this.MYLISTService.Find(specification.GetExpression());
		}


		public IEnumerable<MYLISTDto> ReadMYLISTs(IQueryable<MYLIST> query)
		{
			return this.MYLISTService.Assembler.Assemble(query);
		}


		public IEnumerable<MYLISTDto> ReadMYLISTs(string[] propertyToSearch, object[] keyWords)
		{
			return this.MYLISTService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<MYLISTDto> ReadMYLISTs(object[] keyWords)
		{
			return this.MYLISTService.Find(keyWords);
		}


		public IEnumerable<MYLISTDto> ReadMYLISTsPaged(int startIndex, int pageSize)
		{
			return this.MYLISTService.Find(startIndex, pageSize);
		}


		public IEnumerable<MYLISTDto> ReadMYLISTsPaged(IQueryable<MYLIST> source, int pageIndex, int pageSize)
		{
			return this.MYLISTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<MYLISTDto> ReadMYLISTsPaged(IQueryable<MYLIST> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.MYLISTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<MYLISTDto> ReadMYLISTsFiltered(string sortExpression, string filterExpression)
		{
			return this.MYLISTService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<MYLISTDto> ReadMYLISTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.MYLISTService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<MYLISTDto> ReadMYLISTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<MYLIST, bool>> filter)
		{
			return this.MYLISTService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public MYLISTDto ReadMYLISTs(string dtoKey)
		{
			return this.MYLISTService.GetByKey(dtoKey);
		}


		public int CountMYLISTs()
		{
			return this.MYLISTService.Count();
		}


		public int CountMYLISTs(string filterExpression)
		{
			return this.MYLISTService.Count(filterExpression);
		}


		public int CountMYLISTs(Expression<Func<MYLIST, bool>> filter)
		{
			return this.MYLISTService.Count(filter);
		}


		public string CreateMYLIST(MYLISTDto mylist, bool doSaveChanges = true)
		{
			string key = this.MYLISTService.Add(mylist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateMYLIST(MYLISTDto mylist, bool doSaveChanges = true)
		{
			this.MYLISTService.Update(mylist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateMYLISTs(IEnumerable<MYLISTDto> mylists, bool doSaveChanges = true)
		{
			if (mylists == null)
			{
				return;
			}
			foreach (MYLISTDto instance in mylists)
			{
				if (instance == null)
				{
					continue;
				}


				this.MYLISTService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteMYLIST(MYLISTDto mylist, bool doSaveChanges = true)
		{
			this.MYLISTService.Delete(mylist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteMYLISTs(IEnumerable<MYLISTDto> mylists, bool doSaveChanges = true)
		{
			if (mylists == null)
			{
				return;
			}
			foreach (MYLISTDto instance in mylists)
			{
				if (instance == null)
				{
					continue;
				}


				this.MYLISTService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveMYLIST(MYLISTDto mylist, bool doSaveChanges = true)
		{
			switch (mylist.RowState)
			{
				case RowState.Insert:
					this.CreateMYLIST(mylist, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateMYLIST(mylist, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteMYLIST(mylist, doSaveChanges);
					break;
			}
		}


		public void SaveMYLISTs(IEnumerable<MYLISTDto> mylists, bool doSaveChanges = true)
		{
			if (mylists == null)
			{
				return;
			}
			foreach (MYLISTDto instance in mylists)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveMYLIST(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion MYLIST CRUD Operations


		#region MONTHLYTEACHPOINTCALCDATUM CRUD Operations


		private IMONTHLYTEACHPOINTCALCDATUMService monthlyteachpointcalcdatum;
		public virtual IMONTHLYTEACHPOINTCALCDATUMService MONTHLYTEACHPOINTCALCDATUMService
		{
			get
			{
				if (this.monthlyteachpointcalcdatum == null)
				{
					IMONTHLYTEACHPOINTCALCDATUMAssembler assembler = new MONTHLYTEACHPOINTCALCDATUMAssembler();
					IMONTHLYTEACHPOINTCALCDATUMRepository repository = new MONTHLYTEACHPOINTCALCDATUMRepository(this.UnitOfWork);
					this.monthlyteachpointcalcdatum = new MONTHLYTEACHPOINTCALCDATUMService(assembler, repository);
				}
				return this.monthlyteachpointcalcdatum;
			}
		}


		public IQueryable<MONTHLYTEACHPOINTCALCDATUM> MONTHLYTEACHPOINTCALCDATa
		{
			get { return this.MONTHLYTEACHPOINTCALCDATUMService.Repository.GetAll(); }
		}


		public IQueryable<MONTHLYTEACHPOINTCALCDATUM> ReadMONTHLYTEACHPOINTCALCDATa(Expression<Func<MONTHLYTEACHPOINTCALCDATUM, bool>> filter, int dummy)
		{
			return this.MONTHLYTEACHPOINTCALCDATUMService.Repository.Find(filter);
		}


		public IEnumerable<MONTHLYTEACHPOINTCALCDATUMDto> ReadMONTHLYTEACHPOINTCALCDATa()
		{
			return this.MONTHLYTEACHPOINTCALCDATUMService.GetAll();
		}


		public IEnumerable<MONTHLYTEACHPOINTCALCDATUMDto> ReadMONTHLYTEACHPOINTCALCDATa(Expression<Func<MONTHLYTEACHPOINTCALCDATUM, bool>> filter)
		{
			return this.MONTHLYTEACHPOINTCALCDATUMService.Find(filter);
		}


		public IEnumerable<MONTHLYTEACHPOINTCALCDATUMDto> ReadMONTHLYTEACHPOINTCALCDATa(ISpecification<MONTHLYTEACHPOINTCALCDATUM> specification)
		{
			return this.MONTHLYTEACHPOINTCALCDATUMService.Find(specification.GetExpression());
		}


		public IEnumerable<MONTHLYTEACHPOINTCALCDATUMDto> ReadMONTHLYTEACHPOINTCALCDATa(IQueryable<MONTHLYTEACHPOINTCALCDATUM> query)
		{
			return this.MONTHLYTEACHPOINTCALCDATUMService.Assembler.Assemble(query);
		}


		public IEnumerable<MONTHLYTEACHPOINTCALCDATUMDto> ReadMONTHLYTEACHPOINTCALCDATa(string[] propertyToSearch, object[] keyWords)
		{
			return this.MONTHLYTEACHPOINTCALCDATUMService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<MONTHLYTEACHPOINTCALCDATUMDto> ReadMONTHLYTEACHPOINTCALCDATa(object[] keyWords)
		{
			return this.MONTHLYTEACHPOINTCALCDATUMService.Find(keyWords);
		}


		public IEnumerable<MONTHLYTEACHPOINTCALCDATUMDto> ReadMONTHLYTEACHPOINTCALCDATaPaged(int startIndex, int pageSize)
		{
			return this.MONTHLYTEACHPOINTCALCDATUMService.Find(startIndex, pageSize);
		}


		public IEnumerable<MONTHLYTEACHPOINTCALCDATUMDto> ReadMONTHLYTEACHPOINTCALCDATaPaged(IQueryable<MONTHLYTEACHPOINTCALCDATUM> source, int pageIndex, int pageSize)
		{
			return this.MONTHLYTEACHPOINTCALCDATUMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<MONTHLYTEACHPOINTCALCDATUMDto> ReadMONTHLYTEACHPOINTCALCDATaPaged(IQueryable<MONTHLYTEACHPOINTCALCDATUM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.MONTHLYTEACHPOINTCALCDATUMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<MONTHLYTEACHPOINTCALCDATUMDto> ReadMONTHLYTEACHPOINTCALCDATaFiltered(string sortExpression, string filterExpression)
		{
			return this.MONTHLYTEACHPOINTCALCDATUMService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<MONTHLYTEACHPOINTCALCDATUMDto> ReadMONTHLYTEACHPOINTCALCDATaPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.MONTHLYTEACHPOINTCALCDATUMService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<MONTHLYTEACHPOINTCALCDATUMDto> ReadMONTHLYTEACHPOINTCALCDATaPagedAndFiltered(int startIndex, int pageSize, Expression<Func<MONTHLYTEACHPOINTCALCDATUM, bool>> filter)
		{
			return this.MONTHLYTEACHPOINTCALCDATUMService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public MONTHLYTEACHPOINTCALCDATUMDto ReadMONTHLYTEACHPOINTCALCDATa(string dtoKey)
		{
			return this.MONTHLYTEACHPOINTCALCDATUMService.GetByKey(dtoKey);
		}


		public int CountMONTHLYTEACHPOINTCALCDATa()
		{
			return this.MONTHLYTEACHPOINTCALCDATUMService.Count();
		}


		public int CountMONTHLYTEACHPOINTCALCDATa(string filterExpression)
		{
			return this.MONTHLYTEACHPOINTCALCDATUMService.Count(filterExpression);
		}


		public int CountMONTHLYTEACHPOINTCALCDATa(Expression<Func<MONTHLYTEACHPOINTCALCDATUM, bool>> filter)
		{
			return this.MONTHLYTEACHPOINTCALCDATUMService.Count(filter);
		}


		public string CreateMONTHLYTEACHPOINTCALCDATUM(MONTHLYTEACHPOINTCALCDATUMDto monthlyteachpointcalcdatum, bool doSaveChanges = true)
		{
			string key = this.MONTHLYTEACHPOINTCALCDATUMService.Add(monthlyteachpointcalcdatum);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateMONTHLYTEACHPOINTCALCDATUM(MONTHLYTEACHPOINTCALCDATUMDto monthlyteachpointcalcdatum, bool doSaveChanges = true)
		{
			this.MONTHLYTEACHPOINTCALCDATUMService.Update(monthlyteachpointcalcdatum);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateMONTHLYTEACHPOINTCALCDATa(IEnumerable<MONTHLYTEACHPOINTCALCDATUMDto> monthlyteachpointcalcdata, bool doSaveChanges = true)
		{
			if (monthlyteachpointcalcdata == null)
			{
				return;
			}
			foreach (MONTHLYTEACHPOINTCALCDATUMDto instance in monthlyteachpointcalcdata)
			{
				if (instance == null)
				{
					continue;
				}


				this.MONTHLYTEACHPOINTCALCDATUMService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteMONTHLYTEACHPOINTCALCDATUM(MONTHLYTEACHPOINTCALCDATUMDto monthlyteachpointcalcdatum, bool doSaveChanges = true)
		{
			this.MONTHLYTEACHPOINTCALCDATUMService.Delete(monthlyteachpointcalcdatum);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteMONTHLYTEACHPOINTCALCDATa(IEnumerable<MONTHLYTEACHPOINTCALCDATUMDto> monthlyteachpointcalcdata, bool doSaveChanges = true)
		{
			if (monthlyteachpointcalcdata == null)
			{
				return;
			}
			foreach (MONTHLYTEACHPOINTCALCDATUMDto instance in monthlyteachpointcalcdata)
			{
				if (instance == null)
				{
					continue;
				}


				this.MONTHLYTEACHPOINTCALCDATUMService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveMONTHLYTEACHPOINTCALCDATUM(MONTHLYTEACHPOINTCALCDATUMDto monthlyteachpointcalcdatum, bool doSaveChanges = true)
		{
			switch (monthlyteachpointcalcdatum.RowState)
			{
				case RowState.Insert:
					this.CreateMONTHLYTEACHPOINTCALCDATUM(monthlyteachpointcalcdatum, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateMONTHLYTEACHPOINTCALCDATUM(monthlyteachpointcalcdatum, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteMONTHLYTEACHPOINTCALCDATUM(monthlyteachpointcalcdatum, doSaveChanges);
					break;
			}
		}


		public void SaveMONTHLYTEACHPOINTCALCDATa(IEnumerable<MONTHLYTEACHPOINTCALCDATUMDto> monthlyteachpointcalcdata, bool doSaveChanges = true)
		{
			if (monthlyteachpointcalcdata == null)
			{
				return;
			}
			foreach (MONTHLYTEACHPOINTCALCDATUMDto instance in monthlyteachpointcalcdata)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveMONTHLYTEACHPOINTCALCDATUM(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion MONTHLYTEACHPOINTCALCDATUM CRUD Operations


		#region MESSAGEBOARD CRUD Operations


		private IMESSAGEBOARDService messageboard;
		public virtual IMESSAGEBOARDService MESSAGEBOARDService
		{
			get
			{
				if (this.messageboard == null)
				{
					IMESSAGEBOARDAssembler assembler = new MESSAGEBOARDAssembler();
					IMESSAGEBOARDRepository repository = new MESSAGEBOARDRepository(this.UnitOfWork);
					this.messageboard = new MESSAGEBOARDService(assembler, repository);
				}
				return this.messageboard;
			}
		}


		public IQueryable<MESSAGEBOARD> MESSAGEBOARDs
		{
			get { return this.MESSAGEBOARDService.Repository.GetAll(); }
		}


		public IQueryable<MESSAGEBOARD> ReadMESSAGEBOARDs(Expression<Func<MESSAGEBOARD, bool>> filter, int dummy)
		{
			return this.MESSAGEBOARDService.Repository.Find(filter);
		}


		public IEnumerable<MESSAGEBOARDDto> ReadMESSAGEBOARDs()
		{
			return this.MESSAGEBOARDService.GetAll();
		}


		public IEnumerable<MESSAGEBOARDDto> ReadMESSAGEBOARDs(Expression<Func<MESSAGEBOARD, bool>> filter)
		{
			return this.MESSAGEBOARDService.Find(filter);
		}


		public IEnumerable<MESSAGEBOARDDto> ReadMESSAGEBOARDs(ISpecification<MESSAGEBOARD> specification)
		{
			return this.MESSAGEBOARDService.Find(specification.GetExpression());
		}


		public IEnumerable<MESSAGEBOARDDto> ReadMESSAGEBOARDs(IQueryable<MESSAGEBOARD> query)
		{
			return this.MESSAGEBOARDService.Assembler.Assemble(query);
		}


		public IEnumerable<MESSAGEBOARDDto> ReadMESSAGEBOARDs(string[] propertyToSearch, object[] keyWords)
		{
			return this.MESSAGEBOARDService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<MESSAGEBOARDDto> ReadMESSAGEBOARDs(object[] keyWords)
		{
			return this.MESSAGEBOARDService.Find(keyWords);
		}


		public IEnumerable<MESSAGEBOARDDto> ReadMESSAGEBOARDsPaged(int startIndex, int pageSize)
		{
			return this.MESSAGEBOARDService.Find(startIndex, pageSize);
		}


		public IEnumerable<MESSAGEBOARDDto> ReadMESSAGEBOARDsPaged(IQueryable<MESSAGEBOARD> source, int pageIndex, int pageSize)
		{
			return this.MESSAGEBOARDService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<MESSAGEBOARDDto> ReadMESSAGEBOARDsPaged(IQueryable<MESSAGEBOARD> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.MESSAGEBOARDService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<MESSAGEBOARDDto> ReadMESSAGEBOARDsFiltered(string sortExpression, string filterExpression)
		{
			return this.MESSAGEBOARDService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<MESSAGEBOARDDto> ReadMESSAGEBOARDsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.MESSAGEBOARDService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<MESSAGEBOARDDto> ReadMESSAGEBOARDsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<MESSAGEBOARD, bool>> filter)
		{
			return this.MESSAGEBOARDService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public MESSAGEBOARDDto ReadMESSAGEBOARDs(string dtoKey)
		{
			return this.MESSAGEBOARDService.GetByKey(dtoKey);
		}


		public int CountMESSAGEBOARDs()
		{
			return this.MESSAGEBOARDService.Count();
		}


		public int CountMESSAGEBOARDs(string filterExpression)
		{
			return this.MESSAGEBOARDService.Count(filterExpression);
		}


		public int CountMESSAGEBOARDs(Expression<Func<MESSAGEBOARD, bool>> filter)
		{
			return this.MESSAGEBOARDService.Count(filter);
		}


		public string CreateMESSAGEBOARD(MESSAGEBOARDDto messageboard, bool doSaveChanges = true)
		{
			string key = this.MESSAGEBOARDService.Add(messageboard);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateMESSAGEBOARD(MESSAGEBOARDDto messageboard, bool doSaveChanges = true)
		{
			this.MESSAGEBOARDService.Update(messageboard);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateMESSAGEBOARDs(IEnumerable<MESSAGEBOARDDto> messageboards, bool doSaveChanges = true)
		{
			if (messageboards == null)
			{
				return;
			}
			foreach (MESSAGEBOARDDto instance in messageboards)
			{
				if (instance == null)
				{
					continue;
				}


				this.MESSAGEBOARDService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteMESSAGEBOARD(MESSAGEBOARDDto messageboard, bool doSaveChanges = true)
		{
			this.MESSAGEBOARDService.Delete(messageboard);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteMESSAGEBOARDs(IEnumerable<MESSAGEBOARDDto> messageboards, bool doSaveChanges = true)
		{
			if (messageboards == null)
			{
				return;
			}
			foreach (MESSAGEBOARDDto instance in messageboards)
			{
				if (instance == null)
				{
					continue;
				}


				this.MESSAGEBOARDService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveMESSAGEBOARD(MESSAGEBOARDDto messageboard, bool doSaveChanges = true)
		{
			switch (messageboard.RowState)
			{
				case RowState.Insert:
					this.CreateMESSAGEBOARD(messageboard, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateMESSAGEBOARD(messageboard, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteMESSAGEBOARD(messageboard, doSaveChanges);
					break;
			}
		}


		public void SaveMESSAGEBOARDs(IEnumerable<MESSAGEBOARDDto> messageboards, bool doSaveChanges = true)
		{
			if (messageboards == null)
			{
				return;
			}
			foreach (MESSAGEBOARDDto instance in messageboards)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveMESSAGEBOARD(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion MESSAGEBOARD CRUD Operations


		#region MEMBER_BK CRUD Operations


		private IMEMBER_BKService member_bk;
		public virtual IMEMBER_BKService MEMBER_BKService
		{
			get
			{
				if (this.member_bk == null)
				{
					IMEMBER_BKAssembler assembler = new MEMBER_BKAssembler();
					IMEMBER_BKRepository repository = new MEMBER_BKRepository(this.UnitOfWork);
					this.member_bk = new MEMBER_BKService(assembler, repository);
				}
				return this.member_bk;
			}
		}


		public IQueryable<MEMBER_BK> MEMBER_BKs
		{
			get { return this.MEMBER_BKService.Repository.GetAll(); }
		}


		public IQueryable<MEMBER_BK> ReadMEMBER_BKs(Expression<Func<MEMBER_BK, bool>> filter, int dummy)
		{
			return this.MEMBER_BKService.Repository.Find(filter);
		}


		public IEnumerable<MEMBER_BKDto> ReadMEMBER_BKs()
		{
			return this.MEMBER_BKService.GetAll();
		}


		public IEnumerable<MEMBER_BKDto> ReadMEMBER_BKs(Expression<Func<MEMBER_BK, bool>> filter)
		{
			return this.MEMBER_BKService.Find(filter);
		}


		public IEnumerable<MEMBER_BKDto> ReadMEMBER_BKs(ISpecification<MEMBER_BK> specification)
		{
			return this.MEMBER_BKService.Find(specification.GetExpression());
		}


		public IEnumerable<MEMBER_BKDto> ReadMEMBER_BKs(IQueryable<MEMBER_BK> query)
		{
			return this.MEMBER_BKService.Assembler.Assemble(query);
		}


		public IEnumerable<MEMBER_BKDto> ReadMEMBER_BKs(string[] propertyToSearch, object[] keyWords)
		{
			return this.MEMBER_BKService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<MEMBER_BKDto> ReadMEMBER_BKs(object[] keyWords)
		{
			return this.MEMBER_BKService.Find(keyWords);
		}


		public IEnumerable<MEMBER_BKDto> ReadMEMBER_BKsPaged(int startIndex, int pageSize)
		{
			return this.MEMBER_BKService.Find(startIndex, pageSize);
		}


		public IEnumerable<MEMBER_BKDto> ReadMEMBER_BKsPaged(IQueryable<MEMBER_BK> source, int pageIndex, int pageSize)
		{
			return this.MEMBER_BKService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<MEMBER_BKDto> ReadMEMBER_BKsPaged(IQueryable<MEMBER_BK> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.MEMBER_BKService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<MEMBER_BKDto> ReadMEMBER_BKsFiltered(string sortExpression, string filterExpression)
		{
			return this.MEMBER_BKService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<MEMBER_BKDto> ReadMEMBER_BKsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.MEMBER_BKService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<MEMBER_BKDto> ReadMEMBER_BKsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<MEMBER_BK, bool>> filter)
		{
			return this.MEMBER_BKService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public MEMBER_BKDto ReadMEMBER_BKs(string dtoKey)
		{
			return this.MEMBER_BKService.GetByKey(dtoKey);
		}


		public int CountMEMBER_BKs()
		{
			return this.MEMBER_BKService.Count();
		}


		public int CountMEMBER_BKs(string filterExpression)
		{
			return this.MEMBER_BKService.Count(filterExpression);
		}


		public int CountMEMBER_BKs(Expression<Func<MEMBER_BK, bool>> filter)
		{
			return this.MEMBER_BKService.Count(filter);
		}


		public string CreateMEMBER_BK(MEMBER_BKDto member_bk, bool doSaveChanges = true)
		{
			string key = this.MEMBER_BKService.Add(member_bk);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateMEMBER_BK(MEMBER_BKDto member_bk, bool doSaveChanges = true)
		{
			this.MEMBER_BKService.Update(member_bk);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateMEMBER_BKs(IEnumerable<MEMBER_BKDto> member_bks, bool doSaveChanges = true)
		{
			if (member_bks == null)
			{
				return;
			}
			foreach (MEMBER_BKDto instance in member_bks)
			{
				if (instance == null)
				{
					continue;
				}


				this.MEMBER_BKService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteMEMBER_BK(MEMBER_BKDto member_bk, bool doSaveChanges = true)
		{
			this.MEMBER_BKService.Delete(member_bk);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteMEMBER_BKs(IEnumerable<MEMBER_BKDto> member_bks, bool doSaveChanges = true)
		{
			if (member_bks == null)
			{
				return;
			}
			foreach (MEMBER_BKDto instance in member_bks)
			{
				if (instance == null)
				{
					continue;
				}


				this.MEMBER_BKService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveMEMBER_BK(MEMBER_BKDto member_bk, bool doSaveChanges = true)
		{
			switch (member_bk.RowState)
			{
				case RowState.Insert:
					this.CreateMEMBER_BK(member_bk, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateMEMBER_BK(member_bk, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteMEMBER_BK(member_bk, doSaveChanges);
					break;
			}
		}


		public void SaveMEMBER_BKs(IEnumerable<MEMBER_BKDto> member_bks, bool doSaveChanges = true)
		{
			if (member_bks == null)
			{
				return;
			}
			foreach (MEMBER_BKDto instance in member_bks)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveMEMBER_BK(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion MEMBER_BK CRUD Operations


		#region MEMBER CRUD Operations


		private IMEMBERService member;
		public virtual IMEMBERService MEMBERService
		{
			get
			{
				if (this.member == null)
				{
					IMEMBERAssembler assembler = new MEMBERAssembler();
					IMEMBERRepository repository = new MEMBERRepository(this.UnitOfWork);
					this.member = new MEMBERService(assembler, repository);
				}
				return this.member;
			}
		}


		public IQueryable<MEMBER> MEMBERs
		{
			get { return this.MEMBERService.Repository.GetAll(); }
		}


		public IQueryable<MEMBER> ReadMEMBERs(Expression<Func<MEMBER, bool>> filter, int dummy)
		{
			return this.MEMBERService.Repository.Find(filter);
		}


		public IEnumerable<MEMBERDto> ReadMEMBERs()
		{
			return this.MEMBERService.GetAll();
		}


		public IEnumerable<MEMBERDto> ReadMEMBERs(Expression<Func<MEMBER, bool>> filter)
		{
			return this.MEMBERService.Find(filter);
		}


		public IEnumerable<MEMBERDto> ReadMEMBERs(ISpecification<MEMBER> specification)
		{
			return this.MEMBERService.Find(specification.GetExpression());
		}


		public IEnumerable<MEMBERDto> ReadMEMBERs(IQueryable<MEMBER> query)
		{
			return this.MEMBERService.Assembler.Assemble(query);
		}


		public IEnumerable<MEMBERDto> ReadMEMBERs(string[] propertyToSearch, object[] keyWords)
		{
			return this.MEMBERService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<MEMBERDto> ReadMEMBERs(object[] keyWords)
		{
			return this.MEMBERService.Find(keyWords);
		}


		public IEnumerable<MEMBERDto> ReadMEMBERsPaged(int startIndex, int pageSize)
		{
			return this.MEMBERService.Find(startIndex, pageSize);
		}


		public IEnumerable<MEMBERDto> ReadMEMBERsPaged(IQueryable<MEMBER> source, int pageIndex, int pageSize)
		{
			return this.MEMBERService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<MEMBERDto> ReadMEMBERsPaged(IQueryable<MEMBER> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.MEMBERService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<MEMBERDto> ReadMEMBERsFiltered(string sortExpression, string filterExpression)
		{
			return this.MEMBERService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<MEMBERDto> ReadMEMBERsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.MEMBERService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<MEMBERDto> ReadMEMBERsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<MEMBER, bool>> filter)
		{
			return this.MEMBERService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public MEMBERDto ReadMEMBERs(string dtoKey)
		{
			return this.MEMBERService.GetByKey(dtoKey);
		}


		public int CountMEMBERs()
		{
			return this.MEMBERService.Count();
		}


		public int CountMEMBERs(string filterExpression)
		{
			return this.MEMBERService.Count(filterExpression);
		}


		public int CountMEMBERs(Expression<Func<MEMBER, bool>> filter)
		{
			return this.MEMBERService.Count(filter);
		}


		public string CreateMEMBER(MEMBERDto member, bool doSaveChanges = true)
		{
			string key = this.MEMBERService.Add(member);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateMEMBER(MEMBERDto member, bool doSaveChanges = true)
		{
			this.MEMBERService.Update(member);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateMEMBERs(IEnumerable<MEMBERDto> members, bool doSaveChanges = true)
		{
			if (members == null)
			{
				return;
			}
			foreach (MEMBERDto instance in members)
			{
				if (instance == null)
				{
					continue;
				}


				this.MEMBERService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteMEMBER(MEMBERDto member, bool doSaveChanges = true)
		{
			this.MEMBERService.Delete(member);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteMEMBERs(IEnumerable<MEMBERDto> members, bool doSaveChanges = true)
		{
			if (members == null)
			{
				return;
			}
			foreach (MEMBERDto instance in members)
			{
				if (instance == null)
				{
					continue;
				}


				this.MEMBERService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveMEMBER(MEMBERDto member, bool doSaveChanges = true)
		{
			switch (member.RowState)
			{
				case RowState.Insert:
					this.CreateMEMBER(member, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateMEMBER(member, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteMEMBER(member, doSaveChanges);
					break;
			}
		}


		public void SaveMEMBERs(IEnumerable<MEMBERDto> members, bool doSaveChanges = true)
		{
			if (members == null)
			{
				return;
			}
			foreach (MEMBERDto instance in members)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveMEMBER(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion MEMBER CRUD Operations


		#region MEDICALVOTELIST CRUD Operations


		private IMEDICALVOTELISTService medicalvotelist;
		public virtual IMEDICALVOTELISTService MEDICALVOTELISTService
		{
			get
			{
				if (this.medicalvotelist == null)
				{
					IMEDICALVOTELISTAssembler assembler = new MEDICALVOTELISTAssembler();
					IMEDICALVOTELISTRepository repository = new MEDICALVOTELISTRepository(this.UnitOfWork);
					this.medicalvotelist = new MEDICALVOTELISTService(assembler, repository);
				}
				return this.medicalvotelist;
			}
		}


		public IQueryable<MEDICALVOTELIST> MEDICALVOTELISTs
		{
			get { return this.MEDICALVOTELISTService.Repository.GetAll(); }
		}


		public IQueryable<MEDICALVOTELIST> ReadMEDICALVOTELISTs(Expression<Func<MEDICALVOTELIST, bool>> filter, int dummy)
		{
			return this.MEDICALVOTELISTService.Repository.Find(filter);
		}


		public IEnumerable<MEDICALVOTELISTDto> ReadMEDICALVOTELISTs()
		{
			return this.MEDICALVOTELISTService.GetAll();
		}


		public IEnumerable<MEDICALVOTELISTDto> ReadMEDICALVOTELISTs(Expression<Func<MEDICALVOTELIST, bool>> filter)
		{
			return this.MEDICALVOTELISTService.Find(filter);
		}


		public IEnumerable<MEDICALVOTELISTDto> ReadMEDICALVOTELISTs(ISpecification<MEDICALVOTELIST> specification)
		{
			return this.MEDICALVOTELISTService.Find(specification.GetExpression());
		}


		public IEnumerable<MEDICALVOTELISTDto> ReadMEDICALVOTELISTs(IQueryable<MEDICALVOTELIST> query)
		{
			return this.MEDICALVOTELISTService.Assembler.Assemble(query);
		}


		public IEnumerable<MEDICALVOTELISTDto> ReadMEDICALVOTELISTs(string[] propertyToSearch, object[] keyWords)
		{
			return this.MEDICALVOTELISTService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<MEDICALVOTELISTDto> ReadMEDICALVOTELISTs(object[] keyWords)
		{
			return this.MEDICALVOTELISTService.Find(keyWords);
		}


		public IEnumerable<MEDICALVOTELISTDto> ReadMEDICALVOTELISTsPaged(int startIndex, int pageSize)
		{
			return this.MEDICALVOTELISTService.Find(startIndex, pageSize);
		}


		public IEnumerable<MEDICALVOTELISTDto> ReadMEDICALVOTELISTsPaged(IQueryable<MEDICALVOTELIST> source, int pageIndex, int pageSize)
		{
			return this.MEDICALVOTELISTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<MEDICALVOTELISTDto> ReadMEDICALVOTELISTsPaged(IQueryable<MEDICALVOTELIST> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.MEDICALVOTELISTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<MEDICALVOTELISTDto> ReadMEDICALVOTELISTsFiltered(string sortExpression, string filterExpression)
		{
			return this.MEDICALVOTELISTService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<MEDICALVOTELISTDto> ReadMEDICALVOTELISTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.MEDICALVOTELISTService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<MEDICALVOTELISTDto> ReadMEDICALVOTELISTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<MEDICALVOTELIST, bool>> filter)
		{
			return this.MEDICALVOTELISTService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public MEDICALVOTELISTDto ReadMEDICALVOTELISTs(string dtoKey)
		{
			return this.MEDICALVOTELISTService.GetByKey(dtoKey);
		}


		public int CountMEDICALVOTELISTs()
		{
			return this.MEDICALVOTELISTService.Count();
		}


		public int CountMEDICALVOTELISTs(string filterExpression)
		{
			return this.MEDICALVOTELISTService.Count(filterExpression);
		}


		public int CountMEDICALVOTELISTs(Expression<Func<MEDICALVOTELIST, bool>> filter)
		{
			return this.MEDICALVOTELISTService.Count(filter);
		}


		public string CreateMEDICALVOTELIST(MEDICALVOTELISTDto medicalvotelist, bool doSaveChanges = true)
		{
			string key = this.MEDICALVOTELISTService.Add(medicalvotelist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateMEDICALVOTELIST(MEDICALVOTELISTDto medicalvotelist, bool doSaveChanges = true)
		{
			this.MEDICALVOTELISTService.Update(medicalvotelist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateMEDICALVOTELISTs(IEnumerable<MEDICALVOTELISTDto> medicalvotelists, bool doSaveChanges = true)
		{
			if (medicalvotelists == null)
			{
				return;
			}
			foreach (MEDICALVOTELISTDto instance in medicalvotelists)
			{
				if (instance == null)
				{
					continue;
				}


				this.MEDICALVOTELISTService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteMEDICALVOTELIST(MEDICALVOTELISTDto medicalvotelist, bool doSaveChanges = true)
		{
			this.MEDICALVOTELISTService.Delete(medicalvotelist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteMEDICALVOTELISTs(IEnumerable<MEDICALVOTELISTDto> medicalvotelists, bool doSaveChanges = true)
		{
			if (medicalvotelists == null)
			{
				return;
			}
			foreach (MEDICALVOTELISTDto instance in medicalvotelists)
			{
				if (instance == null)
				{
					continue;
				}


				this.MEDICALVOTELISTService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveMEDICALVOTELIST(MEDICALVOTELISTDto medicalvotelist, bool doSaveChanges = true)
		{
			switch (medicalvotelist.RowState)
			{
				case RowState.Insert:
					this.CreateMEDICALVOTELIST(medicalvotelist, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateMEDICALVOTELIST(medicalvotelist, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteMEDICALVOTELIST(medicalvotelist, doSaveChanges);
					break;
			}
		}


		public void SaveMEDICALVOTELISTs(IEnumerable<MEDICALVOTELISTDto> medicalvotelists, bool doSaveChanges = true)
		{
			if (medicalvotelists == null)
			{
				return;
			}
			foreach (MEDICALVOTELISTDto instance in medicalvotelists)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveMEDICALVOTELIST(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion MEDICALVOTELIST CRUD Operations


		#region MEDICALTEACHPOINT CRUD Operations


		private IMEDICALTEACHPOINTService medicalteachpoint;
		public virtual IMEDICALTEACHPOINTService MEDICALTEACHPOINTService
		{
			get
			{
				if (this.medicalteachpoint == null)
				{
					IMEDICALTEACHPOINTAssembler assembler = new MEDICALTEACHPOINTAssembler();
					IMEDICALTEACHPOINTRepository repository = new MEDICALTEACHPOINTRepository(this.UnitOfWork);
					this.medicalteachpoint = new MEDICALTEACHPOINTService(assembler, repository);
				}
				return this.medicalteachpoint;
			}
		}


		public IQueryable<MEDICALTEACHPOINT> MEDICALTEACHPOINTs
		{
			get { return this.MEDICALTEACHPOINTService.Repository.GetAll(); }
		}


		public IQueryable<MEDICALTEACHPOINT> ReadMEDICALTEACHPOINTs(Expression<Func<MEDICALTEACHPOINT, bool>> filter, int dummy)
		{
			return this.MEDICALTEACHPOINTService.Repository.Find(filter);
		}


		public IEnumerable<MEDICALTEACHPOINTDto> ReadMEDICALTEACHPOINTs()
		{
			return this.MEDICALTEACHPOINTService.GetAll();
		}


		public IEnumerable<MEDICALTEACHPOINTDto> ReadMEDICALTEACHPOINTs(Expression<Func<MEDICALTEACHPOINT, bool>> filter)
		{
			return this.MEDICALTEACHPOINTService.Find(filter);
		}


		public IEnumerable<MEDICALTEACHPOINTDto> ReadMEDICALTEACHPOINTs(ISpecification<MEDICALTEACHPOINT> specification)
		{
			return this.MEDICALTEACHPOINTService.Find(specification.GetExpression());
		}


		public IEnumerable<MEDICALTEACHPOINTDto> ReadMEDICALTEACHPOINTs(IQueryable<MEDICALTEACHPOINT> query)
		{
			return this.MEDICALTEACHPOINTService.Assembler.Assemble(query);
		}


		public IEnumerable<MEDICALTEACHPOINTDto> ReadMEDICALTEACHPOINTs(string[] propertyToSearch, object[] keyWords)
		{
			return this.MEDICALTEACHPOINTService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<MEDICALTEACHPOINTDto> ReadMEDICALTEACHPOINTs(object[] keyWords)
		{
			return this.MEDICALTEACHPOINTService.Find(keyWords);
		}


		public IEnumerable<MEDICALTEACHPOINTDto> ReadMEDICALTEACHPOINTsPaged(int startIndex, int pageSize)
		{
			return this.MEDICALTEACHPOINTService.Find(startIndex, pageSize);
		}


		public IEnumerable<MEDICALTEACHPOINTDto> ReadMEDICALTEACHPOINTsPaged(IQueryable<MEDICALTEACHPOINT> source, int pageIndex, int pageSize)
		{
			return this.MEDICALTEACHPOINTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<MEDICALTEACHPOINTDto> ReadMEDICALTEACHPOINTsPaged(IQueryable<MEDICALTEACHPOINT> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.MEDICALTEACHPOINTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<MEDICALTEACHPOINTDto> ReadMEDICALTEACHPOINTsFiltered(string sortExpression, string filterExpression)
		{
			return this.MEDICALTEACHPOINTService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<MEDICALTEACHPOINTDto> ReadMEDICALTEACHPOINTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.MEDICALTEACHPOINTService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<MEDICALTEACHPOINTDto> ReadMEDICALTEACHPOINTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<MEDICALTEACHPOINT, bool>> filter)
		{
			return this.MEDICALTEACHPOINTService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public MEDICALTEACHPOINTDto ReadMEDICALTEACHPOINTs(string dtoKey)
		{
			return this.MEDICALTEACHPOINTService.GetByKey(dtoKey);
		}


		public int CountMEDICALTEACHPOINTs()
		{
			return this.MEDICALTEACHPOINTService.Count();
		}


		public int CountMEDICALTEACHPOINTs(string filterExpression)
		{
			return this.MEDICALTEACHPOINTService.Count(filterExpression);
		}


		public int CountMEDICALTEACHPOINTs(Expression<Func<MEDICALTEACHPOINT, bool>> filter)
		{
			return this.MEDICALTEACHPOINTService.Count(filter);
		}


		public string CreateMEDICALTEACHPOINT(MEDICALTEACHPOINTDto medicalteachpoint, bool doSaveChanges = true)
		{
			string key = this.MEDICALTEACHPOINTService.Add(medicalteachpoint);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateMEDICALTEACHPOINT(MEDICALTEACHPOINTDto medicalteachpoint, bool doSaveChanges = true)
		{
			this.MEDICALTEACHPOINTService.Update(medicalteachpoint);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateMEDICALTEACHPOINTs(IEnumerable<MEDICALTEACHPOINTDto> medicalteachpoints, bool doSaveChanges = true)
		{
			if (medicalteachpoints == null)
			{
				return;
			}
			foreach (MEDICALTEACHPOINTDto instance in medicalteachpoints)
			{
				if (instance == null)
				{
					continue;
				}


				this.MEDICALTEACHPOINTService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteMEDICALTEACHPOINT(MEDICALTEACHPOINTDto medicalteachpoint, bool doSaveChanges = true)
		{
			this.MEDICALTEACHPOINTService.Delete(medicalteachpoint);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteMEDICALTEACHPOINTs(IEnumerable<MEDICALTEACHPOINTDto> medicalteachpoints, bool doSaveChanges = true)
		{
			if (medicalteachpoints == null)
			{
				return;
			}
			foreach (MEDICALTEACHPOINTDto instance in medicalteachpoints)
			{
				if (instance == null)
				{
					continue;
				}


				this.MEDICALTEACHPOINTService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveMEDICALTEACHPOINT(MEDICALTEACHPOINTDto medicalteachpoint, bool doSaveChanges = true)
		{
			switch (medicalteachpoint.RowState)
			{
				case RowState.Insert:
					this.CreateMEDICALTEACHPOINT(medicalteachpoint, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateMEDICALTEACHPOINT(medicalteachpoint, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteMEDICALTEACHPOINT(medicalteachpoint, doSaveChanges);
					break;
			}
		}


		public void SaveMEDICALTEACHPOINTs(IEnumerable<MEDICALTEACHPOINTDto> medicalteachpoints, bool doSaveChanges = true)
		{
			if (medicalteachpoints == null)
			{
				return;
			}
			foreach (MEDICALTEACHPOINTDto instance in medicalteachpoints)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveMEDICALTEACHPOINT(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion MEDICALTEACHPOINT CRUD Operations


		#region LOGINLOG CRUD Operations


		private ILOGINLOGService loginlog;
		public virtual ILOGINLOGService LOGINLOGService
		{
			get
			{
				if (this.loginlog == null)
				{
					ILOGINLOGAssembler assembler = new LOGINLOGAssembler();
					ILOGINLOGRepository repository = new LOGINLOGRepository(this.UnitOfWork);
					this.loginlog = new LOGINLOGService(assembler, repository);
				}
				return this.loginlog;
			}
		}


		public IQueryable<LOGINLOG> LOGINLOGs
		{
			get { return this.LOGINLOGService.Repository.GetAll(); }
		}


		public IQueryable<LOGINLOG> ReadLOGINLOGs(Expression<Func<LOGINLOG, bool>> filter, int dummy)
		{
			return this.LOGINLOGService.Repository.Find(filter);
		}


		public IEnumerable<LOGINLOGDto> ReadLOGINLOGs()
		{
			return this.LOGINLOGService.GetAll();
		}


		public IEnumerable<LOGINLOGDto> ReadLOGINLOGs(Expression<Func<LOGINLOG, bool>> filter)
		{
			return this.LOGINLOGService.Find(filter);
		}


		public IEnumerable<LOGINLOGDto> ReadLOGINLOGs(ISpecification<LOGINLOG> specification)
		{
			return this.LOGINLOGService.Find(specification.GetExpression());
		}


		public IEnumerable<LOGINLOGDto> ReadLOGINLOGs(IQueryable<LOGINLOG> query)
		{
			return this.LOGINLOGService.Assembler.Assemble(query);
		}


		public IEnumerable<LOGINLOGDto> ReadLOGINLOGs(string[] propertyToSearch, object[] keyWords)
		{
			return this.LOGINLOGService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<LOGINLOGDto> ReadLOGINLOGs(object[] keyWords)
		{
			return this.LOGINLOGService.Find(keyWords);
		}


		public IEnumerable<LOGINLOGDto> ReadLOGINLOGsPaged(int startIndex, int pageSize)
		{
			return this.LOGINLOGService.Find(startIndex, pageSize);
		}


		public IEnumerable<LOGINLOGDto> ReadLOGINLOGsPaged(IQueryable<LOGINLOG> source, int pageIndex, int pageSize)
		{
			return this.LOGINLOGService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<LOGINLOGDto> ReadLOGINLOGsPaged(IQueryable<LOGINLOG> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.LOGINLOGService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<LOGINLOGDto> ReadLOGINLOGsFiltered(string sortExpression, string filterExpression)
		{
			return this.LOGINLOGService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<LOGINLOGDto> ReadLOGINLOGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.LOGINLOGService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<LOGINLOGDto> ReadLOGINLOGsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<LOGINLOG, bool>> filter)
		{
			return this.LOGINLOGService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public LOGINLOGDto ReadLOGINLOGs(string dtoKey)
		{
			return this.LOGINLOGService.GetByKey(dtoKey);
		}


		public int CountLOGINLOGs()
		{
			return this.LOGINLOGService.Count();
		}


		public int CountLOGINLOGs(string filterExpression)
		{
			return this.LOGINLOGService.Count(filterExpression);
		}


		public int CountLOGINLOGs(Expression<Func<LOGINLOG, bool>> filter)
		{
			return this.LOGINLOGService.Count(filter);
		}


		public string CreateLOGINLOG(LOGINLOGDto loginlog, bool doSaveChanges = true)
		{
			string key = this.LOGINLOGService.Add(loginlog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateLOGINLOG(LOGINLOGDto loginlog, bool doSaveChanges = true)
		{
			this.LOGINLOGService.Update(loginlog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateLOGINLOGs(IEnumerable<LOGINLOGDto> loginlogs, bool doSaveChanges = true)
		{
			if (loginlogs == null)
			{
				return;
			}
			foreach (LOGINLOGDto instance in loginlogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.LOGINLOGService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteLOGINLOG(LOGINLOGDto loginlog, bool doSaveChanges = true)
		{
			this.LOGINLOGService.Delete(loginlog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteLOGINLOGs(IEnumerable<LOGINLOGDto> loginlogs, bool doSaveChanges = true)
		{
			if (loginlogs == null)
			{
				return;
			}
			foreach (LOGINLOGDto instance in loginlogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.LOGINLOGService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveLOGINLOG(LOGINLOGDto loginlog, bool doSaveChanges = true)
		{
			switch (loginlog.RowState)
			{
				case RowState.Insert:
					this.CreateLOGINLOG(loginlog, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateLOGINLOG(loginlog, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteLOGINLOG(loginlog, doSaveChanges);
					break;
			}
		}


		public void SaveLOGINLOGs(IEnumerable<LOGINLOGDto> loginlogs, bool doSaveChanges = true)
		{
			if (loginlogs == null)
			{
				return;
			}
			foreach (LOGINLOGDto instance in loginlogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveLOGINLOG(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion LOGINLOG CRUD Operations


		#region JOBFORMSETTING CRUD Operations


		private IJOBFORMSETTINGService jobformsetting;
		public virtual IJOBFORMSETTINGService JOBFORMSETTINGService
		{
			get
			{
				if (this.jobformsetting == null)
				{
					IJOBFORMSETTINGAssembler assembler = new JOBFORMSETTINGAssembler();
					IJOBFORMSETTINGRepository repository = new JOBFORMSETTINGRepository(this.UnitOfWork);
					this.jobformsetting = new JOBFORMSETTINGService(assembler, repository);
				}
				return this.jobformsetting;
			}
		}


		public IQueryable<JOBFORMSETTING> JOBFORMSETTINGs
		{
			get { return this.JOBFORMSETTINGService.Repository.GetAll(); }
		}


		public IQueryable<JOBFORMSETTING> ReadJOBFORMSETTINGs(Expression<Func<JOBFORMSETTING, bool>> filter, int dummy)
		{
			return this.JOBFORMSETTINGService.Repository.Find(filter);
		}


		public IEnumerable<JOBFORMSETTINGDto> ReadJOBFORMSETTINGs()
		{
			return this.JOBFORMSETTINGService.GetAll();
		}


		public IEnumerable<JOBFORMSETTINGDto> ReadJOBFORMSETTINGs(Expression<Func<JOBFORMSETTING, bool>> filter)
		{
			return this.JOBFORMSETTINGService.Find(filter);
		}


		public IEnumerable<JOBFORMSETTINGDto> ReadJOBFORMSETTINGs(ISpecification<JOBFORMSETTING> specification)
		{
			return this.JOBFORMSETTINGService.Find(specification.GetExpression());
		}


		public IEnumerable<JOBFORMSETTINGDto> ReadJOBFORMSETTINGs(IQueryable<JOBFORMSETTING> query)
		{
			return this.JOBFORMSETTINGService.Assembler.Assemble(query);
		}


		public IEnumerable<JOBFORMSETTINGDto> ReadJOBFORMSETTINGs(string[] propertyToSearch, object[] keyWords)
		{
			return this.JOBFORMSETTINGService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<JOBFORMSETTINGDto> ReadJOBFORMSETTINGs(object[] keyWords)
		{
			return this.JOBFORMSETTINGService.Find(keyWords);
		}


		public IEnumerable<JOBFORMSETTINGDto> ReadJOBFORMSETTINGsPaged(int startIndex, int pageSize)
		{
			return this.JOBFORMSETTINGService.Find(startIndex, pageSize);
		}


		public IEnumerable<JOBFORMSETTINGDto> ReadJOBFORMSETTINGsPaged(IQueryable<JOBFORMSETTING> source, int pageIndex, int pageSize)
		{
			return this.JOBFORMSETTINGService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<JOBFORMSETTINGDto> ReadJOBFORMSETTINGsPaged(IQueryable<JOBFORMSETTING> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.JOBFORMSETTINGService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<JOBFORMSETTINGDto> ReadJOBFORMSETTINGsFiltered(string sortExpression, string filterExpression)
		{
			return this.JOBFORMSETTINGService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<JOBFORMSETTINGDto> ReadJOBFORMSETTINGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.JOBFORMSETTINGService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<JOBFORMSETTINGDto> ReadJOBFORMSETTINGsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<JOBFORMSETTING, bool>> filter)
		{
			return this.JOBFORMSETTINGService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public JOBFORMSETTINGDto ReadJOBFORMSETTINGs(string dtoKey)
		{
			return this.JOBFORMSETTINGService.GetByKey(dtoKey);
		}


		public int CountJOBFORMSETTINGs()
		{
			return this.JOBFORMSETTINGService.Count();
		}


		public int CountJOBFORMSETTINGs(string filterExpression)
		{
			return this.JOBFORMSETTINGService.Count(filterExpression);
		}


		public int CountJOBFORMSETTINGs(Expression<Func<JOBFORMSETTING, bool>> filter)
		{
			return this.JOBFORMSETTINGService.Count(filter);
		}


		public string CreateJOBFORMSETTING(JOBFORMSETTINGDto jobformsetting, bool doSaveChanges = true)
		{
			string key = this.JOBFORMSETTINGService.Add(jobformsetting);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateJOBFORMSETTING(JOBFORMSETTINGDto jobformsetting, bool doSaveChanges = true)
		{
			this.JOBFORMSETTINGService.Update(jobformsetting);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateJOBFORMSETTINGs(IEnumerable<JOBFORMSETTINGDto> jobformsettings, bool doSaveChanges = true)
		{
			if (jobformsettings == null)
			{
				return;
			}
			foreach (JOBFORMSETTINGDto instance in jobformsettings)
			{
				if (instance == null)
				{
					continue;
				}


				this.JOBFORMSETTINGService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteJOBFORMSETTING(JOBFORMSETTINGDto jobformsetting, bool doSaveChanges = true)
		{
			this.JOBFORMSETTINGService.Delete(jobformsetting);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteJOBFORMSETTINGs(IEnumerable<JOBFORMSETTINGDto> jobformsettings, bool doSaveChanges = true)
		{
			if (jobformsettings == null)
			{
				return;
			}
			foreach (JOBFORMSETTINGDto instance in jobformsettings)
			{
				if (instance == null)
				{
					continue;
				}


				this.JOBFORMSETTINGService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveJOBFORMSETTING(JOBFORMSETTINGDto jobformsetting, bool doSaveChanges = true)
		{
			switch (jobformsetting.RowState)
			{
				case RowState.Insert:
					this.CreateJOBFORMSETTING(jobformsetting, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateJOBFORMSETTING(jobformsetting, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteJOBFORMSETTING(jobformsetting, doSaveChanges);
					break;
			}
		}


		public void SaveJOBFORMSETTINGs(IEnumerable<JOBFORMSETTINGDto> jobformsettings, bool doSaveChanges = true)
		{
			if (jobformsettings == null)
			{
				return;
			}
			foreach (JOBFORMSETTINGDto instance in jobformsettings)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveJOBFORMSETTING(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion JOBFORMSETTING CRUD Operations


		#region IMPORTTEMP CRUD Operations


		private IIMPORTTEMPService importtemp;
		public virtual IIMPORTTEMPService IMPORTTEMPService
		{
			get
			{
				if (this.importtemp == null)
				{
					IIMPORTTEMPAssembler assembler = new IMPORTTEMPAssembler();
					IIMPORTTEMPRepository repository = new IMPORTTEMPRepository(this.UnitOfWork);
					this.importtemp = new IMPORTTEMPService(assembler, repository);
				}
				return this.importtemp;
			}
		}


		public IQueryable<IMPORTTEMP> IMPORTTEMPs
		{
			get { return this.IMPORTTEMPService.Repository.GetAll(); }
		}


		public IQueryable<IMPORTTEMP> ReadIMPORTTEMPs(Expression<Func<IMPORTTEMP, bool>> filter, int dummy)
		{
			return this.IMPORTTEMPService.Repository.Find(filter);
		}


		public IEnumerable<IMPORTTEMPDto> ReadIMPORTTEMPs()
		{
			return this.IMPORTTEMPService.GetAll();
		}


		public IEnumerable<IMPORTTEMPDto> ReadIMPORTTEMPs(Expression<Func<IMPORTTEMP, bool>> filter)
		{
			return this.IMPORTTEMPService.Find(filter);
		}


		public IEnumerable<IMPORTTEMPDto> ReadIMPORTTEMPs(ISpecification<IMPORTTEMP> specification)
		{
			return this.IMPORTTEMPService.Find(specification.GetExpression());
		}


		public IEnumerable<IMPORTTEMPDto> ReadIMPORTTEMPs(IQueryable<IMPORTTEMP> query)
		{
			return this.IMPORTTEMPService.Assembler.Assemble(query);
		}


		public IEnumerable<IMPORTTEMPDto> ReadIMPORTTEMPs(string[] propertyToSearch, object[] keyWords)
		{
			return this.IMPORTTEMPService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<IMPORTTEMPDto> ReadIMPORTTEMPs(object[] keyWords)
		{
			return this.IMPORTTEMPService.Find(keyWords);
		}


		public IEnumerable<IMPORTTEMPDto> ReadIMPORTTEMPsPaged(int startIndex, int pageSize)
		{
			return this.IMPORTTEMPService.Find(startIndex, pageSize);
		}


		public IEnumerable<IMPORTTEMPDto> ReadIMPORTTEMPsPaged(IQueryable<IMPORTTEMP> source, int pageIndex, int pageSize)
		{
			return this.IMPORTTEMPService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<IMPORTTEMPDto> ReadIMPORTTEMPsPaged(IQueryable<IMPORTTEMP> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.IMPORTTEMPService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<IMPORTTEMPDto> ReadIMPORTTEMPsFiltered(string sortExpression, string filterExpression)
		{
			return this.IMPORTTEMPService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<IMPORTTEMPDto> ReadIMPORTTEMPsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.IMPORTTEMPService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<IMPORTTEMPDto> ReadIMPORTTEMPsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<IMPORTTEMP, bool>> filter)
		{
			return this.IMPORTTEMPService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public IMPORTTEMPDto ReadIMPORTTEMPs(string dtoKey)
		{
			return this.IMPORTTEMPService.GetByKey(dtoKey);
		}


		public int CountIMPORTTEMPs()
		{
			return this.IMPORTTEMPService.Count();
		}


		public int CountIMPORTTEMPs(string filterExpression)
		{
			return this.IMPORTTEMPService.Count(filterExpression);
		}


		public int CountIMPORTTEMPs(Expression<Func<IMPORTTEMP, bool>> filter)
		{
			return this.IMPORTTEMPService.Count(filter);
		}


		public string CreateIMPORTTEMP(IMPORTTEMPDto importtemp, bool doSaveChanges = true)
		{
			string key = this.IMPORTTEMPService.Add(importtemp);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateIMPORTTEMP(IMPORTTEMPDto importtemp, bool doSaveChanges = true)
		{
			this.IMPORTTEMPService.Update(importtemp);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateIMPORTTEMPs(IEnumerable<IMPORTTEMPDto> importtemps, bool doSaveChanges = true)
		{
			if (importtemps == null)
			{
				return;
			}
			foreach (IMPORTTEMPDto instance in importtemps)
			{
				if (instance == null)
				{
					continue;
				}


				this.IMPORTTEMPService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteIMPORTTEMP(IMPORTTEMPDto importtemp, bool doSaveChanges = true)
		{
			this.IMPORTTEMPService.Delete(importtemp);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteIMPORTTEMPs(IEnumerable<IMPORTTEMPDto> importtemps, bool doSaveChanges = true)
		{
			if (importtemps == null)
			{
				return;
			}
			foreach (IMPORTTEMPDto instance in importtemps)
			{
				if (instance == null)
				{
					continue;
				}


				this.IMPORTTEMPService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveIMPORTTEMP(IMPORTTEMPDto importtemp, bool doSaveChanges = true)
		{
			switch (importtemp.RowState)
			{
				case RowState.Insert:
					this.CreateIMPORTTEMP(importtemp, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateIMPORTTEMP(importtemp, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteIMPORTTEMP(importtemp, doSaveChanges);
					break;
			}
		}


		public void SaveIMPORTTEMPs(IEnumerable<IMPORTTEMPDto> importtemps, bool doSaveChanges = true)
		{
			if (importtemps == null)
			{
				return;
			}
			foreach (IMPORTTEMPDto instance in importtemps)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveIMPORTTEMP(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion IMPORTTEMP CRUD Operations


		#region IKASA_UPLOADFILE CRUD Operations


		private IIKASA_UPLOADFILEService ikasa_uploadfile;
		public virtual IIKASA_UPLOADFILEService IKASA_UPLOADFILEService
		{
			get
			{
				if (this.ikasa_uploadfile == null)
				{
					IIKASA_UPLOADFILEAssembler assembler = new IKASA_UPLOADFILEAssembler();
					IIKASA_UPLOADFILERepository repository = new IKASA_UPLOADFILERepository(this.UnitOfWork);
					this.ikasa_uploadfile = new IKASA_UPLOADFILEService(assembler, repository);
				}
				return this.ikasa_uploadfile;
			}
		}


		public IQueryable<IKASA_UPLOADFILE> IKASA_UPLOADFILEs
		{
			get { return this.IKASA_UPLOADFILEService.Repository.GetAll(); }
		}


		public IQueryable<IKASA_UPLOADFILE> ReadIKASA_UPLOADFILEs(Expression<Func<IKASA_UPLOADFILE, bool>> filter, int dummy)
		{
			return this.IKASA_UPLOADFILEService.Repository.Find(filter);
		}


		public IEnumerable<IKASA_UPLOADFILEDto> ReadIKASA_UPLOADFILEs()
		{
			return this.IKASA_UPLOADFILEService.GetAll();
		}


		public IEnumerable<IKASA_UPLOADFILEDto> ReadIKASA_UPLOADFILEs(Expression<Func<IKASA_UPLOADFILE, bool>> filter)
		{
			return this.IKASA_UPLOADFILEService.Find(filter);
		}


		public IEnumerable<IKASA_UPLOADFILEDto> ReadIKASA_UPLOADFILEs(ISpecification<IKASA_UPLOADFILE> specification)
		{
			return this.IKASA_UPLOADFILEService.Find(specification.GetExpression());
		}


		public IEnumerable<IKASA_UPLOADFILEDto> ReadIKASA_UPLOADFILEs(IQueryable<IKASA_UPLOADFILE> query)
		{
			return this.IKASA_UPLOADFILEService.Assembler.Assemble(query);
		}


		public IEnumerable<IKASA_UPLOADFILEDto> ReadIKASA_UPLOADFILEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.IKASA_UPLOADFILEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<IKASA_UPLOADFILEDto> ReadIKASA_UPLOADFILEs(object[] keyWords)
		{
			return this.IKASA_UPLOADFILEService.Find(keyWords);
		}


		public IEnumerable<IKASA_UPLOADFILEDto> ReadIKASA_UPLOADFILEsPaged(int startIndex, int pageSize)
		{
			return this.IKASA_UPLOADFILEService.Find(startIndex, pageSize);
		}


		public IEnumerable<IKASA_UPLOADFILEDto> ReadIKASA_UPLOADFILEsPaged(IQueryable<IKASA_UPLOADFILE> source, int pageIndex, int pageSize)
		{
			return this.IKASA_UPLOADFILEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<IKASA_UPLOADFILEDto> ReadIKASA_UPLOADFILEsPaged(IQueryable<IKASA_UPLOADFILE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.IKASA_UPLOADFILEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<IKASA_UPLOADFILEDto> ReadIKASA_UPLOADFILEsFiltered(string sortExpression, string filterExpression)
		{
			return this.IKASA_UPLOADFILEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_UPLOADFILEDto> ReadIKASA_UPLOADFILEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.IKASA_UPLOADFILEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_UPLOADFILEDto> ReadIKASA_UPLOADFILEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<IKASA_UPLOADFILE, bool>> filter)
		{
			return this.IKASA_UPLOADFILEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public IKASA_UPLOADFILEDto ReadIKASA_UPLOADFILEs(string dtoKey)
		{
			return this.IKASA_UPLOADFILEService.GetByKey(dtoKey);
		}


		public int CountIKASA_UPLOADFILEs()
		{
			return this.IKASA_UPLOADFILEService.Count();
		}


		public int CountIKASA_UPLOADFILEs(string filterExpression)
		{
			return this.IKASA_UPLOADFILEService.Count(filterExpression);
		}


		public int CountIKASA_UPLOADFILEs(Expression<Func<IKASA_UPLOADFILE, bool>> filter)
		{
			return this.IKASA_UPLOADFILEService.Count(filter);
		}


		public string CreateIKASA_UPLOADFILE(IKASA_UPLOADFILEDto ikasa_uploadfile, bool doSaveChanges = true)
		{
			string key = this.IKASA_UPLOADFILEService.Add(ikasa_uploadfile);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateIKASA_UPLOADFILE(IKASA_UPLOADFILEDto ikasa_uploadfile, bool doSaveChanges = true)
		{
			this.IKASA_UPLOADFILEService.Update(ikasa_uploadfile);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateIKASA_UPLOADFILEs(IEnumerable<IKASA_UPLOADFILEDto> ikasa_uploadfiles, bool doSaveChanges = true)
		{
			if (ikasa_uploadfiles == null)
			{
				return;
			}
			foreach (IKASA_UPLOADFILEDto instance in ikasa_uploadfiles)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_UPLOADFILEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteIKASA_UPLOADFILE(IKASA_UPLOADFILEDto ikasa_uploadfile, bool doSaveChanges = true)
		{
			this.IKASA_UPLOADFILEService.Delete(ikasa_uploadfile);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteIKASA_UPLOADFILEs(IEnumerable<IKASA_UPLOADFILEDto> ikasa_uploadfiles, bool doSaveChanges = true)
		{
			if (ikasa_uploadfiles == null)
			{
				return;
			}
			foreach (IKASA_UPLOADFILEDto instance in ikasa_uploadfiles)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_UPLOADFILEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveIKASA_UPLOADFILE(IKASA_UPLOADFILEDto ikasa_uploadfile, bool doSaveChanges = true)
		{
			switch (ikasa_uploadfile.RowState)
			{
				case RowState.Insert:
					this.CreateIKASA_UPLOADFILE(ikasa_uploadfile, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateIKASA_UPLOADFILE(ikasa_uploadfile, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteIKASA_UPLOADFILE(ikasa_uploadfile, doSaveChanges);
					break;
			}
		}


		public void SaveIKASA_UPLOADFILEs(IEnumerable<IKASA_UPLOADFILEDto> ikasa_uploadfiles, bool doSaveChanges = true)
		{
			if (ikasa_uploadfiles == null)
			{
				return;
			}
			foreach (IKASA_UPLOADFILEDto instance in ikasa_uploadfiles)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveIKASA_UPLOADFILE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion IKASA_UPLOADFILE CRUD Operations


		#region IKASA_OSCEEXAMSTAGE CRUD Operations


		private IIKASA_OSCEEXAMSTAGEService ikasa_osceexamstage;
		public virtual IIKASA_OSCEEXAMSTAGEService IKASA_OSCEEXAMSTAGEService
		{
			get
			{
				if (this.ikasa_osceexamstage == null)
				{
					IIKASA_OSCEEXAMSTAGEAssembler assembler = new IKASA_OSCEEXAMSTAGEAssembler();
					IIKASA_OSCEEXAMSTAGERepository repository = new IKASA_OSCEEXAMSTAGERepository(this.UnitOfWork);
					this.ikasa_osceexamstage = new IKASA_OSCEEXAMSTAGEService(assembler, repository);
				}
				return this.ikasa_osceexamstage;
			}
		}


		public IQueryable<IKASA_OSCEEXAMSTAGE> IKASA_OSCEEXAMSTAGEs
		{
			get { return this.IKASA_OSCEEXAMSTAGEService.Repository.GetAll(); }
		}


		public IQueryable<IKASA_OSCEEXAMSTAGE> ReadIKASA_OSCEEXAMSTAGEs(Expression<Func<IKASA_OSCEEXAMSTAGE, bool>> filter, int dummy)
		{
			return this.IKASA_OSCEEXAMSTAGEService.Repository.Find(filter);
		}


		public IEnumerable<IKASA_OSCEEXAMSTAGEDto> ReadIKASA_OSCEEXAMSTAGEs()
		{
			return this.IKASA_OSCEEXAMSTAGEService.GetAll();
		}


		public IEnumerable<IKASA_OSCEEXAMSTAGEDto> ReadIKASA_OSCEEXAMSTAGEs(Expression<Func<IKASA_OSCEEXAMSTAGE, bool>> filter)
		{
			return this.IKASA_OSCEEXAMSTAGEService.Find(filter);
		}


		public IEnumerable<IKASA_OSCEEXAMSTAGEDto> ReadIKASA_OSCEEXAMSTAGEs(ISpecification<IKASA_OSCEEXAMSTAGE> specification)
		{
			return this.IKASA_OSCEEXAMSTAGEService.Find(specification.GetExpression());
		}


		public IEnumerable<IKASA_OSCEEXAMSTAGEDto> ReadIKASA_OSCEEXAMSTAGEs(IQueryable<IKASA_OSCEEXAMSTAGE> query)
		{
			return this.IKASA_OSCEEXAMSTAGEService.Assembler.Assemble(query);
		}


		public IEnumerable<IKASA_OSCEEXAMSTAGEDto> ReadIKASA_OSCEEXAMSTAGEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.IKASA_OSCEEXAMSTAGEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<IKASA_OSCEEXAMSTAGEDto> ReadIKASA_OSCEEXAMSTAGEs(object[] keyWords)
		{
			return this.IKASA_OSCEEXAMSTAGEService.Find(keyWords);
		}


		public IEnumerable<IKASA_OSCEEXAMSTAGEDto> ReadIKASA_OSCEEXAMSTAGEsPaged(int startIndex, int pageSize)
		{
			return this.IKASA_OSCEEXAMSTAGEService.Find(startIndex, pageSize);
		}


		public IEnumerable<IKASA_OSCEEXAMSTAGEDto> ReadIKASA_OSCEEXAMSTAGEsPaged(IQueryable<IKASA_OSCEEXAMSTAGE> source, int pageIndex, int pageSize)
		{
			return this.IKASA_OSCEEXAMSTAGEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<IKASA_OSCEEXAMSTAGEDto> ReadIKASA_OSCEEXAMSTAGEsPaged(IQueryable<IKASA_OSCEEXAMSTAGE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.IKASA_OSCEEXAMSTAGEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<IKASA_OSCEEXAMSTAGEDto> ReadIKASA_OSCEEXAMSTAGEsFiltered(string sortExpression, string filterExpression)
		{
			return this.IKASA_OSCEEXAMSTAGEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_OSCEEXAMSTAGEDto> ReadIKASA_OSCEEXAMSTAGEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.IKASA_OSCEEXAMSTAGEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_OSCEEXAMSTAGEDto> ReadIKASA_OSCEEXAMSTAGEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<IKASA_OSCEEXAMSTAGE, bool>> filter)
		{
			return this.IKASA_OSCEEXAMSTAGEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public IKASA_OSCEEXAMSTAGEDto ReadIKASA_OSCEEXAMSTAGEs(string dtoKey)
		{
			return this.IKASA_OSCEEXAMSTAGEService.GetByKey(dtoKey);
		}


		public int CountIKASA_OSCEEXAMSTAGEs()
		{
			return this.IKASA_OSCEEXAMSTAGEService.Count();
		}


		public int CountIKASA_OSCEEXAMSTAGEs(string filterExpression)
		{
			return this.IKASA_OSCEEXAMSTAGEService.Count(filterExpression);
		}


		public int CountIKASA_OSCEEXAMSTAGEs(Expression<Func<IKASA_OSCEEXAMSTAGE, bool>> filter)
		{
			return this.IKASA_OSCEEXAMSTAGEService.Count(filter);
		}


		public string CreateIKASA_OSCEEXAMSTAGE(IKASA_OSCEEXAMSTAGEDto ikasa_osceexamstage, bool doSaveChanges = true)
		{
			string key = this.IKASA_OSCEEXAMSTAGEService.Add(ikasa_osceexamstage);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateIKASA_OSCEEXAMSTAGE(IKASA_OSCEEXAMSTAGEDto ikasa_osceexamstage, bool doSaveChanges = true)
		{
			this.IKASA_OSCEEXAMSTAGEService.Update(ikasa_osceexamstage);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateIKASA_OSCEEXAMSTAGEs(IEnumerable<IKASA_OSCEEXAMSTAGEDto> ikasa_osceexamstages, bool doSaveChanges = true)
		{
			if (ikasa_osceexamstages == null)
			{
				return;
			}
			foreach (IKASA_OSCEEXAMSTAGEDto instance in ikasa_osceexamstages)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_OSCEEXAMSTAGEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteIKASA_OSCEEXAMSTAGE(IKASA_OSCEEXAMSTAGEDto ikasa_osceexamstage, bool doSaveChanges = true)
		{
			this.IKASA_OSCEEXAMSTAGEService.Delete(ikasa_osceexamstage);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteIKASA_OSCEEXAMSTAGEs(IEnumerable<IKASA_OSCEEXAMSTAGEDto> ikasa_osceexamstages, bool doSaveChanges = true)
		{
			if (ikasa_osceexamstages == null)
			{
				return;
			}
			foreach (IKASA_OSCEEXAMSTAGEDto instance in ikasa_osceexamstages)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_OSCEEXAMSTAGEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveIKASA_OSCEEXAMSTAGE(IKASA_OSCEEXAMSTAGEDto ikasa_osceexamstage, bool doSaveChanges = true)
		{
			switch (ikasa_osceexamstage.RowState)
			{
				case RowState.Insert:
					this.CreateIKASA_OSCEEXAMSTAGE(ikasa_osceexamstage, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateIKASA_OSCEEXAMSTAGE(ikasa_osceexamstage, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteIKASA_OSCEEXAMSTAGE(ikasa_osceexamstage, doSaveChanges);
					break;
			}
		}


		public void SaveIKASA_OSCEEXAMSTAGEs(IEnumerable<IKASA_OSCEEXAMSTAGEDto> ikasa_osceexamstages, bool doSaveChanges = true)
		{
			if (ikasa_osceexamstages == null)
			{
				return;
			}
			foreach (IKASA_OSCEEXAMSTAGEDto instance in ikasa_osceexamstages)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveIKASA_OSCEEXAMSTAGE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion IKASA_OSCEEXAMSTAGE CRUD Operations


		#region IKASA_OSCEEXAMSCORE CRUD Operations


		private IIKASA_OSCEEXAMSCOREService ikasa_osceexamscore;
		public virtual IIKASA_OSCEEXAMSCOREService IKASA_OSCEEXAMSCOREService
		{
			get
			{
				if (this.ikasa_osceexamscore == null)
				{
					IIKASA_OSCEEXAMSCOREAssembler assembler = new IKASA_OSCEEXAMSCOREAssembler();
					IIKASA_OSCEEXAMSCORERepository repository = new IKASA_OSCEEXAMSCORERepository(this.UnitOfWork);
					this.ikasa_osceexamscore = new IKASA_OSCEEXAMSCOREService(assembler, repository);
				}
				return this.ikasa_osceexamscore;
			}
		}


		public IQueryable<IKASA_OSCEEXAMSCORE> IKASA_OSCEEXAMSCOREs
		{
			get { return this.IKASA_OSCEEXAMSCOREService.Repository.GetAll(); }
		}


		public IQueryable<IKASA_OSCEEXAMSCORE> ReadIKASA_OSCEEXAMSCOREs(Expression<Func<IKASA_OSCEEXAMSCORE, bool>> filter, int dummy)
		{
			return this.IKASA_OSCEEXAMSCOREService.Repository.Find(filter);
		}


		public IEnumerable<IKASA_OSCEEXAMSCOREDto> ReadIKASA_OSCEEXAMSCOREs()
		{
			return this.IKASA_OSCEEXAMSCOREService.GetAll();
		}


		public IEnumerable<IKASA_OSCEEXAMSCOREDto> ReadIKASA_OSCEEXAMSCOREs(Expression<Func<IKASA_OSCEEXAMSCORE, bool>> filter)
		{
			return this.IKASA_OSCEEXAMSCOREService.Find(filter);
		}


		public IEnumerable<IKASA_OSCEEXAMSCOREDto> ReadIKASA_OSCEEXAMSCOREs(ISpecification<IKASA_OSCEEXAMSCORE> specification)
		{
			return this.IKASA_OSCEEXAMSCOREService.Find(specification.GetExpression());
		}


		public IEnumerable<IKASA_OSCEEXAMSCOREDto> ReadIKASA_OSCEEXAMSCOREs(IQueryable<IKASA_OSCEEXAMSCORE> query)
		{
			return this.IKASA_OSCEEXAMSCOREService.Assembler.Assemble(query);
		}


		public IEnumerable<IKASA_OSCEEXAMSCOREDto> ReadIKASA_OSCEEXAMSCOREs(string[] propertyToSearch, object[] keyWords)
		{
			return this.IKASA_OSCEEXAMSCOREService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<IKASA_OSCEEXAMSCOREDto> ReadIKASA_OSCEEXAMSCOREs(object[] keyWords)
		{
			return this.IKASA_OSCEEXAMSCOREService.Find(keyWords);
		}


		public IEnumerable<IKASA_OSCEEXAMSCOREDto> ReadIKASA_OSCEEXAMSCOREsPaged(int startIndex, int pageSize)
		{
			return this.IKASA_OSCEEXAMSCOREService.Find(startIndex, pageSize);
		}


		public IEnumerable<IKASA_OSCEEXAMSCOREDto> ReadIKASA_OSCEEXAMSCOREsPaged(IQueryable<IKASA_OSCEEXAMSCORE> source, int pageIndex, int pageSize)
		{
			return this.IKASA_OSCEEXAMSCOREService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<IKASA_OSCEEXAMSCOREDto> ReadIKASA_OSCEEXAMSCOREsPaged(IQueryable<IKASA_OSCEEXAMSCORE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.IKASA_OSCEEXAMSCOREService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<IKASA_OSCEEXAMSCOREDto> ReadIKASA_OSCEEXAMSCOREsFiltered(string sortExpression, string filterExpression)
		{
			return this.IKASA_OSCEEXAMSCOREService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_OSCEEXAMSCOREDto> ReadIKASA_OSCEEXAMSCOREsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.IKASA_OSCEEXAMSCOREService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_OSCEEXAMSCOREDto> ReadIKASA_OSCEEXAMSCOREsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<IKASA_OSCEEXAMSCORE, bool>> filter)
		{
			return this.IKASA_OSCEEXAMSCOREService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public IKASA_OSCEEXAMSCOREDto ReadIKASA_OSCEEXAMSCOREs(string dtoKey)
		{
			return this.IKASA_OSCEEXAMSCOREService.GetByKey(dtoKey);
		}


		public int CountIKASA_OSCEEXAMSCOREs()
		{
			return this.IKASA_OSCEEXAMSCOREService.Count();
		}


		public int CountIKASA_OSCEEXAMSCOREs(string filterExpression)
		{
			return this.IKASA_OSCEEXAMSCOREService.Count(filterExpression);
		}


		public int CountIKASA_OSCEEXAMSCOREs(Expression<Func<IKASA_OSCEEXAMSCORE, bool>> filter)
		{
			return this.IKASA_OSCEEXAMSCOREService.Count(filter);
		}


		public string CreateIKASA_OSCEEXAMSCORE(IKASA_OSCEEXAMSCOREDto ikasa_osceexamscore, bool doSaveChanges = true)
		{
			string key = this.IKASA_OSCEEXAMSCOREService.Add(ikasa_osceexamscore);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateIKASA_OSCEEXAMSCORE(IKASA_OSCEEXAMSCOREDto ikasa_osceexamscore, bool doSaveChanges = true)
		{
			this.IKASA_OSCEEXAMSCOREService.Update(ikasa_osceexamscore);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateIKASA_OSCEEXAMSCOREs(IEnumerable<IKASA_OSCEEXAMSCOREDto> ikasa_osceexamscores, bool doSaveChanges = true)
		{
			if (ikasa_osceexamscores == null)
			{
				return;
			}
			foreach (IKASA_OSCEEXAMSCOREDto instance in ikasa_osceexamscores)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_OSCEEXAMSCOREService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteIKASA_OSCEEXAMSCORE(IKASA_OSCEEXAMSCOREDto ikasa_osceexamscore, bool doSaveChanges = true)
		{
			this.IKASA_OSCEEXAMSCOREService.Delete(ikasa_osceexamscore);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteIKASA_OSCEEXAMSCOREs(IEnumerable<IKASA_OSCEEXAMSCOREDto> ikasa_osceexamscores, bool doSaveChanges = true)
		{
			if (ikasa_osceexamscores == null)
			{
				return;
			}
			foreach (IKASA_OSCEEXAMSCOREDto instance in ikasa_osceexamscores)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_OSCEEXAMSCOREService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveIKASA_OSCEEXAMSCORE(IKASA_OSCEEXAMSCOREDto ikasa_osceexamscore, bool doSaveChanges = true)
		{
			switch (ikasa_osceexamscore.RowState)
			{
				case RowState.Insert:
					this.CreateIKASA_OSCEEXAMSCORE(ikasa_osceexamscore, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateIKASA_OSCEEXAMSCORE(ikasa_osceexamscore, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteIKASA_OSCEEXAMSCORE(ikasa_osceexamscore, doSaveChanges);
					break;
			}
		}


		public void SaveIKASA_OSCEEXAMSCOREs(IEnumerable<IKASA_OSCEEXAMSCOREDto> ikasa_osceexamscores, bool doSaveChanges = true)
		{
			if (ikasa_osceexamscores == null)
			{
				return;
			}
			foreach (IKASA_OSCEEXAMSCOREDto instance in ikasa_osceexamscores)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveIKASA_OSCEEXAMSCORE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion IKASA_OSCEEXAMSCORE CRUD Operations


		#region IKASA_OSCEEXAM CRUD Operations


		private IIKASA_OSCEEXAMService ikasa_osceexam;
		public virtual IIKASA_OSCEEXAMService IKASA_OSCEEXAMService
		{
			get
			{
				if (this.ikasa_osceexam == null)
				{
					IIKASA_OSCEEXAMAssembler assembler = new IKASA_OSCEEXAMAssembler();
					IIKASA_OSCEEXAMRepository repository = new IKASA_OSCEEXAMRepository(this.UnitOfWork);
					this.ikasa_osceexam = new IKASA_OSCEEXAMService(assembler, repository);
				}
				return this.ikasa_osceexam;
			}
		}


		public IQueryable<IKASA_OSCEEXAM> IKASA_OSCEEXAMs
		{
			get { return this.IKASA_OSCEEXAMService.Repository.GetAll(); }
		}


		public IQueryable<IKASA_OSCEEXAM> ReadIKASA_OSCEEXAMs(Expression<Func<IKASA_OSCEEXAM, bool>> filter, int dummy)
		{
			return this.IKASA_OSCEEXAMService.Repository.Find(filter);
		}


		public IEnumerable<IKASA_OSCEEXAMDto> ReadIKASA_OSCEEXAMs()
		{
			return this.IKASA_OSCEEXAMService.GetAll();
		}


		public IEnumerable<IKASA_OSCEEXAMDto> ReadIKASA_OSCEEXAMs(Expression<Func<IKASA_OSCEEXAM, bool>> filter)
		{
			return this.IKASA_OSCEEXAMService.Find(filter);
		}


		public IEnumerable<IKASA_OSCEEXAMDto> ReadIKASA_OSCEEXAMs(ISpecification<IKASA_OSCEEXAM> specification)
		{
			return this.IKASA_OSCEEXAMService.Find(specification.GetExpression());
		}


		public IEnumerable<IKASA_OSCEEXAMDto> ReadIKASA_OSCEEXAMs(IQueryable<IKASA_OSCEEXAM> query)
		{
			return this.IKASA_OSCEEXAMService.Assembler.Assemble(query);
		}


		public IEnumerable<IKASA_OSCEEXAMDto> ReadIKASA_OSCEEXAMs(string[] propertyToSearch, object[] keyWords)
		{
			return this.IKASA_OSCEEXAMService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<IKASA_OSCEEXAMDto> ReadIKASA_OSCEEXAMs(object[] keyWords)
		{
			return this.IKASA_OSCEEXAMService.Find(keyWords);
		}


		public IEnumerable<IKASA_OSCEEXAMDto> ReadIKASA_OSCEEXAMsPaged(int startIndex, int pageSize)
		{
			return this.IKASA_OSCEEXAMService.Find(startIndex, pageSize);
		}


		public IEnumerable<IKASA_OSCEEXAMDto> ReadIKASA_OSCEEXAMsPaged(IQueryable<IKASA_OSCEEXAM> source, int pageIndex, int pageSize)
		{
			return this.IKASA_OSCEEXAMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<IKASA_OSCEEXAMDto> ReadIKASA_OSCEEXAMsPaged(IQueryable<IKASA_OSCEEXAM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.IKASA_OSCEEXAMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<IKASA_OSCEEXAMDto> ReadIKASA_OSCEEXAMsFiltered(string sortExpression, string filterExpression)
		{
			return this.IKASA_OSCEEXAMService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_OSCEEXAMDto> ReadIKASA_OSCEEXAMsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.IKASA_OSCEEXAMService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_OSCEEXAMDto> ReadIKASA_OSCEEXAMsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<IKASA_OSCEEXAM, bool>> filter)
		{
			return this.IKASA_OSCEEXAMService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public IKASA_OSCEEXAMDto ReadIKASA_OSCEEXAMs(string dtoKey)
		{
			return this.IKASA_OSCEEXAMService.GetByKey(dtoKey);
		}


		public int CountIKASA_OSCEEXAMs()
		{
			return this.IKASA_OSCEEXAMService.Count();
		}


		public int CountIKASA_OSCEEXAMs(string filterExpression)
		{
			return this.IKASA_OSCEEXAMService.Count(filterExpression);
		}


		public int CountIKASA_OSCEEXAMs(Expression<Func<IKASA_OSCEEXAM, bool>> filter)
		{
			return this.IKASA_OSCEEXAMService.Count(filter);
		}


		public string CreateIKASA_OSCEEXAM(IKASA_OSCEEXAMDto ikasa_osceexam, bool doSaveChanges = true)
		{
			string key = this.IKASA_OSCEEXAMService.Add(ikasa_osceexam);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateIKASA_OSCEEXAM(IKASA_OSCEEXAMDto ikasa_osceexam, bool doSaveChanges = true)
		{
			this.IKASA_OSCEEXAMService.Update(ikasa_osceexam);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateIKASA_OSCEEXAMs(IEnumerable<IKASA_OSCEEXAMDto> ikasa_osceexams, bool doSaveChanges = true)
		{
			if (ikasa_osceexams == null)
			{
				return;
			}
			foreach (IKASA_OSCEEXAMDto instance in ikasa_osceexams)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_OSCEEXAMService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteIKASA_OSCEEXAM(IKASA_OSCEEXAMDto ikasa_osceexam, bool doSaveChanges = true)
		{
			this.IKASA_OSCEEXAMService.Delete(ikasa_osceexam);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteIKASA_OSCEEXAMs(IEnumerable<IKASA_OSCEEXAMDto> ikasa_osceexams, bool doSaveChanges = true)
		{
			if (ikasa_osceexams == null)
			{
				return;
			}
			foreach (IKASA_OSCEEXAMDto instance in ikasa_osceexams)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_OSCEEXAMService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveIKASA_OSCEEXAM(IKASA_OSCEEXAMDto ikasa_osceexam, bool doSaveChanges = true)
		{
			switch (ikasa_osceexam.RowState)
			{
				case RowState.Insert:
					this.CreateIKASA_OSCEEXAM(ikasa_osceexam, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateIKASA_OSCEEXAM(ikasa_osceexam, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteIKASA_OSCEEXAM(ikasa_osceexam, doSaveChanges);
					break;
			}
		}


		public void SaveIKASA_OSCEEXAMs(IEnumerable<IKASA_OSCEEXAMDto> ikasa_osceexams, bool doSaveChanges = true)
		{
			if (ikasa_osceexams == null)
			{
				return;
			}
			foreach (IKASA_OSCEEXAMDto instance in ikasa_osceexams)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveIKASA_OSCEEXAM(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion IKASA_OSCEEXAM CRUD Operations


		#region IKASA_MENUREF CRUD Operations


		private IIKASA_MENUREFService ikasa_menuref;
		public virtual IIKASA_MENUREFService IKASA_MENUREFService
		{
			get
			{
				if (this.ikasa_menuref == null)
				{
					IIKASA_MENUREFAssembler assembler = new IKASA_MENUREFAssembler();
					IIKASA_MENUREFRepository repository = new IKASA_MENUREFRepository(this.UnitOfWork);
					this.ikasa_menuref = new IKASA_MENUREFService(assembler, repository);
				}
				return this.ikasa_menuref;
			}
		}


		public IQueryable<IKASA_MENUREF> IKASA_MENUREFs
		{
			get { return this.IKASA_MENUREFService.Repository.GetAll(); }
		}


		public IQueryable<IKASA_MENUREF> ReadIKASA_MENUREFs(Expression<Func<IKASA_MENUREF, bool>> filter, int dummy)
		{
			return this.IKASA_MENUREFService.Repository.Find(filter);
		}


		public IEnumerable<IKASA_MENUREFDto> ReadIKASA_MENUREFs()
		{
			return this.IKASA_MENUREFService.GetAll();
		}


		public IEnumerable<IKASA_MENUREFDto> ReadIKASA_MENUREFs(Expression<Func<IKASA_MENUREF, bool>> filter)
		{
			return this.IKASA_MENUREFService.Find(filter);
		}


		public IEnumerable<IKASA_MENUREFDto> ReadIKASA_MENUREFs(ISpecification<IKASA_MENUREF> specification)
		{
			return this.IKASA_MENUREFService.Find(specification.GetExpression());
		}


		public IEnumerable<IKASA_MENUREFDto> ReadIKASA_MENUREFs(IQueryable<IKASA_MENUREF> query)
		{
			return this.IKASA_MENUREFService.Assembler.Assemble(query);
		}


		public IEnumerable<IKASA_MENUREFDto> ReadIKASA_MENUREFs(string[] propertyToSearch, object[] keyWords)
		{
			return this.IKASA_MENUREFService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<IKASA_MENUREFDto> ReadIKASA_MENUREFs(object[] keyWords)
		{
			return this.IKASA_MENUREFService.Find(keyWords);
		}


		public IEnumerable<IKASA_MENUREFDto> ReadIKASA_MENUREFsPaged(int startIndex, int pageSize)
		{
			return this.IKASA_MENUREFService.Find(startIndex, pageSize);
		}


		public IEnumerable<IKASA_MENUREFDto> ReadIKASA_MENUREFsPaged(IQueryable<IKASA_MENUREF> source, int pageIndex, int pageSize)
		{
			return this.IKASA_MENUREFService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<IKASA_MENUREFDto> ReadIKASA_MENUREFsPaged(IQueryable<IKASA_MENUREF> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.IKASA_MENUREFService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<IKASA_MENUREFDto> ReadIKASA_MENUREFsFiltered(string sortExpression, string filterExpression)
		{
			return this.IKASA_MENUREFService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_MENUREFDto> ReadIKASA_MENUREFsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.IKASA_MENUREFService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_MENUREFDto> ReadIKASA_MENUREFsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<IKASA_MENUREF, bool>> filter)
		{
			return this.IKASA_MENUREFService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public IKASA_MENUREFDto ReadIKASA_MENUREFs(string dtoKey)
		{
			return this.IKASA_MENUREFService.GetByKey(dtoKey);
		}


		public int CountIKASA_MENUREFs()
		{
			return this.IKASA_MENUREFService.Count();
		}


		public int CountIKASA_MENUREFs(string filterExpression)
		{
			return this.IKASA_MENUREFService.Count(filterExpression);
		}


		public int CountIKASA_MENUREFs(Expression<Func<IKASA_MENUREF, bool>> filter)
		{
			return this.IKASA_MENUREFService.Count(filter);
		}


		public string CreateIKASA_MENUREF(IKASA_MENUREFDto ikasa_menuref, bool doSaveChanges = true)
		{
			string key = this.IKASA_MENUREFService.Add(ikasa_menuref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateIKASA_MENUREF(IKASA_MENUREFDto ikasa_menuref, bool doSaveChanges = true)
		{
			this.IKASA_MENUREFService.Update(ikasa_menuref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateIKASA_MENUREFs(IEnumerable<IKASA_MENUREFDto> ikasa_menurefs, bool doSaveChanges = true)
		{
			if (ikasa_menurefs == null)
			{
				return;
			}
			foreach (IKASA_MENUREFDto instance in ikasa_menurefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_MENUREFService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteIKASA_MENUREF(IKASA_MENUREFDto ikasa_menuref, bool doSaveChanges = true)
		{
			this.IKASA_MENUREFService.Delete(ikasa_menuref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteIKASA_MENUREFs(IEnumerable<IKASA_MENUREFDto> ikasa_menurefs, bool doSaveChanges = true)
		{
			if (ikasa_menurefs == null)
			{
				return;
			}
			foreach (IKASA_MENUREFDto instance in ikasa_menurefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_MENUREFService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveIKASA_MENUREF(IKASA_MENUREFDto ikasa_menuref, bool doSaveChanges = true)
		{
			switch (ikasa_menuref.RowState)
			{
				case RowState.Insert:
					this.CreateIKASA_MENUREF(ikasa_menuref, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateIKASA_MENUREF(ikasa_menuref, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteIKASA_MENUREF(ikasa_menuref, doSaveChanges);
					break;
			}
		}


		public void SaveIKASA_MENUREFs(IEnumerable<IKASA_MENUREFDto> ikasa_menurefs, bool doSaveChanges = true)
		{
			if (ikasa_menurefs == null)
			{
				return;
			}
			foreach (IKASA_MENUREFDto instance in ikasa_menurefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveIKASA_MENUREF(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion IKASA_MENUREF CRUD Operations


		#region IKASA_MENUPARAM CRUD Operations


		private IIKASA_MENUPARAMService ikasa_menuparam;
		public virtual IIKASA_MENUPARAMService IKASA_MENUPARAMService
		{
			get
			{
				if (this.ikasa_menuparam == null)
				{
					IIKASA_MENUPARAMAssembler assembler = new IKASA_MENUPARAMAssembler();
					IIKASA_MENUPARAMRepository repository = new IKASA_MENUPARAMRepository(this.UnitOfWork);
					this.ikasa_menuparam = new IKASA_MENUPARAMService(assembler, repository);
				}
				return this.ikasa_menuparam;
			}
		}


		public IQueryable<IKASA_MENUPARAM> IKASA_MENUPARAMs
		{
			get { return this.IKASA_MENUPARAMService.Repository.GetAll(); }
		}


		public IQueryable<IKASA_MENUPARAM> ReadIKASA_MENUPARAMs(Expression<Func<IKASA_MENUPARAM, bool>> filter, int dummy)
		{
			return this.IKASA_MENUPARAMService.Repository.Find(filter);
		}


		public IEnumerable<IKASA_MENUPARAMDto> ReadIKASA_MENUPARAMs()
		{
			return this.IKASA_MENUPARAMService.GetAll();
		}


		public IEnumerable<IKASA_MENUPARAMDto> ReadIKASA_MENUPARAMs(Expression<Func<IKASA_MENUPARAM, bool>> filter)
		{
			return this.IKASA_MENUPARAMService.Find(filter);
		}


		public IEnumerable<IKASA_MENUPARAMDto> ReadIKASA_MENUPARAMs(ISpecification<IKASA_MENUPARAM> specification)
		{
			return this.IKASA_MENUPARAMService.Find(specification.GetExpression());
		}


		public IEnumerable<IKASA_MENUPARAMDto> ReadIKASA_MENUPARAMs(IQueryable<IKASA_MENUPARAM> query)
		{
			return this.IKASA_MENUPARAMService.Assembler.Assemble(query);
		}


		public IEnumerable<IKASA_MENUPARAMDto> ReadIKASA_MENUPARAMs(string[] propertyToSearch, object[] keyWords)
		{
			return this.IKASA_MENUPARAMService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<IKASA_MENUPARAMDto> ReadIKASA_MENUPARAMs(object[] keyWords)
		{
			return this.IKASA_MENUPARAMService.Find(keyWords);
		}


		public IEnumerable<IKASA_MENUPARAMDto> ReadIKASA_MENUPARAMsPaged(int startIndex, int pageSize)
		{
			return this.IKASA_MENUPARAMService.Find(startIndex, pageSize);
		}


		public IEnumerable<IKASA_MENUPARAMDto> ReadIKASA_MENUPARAMsPaged(IQueryable<IKASA_MENUPARAM> source, int pageIndex, int pageSize)
		{
			return this.IKASA_MENUPARAMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<IKASA_MENUPARAMDto> ReadIKASA_MENUPARAMsPaged(IQueryable<IKASA_MENUPARAM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.IKASA_MENUPARAMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<IKASA_MENUPARAMDto> ReadIKASA_MENUPARAMsFiltered(string sortExpression, string filterExpression)
		{
			return this.IKASA_MENUPARAMService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_MENUPARAMDto> ReadIKASA_MENUPARAMsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.IKASA_MENUPARAMService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_MENUPARAMDto> ReadIKASA_MENUPARAMsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<IKASA_MENUPARAM, bool>> filter)
		{
			return this.IKASA_MENUPARAMService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public IKASA_MENUPARAMDto ReadIKASA_MENUPARAMs(string dtoKey)
		{
			return this.IKASA_MENUPARAMService.GetByKey(dtoKey);
		}


		public int CountIKASA_MENUPARAMs()
		{
			return this.IKASA_MENUPARAMService.Count();
		}


		public int CountIKASA_MENUPARAMs(string filterExpression)
		{
			return this.IKASA_MENUPARAMService.Count(filterExpression);
		}


		public int CountIKASA_MENUPARAMs(Expression<Func<IKASA_MENUPARAM, bool>> filter)
		{
			return this.IKASA_MENUPARAMService.Count(filter);
		}


		public string CreateIKASA_MENUPARAM(IKASA_MENUPARAMDto ikasa_menuparam, bool doSaveChanges = true)
		{
			string key = this.IKASA_MENUPARAMService.Add(ikasa_menuparam);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateIKASA_MENUPARAM(IKASA_MENUPARAMDto ikasa_menuparam, bool doSaveChanges = true)
		{
			this.IKASA_MENUPARAMService.Update(ikasa_menuparam);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateIKASA_MENUPARAMs(IEnumerable<IKASA_MENUPARAMDto> ikasa_menuparams, bool doSaveChanges = true)
		{
			if (ikasa_menuparams == null)
			{
				return;
			}
			foreach (IKASA_MENUPARAMDto instance in ikasa_menuparams)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_MENUPARAMService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteIKASA_MENUPARAM(IKASA_MENUPARAMDto ikasa_menuparam, bool doSaveChanges = true)
		{
			this.IKASA_MENUPARAMService.Delete(ikasa_menuparam);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteIKASA_MENUPARAMs(IEnumerable<IKASA_MENUPARAMDto> ikasa_menuparams, bool doSaveChanges = true)
		{
			if (ikasa_menuparams == null)
			{
				return;
			}
			foreach (IKASA_MENUPARAMDto instance in ikasa_menuparams)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_MENUPARAMService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveIKASA_MENUPARAM(IKASA_MENUPARAMDto ikasa_menuparam, bool doSaveChanges = true)
		{
			switch (ikasa_menuparam.RowState)
			{
				case RowState.Insert:
					this.CreateIKASA_MENUPARAM(ikasa_menuparam, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateIKASA_MENUPARAM(ikasa_menuparam, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteIKASA_MENUPARAM(ikasa_menuparam, doSaveChanges);
					break;
			}
		}


		public void SaveIKASA_MENUPARAMs(IEnumerable<IKASA_MENUPARAMDto> ikasa_menuparams, bool doSaveChanges = true)
		{
			if (ikasa_menuparams == null)
			{
				return;
			}
			foreach (IKASA_MENUPARAMDto instance in ikasa_menuparams)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveIKASA_MENUPARAM(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion IKASA_MENUPARAM CRUD Operations


		#region IKASA_MENU CRUD Operations


		private IIKASA_MENUService ikasa_menu;
		public virtual IIKASA_MENUService IKASA_MENUService
		{
			get
			{
				if (this.ikasa_menu == null)
				{
					IIKASA_MENUAssembler assembler = new IKASA_MENUAssembler();
					IIKASA_MENURepository repository = new IKASA_MENURepository(this.UnitOfWork);
					this.ikasa_menu = new IKASA_MENUService(assembler, repository);
				}
				return this.ikasa_menu;
			}
		}


		public IQueryable<IKASA_MENU> IKASA_MENUs
		{
			get { return this.IKASA_MENUService.Repository.GetAll(); }
		}


		public IQueryable<IKASA_MENU> ReadIKASA_MENUs(Expression<Func<IKASA_MENU, bool>> filter, int dummy)
		{
			return this.IKASA_MENUService.Repository.Find(filter);
		}


		public IEnumerable<IKASA_MENUDto> ReadIKASA_MENUs()
		{
			return this.IKASA_MENUService.GetAll();
		}


		public IEnumerable<IKASA_MENUDto> ReadIKASA_MENUs(Expression<Func<IKASA_MENU, bool>> filter)
		{
			return this.IKASA_MENUService.Find(filter);
		}


		public IEnumerable<IKASA_MENUDto> ReadIKASA_MENUs(ISpecification<IKASA_MENU> specification)
		{
			return this.IKASA_MENUService.Find(specification.GetExpression());
		}


		public IEnumerable<IKASA_MENUDto> ReadIKASA_MENUs(IQueryable<IKASA_MENU> query)
		{
			return this.IKASA_MENUService.Assembler.Assemble(query);
		}


		public IEnumerable<IKASA_MENUDto> ReadIKASA_MENUs(string[] propertyToSearch, object[] keyWords)
		{
			return this.IKASA_MENUService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<IKASA_MENUDto> ReadIKASA_MENUs(object[] keyWords)
		{
			return this.IKASA_MENUService.Find(keyWords);
		}


		public IEnumerable<IKASA_MENUDto> ReadIKASA_MENUsPaged(int startIndex, int pageSize)
		{
			return this.IKASA_MENUService.Find(startIndex, pageSize);
		}


		public IEnumerable<IKASA_MENUDto> ReadIKASA_MENUsPaged(IQueryable<IKASA_MENU> source, int pageIndex, int pageSize)
		{
			return this.IKASA_MENUService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<IKASA_MENUDto> ReadIKASA_MENUsPaged(IQueryable<IKASA_MENU> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.IKASA_MENUService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<IKASA_MENUDto> ReadIKASA_MENUsFiltered(string sortExpression, string filterExpression)
		{
			return this.IKASA_MENUService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_MENUDto> ReadIKASA_MENUsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.IKASA_MENUService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_MENUDto> ReadIKASA_MENUsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<IKASA_MENU, bool>> filter)
		{
			return this.IKASA_MENUService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public IKASA_MENUDto ReadIKASA_MENUs(string dtoKey)
		{
			return this.IKASA_MENUService.GetByKey(dtoKey);
		}


		public int CountIKASA_MENUs()
		{
			return this.IKASA_MENUService.Count();
		}


		public int CountIKASA_MENUs(string filterExpression)
		{
			return this.IKASA_MENUService.Count(filterExpression);
		}


		public int CountIKASA_MENUs(Expression<Func<IKASA_MENU, bool>> filter)
		{
			return this.IKASA_MENUService.Count(filter);
		}


		public string CreateIKASA_MENU(IKASA_MENUDto ikasa_menu, bool doSaveChanges = true)
		{
			string key = this.IKASA_MENUService.Add(ikasa_menu);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateIKASA_MENU(IKASA_MENUDto ikasa_menu, bool doSaveChanges = true)
		{
			this.IKASA_MENUService.Update(ikasa_menu);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateIKASA_MENUs(IEnumerable<IKASA_MENUDto> ikasa_menus, bool doSaveChanges = true)
		{
			if (ikasa_menus == null)
			{
				return;
			}
			foreach (IKASA_MENUDto instance in ikasa_menus)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_MENUService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteIKASA_MENU(IKASA_MENUDto ikasa_menu, bool doSaveChanges = true)
		{
			this.IKASA_MENUService.Delete(ikasa_menu);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteIKASA_MENUs(IEnumerable<IKASA_MENUDto> ikasa_menus, bool doSaveChanges = true)
		{
			if (ikasa_menus == null)
			{
				return;
			}
			foreach (IKASA_MENUDto instance in ikasa_menus)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_MENUService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveIKASA_MENU(IKASA_MENUDto ikasa_menu, bool doSaveChanges = true)
		{
			switch (ikasa_menu.RowState)
			{
				case RowState.Insert:
					this.CreateIKASA_MENU(ikasa_menu, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateIKASA_MENU(ikasa_menu, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteIKASA_MENU(ikasa_menu, doSaveChanges);
					break;
			}
		}


		public void SaveIKASA_MENUs(IEnumerable<IKASA_MENUDto> ikasa_menus, bool doSaveChanges = true)
		{
			if (ikasa_menus == null)
			{
				return;
			}
			foreach (IKASA_MENUDto instance in ikasa_menus)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveIKASA_MENU(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion IKASA_MENU CRUD Operations


		#region IKASA_IPDDATACOUNT CRUD Operations


		private IIKASA_IPDDATACOUNTService ikasa_ipddatacount;
		public virtual IIKASA_IPDDATACOUNTService IKASA_IPDDATACOUNTService
		{
			get
			{
				if (this.ikasa_ipddatacount == null)
				{
					IIKASA_IPDDATACOUNTAssembler assembler = new IKASA_IPDDATACOUNTAssembler();
					IIKASA_IPDDATACOUNTRepository repository = new IKASA_IPDDATACOUNTRepository(this.UnitOfWork);
					this.ikasa_ipddatacount = new IKASA_IPDDATACOUNTService(assembler, repository);
				}
				return this.ikasa_ipddatacount;
			}
		}


		public IQueryable<IKASA_IPDDATACOUNT> IKASA_IPDDATACOUNTs
		{
			get { return this.IKASA_IPDDATACOUNTService.Repository.GetAll(); }
		}


		public IQueryable<IKASA_IPDDATACOUNT> ReadIKASA_IPDDATACOUNTs(Expression<Func<IKASA_IPDDATACOUNT, bool>> filter, int dummy)
		{
			return this.IKASA_IPDDATACOUNTService.Repository.Find(filter);
		}


		public IEnumerable<IKASA_IPDDATACOUNTDto> ReadIKASA_IPDDATACOUNTs()
		{
			return this.IKASA_IPDDATACOUNTService.GetAll();
		}


		public IEnumerable<IKASA_IPDDATACOUNTDto> ReadIKASA_IPDDATACOUNTs(Expression<Func<IKASA_IPDDATACOUNT, bool>> filter)
		{
			return this.IKASA_IPDDATACOUNTService.Find(filter);
		}


		public IEnumerable<IKASA_IPDDATACOUNTDto> ReadIKASA_IPDDATACOUNTs(ISpecification<IKASA_IPDDATACOUNT> specification)
		{
			return this.IKASA_IPDDATACOUNTService.Find(specification.GetExpression());
		}


		public IEnumerable<IKASA_IPDDATACOUNTDto> ReadIKASA_IPDDATACOUNTs(IQueryable<IKASA_IPDDATACOUNT> query)
		{
			return this.IKASA_IPDDATACOUNTService.Assembler.Assemble(query);
		}


		public IEnumerable<IKASA_IPDDATACOUNTDto> ReadIKASA_IPDDATACOUNTs(string[] propertyToSearch, object[] keyWords)
		{
			return this.IKASA_IPDDATACOUNTService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<IKASA_IPDDATACOUNTDto> ReadIKASA_IPDDATACOUNTs(object[] keyWords)
		{
			return this.IKASA_IPDDATACOUNTService.Find(keyWords);
		}


		public IEnumerable<IKASA_IPDDATACOUNTDto> ReadIKASA_IPDDATACOUNTsPaged(int startIndex, int pageSize)
		{
			return this.IKASA_IPDDATACOUNTService.Find(startIndex, pageSize);
		}


		public IEnumerable<IKASA_IPDDATACOUNTDto> ReadIKASA_IPDDATACOUNTsPaged(IQueryable<IKASA_IPDDATACOUNT> source, int pageIndex, int pageSize)
		{
			return this.IKASA_IPDDATACOUNTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<IKASA_IPDDATACOUNTDto> ReadIKASA_IPDDATACOUNTsPaged(IQueryable<IKASA_IPDDATACOUNT> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.IKASA_IPDDATACOUNTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<IKASA_IPDDATACOUNTDto> ReadIKASA_IPDDATACOUNTsFiltered(string sortExpression, string filterExpression)
		{
			return this.IKASA_IPDDATACOUNTService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_IPDDATACOUNTDto> ReadIKASA_IPDDATACOUNTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.IKASA_IPDDATACOUNTService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_IPDDATACOUNTDto> ReadIKASA_IPDDATACOUNTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<IKASA_IPDDATACOUNT, bool>> filter)
		{
			return this.IKASA_IPDDATACOUNTService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public IKASA_IPDDATACOUNTDto ReadIKASA_IPDDATACOUNTs(string dtoKey)
		{
			return this.IKASA_IPDDATACOUNTService.GetByKey(dtoKey);
		}


		public int CountIKASA_IPDDATACOUNTs()
		{
			return this.IKASA_IPDDATACOUNTService.Count();
		}


		public int CountIKASA_IPDDATACOUNTs(string filterExpression)
		{
			return this.IKASA_IPDDATACOUNTService.Count(filterExpression);
		}


		public int CountIKASA_IPDDATACOUNTs(Expression<Func<IKASA_IPDDATACOUNT, bool>> filter)
		{
			return this.IKASA_IPDDATACOUNTService.Count(filter);
		}


		public string CreateIKASA_IPDDATACOUNT(IKASA_IPDDATACOUNTDto ikasa_ipddatacount, bool doSaveChanges = true)
		{
			string key = this.IKASA_IPDDATACOUNTService.Add(ikasa_ipddatacount);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateIKASA_IPDDATACOUNT(IKASA_IPDDATACOUNTDto ikasa_ipddatacount, bool doSaveChanges = true)
		{
			this.IKASA_IPDDATACOUNTService.Update(ikasa_ipddatacount);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateIKASA_IPDDATACOUNTs(IEnumerable<IKASA_IPDDATACOUNTDto> ikasa_ipddatacounts, bool doSaveChanges = true)
		{
			if (ikasa_ipddatacounts == null)
			{
				return;
			}
			foreach (IKASA_IPDDATACOUNTDto instance in ikasa_ipddatacounts)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_IPDDATACOUNTService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteIKASA_IPDDATACOUNT(IKASA_IPDDATACOUNTDto ikasa_ipddatacount, bool doSaveChanges = true)
		{
			this.IKASA_IPDDATACOUNTService.Delete(ikasa_ipddatacount);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteIKASA_IPDDATACOUNTs(IEnumerable<IKASA_IPDDATACOUNTDto> ikasa_ipddatacounts, bool doSaveChanges = true)
		{
			if (ikasa_ipddatacounts == null)
			{
				return;
			}
			foreach (IKASA_IPDDATACOUNTDto instance in ikasa_ipddatacounts)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_IPDDATACOUNTService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveIKASA_IPDDATACOUNT(IKASA_IPDDATACOUNTDto ikasa_ipddatacount, bool doSaveChanges = true)
		{
			switch (ikasa_ipddatacount.RowState)
			{
				case RowState.Insert:
					this.CreateIKASA_IPDDATACOUNT(ikasa_ipddatacount, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateIKASA_IPDDATACOUNT(ikasa_ipddatacount, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteIKASA_IPDDATACOUNT(ikasa_ipddatacount, doSaveChanges);
					break;
			}
		}


		public void SaveIKASA_IPDDATACOUNTs(IEnumerable<IKASA_IPDDATACOUNTDto> ikasa_ipddatacounts, bool doSaveChanges = true)
		{
			if (ikasa_ipddatacounts == null)
			{
				return;
			}
			foreach (IKASA_IPDDATACOUNTDto instance in ikasa_ipddatacounts)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveIKASA_IPDDATACOUNT(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion IKASA_IPDDATACOUNT CRUD Operations


		#region IKASA_ERCASE_EVALDET CRUD Operations


		private IIKASA_ERCASE_EVALDETService ikasa_ercase_evaldet;
		public virtual IIKASA_ERCASE_EVALDETService IKASA_ERCASE_EVALDETService
		{
			get
			{
				if (this.ikasa_ercase_evaldet == null)
				{
					IIKASA_ERCASE_EVALDETAssembler assembler = new IKASA_ERCASE_EVALDETAssembler();
					IIKASA_ERCASE_EVALDETRepository repository = new IKASA_ERCASE_EVALDETRepository(this.UnitOfWork);
					this.ikasa_ercase_evaldet = new IKASA_ERCASE_EVALDETService(assembler, repository);
				}
				return this.ikasa_ercase_evaldet;
			}
		}


		public IQueryable<IKASA_ERCASE_EVALDET> IKASA_ERCASE_EVALDETs
		{
			get { return this.IKASA_ERCASE_EVALDETService.Repository.GetAll(); }
		}


		public IQueryable<IKASA_ERCASE_EVALDET> ReadIKASA_ERCASE_EVALDETs(Expression<Func<IKASA_ERCASE_EVALDET, bool>> filter, int dummy)
		{
			return this.IKASA_ERCASE_EVALDETService.Repository.Find(filter);
		}


		public IEnumerable<IKASA_ERCASE_EVALDETDto> ReadIKASA_ERCASE_EVALDETs()
		{
			return this.IKASA_ERCASE_EVALDETService.GetAll();
		}


		public IEnumerable<IKASA_ERCASE_EVALDETDto> ReadIKASA_ERCASE_EVALDETs(Expression<Func<IKASA_ERCASE_EVALDET, bool>> filter)
		{
			return this.IKASA_ERCASE_EVALDETService.Find(filter);
		}


		public IEnumerable<IKASA_ERCASE_EVALDETDto> ReadIKASA_ERCASE_EVALDETs(ISpecification<IKASA_ERCASE_EVALDET> specification)
		{
			return this.IKASA_ERCASE_EVALDETService.Find(specification.GetExpression());
		}


		public IEnumerable<IKASA_ERCASE_EVALDETDto> ReadIKASA_ERCASE_EVALDETs(IQueryable<IKASA_ERCASE_EVALDET> query)
		{
			return this.IKASA_ERCASE_EVALDETService.Assembler.Assemble(query);
		}


		public IEnumerable<IKASA_ERCASE_EVALDETDto> ReadIKASA_ERCASE_EVALDETs(string[] propertyToSearch, object[] keyWords)
		{
			return this.IKASA_ERCASE_EVALDETService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<IKASA_ERCASE_EVALDETDto> ReadIKASA_ERCASE_EVALDETs(object[] keyWords)
		{
			return this.IKASA_ERCASE_EVALDETService.Find(keyWords);
		}


		public IEnumerable<IKASA_ERCASE_EVALDETDto> ReadIKASA_ERCASE_EVALDETsPaged(int startIndex, int pageSize)
		{
			return this.IKASA_ERCASE_EVALDETService.Find(startIndex, pageSize);
		}


		public IEnumerable<IKASA_ERCASE_EVALDETDto> ReadIKASA_ERCASE_EVALDETsPaged(IQueryable<IKASA_ERCASE_EVALDET> source, int pageIndex, int pageSize)
		{
			return this.IKASA_ERCASE_EVALDETService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<IKASA_ERCASE_EVALDETDto> ReadIKASA_ERCASE_EVALDETsPaged(IQueryable<IKASA_ERCASE_EVALDET> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.IKASA_ERCASE_EVALDETService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<IKASA_ERCASE_EVALDETDto> ReadIKASA_ERCASE_EVALDETsFiltered(string sortExpression, string filterExpression)
		{
			return this.IKASA_ERCASE_EVALDETService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_ERCASE_EVALDETDto> ReadIKASA_ERCASE_EVALDETsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.IKASA_ERCASE_EVALDETService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_ERCASE_EVALDETDto> ReadIKASA_ERCASE_EVALDETsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<IKASA_ERCASE_EVALDET, bool>> filter)
		{
			return this.IKASA_ERCASE_EVALDETService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public IKASA_ERCASE_EVALDETDto ReadIKASA_ERCASE_EVALDETs(string dtoKey)
		{
			return this.IKASA_ERCASE_EVALDETService.GetByKey(dtoKey);
		}


		public int CountIKASA_ERCASE_EVALDETs()
		{
			return this.IKASA_ERCASE_EVALDETService.Count();
		}


		public int CountIKASA_ERCASE_EVALDETs(string filterExpression)
		{
			return this.IKASA_ERCASE_EVALDETService.Count(filterExpression);
		}


		public int CountIKASA_ERCASE_EVALDETs(Expression<Func<IKASA_ERCASE_EVALDET, bool>> filter)
		{
			return this.IKASA_ERCASE_EVALDETService.Count(filter);
		}


		public string CreateIKASA_ERCASE_EVALDET(IKASA_ERCASE_EVALDETDto ikasa_ercase_evaldet, bool doSaveChanges = true)
		{
			string key = this.IKASA_ERCASE_EVALDETService.Add(ikasa_ercase_evaldet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateIKASA_ERCASE_EVALDET(IKASA_ERCASE_EVALDETDto ikasa_ercase_evaldet, bool doSaveChanges = true)
		{
			this.IKASA_ERCASE_EVALDETService.Update(ikasa_ercase_evaldet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateIKASA_ERCASE_EVALDETs(IEnumerable<IKASA_ERCASE_EVALDETDto> ikasa_ercase_evaldets, bool doSaveChanges = true)
		{
			if (ikasa_ercase_evaldets == null)
			{
				return;
			}
			foreach (IKASA_ERCASE_EVALDETDto instance in ikasa_ercase_evaldets)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_ERCASE_EVALDETService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteIKASA_ERCASE_EVALDET(IKASA_ERCASE_EVALDETDto ikasa_ercase_evaldet, bool doSaveChanges = true)
		{
			this.IKASA_ERCASE_EVALDETService.Delete(ikasa_ercase_evaldet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteIKASA_ERCASE_EVALDETs(IEnumerable<IKASA_ERCASE_EVALDETDto> ikasa_ercase_evaldets, bool doSaveChanges = true)
		{
			if (ikasa_ercase_evaldets == null)
			{
				return;
			}
			foreach (IKASA_ERCASE_EVALDETDto instance in ikasa_ercase_evaldets)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_ERCASE_EVALDETService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveIKASA_ERCASE_EVALDET(IKASA_ERCASE_EVALDETDto ikasa_ercase_evaldet, bool doSaveChanges = true)
		{
			switch (ikasa_ercase_evaldet.RowState)
			{
				case RowState.Insert:
					this.CreateIKASA_ERCASE_EVALDET(ikasa_ercase_evaldet, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateIKASA_ERCASE_EVALDET(ikasa_ercase_evaldet, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteIKASA_ERCASE_EVALDET(ikasa_ercase_evaldet, doSaveChanges);
					break;
			}
		}


		public void SaveIKASA_ERCASE_EVALDETs(IEnumerable<IKASA_ERCASE_EVALDETDto> ikasa_ercase_evaldets, bool doSaveChanges = true)
		{
			if (ikasa_ercase_evaldets == null)
			{
				return;
			}
			foreach (IKASA_ERCASE_EVALDETDto instance in ikasa_ercase_evaldets)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveIKASA_ERCASE_EVALDET(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion IKASA_ERCASE_EVALDET CRUD Operations


		#region IKASA_ERCASE_EVAL CRUD Operations


		private IIKASA_ERCASE_EVALService ikasa_ercase_eval;
		public virtual IIKASA_ERCASE_EVALService IKASA_ERCASE_EVALService
		{
			get
			{
				if (this.ikasa_ercase_eval == null)
				{
					IIKASA_ERCASE_EVALAssembler assembler = new IKASA_ERCASE_EVALAssembler();
					IIKASA_ERCASE_EVALRepository repository = new IKASA_ERCASE_EVALRepository(this.UnitOfWork);
					this.ikasa_ercase_eval = new IKASA_ERCASE_EVALService(assembler, repository);
				}
				return this.ikasa_ercase_eval;
			}
		}


		public IQueryable<IKASA_ERCASE_EVAL> IKASA_ERCASE_EVALs
		{
			get { return this.IKASA_ERCASE_EVALService.Repository.GetAll(); }
		}


		public IQueryable<IKASA_ERCASE_EVAL> ReadIKASA_ERCASE_EVALs(Expression<Func<IKASA_ERCASE_EVAL, bool>> filter, int dummy)
		{
			return this.IKASA_ERCASE_EVALService.Repository.Find(filter);
		}


		public IEnumerable<IKASA_ERCASE_EVALDto> ReadIKASA_ERCASE_EVALs()
		{
			return this.IKASA_ERCASE_EVALService.GetAll();
		}


		public IEnumerable<IKASA_ERCASE_EVALDto> ReadIKASA_ERCASE_EVALs(Expression<Func<IKASA_ERCASE_EVAL, bool>> filter)
		{
			return this.IKASA_ERCASE_EVALService.Find(filter);
		}


		public IEnumerable<IKASA_ERCASE_EVALDto> ReadIKASA_ERCASE_EVALs(ISpecification<IKASA_ERCASE_EVAL> specification)
		{
			return this.IKASA_ERCASE_EVALService.Find(specification.GetExpression());
		}


		public IEnumerable<IKASA_ERCASE_EVALDto> ReadIKASA_ERCASE_EVALs(IQueryable<IKASA_ERCASE_EVAL> query)
		{
			return this.IKASA_ERCASE_EVALService.Assembler.Assemble(query);
		}


		public IEnumerable<IKASA_ERCASE_EVALDto> ReadIKASA_ERCASE_EVALs(string[] propertyToSearch, object[] keyWords)
		{
			return this.IKASA_ERCASE_EVALService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<IKASA_ERCASE_EVALDto> ReadIKASA_ERCASE_EVALs(object[] keyWords)
		{
			return this.IKASA_ERCASE_EVALService.Find(keyWords);
		}


		public IEnumerable<IKASA_ERCASE_EVALDto> ReadIKASA_ERCASE_EVALsPaged(int startIndex, int pageSize)
		{
			return this.IKASA_ERCASE_EVALService.Find(startIndex, pageSize);
		}


		public IEnumerable<IKASA_ERCASE_EVALDto> ReadIKASA_ERCASE_EVALsPaged(IQueryable<IKASA_ERCASE_EVAL> source, int pageIndex, int pageSize)
		{
			return this.IKASA_ERCASE_EVALService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<IKASA_ERCASE_EVALDto> ReadIKASA_ERCASE_EVALsPaged(IQueryable<IKASA_ERCASE_EVAL> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.IKASA_ERCASE_EVALService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<IKASA_ERCASE_EVALDto> ReadIKASA_ERCASE_EVALsFiltered(string sortExpression, string filterExpression)
		{
			return this.IKASA_ERCASE_EVALService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_ERCASE_EVALDto> ReadIKASA_ERCASE_EVALsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.IKASA_ERCASE_EVALService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_ERCASE_EVALDto> ReadIKASA_ERCASE_EVALsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<IKASA_ERCASE_EVAL, bool>> filter)
		{
			return this.IKASA_ERCASE_EVALService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public IKASA_ERCASE_EVALDto ReadIKASA_ERCASE_EVALs(string dtoKey)
		{
			return this.IKASA_ERCASE_EVALService.GetByKey(dtoKey);
		}


		public int CountIKASA_ERCASE_EVALs()
		{
			return this.IKASA_ERCASE_EVALService.Count();
		}


		public int CountIKASA_ERCASE_EVALs(string filterExpression)
		{
			return this.IKASA_ERCASE_EVALService.Count(filterExpression);
		}


		public int CountIKASA_ERCASE_EVALs(Expression<Func<IKASA_ERCASE_EVAL, bool>> filter)
		{
			return this.IKASA_ERCASE_EVALService.Count(filter);
		}


		public string CreateIKASA_ERCASE_EVAL(IKASA_ERCASE_EVALDto ikasa_ercase_eval, bool doSaveChanges = true)
		{
			string key = this.IKASA_ERCASE_EVALService.Add(ikasa_ercase_eval);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateIKASA_ERCASE_EVAL(IKASA_ERCASE_EVALDto ikasa_ercase_eval, bool doSaveChanges = true)
		{
			this.IKASA_ERCASE_EVALService.Update(ikasa_ercase_eval);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateIKASA_ERCASE_EVALs(IEnumerable<IKASA_ERCASE_EVALDto> ikasa_ercase_evals, bool doSaveChanges = true)
		{
			if (ikasa_ercase_evals == null)
			{
				return;
			}
			foreach (IKASA_ERCASE_EVALDto instance in ikasa_ercase_evals)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_ERCASE_EVALService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteIKASA_ERCASE_EVAL(IKASA_ERCASE_EVALDto ikasa_ercase_eval, bool doSaveChanges = true)
		{
			this.IKASA_ERCASE_EVALService.Delete(ikasa_ercase_eval);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteIKASA_ERCASE_EVALs(IEnumerable<IKASA_ERCASE_EVALDto> ikasa_ercase_evals, bool doSaveChanges = true)
		{
			if (ikasa_ercase_evals == null)
			{
				return;
			}
			foreach (IKASA_ERCASE_EVALDto instance in ikasa_ercase_evals)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_ERCASE_EVALService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveIKASA_ERCASE_EVAL(IKASA_ERCASE_EVALDto ikasa_ercase_eval, bool doSaveChanges = true)
		{
			switch (ikasa_ercase_eval.RowState)
			{
				case RowState.Insert:
					this.CreateIKASA_ERCASE_EVAL(ikasa_ercase_eval, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateIKASA_ERCASE_EVAL(ikasa_ercase_eval, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteIKASA_ERCASE_EVAL(ikasa_ercase_eval, doSaveChanges);
					break;
			}
		}


		public void SaveIKASA_ERCASE_EVALs(IEnumerable<IKASA_ERCASE_EVALDto> ikasa_ercase_evals, bool doSaveChanges = true)
		{
			if (ikasa_ercase_evals == null)
			{
				return;
			}
			foreach (IKASA_ERCASE_EVALDto instance in ikasa_ercase_evals)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveIKASA_ERCASE_EVAL(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion IKASA_ERCASE_EVAL CRUD Operations


		#region IKASA_ERCASE CRUD Operations


		private IIKASA_ERCASEService ikasa_ercase;
		public virtual IIKASA_ERCASEService IKASA_ERCASEService
		{
			get
			{
				if (this.ikasa_ercase == null)
				{
					IIKASA_ERCASEAssembler assembler = new IKASA_ERCASEAssembler();
					IIKASA_ERCASERepository repository = new IKASA_ERCASERepository(this.UnitOfWork);
					this.ikasa_ercase = new IKASA_ERCASEService(assembler, repository);
				}
				return this.ikasa_ercase;
			}
		}


		public IQueryable<IKASA_ERCASE> IKASA_ERCASEs
		{
			get { return this.IKASA_ERCASEService.Repository.GetAll(); }
		}


		public IQueryable<IKASA_ERCASE> ReadIKASA_ERCASEs(Expression<Func<IKASA_ERCASE, bool>> filter, int dummy)
		{
			return this.IKASA_ERCASEService.Repository.Find(filter);
		}


		public IEnumerable<IKASA_ERCASEDto> ReadIKASA_ERCASEs()
		{
			return this.IKASA_ERCASEService.GetAll();
		}


		public IEnumerable<IKASA_ERCASEDto> ReadIKASA_ERCASEs(Expression<Func<IKASA_ERCASE, bool>> filter)
		{
			return this.IKASA_ERCASEService.Find(filter);
		}


		public IEnumerable<IKASA_ERCASEDto> ReadIKASA_ERCASEs(ISpecification<IKASA_ERCASE> specification)
		{
			return this.IKASA_ERCASEService.Find(specification.GetExpression());
		}


		public IEnumerable<IKASA_ERCASEDto> ReadIKASA_ERCASEs(IQueryable<IKASA_ERCASE> query)
		{
			return this.IKASA_ERCASEService.Assembler.Assemble(query);
		}


		public IEnumerable<IKASA_ERCASEDto> ReadIKASA_ERCASEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.IKASA_ERCASEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<IKASA_ERCASEDto> ReadIKASA_ERCASEs(object[] keyWords)
		{
			return this.IKASA_ERCASEService.Find(keyWords);
		}


		public IEnumerable<IKASA_ERCASEDto> ReadIKASA_ERCASEsPaged(int startIndex, int pageSize)
		{
			return this.IKASA_ERCASEService.Find(startIndex, pageSize);
		}


		public IEnumerable<IKASA_ERCASEDto> ReadIKASA_ERCASEsPaged(IQueryable<IKASA_ERCASE> source, int pageIndex, int pageSize)
		{
			return this.IKASA_ERCASEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<IKASA_ERCASEDto> ReadIKASA_ERCASEsPaged(IQueryable<IKASA_ERCASE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.IKASA_ERCASEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<IKASA_ERCASEDto> ReadIKASA_ERCASEsFiltered(string sortExpression, string filterExpression)
		{
			return this.IKASA_ERCASEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_ERCASEDto> ReadIKASA_ERCASEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.IKASA_ERCASEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_ERCASEDto> ReadIKASA_ERCASEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<IKASA_ERCASE, bool>> filter)
		{
			return this.IKASA_ERCASEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public IKASA_ERCASEDto ReadIKASA_ERCASEs(string dtoKey)
		{
			return this.IKASA_ERCASEService.GetByKey(dtoKey);
		}


		public int CountIKASA_ERCASEs()
		{
			return this.IKASA_ERCASEService.Count();
		}


		public int CountIKASA_ERCASEs(string filterExpression)
		{
			return this.IKASA_ERCASEService.Count(filterExpression);
		}


		public int CountIKASA_ERCASEs(Expression<Func<IKASA_ERCASE, bool>> filter)
		{
			return this.IKASA_ERCASEService.Count(filter);
		}


		public string CreateIKASA_ERCASE(IKASA_ERCASEDto ikasa_ercase, bool doSaveChanges = true)
		{
			string key = this.IKASA_ERCASEService.Add(ikasa_ercase);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateIKASA_ERCASE(IKASA_ERCASEDto ikasa_ercase, bool doSaveChanges = true)
		{
			this.IKASA_ERCASEService.Update(ikasa_ercase);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateIKASA_ERCASEs(IEnumerable<IKASA_ERCASEDto> ikasa_ercases, bool doSaveChanges = true)
		{
			if (ikasa_ercases == null)
			{
				return;
			}
			foreach (IKASA_ERCASEDto instance in ikasa_ercases)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_ERCASEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteIKASA_ERCASE(IKASA_ERCASEDto ikasa_ercase, bool doSaveChanges = true)
		{
			this.IKASA_ERCASEService.Delete(ikasa_ercase);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteIKASA_ERCASEs(IEnumerable<IKASA_ERCASEDto> ikasa_ercases, bool doSaveChanges = true)
		{
			if (ikasa_ercases == null)
			{
				return;
			}
			foreach (IKASA_ERCASEDto instance in ikasa_ercases)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_ERCASEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveIKASA_ERCASE(IKASA_ERCASEDto ikasa_ercase, bool doSaveChanges = true)
		{
			switch (ikasa_ercase.RowState)
			{
				case RowState.Insert:
					this.CreateIKASA_ERCASE(ikasa_ercase, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateIKASA_ERCASE(ikasa_ercase, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteIKASA_ERCASE(ikasa_ercase, doSaveChanges);
					break;
			}
		}


		public void SaveIKASA_ERCASEs(IEnumerable<IKASA_ERCASEDto> ikasa_ercases, bool doSaveChanges = true)
		{
			if (ikasa_ercases == null)
			{
				return;
			}
			foreach (IKASA_ERCASEDto instance in ikasa_ercases)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveIKASA_ERCASE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion IKASA_ERCASE CRUD Operations


		#region IKASA_ACTUPLOADFILE CRUD Operations


		private IIKASA_ACTUPLOADFILEService ikasa_actuploadfile;
		public virtual IIKASA_ACTUPLOADFILEService IKASA_ACTUPLOADFILEService
		{
			get
			{
				if (this.ikasa_actuploadfile == null)
				{
					IIKASA_ACTUPLOADFILEAssembler assembler = new IKASA_ACTUPLOADFILEAssembler();
					IIKASA_ACTUPLOADFILERepository repository = new IKASA_ACTUPLOADFILERepository(this.UnitOfWork);
					this.ikasa_actuploadfile = new IKASA_ACTUPLOADFILEService(assembler, repository);
				}
				return this.ikasa_actuploadfile;
			}
		}


		public IQueryable<IKASA_ACTUPLOADFILE> IKASA_ACTUPLOADFILEs
		{
			get { return this.IKASA_ACTUPLOADFILEService.Repository.GetAll(); }
		}


		public IQueryable<IKASA_ACTUPLOADFILE> ReadIKASA_ACTUPLOADFILEs(Expression<Func<IKASA_ACTUPLOADFILE, bool>> filter, int dummy)
		{
			return this.IKASA_ACTUPLOADFILEService.Repository.Find(filter);
		}


		public IEnumerable<IKASA_ACTUPLOADFILEDto> ReadIKASA_ACTUPLOADFILEs()
		{
			return this.IKASA_ACTUPLOADFILEService.GetAll();
		}


		public IEnumerable<IKASA_ACTUPLOADFILEDto> ReadIKASA_ACTUPLOADFILEs(Expression<Func<IKASA_ACTUPLOADFILE, bool>> filter)
		{
			return this.IKASA_ACTUPLOADFILEService.Find(filter);
		}


		public IEnumerable<IKASA_ACTUPLOADFILEDto> ReadIKASA_ACTUPLOADFILEs(ISpecification<IKASA_ACTUPLOADFILE> specification)
		{
			return this.IKASA_ACTUPLOADFILEService.Find(specification.GetExpression());
		}


		public IEnumerable<IKASA_ACTUPLOADFILEDto> ReadIKASA_ACTUPLOADFILEs(IQueryable<IKASA_ACTUPLOADFILE> query)
		{
			return this.IKASA_ACTUPLOADFILEService.Assembler.Assemble(query);
		}


		public IEnumerable<IKASA_ACTUPLOADFILEDto> ReadIKASA_ACTUPLOADFILEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.IKASA_ACTUPLOADFILEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<IKASA_ACTUPLOADFILEDto> ReadIKASA_ACTUPLOADFILEs(object[] keyWords)
		{
			return this.IKASA_ACTUPLOADFILEService.Find(keyWords);
		}


		public IEnumerable<IKASA_ACTUPLOADFILEDto> ReadIKASA_ACTUPLOADFILEsPaged(int startIndex, int pageSize)
		{
			return this.IKASA_ACTUPLOADFILEService.Find(startIndex, pageSize);
		}


		public IEnumerable<IKASA_ACTUPLOADFILEDto> ReadIKASA_ACTUPLOADFILEsPaged(IQueryable<IKASA_ACTUPLOADFILE> source, int pageIndex, int pageSize)
		{
			return this.IKASA_ACTUPLOADFILEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<IKASA_ACTUPLOADFILEDto> ReadIKASA_ACTUPLOADFILEsPaged(IQueryable<IKASA_ACTUPLOADFILE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.IKASA_ACTUPLOADFILEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<IKASA_ACTUPLOADFILEDto> ReadIKASA_ACTUPLOADFILEsFiltered(string sortExpression, string filterExpression)
		{
			return this.IKASA_ACTUPLOADFILEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_ACTUPLOADFILEDto> ReadIKASA_ACTUPLOADFILEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.IKASA_ACTUPLOADFILEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_ACTUPLOADFILEDto> ReadIKASA_ACTUPLOADFILEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<IKASA_ACTUPLOADFILE, bool>> filter)
		{
			return this.IKASA_ACTUPLOADFILEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public IKASA_ACTUPLOADFILEDto ReadIKASA_ACTUPLOADFILEs(string dtoKey)
		{
			return this.IKASA_ACTUPLOADFILEService.GetByKey(dtoKey);
		}


		public int CountIKASA_ACTUPLOADFILEs()
		{
			return this.IKASA_ACTUPLOADFILEService.Count();
		}


		public int CountIKASA_ACTUPLOADFILEs(string filterExpression)
		{
			return this.IKASA_ACTUPLOADFILEService.Count(filterExpression);
		}


		public int CountIKASA_ACTUPLOADFILEs(Expression<Func<IKASA_ACTUPLOADFILE, bool>> filter)
		{
			return this.IKASA_ACTUPLOADFILEService.Count(filter);
		}


		public string CreateIKASA_ACTUPLOADFILE(IKASA_ACTUPLOADFILEDto ikasa_actuploadfile, bool doSaveChanges = true)
		{
			string key = this.IKASA_ACTUPLOADFILEService.Add(ikasa_actuploadfile);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateIKASA_ACTUPLOADFILE(IKASA_ACTUPLOADFILEDto ikasa_actuploadfile, bool doSaveChanges = true)
		{
			this.IKASA_ACTUPLOADFILEService.Update(ikasa_actuploadfile);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateIKASA_ACTUPLOADFILEs(IEnumerable<IKASA_ACTUPLOADFILEDto> ikasa_actuploadfiles, bool doSaveChanges = true)
		{
			if (ikasa_actuploadfiles == null)
			{
				return;
			}
			foreach (IKASA_ACTUPLOADFILEDto instance in ikasa_actuploadfiles)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_ACTUPLOADFILEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteIKASA_ACTUPLOADFILE(IKASA_ACTUPLOADFILEDto ikasa_actuploadfile, bool doSaveChanges = true)
		{
			this.IKASA_ACTUPLOADFILEService.Delete(ikasa_actuploadfile);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteIKASA_ACTUPLOADFILEs(IEnumerable<IKASA_ACTUPLOADFILEDto> ikasa_actuploadfiles, bool doSaveChanges = true)
		{
			if (ikasa_actuploadfiles == null)
			{
				return;
			}
			foreach (IKASA_ACTUPLOADFILEDto instance in ikasa_actuploadfiles)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_ACTUPLOADFILEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveIKASA_ACTUPLOADFILE(IKASA_ACTUPLOADFILEDto ikasa_actuploadfile, bool doSaveChanges = true)
		{
			switch (ikasa_actuploadfile.RowState)
			{
				case RowState.Insert:
					this.CreateIKASA_ACTUPLOADFILE(ikasa_actuploadfile, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateIKASA_ACTUPLOADFILE(ikasa_actuploadfile, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteIKASA_ACTUPLOADFILE(ikasa_actuploadfile, doSaveChanges);
					break;
			}
		}


		public void SaveIKASA_ACTUPLOADFILEs(IEnumerable<IKASA_ACTUPLOADFILEDto> ikasa_actuploadfiles, bool doSaveChanges = true)
		{
			if (ikasa_actuploadfiles == null)
			{
				return;
			}
			foreach (IKASA_ACTUPLOADFILEDto instance in ikasa_actuploadfiles)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveIKASA_ACTUPLOADFILE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion IKASA_ACTUPLOADFILE CRUD Operations


		#region HEALTEACHTIMERATE CRUD Operations


		private IHEALTEACHTIMERATEService healteachtimerate;
		public virtual IHEALTEACHTIMERATEService HEALTEACHTIMERATEService
		{
			get
			{
				if (this.healteachtimerate == null)
				{
					IHEALTEACHTIMERATEAssembler assembler = new HEALTEACHTIMERATEAssembler();
					IHEALTEACHTIMERATERepository repository = new HEALTEACHTIMERATERepository(this.UnitOfWork);
					this.healteachtimerate = new HEALTEACHTIMERATEService(assembler, repository);
				}
				return this.healteachtimerate;
			}
		}


		public IQueryable<HEALTEACHTIMERATE> HEALTEACHTIMERATEs
		{
			get { return this.HEALTEACHTIMERATEService.Repository.GetAll(); }
		}


		public IQueryable<HEALTEACHTIMERATE> ReadHEALTEACHTIMERATEs(Expression<Func<HEALTEACHTIMERATE, bool>> filter, int dummy)
		{
			return this.HEALTEACHTIMERATEService.Repository.Find(filter);
		}


		public IEnumerable<HEALTEACHTIMERATEDto> ReadHEALTEACHTIMERATEs()
		{
			return this.HEALTEACHTIMERATEService.GetAll();
		}


		public IEnumerable<HEALTEACHTIMERATEDto> ReadHEALTEACHTIMERATEs(Expression<Func<HEALTEACHTIMERATE, bool>> filter)
		{
			return this.HEALTEACHTIMERATEService.Find(filter);
		}


		public IEnumerable<HEALTEACHTIMERATEDto> ReadHEALTEACHTIMERATEs(ISpecification<HEALTEACHTIMERATE> specification)
		{
			return this.HEALTEACHTIMERATEService.Find(specification.GetExpression());
		}


		public IEnumerable<HEALTEACHTIMERATEDto> ReadHEALTEACHTIMERATEs(IQueryable<HEALTEACHTIMERATE> query)
		{
			return this.HEALTEACHTIMERATEService.Assembler.Assemble(query);
		}


		public IEnumerable<HEALTEACHTIMERATEDto> ReadHEALTEACHTIMERATEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.HEALTEACHTIMERATEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<HEALTEACHTIMERATEDto> ReadHEALTEACHTIMERATEs(object[] keyWords)
		{
			return this.HEALTEACHTIMERATEService.Find(keyWords);
		}


		public IEnumerable<HEALTEACHTIMERATEDto> ReadHEALTEACHTIMERATEsPaged(int startIndex, int pageSize)
		{
			return this.HEALTEACHTIMERATEService.Find(startIndex, pageSize);
		}


		public IEnumerable<HEALTEACHTIMERATEDto> ReadHEALTEACHTIMERATEsPaged(IQueryable<HEALTEACHTIMERATE> source, int pageIndex, int pageSize)
		{
			return this.HEALTEACHTIMERATEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<HEALTEACHTIMERATEDto> ReadHEALTEACHTIMERATEsPaged(IQueryable<HEALTEACHTIMERATE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.HEALTEACHTIMERATEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<HEALTEACHTIMERATEDto> ReadHEALTEACHTIMERATEsFiltered(string sortExpression, string filterExpression)
		{
			return this.HEALTEACHTIMERATEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<HEALTEACHTIMERATEDto> ReadHEALTEACHTIMERATEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.HEALTEACHTIMERATEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<HEALTEACHTIMERATEDto> ReadHEALTEACHTIMERATEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<HEALTEACHTIMERATE, bool>> filter)
		{
			return this.HEALTEACHTIMERATEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public HEALTEACHTIMERATEDto ReadHEALTEACHTIMERATEs(string dtoKey)
		{
			return this.HEALTEACHTIMERATEService.GetByKey(dtoKey);
		}


		public int CountHEALTEACHTIMERATEs()
		{
			return this.HEALTEACHTIMERATEService.Count();
		}


		public int CountHEALTEACHTIMERATEs(string filterExpression)
		{
			return this.HEALTEACHTIMERATEService.Count(filterExpression);
		}


		public int CountHEALTEACHTIMERATEs(Expression<Func<HEALTEACHTIMERATE, bool>> filter)
		{
			return this.HEALTEACHTIMERATEService.Count(filter);
		}


		public string CreateHEALTEACHTIMERATE(HEALTEACHTIMERATEDto healteachtimerate, bool doSaveChanges = true)
		{
			string key = this.HEALTEACHTIMERATEService.Add(healteachtimerate);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateHEALTEACHTIMERATE(HEALTEACHTIMERATEDto healteachtimerate, bool doSaveChanges = true)
		{
			this.HEALTEACHTIMERATEService.Update(healteachtimerate);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateHEALTEACHTIMERATEs(IEnumerable<HEALTEACHTIMERATEDto> healteachtimerates, bool doSaveChanges = true)
		{
			if (healteachtimerates == null)
			{
				return;
			}
			foreach (HEALTEACHTIMERATEDto instance in healteachtimerates)
			{
				if (instance == null)
				{
					continue;
				}


				this.HEALTEACHTIMERATEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteHEALTEACHTIMERATE(HEALTEACHTIMERATEDto healteachtimerate, bool doSaveChanges = true)
		{
			this.HEALTEACHTIMERATEService.Delete(healteachtimerate);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteHEALTEACHTIMERATEs(IEnumerable<HEALTEACHTIMERATEDto> healteachtimerates, bool doSaveChanges = true)
		{
			if (healteachtimerates == null)
			{
				return;
			}
			foreach (HEALTEACHTIMERATEDto instance in healteachtimerates)
			{
				if (instance == null)
				{
					continue;
				}


				this.HEALTEACHTIMERATEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveHEALTEACHTIMERATE(HEALTEACHTIMERATEDto healteachtimerate, bool doSaveChanges = true)
		{
			switch (healteachtimerate.RowState)
			{
				case RowState.Insert:
					this.CreateHEALTEACHTIMERATE(healteachtimerate, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateHEALTEACHTIMERATE(healteachtimerate, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteHEALTEACHTIMERATE(healteachtimerate, doSaveChanges);
					break;
			}
		}


		public void SaveHEALTEACHTIMERATEs(IEnumerable<HEALTEACHTIMERATEDto> healteachtimerates, bool doSaveChanges = true)
		{
			if (healteachtimerates == null)
			{
				return;
			}
			foreach (HEALTEACHTIMERATEDto instance in healteachtimerates)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveHEALTEACHTIMERATE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion HEALTEACHTIMERATE CRUD Operations


		#region HEALTEACHTIME CRUD Operations


		private IHEALTEACHTIMEService healteachtime;
		public virtual IHEALTEACHTIMEService HEALTEACHTIMEService
		{
			get
			{
				if (this.healteachtime == null)
				{
					IHEALTEACHTIMEAssembler assembler = new HEALTEACHTIMEAssembler();
					IHEALTEACHTIMERepository repository = new HEALTEACHTIMERepository(this.UnitOfWork);
					this.healteachtime = new HEALTEACHTIMEService(assembler, repository);
				}
				return this.healteachtime;
			}
		}


		public IQueryable<HEALTEACHTIME> HEALTEACHTIMEs
		{
			get { return this.HEALTEACHTIMEService.Repository.GetAll(); }
		}


		public IQueryable<HEALTEACHTIME> ReadHEALTEACHTIMEs(Expression<Func<HEALTEACHTIME, bool>> filter, int dummy)
		{
			return this.HEALTEACHTIMEService.Repository.Find(filter);
		}


		public IEnumerable<HEALTEACHTIMEDto> ReadHEALTEACHTIMEs()
		{
			return this.HEALTEACHTIMEService.GetAll();
		}


		public IEnumerable<HEALTEACHTIMEDto> ReadHEALTEACHTIMEs(Expression<Func<HEALTEACHTIME, bool>> filter)
		{
			return this.HEALTEACHTIMEService.Find(filter);
		}


		public IEnumerable<HEALTEACHTIMEDto> ReadHEALTEACHTIMEs(ISpecification<HEALTEACHTIME> specification)
		{
			return this.HEALTEACHTIMEService.Find(specification.GetExpression());
		}


		public IEnumerable<HEALTEACHTIMEDto> ReadHEALTEACHTIMEs(IQueryable<HEALTEACHTIME> query)
		{
			return this.HEALTEACHTIMEService.Assembler.Assemble(query);
		}


		public IEnumerable<HEALTEACHTIMEDto> ReadHEALTEACHTIMEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.HEALTEACHTIMEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<HEALTEACHTIMEDto> ReadHEALTEACHTIMEs(object[] keyWords)
		{
			return this.HEALTEACHTIMEService.Find(keyWords);
		}


		public IEnumerable<HEALTEACHTIMEDto> ReadHEALTEACHTIMEsPaged(int startIndex, int pageSize)
		{
			return this.HEALTEACHTIMEService.Find(startIndex, pageSize);
		}


		public IEnumerable<HEALTEACHTIMEDto> ReadHEALTEACHTIMEsPaged(IQueryable<HEALTEACHTIME> source, int pageIndex, int pageSize)
		{
			return this.HEALTEACHTIMEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<HEALTEACHTIMEDto> ReadHEALTEACHTIMEsPaged(IQueryable<HEALTEACHTIME> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.HEALTEACHTIMEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<HEALTEACHTIMEDto> ReadHEALTEACHTIMEsFiltered(string sortExpression, string filterExpression)
		{
			return this.HEALTEACHTIMEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<HEALTEACHTIMEDto> ReadHEALTEACHTIMEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.HEALTEACHTIMEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<HEALTEACHTIMEDto> ReadHEALTEACHTIMEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<HEALTEACHTIME, bool>> filter)
		{
			return this.HEALTEACHTIMEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public HEALTEACHTIMEDto ReadHEALTEACHTIMEs(string dtoKey)
		{
			return this.HEALTEACHTIMEService.GetByKey(dtoKey);
		}


		public int CountHEALTEACHTIMEs()
		{
			return this.HEALTEACHTIMEService.Count();
		}


		public int CountHEALTEACHTIMEs(string filterExpression)
		{
			return this.HEALTEACHTIMEService.Count(filterExpression);
		}


		public int CountHEALTEACHTIMEs(Expression<Func<HEALTEACHTIME, bool>> filter)
		{
			return this.HEALTEACHTIMEService.Count(filter);
		}


		public string CreateHEALTEACHTIME(HEALTEACHTIMEDto healteachtime, bool doSaveChanges = true)
		{
			string key = this.HEALTEACHTIMEService.Add(healteachtime);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateHEALTEACHTIME(HEALTEACHTIMEDto healteachtime, bool doSaveChanges = true)
		{
			this.HEALTEACHTIMEService.Update(healteachtime);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateHEALTEACHTIMEs(IEnumerable<HEALTEACHTIMEDto> healteachtimes, bool doSaveChanges = true)
		{
			if (healteachtimes == null)
			{
				return;
			}
			foreach (HEALTEACHTIMEDto instance in healteachtimes)
			{
				if (instance == null)
				{
					continue;
				}


				this.HEALTEACHTIMEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteHEALTEACHTIME(HEALTEACHTIMEDto healteachtime, bool doSaveChanges = true)
		{
			this.HEALTEACHTIMEService.Delete(healteachtime);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteHEALTEACHTIMEs(IEnumerable<HEALTEACHTIMEDto> healteachtimes, bool doSaveChanges = true)
		{
			if (healteachtimes == null)
			{
				return;
			}
			foreach (HEALTEACHTIMEDto instance in healteachtimes)
			{
				if (instance == null)
				{
					continue;
				}


				this.HEALTEACHTIMEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveHEALTEACHTIME(HEALTEACHTIMEDto healteachtime, bool doSaveChanges = true)
		{
			switch (healteachtime.RowState)
			{
				case RowState.Insert:
					this.CreateHEALTEACHTIME(healteachtime, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateHEALTEACHTIME(healteachtime, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteHEALTEACHTIME(healteachtime, doSaveChanges);
					break;
			}
		}


		public void SaveHEALTEACHTIMEs(IEnumerable<HEALTEACHTIMEDto> healteachtimes, bool doSaveChanges = true)
		{
			if (healteachtimes == null)
			{
				return;
			}
			foreach (HEALTEACHTIMEDto instance in healteachtimes)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveHEALTEACHTIME(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion HEALTEACHTIME CRUD Operations


		#region GOODVSDATADE CRUD Operations


		private IGOODVSDATADEService goodvsdatade;
		public virtual IGOODVSDATADEService GOODVSDATADEService
		{
			get
			{
				if (this.goodvsdatade == null)
				{
					IGOODVSDATADEAssembler assembler = new GOODVSDATADEAssembler();
					IGOODVSDATADERepository repository = new GOODVSDATADERepository(this.UnitOfWork);
					this.goodvsdatade = new GOODVSDATADEService(assembler, repository);
				}
				return this.goodvsdatade;
			}
		}


		public IQueryable<GOODVSDATADE> GOODVSDATADEs
		{
			get { return this.GOODVSDATADEService.Repository.GetAll(); }
		}


		public IQueryable<GOODVSDATADE> ReadGOODVSDATADEs(Expression<Func<GOODVSDATADE, bool>> filter, int dummy)
		{
			return this.GOODVSDATADEService.Repository.Find(filter);
		}


		public IEnumerable<GOODVSDATADEDto> ReadGOODVSDATADEs()
		{
			return this.GOODVSDATADEService.GetAll();
		}


		public IEnumerable<GOODVSDATADEDto> ReadGOODVSDATADEs(Expression<Func<GOODVSDATADE, bool>> filter)
		{
			return this.GOODVSDATADEService.Find(filter);
		}


		public IEnumerable<GOODVSDATADEDto> ReadGOODVSDATADEs(ISpecification<GOODVSDATADE> specification)
		{
			return this.GOODVSDATADEService.Find(specification.GetExpression());
		}


		public IEnumerable<GOODVSDATADEDto> ReadGOODVSDATADEs(IQueryable<GOODVSDATADE> query)
		{
			return this.GOODVSDATADEService.Assembler.Assemble(query);
		}


		public IEnumerable<GOODVSDATADEDto> ReadGOODVSDATADEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.GOODVSDATADEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<GOODVSDATADEDto> ReadGOODVSDATADEs(object[] keyWords)
		{
			return this.GOODVSDATADEService.Find(keyWords);
		}


		public IEnumerable<GOODVSDATADEDto> ReadGOODVSDATADEsPaged(int startIndex, int pageSize)
		{
			return this.GOODVSDATADEService.Find(startIndex, pageSize);
		}


		public IEnumerable<GOODVSDATADEDto> ReadGOODVSDATADEsPaged(IQueryable<GOODVSDATADE> source, int pageIndex, int pageSize)
		{
			return this.GOODVSDATADEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<GOODVSDATADEDto> ReadGOODVSDATADEsPaged(IQueryable<GOODVSDATADE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.GOODVSDATADEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<GOODVSDATADEDto> ReadGOODVSDATADEsFiltered(string sortExpression, string filterExpression)
		{
			return this.GOODVSDATADEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<GOODVSDATADEDto> ReadGOODVSDATADEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.GOODVSDATADEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<GOODVSDATADEDto> ReadGOODVSDATADEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<GOODVSDATADE, bool>> filter)
		{
			return this.GOODVSDATADEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public GOODVSDATADEDto ReadGOODVSDATADEs(string dtoKey)
		{
			return this.GOODVSDATADEService.GetByKey(dtoKey);
		}


		public int CountGOODVSDATADEs()
		{
			return this.GOODVSDATADEService.Count();
		}


		public int CountGOODVSDATADEs(string filterExpression)
		{
			return this.GOODVSDATADEService.Count(filterExpression);
		}


		public int CountGOODVSDATADEs(Expression<Func<GOODVSDATADE, bool>> filter)
		{
			return this.GOODVSDATADEService.Count(filter);
		}


		public string CreateGOODVSDATADE(GOODVSDATADEDto goodvsdatade, bool doSaveChanges = true)
		{
			string key = this.GOODVSDATADEService.Add(goodvsdatade);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateGOODVSDATADE(GOODVSDATADEDto goodvsdatade, bool doSaveChanges = true)
		{
			this.GOODVSDATADEService.Update(goodvsdatade);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateGOODVSDATADEs(IEnumerable<GOODVSDATADEDto> goodvsdatades, bool doSaveChanges = true)
		{
			if (goodvsdatades == null)
			{
				return;
			}
			foreach (GOODVSDATADEDto instance in goodvsdatades)
			{
				if (instance == null)
				{
					continue;
				}


				this.GOODVSDATADEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteGOODVSDATADE(GOODVSDATADEDto goodvsdatade, bool doSaveChanges = true)
		{
			this.GOODVSDATADEService.Delete(goodvsdatade);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteGOODVSDATADEs(IEnumerable<GOODVSDATADEDto> goodvsdatades, bool doSaveChanges = true)
		{
			if (goodvsdatades == null)
			{
				return;
			}
			foreach (GOODVSDATADEDto instance in goodvsdatades)
			{
				if (instance == null)
				{
					continue;
				}


				this.GOODVSDATADEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveGOODVSDATADE(GOODVSDATADEDto goodvsdatade, bool doSaveChanges = true)
		{
			switch (goodvsdatade.RowState)
			{
				case RowState.Insert:
					this.CreateGOODVSDATADE(goodvsdatade, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateGOODVSDATADE(goodvsdatade, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteGOODVSDATADE(goodvsdatade, doSaveChanges);
					break;
			}
		}


		public void SaveGOODVSDATADEs(IEnumerable<GOODVSDATADEDto> goodvsdatades, bool doSaveChanges = true)
		{
			if (goodvsdatades == null)
			{
				return;
			}
			foreach (GOODVSDATADEDto instance in goodvsdatades)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveGOODVSDATADE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion GOODVSDATADE CRUD Operations


		#region GOODVSDATUM CRUD Operations


		private IGOODVSDATUMService goodvsdatum;
		public virtual IGOODVSDATUMService GOODVSDATUMService
		{
			get
			{
				if (this.goodvsdatum == null)
				{
					IGOODVSDATUMAssembler assembler = new GOODVSDATUMAssembler();
					IGOODVSDATUMRepository repository = new GOODVSDATUMRepository(this.UnitOfWork);
					this.goodvsdatum = new GOODVSDATUMService(assembler, repository);
				}
				return this.goodvsdatum;
			}
		}


		public IQueryable<GOODVSDATUM> GOODVSDATa
		{
			get { return this.GOODVSDATUMService.Repository.GetAll(); }
		}


		public IQueryable<GOODVSDATUM> ReadGOODVSDATa(Expression<Func<GOODVSDATUM, bool>> filter, int dummy)
		{
			return this.GOODVSDATUMService.Repository.Find(filter);
		}


		public IEnumerable<GOODVSDATUMDto> ReadGOODVSDATa()
		{
			return this.GOODVSDATUMService.GetAll();
		}


		public IEnumerable<GOODVSDATUMDto> ReadGOODVSDATa(Expression<Func<GOODVSDATUM, bool>> filter)
		{
			return this.GOODVSDATUMService.Find(filter);
		}


		public IEnumerable<GOODVSDATUMDto> ReadGOODVSDATa(ISpecification<GOODVSDATUM> specification)
		{
			return this.GOODVSDATUMService.Find(specification.GetExpression());
		}


		public IEnumerable<GOODVSDATUMDto> ReadGOODVSDATa(IQueryable<GOODVSDATUM> query)
		{
			return this.GOODVSDATUMService.Assembler.Assemble(query);
		}


		public IEnumerable<GOODVSDATUMDto> ReadGOODVSDATa(string[] propertyToSearch, object[] keyWords)
		{
			return this.GOODVSDATUMService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<GOODVSDATUMDto> ReadGOODVSDATa(object[] keyWords)
		{
			return this.GOODVSDATUMService.Find(keyWords);
		}


		public IEnumerable<GOODVSDATUMDto> ReadGOODVSDATaPaged(int startIndex, int pageSize)
		{
			return this.GOODVSDATUMService.Find(startIndex, pageSize);
		}


		public IEnumerable<GOODVSDATUMDto> ReadGOODVSDATaPaged(IQueryable<GOODVSDATUM> source, int pageIndex, int pageSize)
		{
			return this.GOODVSDATUMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<GOODVSDATUMDto> ReadGOODVSDATaPaged(IQueryable<GOODVSDATUM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.GOODVSDATUMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<GOODVSDATUMDto> ReadGOODVSDATaFiltered(string sortExpression, string filterExpression)
		{
			return this.GOODVSDATUMService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<GOODVSDATUMDto> ReadGOODVSDATaPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.GOODVSDATUMService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<GOODVSDATUMDto> ReadGOODVSDATaPagedAndFiltered(int startIndex, int pageSize, Expression<Func<GOODVSDATUM, bool>> filter)
		{
			return this.GOODVSDATUMService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public GOODVSDATUMDto ReadGOODVSDATa(string dtoKey)
		{
			return this.GOODVSDATUMService.GetByKey(dtoKey);
		}


		public int CountGOODVSDATa()
		{
			return this.GOODVSDATUMService.Count();
		}


		public int CountGOODVSDATa(string filterExpression)
		{
			return this.GOODVSDATUMService.Count(filterExpression);
		}


		public int CountGOODVSDATa(Expression<Func<GOODVSDATUM, bool>> filter)
		{
			return this.GOODVSDATUMService.Count(filter);
		}


		public string CreateGOODVSDATUM(GOODVSDATUMDto goodvsdatum, bool doSaveChanges = true)
		{
			string key = this.GOODVSDATUMService.Add(goodvsdatum);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateGOODVSDATUM(GOODVSDATUMDto goodvsdatum, bool doSaveChanges = true)
		{
			this.GOODVSDATUMService.Update(goodvsdatum);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateGOODVSDATa(IEnumerable<GOODVSDATUMDto> goodvsdata, bool doSaveChanges = true)
		{
			if (goodvsdata == null)
			{
				return;
			}
			foreach (GOODVSDATUMDto instance in goodvsdata)
			{
				if (instance == null)
				{
					continue;
				}


				this.GOODVSDATUMService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteGOODVSDATUM(GOODVSDATUMDto goodvsdatum, bool doSaveChanges = true)
		{
			this.GOODVSDATUMService.Delete(goodvsdatum);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteGOODVSDATa(IEnumerable<GOODVSDATUMDto> goodvsdata, bool doSaveChanges = true)
		{
			if (goodvsdata == null)
			{
				return;
			}
			foreach (GOODVSDATUMDto instance in goodvsdata)
			{
				if (instance == null)
				{
					continue;
				}


				this.GOODVSDATUMService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveGOODVSDATUM(GOODVSDATUMDto goodvsdatum, bool doSaveChanges = true)
		{
			switch (goodvsdatum.RowState)
			{
				case RowState.Insert:
					this.CreateGOODVSDATUM(goodvsdatum, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateGOODVSDATUM(goodvsdatum, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteGOODVSDATUM(goodvsdatum, doSaveChanges);
					break;
			}
		}


		public void SaveGOODVSDATa(IEnumerable<GOODVSDATUMDto> goodvsdata, bool doSaveChanges = true)
		{
			if (goodvsdata == null)
			{
				return;
			}
			foreach (GOODVSDATUMDto instance in goodvsdata)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveGOODVSDATUM(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion GOODVSDATUM CRUD Operations


		#region FORMCATEGORYREF CRUD Operations


		private IFORMCATEGORYREFService formcategoryref;
		public virtual IFORMCATEGORYREFService FORMCATEGORYREFService
		{
			get
			{
				if (this.formcategoryref == null)
				{
					IFORMCATEGORYREFAssembler assembler = new FORMCATEGORYREFAssembler();
					IFORMCATEGORYREFRepository repository = new FORMCATEGORYREFRepository(this.UnitOfWork);
					this.formcategoryref = new FORMCATEGORYREFService(assembler, repository);
				}
				return this.formcategoryref;
			}
		}


		public IQueryable<FORMCATEGORYREF> FORMCATEGORYREFs
		{
			get { return this.FORMCATEGORYREFService.Repository.GetAll(); }
		}


		public IQueryable<FORMCATEGORYREF> ReadFORMCATEGORYREFs(Expression<Func<FORMCATEGORYREF, bool>> filter, int dummy)
		{
			return this.FORMCATEGORYREFService.Repository.Find(filter);
		}


		public IEnumerable<FORMCATEGORYREFDto> ReadFORMCATEGORYREFs()
		{
			return this.FORMCATEGORYREFService.GetAll();
		}


		public IEnumerable<FORMCATEGORYREFDto> ReadFORMCATEGORYREFs(Expression<Func<FORMCATEGORYREF, bool>> filter)
		{
			return this.FORMCATEGORYREFService.Find(filter);
		}


		public IEnumerable<FORMCATEGORYREFDto> ReadFORMCATEGORYREFs(ISpecification<FORMCATEGORYREF> specification)
		{
			return this.FORMCATEGORYREFService.Find(specification.GetExpression());
		}


		public IEnumerable<FORMCATEGORYREFDto> ReadFORMCATEGORYREFs(IQueryable<FORMCATEGORYREF> query)
		{
			return this.FORMCATEGORYREFService.Assembler.Assemble(query);
		}


		public IEnumerable<FORMCATEGORYREFDto> ReadFORMCATEGORYREFs(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORMCATEGORYREFService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORMCATEGORYREFDto> ReadFORMCATEGORYREFs(object[] keyWords)
		{
			return this.FORMCATEGORYREFService.Find(keyWords);
		}


		public IEnumerable<FORMCATEGORYREFDto> ReadFORMCATEGORYREFsPaged(int startIndex, int pageSize)
		{
			return this.FORMCATEGORYREFService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORMCATEGORYREFDto> ReadFORMCATEGORYREFsPaged(IQueryable<FORMCATEGORYREF> source, int pageIndex, int pageSize)
		{
			return this.FORMCATEGORYREFService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORMCATEGORYREFDto> ReadFORMCATEGORYREFsPaged(IQueryable<FORMCATEGORYREF> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORMCATEGORYREFService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORMCATEGORYREFDto> ReadFORMCATEGORYREFsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORMCATEGORYREFService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORMCATEGORYREFDto> ReadFORMCATEGORYREFsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORMCATEGORYREFService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORMCATEGORYREFDto> ReadFORMCATEGORYREFsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORMCATEGORYREF, bool>> filter)
		{
			return this.FORMCATEGORYREFService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORMCATEGORYREFDto ReadFORMCATEGORYREFs(string dtoKey)
		{
			return this.FORMCATEGORYREFService.GetByKey(dtoKey);
		}


		public int CountFORMCATEGORYREFs()
		{
			return this.FORMCATEGORYREFService.Count();
		}


		public int CountFORMCATEGORYREFs(string filterExpression)
		{
			return this.FORMCATEGORYREFService.Count(filterExpression);
		}


		public int CountFORMCATEGORYREFs(Expression<Func<FORMCATEGORYREF, bool>> filter)
		{
			return this.FORMCATEGORYREFService.Count(filter);
		}


		public string CreateFORMCATEGORYREF(FORMCATEGORYREFDto formcategoryref, bool doSaveChanges = true)
		{
			string key = this.FORMCATEGORYREFService.Add(formcategoryref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORMCATEGORYREF(FORMCATEGORYREFDto formcategoryref, bool doSaveChanges = true)
		{
			this.FORMCATEGORYREFService.Update(formcategoryref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORMCATEGORYREFs(IEnumerable<FORMCATEGORYREFDto> formcategoryrefs, bool doSaveChanges = true)
		{
			if (formcategoryrefs == null)
			{
				return;
			}
			foreach (FORMCATEGORYREFDto instance in formcategoryrefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORMCATEGORYREFService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORMCATEGORYREF(FORMCATEGORYREFDto formcategoryref, bool doSaveChanges = true)
		{
			this.FORMCATEGORYREFService.Delete(formcategoryref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORMCATEGORYREFs(IEnumerable<FORMCATEGORYREFDto> formcategoryrefs, bool doSaveChanges = true)
		{
			if (formcategoryrefs == null)
			{
				return;
			}
			foreach (FORMCATEGORYREFDto instance in formcategoryrefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORMCATEGORYREFService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORMCATEGORYREF(FORMCATEGORYREFDto formcategoryref, bool doSaveChanges = true)
		{
			switch (formcategoryref.RowState)
			{
				case RowState.Insert:
					this.CreateFORMCATEGORYREF(formcategoryref, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORMCATEGORYREF(formcategoryref, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORMCATEGORYREF(formcategoryref, doSaveChanges);
					break;
			}
		}


		public void SaveFORMCATEGORYREFs(IEnumerable<FORMCATEGORYREFDto> formcategoryrefs, bool doSaveChanges = true)
		{
			if (formcategoryrefs == null)
			{
				return;
			}
			foreach (FORMCATEGORYREFDto instance in formcategoryrefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORMCATEGORYREF(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORMCATEGORYREF CRUD Operations


		#region FORMCATEGORY CRUD Operations


		private IFORMCATEGORYService formcategory;
		public virtual IFORMCATEGORYService FORMCATEGORYService
		{
			get
			{
				if (this.formcategory == null)
				{
					IFORMCATEGORYAssembler assembler = new FORMCATEGORYAssembler();
					IFORMCATEGORYRepository repository = new FORMCATEGORYRepository(this.UnitOfWork);
					this.formcategory = new FORMCATEGORYService(assembler, repository);
				}
				return this.formcategory;
			}
		}


		public IQueryable<FORMCATEGORY> FORMCATEGORies
		{
			get { return this.FORMCATEGORYService.Repository.GetAll(); }
		}


		public IQueryable<FORMCATEGORY> ReadFORMCATEGORies(Expression<Func<FORMCATEGORY, bool>> filter, int dummy)
		{
			return this.FORMCATEGORYService.Repository.Find(filter);
		}


		public IEnumerable<FORMCATEGORYDto> ReadFORMCATEGORies()
		{
			return this.FORMCATEGORYService.GetAll();
		}


		public IEnumerable<FORMCATEGORYDto> ReadFORMCATEGORies(Expression<Func<FORMCATEGORY, bool>> filter)
		{
			return this.FORMCATEGORYService.Find(filter);
		}


		public IEnumerable<FORMCATEGORYDto> ReadFORMCATEGORies(ISpecification<FORMCATEGORY> specification)
		{
			return this.FORMCATEGORYService.Find(specification.GetExpression());
		}


		public IEnumerable<FORMCATEGORYDto> ReadFORMCATEGORies(IQueryable<FORMCATEGORY> query)
		{
			return this.FORMCATEGORYService.Assembler.Assemble(query);
		}


		public IEnumerable<FORMCATEGORYDto> ReadFORMCATEGORies(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORMCATEGORYService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORMCATEGORYDto> ReadFORMCATEGORies(object[] keyWords)
		{
			return this.FORMCATEGORYService.Find(keyWords);
		}


		public IEnumerable<FORMCATEGORYDto> ReadFORMCATEGORiesPaged(int startIndex, int pageSize)
		{
			return this.FORMCATEGORYService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORMCATEGORYDto> ReadFORMCATEGORiesPaged(IQueryable<FORMCATEGORY> source, int pageIndex, int pageSize)
		{
			return this.FORMCATEGORYService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORMCATEGORYDto> ReadFORMCATEGORiesPaged(IQueryable<FORMCATEGORY> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORMCATEGORYService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORMCATEGORYDto> ReadFORMCATEGORiesFiltered(string sortExpression, string filterExpression)
		{
			return this.FORMCATEGORYService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORMCATEGORYDto> ReadFORMCATEGORiesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORMCATEGORYService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORMCATEGORYDto> ReadFORMCATEGORiesPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORMCATEGORY, bool>> filter)
		{
			return this.FORMCATEGORYService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORMCATEGORYDto ReadFORMCATEGORies(string dtoKey)
		{
			return this.FORMCATEGORYService.GetByKey(dtoKey);
		}


		public int CountFORMCATEGORies()
		{
			return this.FORMCATEGORYService.Count();
		}


		public int CountFORMCATEGORies(string filterExpression)
		{
			return this.FORMCATEGORYService.Count(filterExpression);
		}


		public int CountFORMCATEGORies(Expression<Func<FORMCATEGORY, bool>> filter)
		{
			return this.FORMCATEGORYService.Count(filter);
		}


		public string CreateFORMCATEGORY(FORMCATEGORYDto formcategory, bool doSaveChanges = true)
		{
			string key = this.FORMCATEGORYService.Add(formcategory);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORMCATEGORY(FORMCATEGORYDto formcategory, bool doSaveChanges = true)
		{
			this.FORMCATEGORYService.Update(formcategory);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORMCATEGORies(IEnumerable<FORMCATEGORYDto> formcategories, bool doSaveChanges = true)
		{
			if (formcategories == null)
			{
				return;
			}
			foreach (FORMCATEGORYDto instance in formcategories)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORMCATEGORYService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORMCATEGORY(FORMCATEGORYDto formcategory, bool doSaveChanges = true)
		{
			this.FORMCATEGORYService.Delete(formcategory);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORMCATEGORies(IEnumerable<FORMCATEGORYDto> formcategories, bool doSaveChanges = true)
		{
			if (formcategories == null)
			{
				return;
			}
			foreach (FORMCATEGORYDto instance in formcategories)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORMCATEGORYService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORMCATEGORY(FORMCATEGORYDto formcategory, bool doSaveChanges = true)
		{
			switch (formcategory.RowState)
			{
				case RowState.Insert:
					this.CreateFORMCATEGORY(formcategory, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORMCATEGORY(formcategory, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORMCATEGORY(formcategory, doSaveChanges);
					break;
			}
		}


		public void SaveFORMCATEGORies(IEnumerable<FORMCATEGORYDto> formcategories, bool doSaveChanges = true)
		{
			if (formcategories == null)
			{
				return;
			}
			foreach (FORMCATEGORYDto instance in formcategories)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORMCATEGORY(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORMCATEGORY CRUD Operations


		#region FORM_TODO_LIST CRUD Operations


		private IFORM_TODO_LISTService form_todo_list;
		public virtual IFORM_TODO_LISTService FORM_TODO_LISTService
		{
			get
			{
				if (this.form_todo_list == null)
				{
					IFORM_TODO_LISTAssembler assembler = new FORM_TODO_LISTAssembler();
					IFORM_TODO_LISTRepository repository = new FORM_TODO_LISTRepository(this.UnitOfWork);
					this.form_todo_list = new FORM_TODO_LISTService(assembler, repository);
				}
				return this.form_todo_list;
			}
		}


		public IQueryable<FORM_TODO_LIST> FORM_TODO_LISTs
		{
			get { return this.FORM_TODO_LISTService.Repository.GetAll(); }
		}


		public IQueryable<FORM_TODO_LIST> ReadFORM_TODO_LISTs(Expression<Func<FORM_TODO_LIST, bool>> filter, int dummy)
		{
			return this.FORM_TODO_LISTService.Repository.Find(filter);
		}


		public IEnumerable<FORM_TODO_LISTDto> ReadFORM_TODO_LISTs()
		{
			return this.FORM_TODO_LISTService.GetAll();
		}


		public IEnumerable<FORM_TODO_LISTDto> ReadFORM_TODO_LISTs(Expression<Func<FORM_TODO_LIST, bool>> filter)
		{
			return this.FORM_TODO_LISTService.Find(filter);
		}


		public IEnumerable<FORM_TODO_LISTDto> ReadFORM_TODO_LISTs(ISpecification<FORM_TODO_LIST> specification)
		{
			return this.FORM_TODO_LISTService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_TODO_LISTDto> ReadFORM_TODO_LISTs(IQueryable<FORM_TODO_LIST> query)
		{
			return this.FORM_TODO_LISTService.Assembler.Assemble(query);
		}


		public IEnumerable<FORM_TODO_LISTDto> ReadFORM_TODO_LISTs(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORM_TODO_LISTService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORM_TODO_LISTDto> ReadFORM_TODO_LISTs(object[] keyWords)
		{
			return this.FORM_TODO_LISTService.Find(keyWords);
		}


		public IEnumerable<FORM_TODO_LISTDto> ReadFORM_TODO_LISTsPaged(int startIndex, int pageSize)
		{
			return this.FORM_TODO_LISTService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_TODO_LISTDto> ReadFORM_TODO_LISTsPaged(IQueryable<FORM_TODO_LIST> source, int pageIndex, int pageSize)
		{
			return this.FORM_TODO_LISTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TODO_LISTDto> ReadFORM_TODO_LISTsPaged(IQueryable<FORM_TODO_LIST> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORM_TODO_LISTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TODO_LISTDto> ReadFORM_TODO_LISTsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_TODO_LISTService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TODO_LISTDto> ReadFORM_TODO_LISTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_TODO_LISTService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TODO_LISTDto> ReadFORM_TODO_LISTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TODO_LIST, bool>> filter)
		{
			return this.FORM_TODO_LISTService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORM_TODO_LISTDto ReadFORM_TODO_LISTs(string dtoKey)
		{
			return this.FORM_TODO_LISTService.GetByKey(dtoKey);
		}


		public int CountFORM_TODO_LISTs()
		{
			return this.FORM_TODO_LISTService.Count();
		}


		public int CountFORM_TODO_LISTs(string filterExpression)
		{
			return this.FORM_TODO_LISTService.Count(filterExpression);
		}


		public int CountFORM_TODO_LISTs(Expression<Func<FORM_TODO_LIST, bool>> filter)
		{
			return this.FORM_TODO_LISTService.Count(filter);
		}


		public string CreateFORM_TODO_LIST(FORM_TODO_LISTDto form_todo_list, bool doSaveChanges = true)
		{
			string key = this.FORM_TODO_LISTService.Add(form_todo_list);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_TODO_LIST(FORM_TODO_LISTDto form_todo_list, bool doSaveChanges = true)
		{
			this.FORM_TODO_LISTService.Update(form_todo_list);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_TODO_LISTs(IEnumerable<FORM_TODO_LISTDto> form_todo_lists, bool doSaveChanges = true)
		{
			if (form_todo_lists == null)
			{
				return;
			}
			foreach (FORM_TODO_LISTDto instance in form_todo_lists)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TODO_LISTService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_TODO_LIST(FORM_TODO_LISTDto form_todo_list, bool doSaveChanges = true)
		{
			this.FORM_TODO_LISTService.Delete(form_todo_list);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_TODO_LISTs(IEnumerable<FORM_TODO_LISTDto> form_todo_lists, bool doSaveChanges = true)
		{
			if (form_todo_lists == null)
			{
				return;
			}
			foreach (FORM_TODO_LISTDto instance in form_todo_lists)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TODO_LISTService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORM_TODO_LIST(FORM_TODO_LISTDto form_todo_list, bool doSaveChanges = true)
		{
			switch (form_todo_list.RowState)
			{
				case RowState.Insert:
					this.CreateFORM_TODO_LIST(form_todo_list, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORM_TODO_LIST(form_todo_list, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORM_TODO_LIST(form_todo_list, doSaveChanges);
					break;
			}
		}


		public void SaveFORM_TODO_LISTs(IEnumerable<FORM_TODO_LISTDto> form_todo_lists, bool doSaveChanges = true)
		{
			if (form_todo_lists == null)
			{
				return;
			}
			foreach (FORM_TODO_LISTDto instance in form_todo_lists)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORM_TODO_LIST(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORM_TODO_LIST CRUD Operations


		#region FORM_TEMPLATES_BK CRUD Operations


		private IFORM_TEMPLATES_BKService form_templates_bk;
		public virtual IFORM_TEMPLATES_BKService FORM_TEMPLATES_BKService
		{
			get
			{
				if (this.form_templates_bk == null)
				{
					IFORM_TEMPLATES_BKAssembler assembler = new FORM_TEMPLATES_BKAssembler();
					IFORM_TEMPLATES_BKRepository repository = new FORM_TEMPLATES_BKRepository(this.UnitOfWork);
					this.form_templates_bk = new FORM_TEMPLATES_BKService(assembler, repository);
				}
				return this.form_templates_bk;
			}
		}


		public IQueryable<FORM_TEMPLATES_BK> FORM_TEMPLATES_BKs
		{
			get { return this.FORM_TEMPLATES_BKService.Repository.GetAll(); }
		}


		public IQueryable<FORM_TEMPLATES_BK> ReadFORM_TEMPLATES_BKs(Expression<Func<FORM_TEMPLATES_BK, bool>> filter, int dummy)
		{
			return this.FORM_TEMPLATES_BKService.Repository.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATES_BKDto> ReadFORM_TEMPLATES_BKs()
		{
			return this.FORM_TEMPLATES_BKService.GetAll();
		}


		public IEnumerable<FORM_TEMPLATES_BKDto> ReadFORM_TEMPLATES_BKs(Expression<Func<FORM_TEMPLATES_BK, bool>> filter)
		{
			return this.FORM_TEMPLATES_BKService.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATES_BKDto> ReadFORM_TEMPLATES_BKs(ISpecification<FORM_TEMPLATES_BK> specification)
		{
			return this.FORM_TEMPLATES_BKService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_TEMPLATES_BKDto> ReadFORM_TEMPLATES_BKs(IQueryable<FORM_TEMPLATES_BK> query)
		{
			return this.FORM_TEMPLATES_BKService.Assembler.Assemble(query);
		}


		public IEnumerable<FORM_TEMPLATES_BKDto> ReadFORM_TEMPLATES_BKs(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORM_TEMPLATES_BKService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORM_TEMPLATES_BKDto> ReadFORM_TEMPLATES_BKs(object[] keyWords)
		{
			return this.FORM_TEMPLATES_BKService.Find(keyWords);
		}


		public IEnumerable<FORM_TEMPLATES_BKDto> ReadFORM_TEMPLATES_BKsPaged(int startIndex, int pageSize)
		{
			return this.FORM_TEMPLATES_BKService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_TEMPLATES_BKDto> ReadFORM_TEMPLATES_BKsPaged(IQueryable<FORM_TEMPLATES_BK> source, int pageIndex, int pageSize)
		{
			return this.FORM_TEMPLATES_BKService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATES_BKDto> ReadFORM_TEMPLATES_BKsPaged(IQueryable<FORM_TEMPLATES_BK> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORM_TEMPLATES_BKService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATES_BKDto> ReadFORM_TEMPLATES_BKsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATES_BKService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATES_BKDto> ReadFORM_TEMPLATES_BKsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATES_BKService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATES_BKDto> ReadFORM_TEMPLATES_BKsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATES_BK, bool>> filter)
		{
			return this.FORM_TEMPLATES_BKService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORM_TEMPLATES_BKDto ReadFORM_TEMPLATES_BKs(string dtoKey)
		{
			return this.FORM_TEMPLATES_BKService.GetByKey(dtoKey);
		}


		public int CountFORM_TEMPLATES_BKs()
		{
			return this.FORM_TEMPLATES_BKService.Count();
		}


		public int CountFORM_TEMPLATES_BKs(string filterExpression)
		{
			return this.FORM_TEMPLATES_BKService.Count(filterExpression);
		}


		public int CountFORM_TEMPLATES_BKs(Expression<Func<FORM_TEMPLATES_BK, bool>> filter)
		{
			return this.FORM_TEMPLATES_BKService.Count(filter);
		}


		public string CreateFORM_TEMPLATES_BK(FORM_TEMPLATES_BKDto form_templates_bk, bool doSaveChanges = true)
		{
			string key = this.FORM_TEMPLATES_BKService.Add(form_templates_bk);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_TEMPLATES_BK(FORM_TEMPLATES_BKDto form_templates_bk, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATES_BKService.Update(form_templates_bk);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_TEMPLATES_BKs(IEnumerable<FORM_TEMPLATES_BKDto> form_templates_bks, bool doSaveChanges = true)
		{
			if (form_templates_bks == null)
			{
				return;
			}
			foreach (FORM_TEMPLATES_BKDto instance in form_templates_bks)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATES_BKService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_TEMPLATES_BK(FORM_TEMPLATES_BKDto form_templates_bk, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATES_BKService.Delete(form_templates_bk);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_TEMPLATES_BKs(IEnumerable<FORM_TEMPLATES_BKDto> form_templates_bks, bool doSaveChanges = true)
		{
			if (form_templates_bks == null)
			{
				return;
			}
			foreach (FORM_TEMPLATES_BKDto instance in form_templates_bks)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATES_BKService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORM_TEMPLATES_BK(FORM_TEMPLATES_BKDto form_templates_bk, bool doSaveChanges = true)
		{
			switch (form_templates_bk.RowState)
			{
				case RowState.Insert:
					this.CreateFORM_TEMPLATES_BK(form_templates_bk, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORM_TEMPLATES_BK(form_templates_bk, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORM_TEMPLATES_BK(form_templates_bk, doSaveChanges);
					break;
			}
		}


		public void SaveFORM_TEMPLATES_BKs(IEnumerable<FORM_TEMPLATES_BKDto> form_templates_bks, bool doSaveChanges = true)
		{
			if (form_templates_bks == null)
			{
				return;
			}
			foreach (FORM_TEMPLATES_BKDto instance in form_templates_bks)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORM_TEMPLATES_BK(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORM_TEMPLATES_BK CRUD Operations


		#region FORM_TEMPLATE CRUD Operations


		private IFORM_TEMPLATEService form_template;
		public virtual IFORM_TEMPLATEService FORM_TEMPLATEService
		{
			get
			{
				if (this.form_template == null)
				{
					IFORM_TEMPLATEAssembler assembler = new FORM_TEMPLATEAssembler();
					IFORM_TEMPLATERepository repository = new FORM_TEMPLATERepository(this.UnitOfWork);
					this.form_template = new FORM_TEMPLATEService(assembler, repository);
				}
				return this.form_template;
			}
		}


		public IQueryable<FORM_TEMPLATE> FORM_TEMPLATEs
		{
			get { return this.FORM_TEMPLATEService.Repository.GetAll(); }
		}


		public IQueryable<FORM_TEMPLATE> ReadFORM_TEMPLATEs(Expression<Func<FORM_TEMPLATE, bool>> filter, int dummy)
		{
			return this.FORM_TEMPLATEService.Repository.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEs()
		{
			return this.FORM_TEMPLATEService.GetAll();
		}


		public IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEs(Expression<Func<FORM_TEMPLATE, bool>> filter)
		{
			return this.FORM_TEMPLATEService.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEs(ISpecification<FORM_TEMPLATE> specification)
		{
			return this.FORM_TEMPLATEService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEs(IQueryable<FORM_TEMPLATE> query)
		{
			return this.FORM_TEMPLATEService.Assembler.Assemble(query);
		}


		public IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORM_TEMPLATEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEs(object[] keyWords)
		{
			return this.FORM_TEMPLATEService.Find(keyWords);
		}


		public IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEsPaged(int startIndex, int pageSize)
		{
			return this.FORM_TEMPLATEService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEsPaged(IQueryable<FORM_TEMPLATE> source, int pageIndex, int pageSize)
		{
			return this.FORM_TEMPLATEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEsPaged(IQueryable<FORM_TEMPLATE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORM_TEMPLATEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATE, bool>> filter)
		{
			return this.FORM_TEMPLATEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORM_TEMPLATEDto ReadFORM_TEMPLATEs(string dtoKey)
		{
			return this.FORM_TEMPLATEService.GetByKey(dtoKey);
		}


		public int CountFORM_TEMPLATEs()
		{
			return this.FORM_TEMPLATEService.Count();
		}


		public int CountFORM_TEMPLATEs(string filterExpression)
		{
			return this.FORM_TEMPLATEService.Count(filterExpression);
		}


		public int CountFORM_TEMPLATEs(Expression<Func<FORM_TEMPLATE, bool>> filter)
		{
			return this.FORM_TEMPLATEService.Count(filter);
		}


		public string CreateFORM_TEMPLATE(FORM_TEMPLATEDto form_template, bool doSaveChanges = true)
		{
			string key = this.FORM_TEMPLATEService.Add(form_template);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_TEMPLATE(FORM_TEMPLATEDto form_template, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATEService.Update(form_template);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_TEMPLATEs(IEnumerable<FORM_TEMPLATEDto> form_templates, bool doSaveChanges = true)
		{
			if (form_templates == null)
			{
				return;
			}
			foreach (FORM_TEMPLATEDto instance in form_templates)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_TEMPLATE(FORM_TEMPLATEDto form_template, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATEService.Delete(form_template);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_TEMPLATEs(IEnumerable<FORM_TEMPLATEDto> form_templates, bool doSaveChanges = true)
		{
			if (form_templates == null)
			{
				return;
			}
			foreach (FORM_TEMPLATEDto instance in form_templates)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORM_TEMPLATE(FORM_TEMPLATEDto form_template, bool doSaveChanges = true)
		{
			switch (form_template.RowState)
			{
				case RowState.Insert:
					this.CreateFORM_TEMPLATE(form_template, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORM_TEMPLATE(form_template, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORM_TEMPLATE(form_template, doSaveChanges);
					break;
			}
		}


		public void SaveFORM_TEMPLATEs(IEnumerable<FORM_TEMPLATEDto> form_templates, bool doSaveChanges = true)
		{
			if (form_templates == null)
			{
				return;
			}
			foreach (FORM_TEMPLATEDto instance in form_templates)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORM_TEMPLATE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORM_TEMPLATE CRUD Operations


		#region FORM_TEMPLATE_SUBMIT_SQL CRUD Operations


		private IFORM_TEMPLATE_SUBMIT_SQLService form_template_submit_sql;
		public virtual IFORM_TEMPLATE_SUBMIT_SQLService FORM_TEMPLATE_SUBMIT_SQLService
		{
			get
			{
				if (this.form_template_submit_sql == null)
				{
					IFORM_TEMPLATE_SUBMIT_SQLAssembler assembler = new FORM_TEMPLATE_SUBMIT_SQLAssembler();
					IFORM_TEMPLATE_SUBMIT_SQLRepository repository = new FORM_TEMPLATE_SUBMIT_SQLRepository(this.UnitOfWork);
					this.form_template_submit_sql = new FORM_TEMPLATE_SUBMIT_SQLService(assembler, repository);
				}
				return this.form_template_submit_sql;
			}
		}


		public IQueryable<FORM_TEMPLATE_SUBMIT_SQL> FORM_TEMPLATE_SUBMIT_SQLs
		{
			get { return this.FORM_TEMPLATE_SUBMIT_SQLService.Repository.GetAll(); }
		}


		public IQueryable<FORM_TEMPLATE_SUBMIT_SQL> ReadFORM_TEMPLATE_SUBMIT_SQLs(Expression<Func<FORM_TEMPLATE_SUBMIT_SQL, bool>> filter, int dummy)
		{
			return this.FORM_TEMPLATE_SUBMIT_SQLService.Repository.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_SUBMIT_SQLDto> ReadFORM_TEMPLATE_SUBMIT_SQLs()
		{
			return this.FORM_TEMPLATE_SUBMIT_SQLService.GetAll();
		}


		public IEnumerable<FORM_TEMPLATE_SUBMIT_SQLDto> ReadFORM_TEMPLATE_SUBMIT_SQLs(Expression<Func<FORM_TEMPLATE_SUBMIT_SQL, bool>> filter)
		{
			return this.FORM_TEMPLATE_SUBMIT_SQLService.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_SUBMIT_SQLDto> ReadFORM_TEMPLATE_SUBMIT_SQLs(ISpecification<FORM_TEMPLATE_SUBMIT_SQL> specification)
		{
			return this.FORM_TEMPLATE_SUBMIT_SQLService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_TEMPLATE_SUBMIT_SQLDto> ReadFORM_TEMPLATE_SUBMIT_SQLs(IQueryable<FORM_TEMPLATE_SUBMIT_SQL> query)
		{
			return this.FORM_TEMPLATE_SUBMIT_SQLService.Assembler.Assemble(query);
		}


		public IEnumerable<FORM_TEMPLATE_SUBMIT_SQLDto> ReadFORM_TEMPLATE_SUBMIT_SQLs(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORM_TEMPLATE_SUBMIT_SQLService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORM_TEMPLATE_SUBMIT_SQLDto> ReadFORM_TEMPLATE_SUBMIT_SQLs(object[] keyWords)
		{
			return this.FORM_TEMPLATE_SUBMIT_SQLService.Find(keyWords);
		}


		public IEnumerable<FORM_TEMPLATE_SUBMIT_SQLDto> ReadFORM_TEMPLATE_SUBMIT_SQLsPaged(int startIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_SUBMIT_SQLService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_TEMPLATE_SUBMIT_SQLDto> ReadFORM_TEMPLATE_SUBMIT_SQLsPaged(IQueryable<FORM_TEMPLATE_SUBMIT_SQL> source, int pageIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_SUBMIT_SQLService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATE_SUBMIT_SQLDto> ReadFORM_TEMPLATE_SUBMIT_SQLsPaged(IQueryable<FORM_TEMPLATE_SUBMIT_SQL> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORM_TEMPLATE_SUBMIT_SQLService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATE_SUBMIT_SQLDto> ReadFORM_TEMPLATE_SUBMIT_SQLsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_SUBMIT_SQLService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_SUBMIT_SQLDto> ReadFORM_TEMPLATE_SUBMIT_SQLsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_SUBMIT_SQLService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_SUBMIT_SQLDto> ReadFORM_TEMPLATE_SUBMIT_SQLsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATE_SUBMIT_SQL, bool>> filter)
		{
			return this.FORM_TEMPLATE_SUBMIT_SQLService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORM_TEMPLATE_SUBMIT_SQLDto ReadFORM_TEMPLATE_SUBMIT_SQLs(string dtoKey)
		{
			return this.FORM_TEMPLATE_SUBMIT_SQLService.GetByKey(dtoKey);
		}


		public int CountFORM_TEMPLATE_SUBMIT_SQLs()
		{
			return this.FORM_TEMPLATE_SUBMIT_SQLService.Count();
		}


		public int CountFORM_TEMPLATE_SUBMIT_SQLs(string filterExpression)
		{
			return this.FORM_TEMPLATE_SUBMIT_SQLService.Count(filterExpression);
		}


		public int CountFORM_TEMPLATE_SUBMIT_SQLs(Expression<Func<FORM_TEMPLATE_SUBMIT_SQL, bool>> filter)
		{
			return this.FORM_TEMPLATE_SUBMIT_SQLService.Count(filter);
		}


		public string CreateFORM_TEMPLATE_SUBMIT_SQL(FORM_TEMPLATE_SUBMIT_SQLDto form_template_submit_sql, bool doSaveChanges = true)
		{
			string key = this.FORM_TEMPLATE_SUBMIT_SQLService.Add(form_template_submit_sql);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_TEMPLATE_SUBMIT_SQL(FORM_TEMPLATE_SUBMIT_SQLDto form_template_submit_sql, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_SUBMIT_SQLService.Update(form_template_submit_sql);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_TEMPLATE_SUBMIT_SQLs(IEnumerable<FORM_TEMPLATE_SUBMIT_SQLDto> form_template_submit_sqls, bool doSaveChanges = true)
		{
			if (form_template_submit_sqls == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_SUBMIT_SQLDto instance in form_template_submit_sqls)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_SUBMIT_SQLService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_TEMPLATE_SUBMIT_SQL(FORM_TEMPLATE_SUBMIT_SQLDto form_template_submit_sql, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_SUBMIT_SQLService.Delete(form_template_submit_sql);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_TEMPLATE_SUBMIT_SQLs(IEnumerable<FORM_TEMPLATE_SUBMIT_SQLDto> form_template_submit_sqls, bool doSaveChanges = true)
		{
			if (form_template_submit_sqls == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_SUBMIT_SQLDto instance in form_template_submit_sqls)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_SUBMIT_SQLService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORM_TEMPLATE_SUBMIT_SQL(FORM_TEMPLATE_SUBMIT_SQLDto form_template_submit_sql, bool doSaveChanges = true)
		{
			switch (form_template_submit_sql.RowState)
			{
				case RowState.Insert:
					this.CreateFORM_TEMPLATE_SUBMIT_SQL(form_template_submit_sql, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORM_TEMPLATE_SUBMIT_SQL(form_template_submit_sql, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORM_TEMPLATE_SUBMIT_SQL(form_template_submit_sql, doSaveChanges);
					break;
			}
		}


		public void SaveFORM_TEMPLATE_SUBMIT_SQLs(IEnumerable<FORM_TEMPLATE_SUBMIT_SQLDto> form_template_submit_sqls, bool doSaveChanges = true)
		{
			if (form_template_submit_sqls == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_SUBMIT_SQLDto instance in form_template_submit_sqls)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORM_TEMPLATE_SUBMIT_SQL(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORM_TEMPLATE_SUBMIT_SQL CRUD Operations


		#region FORM_TEMPLATE_SQL CRUD Operations


		private IFORM_TEMPLATE_SQLService form_template_sql;
		public virtual IFORM_TEMPLATE_SQLService FORM_TEMPLATE_SQLService
		{
			get
			{
				if (this.form_template_sql == null)
				{
					IFORM_TEMPLATE_SQLAssembler assembler = new FORM_TEMPLATE_SQLAssembler();
					IFORM_TEMPLATE_SQLRepository repository = new FORM_TEMPLATE_SQLRepository(this.UnitOfWork);
					this.form_template_sql = new FORM_TEMPLATE_SQLService(assembler, repository);
				}
				return this.form_template_sql;
			}
		}


		public IQueryable<FORM_TEMPLATE_SQL> FORM_TEMPLATE_SQLs
		{
			get { return this.FORM_TEMPLATE_SQLService.Repository.GetAll(); }
		}


		public IQueryable<FORM_TEMPLATE_SQL> ReadFORM_TEMPLATE_SQLs(Expression<Func<FORM_TEMPLATE_SQL, bool>> filter, int dummy)
		{
			return this.FORM_TEMPLATE_SQLService.Repository.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_SQLDto> ReadFORM_TEMPLATE_SQLs()
		{
			return this.FORM_TEMPLATE_SQLService.GetAll();
		}


		public IEnumerable<FORM_TEMPLATE_SQLDto> ReadFORM_TEMPLATE_SQLs(Expression<Func<FORM_TEMPLATE_SQL, bool>> filter)
		{
			return this.FORM_TEMPLATE_SQLService.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_SQLDto> ReadFORM_TEMPLATE_SQLs(ISpecification<FORM_TEMPLATE_SQL> specification)
		{
			return this.FORM_TEMPLATE_SQLService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_TEMPLATE_SQLDto> ReadFORM_TEMPLATE_SQLs(IQueryable<FORM_TEMPLATE_SQL> query)
		{
			return this.FORM_TEMPLATE_SQLService.Assembler.Assemble(query);
		}


		public IEnumerable<FORM_TEMPLATE_SQLDto> ReadFORM_TEMPLATE_SQLs(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORM_TEMPLATE_SQLService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORM_TEMPLATE_SQLDto> ReadFORM_TEMPLATE_SQLs(object[] keyWords)
		{
			return this.FORM_TEMPLATE_SQLService.Find(keyWords);
		}


		public IEnumerable<FORM_TEMPLATE_SQLDto> ReadFORM_TEMPLATE_SQLsPaged(int startIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_SQLService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_TEMPLATE_SQLDto> ReadFORM_TEMPLATE_SQLsPaged(IQueryable<FORM_TEMPLATE_SQL> source, int pageIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_SQLService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATE_SQLDto> ReadFORM_TEMPLATE_SQLsPaged(IQueryable<FORM_TEMPLATE_SQL> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORM_TEMPLATE_SQLService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATE_SQLDto> ReadFORM_TEMPLATE_SQLsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_SQLService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_SQLDto> ReadFORM_TEMPLATE_SQLsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_SQLService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_SQLDto> ReadFORM_TEMPLATE_SQLsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATE_SQL, bool>> filter)
		{
			return this.FORM_TEMPLATE_SQLService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORM_TEMPLATE_SQLDto ReadFORM_TEMPLATE_SQLs(string dtoKey)
		{
			return this.FORM_TEMPLATE_SQLService.GetByKey(dtoKey);
		}


		public int CountFORM_TEMPLATE_SQLs()
		{
			return this.FORM_TEMPLATE_SQLService.Count();
		}


		public int CountFORM_TEMPLATE_SQLs(string filterExpression)
		{
			return this.FORM_TEMPLATE_SQLService.Count(filterExpression);
		}


		public int CountFORM_TEMPLATE_SQLs(Expression<Func<FORM_TEMPLATE_SQL, bool>> filter)
		{
			return this.FORM_TEMPLATE_SQLService.Count(filter);
		}


		public string CreateFORM_TEMPLATE_SQL(FORM_TEMPLATE_SQLDto form_template_sql, bool doSaveChanges = true)
		{
			string key = this.FORM_TEMPLATE_SQLService.Add(form_template_sql);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_TEMPLATE_SQL(FORM_TEMPLATE_SQLDto form_template_sql, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_SQLService.Update(form_template_sql);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_TEMPLATE_SQLs(IEnumerable<FORM_TEMPLATE_SQLDto> form_template_sqls, bool doSaveChanges = true)
		{
			if (form_template_sqls == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_SQLDto instance in form_template_sqls)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_SQLService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_TEMPLATE_SQL(FORM_TEMPLATE_SQLDto form_template_sql, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_SQLService.Delete(form_template_sql);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_TEMPLATE_SQLs(IEnumerable<FORM_TEMPLATE_SQLDto> form_template_sqls, bool doSaveChanges = true)
		{
			if (form_template_sqls == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_SQLDto instance in form_template_sqls)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_SQLService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORM_TEMPLATE_SQL(FORM_TEMPLATE_SQLDto form_template_sql, bool doSaveChanges = true)
		{
			switch (form_template_sql.RowState)
			{
				case RowState.Insert:
					this.CreateFORM_TEMPLATE_SQL(form_template_sql, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORM_TEMPLATE_SQL(form_template_sql, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORM_TEMPLATE_SQL(form_template_sql, doSaveChanges);
					break;
			}
		}


		public void SaveFORM_TEMPLATE_SQLs(IEnumerable<FORM_TEMPLATE_SQLDto> form_template_sqls, bool doSaveChanges = true)
		{
			if (form_template_sqls == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_SQLDto instance in form_template_sqls)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORM_TEMPLATE_SQL(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORM_TEMPLATE_SQL CRUD Operations


		#region FORM_TEMPLATE_SINGLE CRUD Operations


		private IFORM_TEMPLATE_SINGLEService form_template_single;
		public virtual IFORM_TEMPLATE_SINGLEService FORM_TEMPLATE_SINGLEService
		{
			get
			{
				if (this.form_template_single == null)
				{
					IFORM_TEMPLATE_SINGLEAssembler assembler = new FORM_TEMPLATE_SINGLEAssembler();
					IFORM_TEMPLATE_SINGLERepository repository = new FORM_TEMPLATE_SINGLERepository(this.UnitOfWork);
					this.form_template_single = new FORM_TEMPLATE_SINGLEService(assembler, repository);
				}
				return this.form_template_single;
			}
		}


		public IQueryable<FORM_TEMPLATE_SINGLE> FORM_TEMPLATE_SINGLEs
		{
			get { return this.FORM_TEMPLATE_SINGLEService.Repository.GetAll(); }
		}


		public IQueryable<FORM_TEMPLATE_SINGLE> ReadFORM_TEMPLATE_SINGLEs(Expression<Func<FORM_TEMPLATE_SINGLE, bool>> filter, int dummy)
		{
			return this.FORM_TEMPLATE_SINGLEService.Repository.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_SINGLEDto> ReadFORM_TEMPLATE_SINGLEs()
		{
			return this.FORM_TEMPLATE_SINGLEService.GetAll();
		}


		public IEnumerable<FORM_TEMPLATE_SINGLEDto> ReadFORM_TEMPLATE_SINGLEs(Expression<Func<FORM_TEMPLATE_SINGLE, bool>> filter)
		{
			return this.FORM_TEMPLATE_SINGLEService.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_SINGLEDto> ReadFORM_TEMPLATE_SINGLEs(ISpecification<FORM_TEMPLATE_SINGLE> specification)
		{
			return this.FORM_TEMPLATE_SINGLEService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_TEMPLATE_SINGLEDto> ReadFORM_TEMPLATE_SINGLEs(IQueryable<FORM_TEMPLATE_SINGLE> query)
		{
			return this.FORM_TEMPLATE_SINGLEService.Assembler.Assemble(query);
		}


		public IEnumerable<FORM_TEMPLATE_SINGLEDto> ReadFORM_TEMPLATE_SINGLEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORM_TEMPLATE_SINGLEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORM_TEMPLATE_SINGLEDto> ReadFORM_TEMPLATE_SINGLEs(object[] keyWords)
		{
			return this.FORM_TEMPLATE_SINGLEService.Find(keyWords);
		}


		public IEnumerable<FORM_TEMPLATE_SINGLEDto> ReadFORM_TEMPLATE_SINGLEsPaged(int startIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_SINGLEService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_TEMPLATE_SINGLEDto> ReadFORM_TEMPLATE_SINGLEsPaged(IQueryable<FORM_TEMPLATE_SINGLE> source, int pageIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_SINGLEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATE_SINGLEDto> ReadFORM_TEMPLATE_SINGLEsPaged(IQueryable<FORM_TEMPLATE_SINGLE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORM_TEMPLATE_SINGLEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATE_SINGLEDto> ReadFORM_TEMPLATE_SINGLEsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_SINGLEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_SINGLEDto> ReadFORM_TEMPLATE_SINGLEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_SINGLEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_SINGLEDto> ReadFORM_TEMPLATE_SINGLEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATE_SINGLE, bool>> filter)
		{
			return this.FORM_TEMPLATE_SINGLEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORM_TEMPLATE_SINGLEDto ReadFORM_TEMPLATE_SINGLEs(string dtoKey)
		{
			return this.FORM_TEMPLATE_SINGLEService.GetByKey(dtoKey);
		}


		public int CountFORM_TEMPLATE_SINGLEs()
		{
			return this.FORM_TEMPLATE_SINGLEService.Count();
		}


		public int CountFORM_TEMPLATE_SINGLEs(string filterExpression)
		{
			return this.FORM_TEMPLATE_SINGLEService.Count(filterExpression);
		}


		public int CountFORM_TEMPLATE_SINGLEs(Expression<Func<FORM_TEMPLATE_SINGLE, bool>> filter)
		{
			return this.FORM_TEMPLATE_SINGLEService.Count(filter);
		}


		public string CreateFORM_TEMPLATE_SINGLE(FORM_TEMPLATE_SINGLEDto form_template_single, bool doSaveChanges = true)
		{
			string key = this.FORM_TEMPLATE_SINGLEService.Add(form_template_single);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_TEMPLATE_SINGLE(FORM_TEMPLATE_SINGLEDto form_template_single, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_SINGLEService.Update(form_template_single);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_TEMPLATE_SINGLEs(IEnumerable<FORM_TEMPLATE_SINGLEDto> form_template_singles, bool doSaveChanges = true)
		{
			if (form_template_singles == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_SINGLEDto instance in form_template_singles)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_SINGLEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_TEMPLATE_SINGLE(FORM_TEMPLATE_SINGLEDto form_template_single, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_SINGLEService.Delete(form_template_single);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_TEMPLATE_SINGLEs(IEnumerable<FORM_TEMPLATE_SINGLEDto> form_template_singles, bool doSaveChanges = true)
		{
			if (form_template_singles == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_SINGLEDto instance in form_template_singles)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_SINGLEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORM_TEMPLATE_SINGLE(FORM_TEMPLATE_SINGLEDto form_template_single, bool doSaveChanges = true)
		{
			switch (form_template_single.RowState)
			{
				case RowState.Insert:
					this.CreateFORM_TEMPLATE_SINGLE(form_template_single, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORM_TEMPLATE_SINGLE(form_template_single, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORM_TEMPLATE_SINGLE(form_template_single, doSaveChanges);
					break;
			}
		}


		public void SaveFORM_TEMPLATE_SINGLEs(IEnumerable<FORM_TEMPLATE_SINGLEDto> form_template_singles, bool doSaveChanges = true)
		{
			if (form_template_singles == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_SINGLEDto instance in form_template_singles)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORM_TEMPLATE_SINGLE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORM_TEMPLATE_SINGLE CRUD Operations


		#region FORM_TEMPLATE_SCRIPT CRUD Operations


		private IFORM_TEMPLATE_SCRIPTService form_template_script;
		public virtual IFORM_TEMPLATE_SCRIPTService FORM_TEMPLATE_SCRIPTService
		{
			get
			{
				if (this.form_template_script == null)
				{
					IFORM_TEMPLATE_SCRIPTAssembler assembler = new FORM_TEMPLATE_SCRIPTAssembler();
					IFORM_TEMPLATE_SCRIPTRepository repository = new FORM_TEMPLATE_SCRIPTRepository(this.UnitOfWork);
					this.form_template_script = new FORM_TEMPLATE_SCRIPTService(assembler, repository);
				}
				return this.form_template_script;
			}
		}


		public IQueryable<FORM_TEMPLATE_SCRIPT> FORM_TEMPLATE_SCRIPTs
		{
			get { return this.FORM_TEMPLATE_SCRIPTService.Repository.GetAll(); }
		}


		public IQueryable<FORM_TEMPLATE_SCRIPT> ReadFORM_TEMPLATE_SCRIPTs(Expression<Func<FORM_TEMPLATE_SCRIPT, bool>> filter, int dummy)
		{
			return this.FORM_TEMPLATE_SCRIPTService.Repository.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_SCRIPTDto> ReadFORM_TEMPLATE_SCRIPTs()
		{
			return this.FORM_TEMPLATE_SCRIPTService.GetAll();
		}


		public IEnumerable<FORM_TEMPLATE_SCRIPTDto> ReadFORM_TEMPLATE_SCRIPTs(Expression<Func<FORM_TEMPLATE_SCRIPT, bool>> filter)
		{
			return this.FORM_TEMPLATE_SCRIPTService.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_SCRIPTDto> ReadFORM_TEMPLATE_SCRIPTs(ISpecification<FORM_TEMPLATE_SCRIPT> specification)
		{
			return this.FORM_TEMPLATE_SCRIPTService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_TEMPLATE_SCRIPTDto> ReadFORM_TEMPLATE_SCRIPTs(IQueryable<FORM_TEMPLATE_SCRIPT> query)
		{
			return this.FORM_TEMPLATE_SCRIPTService.Assembler.Assemble(query);
		}


		public IEnumerable<FORM_TEMPLATE_SCRIPTDto> ReadFORM_TEMPLATE_SCRIPTs(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORM_TEMPLATE_SCRIPTService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORM_TEMPLATE_SCRIPTDto> ReadFORM_TEMPLATE_SCRIPTs(object[] keyWords)
		{
			return this.FORM_TEMPLATE_SCRIPTService.Find(keyWords);
		}


		public IEnumerable<FORM_TEMPLATE_SCRIPTDto> ReadFORM_TEMPLATE_SCRIPTsPaged(int startIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_SCRIPTService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_TEMPLATE_SCRIPTDto> ReadFORM_TEMPLATE_SCRIPTsPaged(IQueryable<FORM_TEMPLATE_SCRIPT> source, int pageIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_SCRIPTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATE_SCRIPTDto> ReadFORM_TEMPLATE_SCRIPTsPaged(IQueryable<FORM_TEMPLATE_SCRIPT> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORM_TEMPLATE_SCRIPTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATE_SCRIPTDto> ReadFORM_TEMPLATE_SCRIPTsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_SCRIPTService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_SCRIPTDto> ReadFORM_TEMPLATE_SCRIPTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_SCRIPTService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_SCRIPTDto> ReadFORM_TEMPLATE_SCRIPTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATE_SCRIPT, bool>> filter)
		{
			return this.FORM_TEMPLATE_SCRIPTService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORM_TEMPLATE_SCRIPTDto ReadFORM_TEMPLATE_SCRIPTs(string dtoKey)
		{
			return this.FORM_TEMPLATE_SCRIPTService.GetByKey(dtoKey);
		}


		public int CountFORM_TEMPLATE_SCRIPTs()
		{
			return this.FORM_TEMPLATE_SCRIPTService.Count();
		}


		public int CountFORM_TEMPLATE_SCRIPTs(string filterExpression)
		{
			return this.FORM_TEMPLATE_SCRIPTService.Count(filterExpression);
		}


		public int CountFORM_TEMPLATE_SCRIPTs(Expression<Func<FORM_TEMPLATE_SCRIPT, bool>> filter)
		{
			return this.FORM_TEMPLATE_SCRIPTService.Count(filter);
		}


		public string CreateFORM_TEMPLATE_SCRIPT(FORM_TEMPLATE_SCRIPTDto form_template_script, bool doSaveChanges = true)
		{
			string key = this.FORM_TEMPLATE_SCRIPTService.Add(form_template_script);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_TEMPLATE_SCRIPT(FORM_TEMPLATE_SCRIPTDto form_template_script, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_SCRIPTService.Update(form_template_script);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_TEMPLATE_SCRIPTs(IEnumerable<FORM_TEMPLATE_SCRIPTDto> form_template_scripts, bool doSaveChanges = true)
		{
			if (form_template_scripts == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_SCRIPTDto instance in form_template_scripts)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_SCRIPTService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_TEMPLATE_SCRIPT(FORM_TEMPLATE_SCRIPTDto form_template_script, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_SCRIPTService.Delete(form_template_script);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_TEMPLATE_SCRIPTs(IEnumerable<FORM_TEMPLATE_SCRIPTDto> form_template_scripts, bool doSaveChanges = true)
		{
			if (form_template_scripts == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_SCRIPTDto instance in form_template_scripts)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_SCRIPTService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORM_TEMPLATE_SCRIPT(FORM_TEMPLATE_SCRIPTDto form_template_script, bool doSaveChanges = true)
		{
			switch (form_template_script.RowState)
			{
				case RowState.Insert:
					this.CreateFORM_TEMPLATE_SCRIPT(form_template_script, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORM_TEMPLATE_SCRIPT(form_template_script, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORM_TEMPLATE_SCRIPT(form_template_script, doSaveChanges);
					break;
			}
		}


		public void SaveFORM_TEMPLATE_SCRIPTs(IEnumerable<FORM_TEMPLATE_SCRIPTDto> form_template_scripts, bool doSaveChanges = true)
		{
			if (form_template_scripts == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_SCRIPTDto instance in form_template_scripts)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORM_TEMPLATE_SCRIPT(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORM_TEMPLATE_SCRIPT CRUD Operations


		#region FORM_TEMPLATE_PERMISSION CRUD Operations


		private IFORM_TEMPLATE_PERMISSIONService form_template_permission;
		public virtual IFORM_TEMPLATE_PERMISSIONService FORM_TEMPLATE_PERMISSIONService
		{
			get
			{
				if (this.form_template_permission == null)
				{
					IFORM_TEMPLATE_PERMISSIONAssembler assembler = new FORM_TEMPLATE_PERMISSIONAssembler();
					IFORM_TEMPLATE_PERMISSIONRepository repository = new FORM_TEMPLATE_PERMISSIONRepository(this.UnitOfWork);
					this.form_template_permission = new FORM_TEMPLATE_PERMISSIONService(assembler, repository);
				}
				return this.form_template_permission;
			}
		}


		public IQueryable<FORM_TEMPLATE_PERMISSION> FORM_TEMPLATE_PERMISSIONs
		{
			get { return this.FORM_TEMPLATE_PERMISSIONService.Repository.GetAll(); }
		}


		public IQueryable<FORM_TEMPLATE_PERMISSION> ReadFORM_TEMPLATE_PERMISSIONs(Expression<Func<FORM_TEMPLATE_PERMISSION, bool>> filter, int dummy)
		{
			return this.FORM_TEMPLATE_PERMISSIONService.Repository.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONs()
		{
			return this.FORM_TEMPLATE_PERMISSIONService.GetAll();
		}


		public IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONs(Expression<Func<FORM_TEMPLATE_PERMISSION, bool>> filter)
		{
			return this.FORM_TEMPLATE_PERMISSIONService.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONs(ISpecification<FORM_TEMPLATE_PERMISSION> specification)
		{
			return this.FORM_TEMPLATE_PERMISSIONService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONs(IQueryable<FORM_TEMPLATE_PERMISSION> query)
		{
			return this.FORM_TEMPLATE_PERMISSIONService.Assembler.Assemble(query);
		}


		public IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONs(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORM_TEMPLATE_PERMISSIONService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONs(object[] keyWords)
		{
			return this.FORM_TEMPLATE_PERMISSIONService.Find(keyWords);
		}


		public IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONsPaged(int startIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_PERMISSIONService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONsPaged(IQueryable<FORM_TEMPLATE_PERMISSION> source, int pageIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_PERMISSIONService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONsPaged(IQueryable<FORM_TEMPLATE_PERMISSION> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORM_TEMPLATE_PERMISSIONService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_PERMISSIONService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_PERMISSIONService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATE_PERMISSION, bool>> filter)
		{
			return this.FORM_TEMPLATE_PERMISSIONService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORM_TEMPLATE_PERMISSIONDto ReadFORM_TEMPLATE_PERMISSIONs(string dtoKey)
		{
			return this.FORM_TEMPLATE_PERMISSIONService.GetByKey(dtoKey);
		}


		public int CountFORM_TEMPLATE_PERMISSIONs()
		{
			return this.FORM_TEMPLATE_PERMISSIONService.Count();
		}


		public int CountFORM_TEMPLATE_PERMISSIONs(string filterExpression)
		{
			return this.FORM_TEMPLATE_PERMISSIONService.Count(filterExpression);
		}


		public int CountFORM_TEMPLATE_PERMISSIONs(Expression<Func<FORM_TEMPLATE_PERMISSION, bool>> filter)
		{
			return this.FORM_TEMPLATE_PERMISSIONService.Count(filter);
		}


		public string CreateFORM_TEMPLATE_PERMISSION(FORM_TEMPLATE_PERMISSIONDto form_template_permission, bool doSaveChanges = true)
		{
			string key = this.FORM_TEMPLATE_PERMISSIONService.Add(form_template_permission);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_TEMPLATE_PERMISSION(FORM_TEMPLATE_PERMISSIONDto form_template_permission, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_PERMISSIONService.Update(form_template_permission);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_TEMPLATE_PERMISSIONs(IEnumerable<FORM_TEMPLATE_PERMISSIONDto> form_template_permissions, bool doSaveChanges = true)
		{
			if (form_template_permissions == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_PERMISSIONDto instance in form_template_permissions)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_PERMISSIONService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_TEMPLATE_PERMISSION(FORM_TEMPLATE_PERMISSIONDto form_template_permission, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_PERMISSIONService.Delete(form_template_permission);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_TEMPLATE_PERMISSIONs(IEnumerable<FORM_TEMPLATE_PERMISSIONDto> form_template_permissions, bool doSaveChanges = true)
		{
			if (form_template_permissions == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_PERMISSIONDto instance in form_template_permissions)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_PERMISSIONService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORM_TEMPLATE_PERMISSION(FORM_TEMPLATE_PERMISSIONDto form_template_permission, bool doSaveChanges = true)
		{
			switch (form_template_permission.RowState)
			{
				case RowState.Insert:
					this.CreateFORM_TEMPLATE_PERMISSION(form_template_permission, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORM_TEMPLATE_PERMISSION(form_template_permission, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORM_TEMPLATE_PERMISSION(form_template_permission, doSaveChanges);
					break;
			}
		}


		public void SaveFORM_TEMPLATE_PERMISSIONs(IEnumerable<FORM_TEMPLATE_PERMISSIONDto> form_template_permissions, bool doSaveChanges = true)
		{
			if (form_template_permissions == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_PERMISSIONDto instance in form_template_permissions)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORM_TEMPLATE_PERMISSION(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORM_TEMPLATE_PERMISSION CRUD Operations


		#region FORM_TEMPLATE_NECESSARY CRUD Operations


		private IFORM_TEMPLATE_NECESSARYService form_template_necessary;
		public virtual IFORM_TEMPLATE_NECESSARYService FORM_TEMPLATE_NECESSARYService
		{
			get
			{
				if (this.form_template_necessary == null)
				{
					IFORM_TEMPLATE_NECESSARYAssembler assembler = new FORM_TEMPLATE_NECESSARYAssembler();
					IFORM_TEMPLATE_NECESSARYRepository repository = new FORM_TEMPLATE_NECESSARYRepository(this.UnitOfWork);
					this.form_template_necessary = new FORM_TEMPLATE_NECESSARYService(assembler, repository);
				}
				return this.form_template_necessary;
			}
		}


		public IQueryable<FORM_TEMPLATE_NECESSARY> FORM_TEMPLATE_NECESSARies
		{
			get { return this.FORM_TEMPLATE_NECESSARYService.Repository.GetAll(); }
		}


		public IQueryable<FORM_TEMPLATE_NECESSARY> ReadFORM_TEMPLATE_NECESSARies(Expression<Func<FORM_TEMPLATE_NECESSARY, bool>> filter, int dummy)
		{
			return this.FORM_TEMPLATE_NECESSARYService.Repository.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_NECESSARYDto> ReadFORM_TEMPLATE_NECESSARies()
		{
			return this.FORM_TEMPLATE_NECESSARYService.GetAll();
		}


		public IEnumerable<FORM_TEMPLATE_NECESSARYDto> ReadFORM_TEMPLATE_NECESSARies(Expression<Func<FORM_TEMPLATE_NECESSARY, bool>> filter)
		{
			return this.FORM_TEMPLATE_NECESSARYService.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_NECESSARYDto> ReadFORM_TEMPLATE_NECESSARies(ISpecification<FORM_TEMPLATE_NECESSARY> specification)
		{
			return this.FORM_TEMPLATE_NECESSARYService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_TEMPLATE_NECESSARYDto> ReadFORM_TEMPLATE_NECESSARies(IQueryable<FORM_TEMPLATE_NECESSARY> query)
		{
			return this.FORM_TEMPLATE_NECESSARYService.Assembler.Assemble(query);
		}


		public IEnumerable<FORM_TEMPLATE_NECESSARYDto> ReadFORM_TEMPLATE_NECESSARies(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORM_TEMPLATE_NECESSARYService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORM_TEMPLATE_NECESSARYDto> ReadFORM_TEMPLATE_NECESSARies(object[] keyWords)
		{
			return this.FORM_TEMPLATE_NECESSARYService.Find(keyWords);
		}


		public IEnumerable<FORM_TEMPLATE_NECESSARYDto> ReadFORM_TEMPLATE_NECESSARiesPaged(int startIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_NECESSARYService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_TEMPLATE_NECESSARYDto> ReadFORM_TEMPLATE_NECESSARiesPaged(IQueryable<FORM_TEMPLATE_NECESSARY> source, int pageIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_NECESSARYService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATE_NECESSARYDto> ReadFORM_TEMPLATE_NECESSARiesPaged(IQueryable<FORM_TEMPLATE_NECESSARY> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORM_TEMPLATE_NECESSARYService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATE_NECESSARYDto> ReadFORM_TEMPLATE_NECESSARiesFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_NECESSARYService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_NECESSARYDto> ReadFORM_TEMPLATE_NECESSARiesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_NECESSARYService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_NECESSARYDto> ReadFORM_TEMPLATE_NECESSARiesPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATE_NECESSARY, bool>> filter)
		{
			return this.FORM_TEMPLATE_NECESSARYService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORM_TEMPLATE_NECESSARYDto ReadFORM_TEMPLATE_NECESSARies(string dtoKey)
		{
			return this.FORM_TEMPLATE_NECESSARYService.GetByKey(dtoKey);
		}


		public int CountFORM_TEMPLATE_NECESSARies()
		{
			return this.FORM_TEMPLATE_NECESSARYService.Count();
		}


		public int CountFORM_TEMPLATE_NECESSARies(string filterExpression)
		{
			return this.FORM_TEMPLATE_NECESSARYService.Count(filterExpression);
		}


		public int CountFORM_TEMPLATE_NECESSARies(Expression<Func<FORM_TEMPLATE_NECESSARY, bool>> filter)
		{
			return this.FORM_TEMPLATE_NECESSARYService.Count(filter);
		}


		public string CreateFORM_TEMPLATE_NECESSARY(FORM_TEMPLATE_NECESSARYDto form_template_necessary, bool doSaveChanges = true)
		{
			string key = this.FORM_TEMPLATE_NECESSARYService.Add(form_template_necessary);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_TEMPLATE_NECESSARY(FORM_TEMPLATE_NECESSARYDto form_template_necessary, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_NECESSARYService.Update(form_template_necessary);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_TEMPLATE_NECESSARies(IEnumerable<FORM_TEMPLATE_NECESSARYDto> form_template_necessaries, bool doSaveChanges = true)
		{
			if (form_template_necessaries == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_NECESSARYDto instance in form_template_necessaries)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_NECESSARYService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_TEMPLATE_NECESSARY(FORM_TEMPLATE_NECESSARYDto form_template_necessary, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_NECESSARYService.Delete(form_template_necessary);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_TEMPLATE_NECESSARies(IEnumerable<FORM_TEMPLATE_NECESSARYDto> form_template_necessaries, bool doSaveChanges = true)
		{
			if (form_template_necessaries == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_NECESSARYDto instance in form_template_necessaries)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_NECESSARYService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORM_TEMPLATE_NECESSARY(FORM_TEMPLATE_NECESSARYDto form_template_necessary, bool doSaveChanges = true)
		{
			switch (form_template_necessary.RowState)
			{
				case RowState.Insert:
					this.CreateFORM_TEMPLATE_NECESSARY(form_template_necessary, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORM_TEMPLATE_NECESSARY(form_template_necessary, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORM_TEMPLATE_NECESSARY(form_template_necessary, doSaveChanges);
					break;
			}
		}


		public void SaveFORM_TEMPLATE_NECESSARies(IEnumerable<FORM_TEMPLATE_NECESSARYDto> form_template_necessaries, bool doSaveChanges = true)
		{
			if (form_template_necessaries == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_NECESSARYDto instance in form_template_necessaries)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORM_TEMPLATE_NECESSARY(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORM_TEMPLATE_NECESSARY CRUD Operations


		#region FORM_TEMPLATE_LIBRARY_OPTION CRUD Operations


		private IFORM_TEMPLATE_LIBRARY_OPTIONService form_template_library_option;
		public virtual IFORM_TEMPLATE_LIBRARY_OPTIONService FORM_TEMPLATE_LIBRARY_OPTIONService
		{
			get
			{
				if (this.form_template_library_option == null)
				{
					IFORM_TEMPLATE_LIBRARY_OPTIONAssembler assembler = new FORM_TEMPLATE_LIBRARY_OPTIONAssembler();
					IFORM_TEMPLATE_LIBRARY_OPTIONRepository repository = new FORM_TEMPLATE_LIBRARY_OPTIONRepository(this.UnitOfWork);
					this.form_template_library_option = new FORM_TEMPLATE_LIBRARY_OPTIONService(assembler, repository);
				}
				return this.form_template_library_option;
			}
		}


		public IQueryable<FORM_TEMPLATE_LIBRARY_OPTION> FORM_TEMPLATE_LIBRARY_OPTIONs
		{
			get { return this.FORM_TEMPLATE_LIBRARY_OPTIONService.Repository.GetAll(); }
		}


		public IQueryable<FORM_TEMPLATE_LIBRARY_OPTION> ReadFORM_TEMPLATE_LIBRARY_OPTIONs(Expression<Func<FORM_TEMPLATE_LIBRARY_OPTION, bool>> filter, int dummy)
		{
			return this.FORM_TEMPLATE_LIBRARY_OPTIONService.Repository.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_LIBRARY_OPTIONDto> ReadFORM_TEMPLATE_LIBRARY_OPTIONs()
		{
			return this.FORM_TEMPLATE_LIBRARY_OPTIONService.GetAll();
		}


		public IEnumerable<FORM_TEMPLATE_LIBRARY_OPTIONDto> ReadFORM_TEMPLATE_LIBRARY_OPTIONs(Expression<Func<FORM_TEMPLATE_LIBRARY_OPTION, bool>> filter)
		{
			return this.FORM_TEMPLATE_LIBRARY_OPTIONService.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_LIBRARY_OPTIONDto> ReadFORM_TEMPLATE_LIBRARY_OPTIONs(ISpecification<FORM_TEMPLATE_LIBRARY_OPTION> specification)
		{
			return this.FORM_TEMPLATE_LIBRARY_OPTIONService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_TEMPLATE_LIBRARY_OPTIONDto> ReadFORM_TEMPLATE_LIBRARY_OPTIONs(IQueryable<FORM_TEMPLATE_LIBRARY_OPTION> query)
		{
			return this.FORM_TEMPLATE_LIBRARY_OPTIONService.Assembler.Assemble(query);
		}


		public IEnumerable<FORM_TEMPLATE_LIBRARY_OPTIONDto> ReadFORM_TEMPLATE_LIBRARY_OPTIONs(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORM_TEMPLATE_LIBRARY_OPTIONService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORM_TEMPLATE_LIBRARY_OPTIONDto> ReadFORM_TEMPLATE_LIBRARY_OPTIONs(object[] keyWords)
		{
			return this.FORM_TEMPLATE_LIBRARY_OPTIONService.Find(keyWords);
		}


		public IEnumerable<FORM_TEMPLATE_LIBRARY_OPTIONDto> ReadFORM_TEMPLATE_LIBRARY_OPTIONsPaged(int startIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_LIBRARY_OPTIONService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_TEMPLATE_LIBRARY_OPTIONDto> ReadFORM_TEMPLATE_LIBRARY_OPTIONsPaged(IQueryable<FORM_TEMPLATE_LIBRARY_OPTION> source, int pageIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_LIBRARY_OPTIONService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATE_LIBRARY_OPTIONDto> ReadFORM_TEMPLATE_LIBRARY_OPTIONsPaged(IQueryable<FORM_TEMPLATE_LIBRARY_OPTION> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORM_TEMPLATE_LIBRARY_OPTIONService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATE_LIBRARY_OPTIONDto> ReadFORM_TEMPLATE_LIBRARY_OPTIONsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_LIBRARY_OPTIONService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_LIBRARY_OPTIONDto> ReadFORM_TEMPLATE_LIBRARY_OPTIONsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_LIBRARY_OPTIONService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_LIBRARY_OPTIONDto> ReadFORM_TEMPLATE_LIBRARY_OPTIONsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATE_LIBRARY_OPTION, bool>> filter)
		{
			return this.FORM_TEMPLATE_LIBRARY_OPTIONService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORM_TEMPLATE_LIBRARY_OPTIONDto ReadFORM_TEMPLATE_LIBRARY_OPTIONs(string dtoKey)
		{
			return this.FORM_TEMPLATE_LIBRARY_OPTIONService.GetByKey(dtoKey);
		}


		public int CountFORM_TEMPLATE_LIBRARY_OPTIONs()
		{
			return this.FORM_TEMPLATE_LIBRARY_OPTIONService.Count();
		}


		public int CountFORM_TEMPLATE_LIBRARY_OPTIONs(string filterExpression)
		{
			return this.FORM_TEMPLATE_LIBRARY_OPTIONService.Count(filterExpression);
		}


		public int CountFORM_TEMPLATE_LIBRARY_OPTIONs(Expression<Func<FORM_TEMPLATE_LIBRARY_OPTION, bool>> filter)
		{
			return this.FORM_TEMPLATE_LIBRARY_OPTIONService.Count(filter);
		}


		public string CreateFORM_TEMPLATE_LIBRARY_OPTION(FORM_TEMPLATE_LIBRARY_OPTIONDto form_template_library_option, bool doSaveChanges = true)
		{
			string key = this.FORM_TEMPLATE_LIBRARY_OPTIONService.Add(form_template_library_option);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_TEMPLATE_LIBRARY_OPTION(FORM_TEMPLATE_LIBRARY_OPTIONDto form_template_library_option, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_LIBRARY_OPTIONService.Update(form_template_library_option);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_TEMPLATE_LIBRARY_OPTIONs(IEnumerable<FORM_TEMPLATE_LIBRARY_OPTIONDto> form_template_library_options, bool doSaveChanges = true)
		{
			if (form_template_library_options == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_LIBRARY_OPTIONDto instance in form_template_library_options)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_LIBRARY_OPTIONService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_TEMPLATE_LIBRARY_OPTION(FORM_TEMPLATE_LIBRARY_OPTIONDto form_template_library_option, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_LIBRARY_OPTIONService.Delete(form_template_library_option);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_TEMPLATE_LIBRARY_OPTIONs(IEnumerable<FORM_TEMPLATE_LIBRARY_OPTIONDto> form_template_library_options, bool doSaveChanges = true)
		{
			if (form_template_library_options == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_LIBRARY_OPTIONDto instance in form_template_library_options)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_LIBRARY_OPTIONService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORM_TEMPLATE_LIBRARY_OPTION(FORM_TEMPLATE_LIBRARY_OPTIONDto form_template_library_option, bool doSaveChanges = true)
		{
			switch (form_template_library_option.RowState)
			{
				case RowState.Insert:
					this.CreateFORM_TEMPLATE_LIBRARY_OPTION(form_template_library_option, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORM_TEMPLATE_LIBRARY_OPTION(form_template_library_option, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORM_TEMPLATE_LIBRARY_OPTION(form_template_library_option, doSaveChanges);
					break;
			}
		}


		public void SaveFORM_TEMPLATE_LIBRARY_OPTIONs(IEnumerable<FORM_TEMPLATE_LIBRARY_OPTIONDto> form_template_library_options, bool doSaveChanges = true)
		{
			if (form_template_library_options == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_LIBRARY_OPTIONDto instance in form_template_library_options)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORM_TEMPLATE_LIBRARY_OPTION(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORM_TEMPLATE_LIBRARY_OPTION CRUD Operations


		#region FORM_TEMPLATE_LIBRARY CRUD Operations


		private IFORM_TEMPLATE_LIBRARYService form_template_library;
		public virtual IFORM_TEMPLATE_LIBRARYService FORM_TEMPLATE_LIBRARYService
		{
			get
			{
				if (this.form_template_library == null)
				{
					IFORM_TEMPLATE_LIBRARYAssembler assembler = new FORM_TEMPLATE_LIBRARYAssembler();
					IFORM_TEMPLATE_LIBRARYRepository repository = new FORM_TEMPLATE_LIBRARYRepository(this.UnitOfWork);
					this.form_template_library = new FORM_TEMPLATE_LIBRARYService(assembler, repository);
				}
				return this.form_template_library;
			}
		}


		public IQueryable<FORM_TEMPLATE_LIBRARY> FORM_TEMPLATE_LIBRARies
		{
			get { return this.FORM_TEMPLATE_LIBRARYService.Repository.GetAll(); }
		}


		public IQueryable<FORM_TEMPLATE_LIBRARY> ReadFORM_TEMPLATE_LIBRARies(Expression<Func<FORM_TEMPLATE_LIBRARY, bool>> filter, int dummy)
		{
			return this.FORM_TEMPLATE_LIBRARYService.Repository.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_LIBRARYDto> ReadFORM_TEMPLATE_LIBRARies()
		{
			return this.FORM_TEMPLATE_LIBRARYService.GetAll();
		}


		public IEnumerable<FORM_TEMPLATE_LIBRARYDto> ReadFORM_TEMPLATE_LIBRARies(Expression<Func<FORM_TEMPLATE_LIBRARY, bool>> filter)
		{
			return this.FORM_TEMPLATE_LIBRARYService.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_LIBRARYDto> ReadFORM_TEMPLATE_LIBRARies(ISpecification<FORM_TEMPLATE_LIBRARY> specification)
		{
			return this.FORM_TEMPLATE_LIBRARYService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_TEMPLATE_LIBRARYDto> ReadFORM_TEMPLATE_LIBRARies(IQueryable<FORM_TEMPLATE_LIBRARY> query)
		{
			return this.FORM_TEMPLATE_LIBRARYService.Assembler.Assemble(query);
		}


		public IEnumerable<FORM_TEMPLATE_LIBRARYDto> ReadFORM_TEMPLATE_LIBRARies(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORM_TEMPLATE_LIBRARYService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORM_TEMPLATE_LIBRARYDto> ReadFORM_TEMPLATE_LIBRARies(object[] keyWords)
		{
			return this.FORM_TEMPLATE_LIBRARYService.Find(keyWords);
		}


		public IEnumerable<FORM_TEMPLATE_LIBRARYDto> ReadFORM_TEMPLATE_LIBRARiesPaged(int startIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_LIBRARYService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_TEMPLATE_LIBRARYDto> ReadFORM_TEMPLATE_LIBRARiesPaged(IQueryable<FORM_TEMPLATE_LIBRARY> source, int pageIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_LIBRARYService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATE_LIBRARYDto> ReadFORM_TEMPLATE_LIBRARiesPaged(IQueryable<FORM_TEMPLATE_LIBRARY> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORM_TEMPLATE_LIBRARYService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATE_LIBRARYDto> ReadFORM_TEMPLATE_LIBRARiesFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_LIBRARYService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_LIBRARYDto> ReadFORM_TEMPLATE_LIBRARiesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_LIBRARYService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_LIBRARYDto> ReadFORM_TEMPLATE_LIBRARiesPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATE_LIBRARY, bool>> filter)
		{
			return this.FORM_TEMPLATE_LIBRARYService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORM_TEMPLATE_LIBRARYDto ReadFORM_TEMPLATE_LIBRARies(string dtoKey)
		{
			return this.FORM_TEMPLATE_LIBRARYService.GetByKey(dtoKey);
		}


		public int CountFORM_TEMPLATE_LIBRARies()
		{
			return this.FORM_TEMPLATE_LIBRARYService.Count();
		}


		public int CountFORM_TEMPLATE_LIBRARies(string filterExpression)
		{
			return this.FORM_TEMPLATE_LIBRARYService.Count(filterExpression);
		}


		public int CountFORM_TEMPLATE_LIBRARies(Expression<Func<FORM_TEMPLATE_LIBRARY, bool>> filter)
		{
			return this.FORM_TEMPLATE_LIBRARYService.Count(filter);
		}


		public string CreateFORM_TEMPLATE_LIBRARY(FORM_TEMPLATE_LIBRARYDto form_template_library, bool doSaveChanges = true)
		{
			string key = this.FORM_TEMPLATE_LIBRARYService.Add(form_template_library);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_TEMPLATE_LIBRARY(FORM_TEMPLATE_LIBRARYDto form_template_library, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_LIBRARYService.Update(form_template_library);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_TEMPLATE_LIBRARies(IEnumerable<FORM_TEMPLATE_LIBRARYDto> form_template_libraries, bool doSaveChanges = true)
		{
			if (form_template_libraries == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_LIBRARYDto instance in form_template_libraries)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_LIBRARYService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_TEMPLATE_LIBRARY(FORM_TEMPLATE_LIBRARYDto form_template_library, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_LIBRARYService.Delete(form_template_library);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_TEMPLATE_LIBRARies(IEnumerable<FORM_TEMPLATE_LIBRARYDto> form_template_libraries, bool doSaveChanges = true)
		{
			if (form_template_libraries == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_LIBRARYDto instance in form_template_libraries)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_LIBRARYService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORM_TEMPLATE_LIBRARY(FORM_TEMPLATE_LIBRARYDto form_template_library, bool doSaveChanges = true)
		{
			switch (form_template_library.RowState)
			{
				case RowState.Insert:
					this.CreateFORM_TEMPLATE_LIBRARY(form_template_library, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORM_TEMPLATE_LIBRARY(form_template_library, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORM_TEMPLATE_LIBRARY(form_template_library, doSaveChanges);
					break;
			}
		}


		public void SaveFORM_TEMPLATE_LIBRARies(IEnumerable<FORM_TEMPLATE_LIBRARYDto> form_template_libraries, bool doSaveChanges = true)
		{
			if (form_template_libraries == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_LIBRARYDto instance in form_template_libraries)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORM_TEMPLATE_LIBRARY(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORM_TEMPLATE_LIBRARY CRUD Operations


		#region FORM_TEMPLATE_IMAGE CRUD Operations


		private IFORM_TEMPLATE_IMAGEService form_template_image;
		public virtual IFORM_TEMPLATE_IMAGEService FORM_TEMPLATE_IMAGEService
		{
			get
			{
				if (this.form_template_image == null)
				{
					IFORM_TEMPLATE_IMAGEAssembler assembler = new FORM_TEMPLATE_IMAGEAssembler();
					IFORM_TEMPLATE_IMAGERepository repository = new FORM_TEMPLATE_IMAGERepository(this.UnitOfWork);
					this.form_template_image = new FORM_TEMPLATE_IMAGEService(assembler, repository);
				}
				return this.form_template_image;
			}
		}


		public IQueryable<FORM_TEMPLATE_IMAGE> FORM_TEMPLATE_IMAGEs
		{
			get { return this.FORM_TEMPLATE_IMAGEService.Repository.GetAll(); }
		}


		public IQueryable<FORM_TEMPLATE_IMAGE> ReadFORM_TEMPLATE_IMAGEs(Expression<Func<FORM_TEMPLATE_IMAGE, bool>> filter, int dummy)
		{
			return this.FORM_TEMPLATE_IMAGEService.Repository.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_IMAGEDto> ReadFORM_TEMPLATE_IMAGEs()
		{
			return this.FORM_TEMPLATE_IMAGEService.GetAll();
		}


		public IEnumerable<FORM_TEMPLATE_IMAGEDto> ReadFORM_TEMPLATE_IMAGEs(Expression<Func<FORM_TEMPLATE_IMAGE, bool>> filter)
		{
			return this.FORM_TEMPLATE_IMAGEService.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_IMAGEDto> ReadFORM_TEMPLATE_IMAGEs(ISpecification<FORM_TEMPLATE_IMAGE> specification)
		{
			return this.FORM_TEMPLATE_IMAGEService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_TEMPLATE_IMAGEDto> ReadFORM_TEMPLATE_IMAGEs(IQueryable<FORM_TEMPLATE_IMAGE> query)
		{
			return this.FORM_TEMPLATE_IMAGEService.Assembler.Assemble(query);
		}


		public IEnumerable<FORM_TEMPLATE_IMAGEDto> ReadFORM_TEMPLATE_IMAGEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORM_TEMPLATE_IMAGEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORM_TEMPLATE_IMAGEDto> ReadFORM_TEMPLATE_IMAGEs(object[] keyWords)
		{
			return this.FORM_TEMPLATE_IMAGEService.Find(keyWords);
		}


		public IEnumerable<FORM_TEMPLATE_IMAGEDto> ReadFORM_TEMPLATE_IMAGEsPaged(int startIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_IMAGEService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_TEMPLATE_IMAGEDto> ReadFORM_TEMPLATE_IMAGEsPaged(IQueryable<FORM_TEMPLATE_IMAGE> source, int pageIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_IMAGEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATE_IMAGEDto> ReadFORM_TEMPLATE_IMAGEsPaged(IQueryable<FORM_TEMPLATE_IMAGE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORM_TEMPLATE_IMAGEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATE_IMAGEDto> ReadFORM_TEMPLATE_IMAGEsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_IMAGEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_IMAGEDto> ReadFORM_TEMPLATE_IMAGEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_IMAGEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_IMAGEDto> ReadFORM_TEMPLATE_IMAGEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATE_IMAGE, bool>> filter)
		{
			return this.FORM_TEMPLATE_IMAGEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORM_TEMPLATE_IMAGEDto ReadFORM_TEMPLATE_IMAGEs(string dtoKey)
		{
			return this.FORM_TEMPLATE_IMAGEService.GetByKey(dtoKey);
		}


		public int CountFORM_TEMPLATE_IMAGEs()
		{
			return this.FORM_TEMPLATE_IMAGEService.Count();
		}


		public int CountFORM_TEMPLATE_IMAGEs(string filterExpression)
		{
			return this.FORM_TEMPLATE_IMAGEService.Count(filterExpression);
		}


		public int CountFORM_TEMPLATE_IMAGEs(Expression<Func<FORM_TEMPLATE_IMAGE, bool>> filter)
		{
			return this.FORM_TEMPLATE_IMAGEService.Count(filter);
		}


		public string CreateFORM_TEMPLATE_IMAGE(FORM_TEMPLATE_IMAGEDto form_template_image, bool doSaveChanges = true)
		{
			string key = this.FORM_TEMPLATE_IMAGEService.Add(form_template_image);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_TEMPLATE_IMAGE(FORM_TEMPLATE_IMAGEDto form_template_image, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_IMAGEService.Update(form_template_image);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_TEMPLATE_IMAGEs(IEnumerable<FORM_TEMPLATE_IMAGEDto> form_template_images, bool doSaveChanges = true)
		{
			if (form_template_images == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_IMAGEDto instance in form_template_images)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_IMAGEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_TEMPLATE_IMAGE(FORM_TEMPLATE_IMAGEDto form_template_image, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_IMAGEService.Delete(form_template_image);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_TEMPLATE_IMAGEs(IEnumerable<FORM_TEMPLATE_IMAGEDto> form_template_images, bool doSaveChanges = true)
		{
			if (form_template_images == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_IMAGEDto instance in form_template_images)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_IMAGEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORM_TEMPLATE_IMAGE(FORM_TEMPLATE_IMAGEDto form_template_image, bool doSaveChanges = true)
		{
			switch (form_template_image.RowState)
			{
				case RowState.Insert:
					this.CreateFORM_TEMPLATE_IMAGE(form_template_image, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORM_TEMPLATE_IMAGE(form_template_image, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORM_TEMPLATE_IMAGE(form_template_image, doSaveChanges);
					break;
			}
		}


		public void SaveFORM_TEMPLATE_IMAGEs(IEnumerable<FORM_TEMPLATE_IMAGEDto> form_template_images, bool doSaveChanges = true)
		{
			if (form_template_images == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_IMAGEDto instance in form_template_images)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORM_TEMPLATE_IMAGE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORM_TEMPLATE_IMAGE CRUD Operations


		#region FORM_TEMPLATE_GROUPS_BK CRUD Operations


		private IFORM_TEMPLATE_GROUPS_BKService form_template_groups_bk;
		public virtual IFORM_TEMPLATE_GROUPS_BKService FORM_TEMPLATE_GROUPS_BKService
		{
			get
			{
				if (this.form_template_groups_bk == null)
				{
					IFORM_TEMPLATE_GROUPS_BKAssembler assembler = new FORM_TEMPLATE_GROUPS_BKAssembler();
					IFORM_TEMPLATE_GROUPS_BKRepository repository = new FORM_TEMPLATE_GROUPS_BKRepository(this.UnitOfWork);
					this.form_template_groups_bk = new FORM_TEMPLATE_GROUPS_BKService(assembler, repository);
				}
				return this.form_template_groups_bk;
			}
		}


		public IQueryable<FORM_TEMPLATE_GROUPS_BK> FORM_TEMPLATE_GROUPS_BKs
		{
			get { return this.FORM_TEMPLATE_GROUPS_BKService.Repository.GetAll(); }
		}


		public IQueryable<FORM_TEMPLATE_GROUPS_BK> ReadFORM_TEMPLATE_GROUPS_BKs(Expression<Func<FORM_TEMPLATE_GROUPS_BK, bool>> filter, int dummy)
		{
			return this.FORM_TEMPLATE_GROUPS_BKService.Repository.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_GROUPS_BKDto> ReadFORM_TEMPLATE_GROUPS_BKs()
		{
			return this.FORM_TEMPLATE_GROUPS_BKService.GetAll();
		}


		public IEnumerable<FORM_TEMPLATE_GROUPS_BKDto> ReadFORM_TEMPLATE_GROUPS_BKs(Expression<Func<FORM_TEMPLATE_GROUPS_BK, bool>> filter)
		{
			return this.FORM_TEMPLATE_GROUPS_BKService.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_GROUPS_BKDto> ReadFORM_TEMPLATE_GROUPS_BKs(ISpecification<FORM_TEMPLATE_GROUPS_BK> specification)
		{
			return this.FORM_TEMPLATE_GROUPS_BKService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_TEMPLATE_GROUPS_BKDto> ReadFORM_TEMPLATE_GROUPS_BKs(IQueryable<FORM_TEMPLATE_GROUPS_BK> query)
		{
			return this.FORM_TEMPLATE_GROUPS_BKService.Assembler.Assemble(query);
		}


		public IEnumerable<FORM_TEMPLATE_GROUPS_BKDto> ReadFORM_TEMPLATE_GROUPS_BKs(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORM_TEMPLATE_GROUPS_BKService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORM_TEMPLATE_GROUPS_BKDto> ReadFORM_TEMPLATE_GROUPS_BKs(object[] keyWords)
		{
			return this.FORM_TEMPLATE_GROUPS_BKService.Find(keyWords);
		}


		public IEnumerable<FORM_TEMPLATE_GROUPS_BKDto> ReadFORM_TEMPLATE_GROUPS_BKsPaged(int startIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_GROUPS_BKService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_TEMPLATE_GROUPS_BKDto> ReadFORM_TEMPLATE_GROUPS_BKsPaged(IQueryable<FORM_TEMPLATE_GROUPS_BK> source, int pageIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_GROUPS_BKService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATE_GROUPS_BKDto> ReadFORM_TEMPLATE_GROUPS_BKsPaged(IQueryable<FORM_TEMPLATE_GROUPS_BK> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORM_TEMPLATE_GROUPS_BKService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATE_GROUPS_BKDto> ReadFORM_TEMPLATE_GROUPS_BKsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_GROUPS_BKService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_GROUPS_BKDto> ReadFORM_TEMPLATE_GROUPS_BKsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_GROUPS_BKService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_GROUPS_BKDto> ReadFORM_TEMPLATE_GROUPS_BKsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATE_GROUPS_BK, bool>> filter)
		{
			return this.FORM_TEMPLATE_GROUPS_BKService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORM_TEMPLATE_GROUPS_BKDto ReadFORM_TEMPLATE_GROUPS_BKs(string dtoKey)
		{
			return this.FORM_TEMPLATE_GROUPS_BKService.GetByKey(dtoKey);
		}


		public int CountFORM_TEMPLATE_GROUPS_BKs()
		{
			return this.FORM_TEMPLATE_GROUPS_BKService.Count();
		}


		public int CountFORM_TEMPLATE_GROUPS_BKs(string filterExpression)
		{
			return this.FORM_TEMPLATE_GROUPS_BKService.Count(filterExpression);
		}


		public int CountFORM_TEMPLATE_GROUPS_BKs(Expression<Func<FORM_TEMPLATE_GROUPS_BK, bool>> filter)
		{
			return this.FORM_TEMPLATE_GROUPS_BKService.Count(filter);
		}


		public string CreateFORM_TEMPLATE_GROUPS_BK(FORM_TEMPLATE_GROUPS_BKDto form_template_groups_bk, bool doSaveChanges = true)
		{
			string key = this.FORM_TEMPLATE_GROUPS_BKService.Add(form_template_groups_bk);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_TEMPLATE_GROUPS_BK(FORM_TEMPLATE_GROUPS_BKDto form_template_groups_bk, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_GROUPS_BKService.Update(form_template_groups_bk);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_TEMPLATE_GROUPS_BKs(IEnumerable<FORM_TEMPLATE_GROUPS_BKDto> form_template_groups_bks, bool doSaveChanges = true)
		{
			if (form_template_groups_bks == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_GROUPS_BKDto instance in form_template_groups_bks)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_GROUPS_BKService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_TEMPLATE_GROUPS_BK(FORM_TEMPLATE_GROUPS_BKDto form_template_groups_bk, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_GROUPS_BKService.Delete(form_template_groups_bk);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_TEMPLATE_GROUPS_BKs(IEnumerable<FORM_TEMPLATE_GROUPS_BKDto> form_template_groups_bks, bool doSaveChanges = true)
		{
			if (form_template_groups_bks == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_GROUPS_BKDto instance in form_template_groups_bks)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_GROUPS_BKService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORM_TEMPLATE_GROUPS_BK(FORM_TEMPLATE_GROUPS_BKDto form_template_groups_bk, bool doSaveChanges = true)
		{
			switch (form_template_groups_bk.RowState)
			{
				case RowState.Insert:
					this.CreateFORM_TEMPLATE_GROUPS_BK(form_template_groups_bk, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORM_TEMPLATE_GROUPS_BK(form_template_groups_bk, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORM_TEMPLATE_GROUPS_BK(form_template_groups_bk, doSaveChanges);
					break;
			}
		}


		public void SaveFORM_TEMPLATE_GROUPS_BKs(IEnumerable<FORM_TEMPLATE_GROUPS_BKDto> form_template_groups_bks, bool doSaveChanges = true)
		{
			if (form_template_groups_bks == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_GROUPS_BKDto instance in form_template_groups_bks)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORM_TEMPLATE_GROUPS_BK(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORM_TEMPLATE_GROUPS_BK CRUD Operations


		#region FORM_TEMPLATE_GROUP CRUD Operations


		private IFORM_TEMPLATE_GROUPService form_template_group;
		public virtual IFORM_TEMPLATE_GROUPService FORM_TEMPLATE_GROUPService
		{
			get
			{
				if (this.form_template_group == null)
				{
					IFORM_TEMPLATE_GROUPAssembler assembler = new FORM_TEMPLATE_GROUPAssembler();
					IFORM_TEMPLATE_GROUPRepository repository = new FORM_TEMPLATE_GROUPRepository(this.UnitOfWork);
					this.form_template_group = new FORM_TEMPLATE_GROUPService(assembler, repository);
				}
				return this.form_template_group;
			}
		}


		public IQueryable<FORM_TEMPLATE_GROUP> FORM_TEMPLATE_GROUPs
		{
			get { return this.FORM_TEMPLATE_GROUPService.Repository.GetAll(); }
		}


		public IQueryable<FORM_TEMPLATE_GROUP> ReadFORM_TEMPLATE_GROUPs(Expression<Func<FORM_TEMPLATE_GROUP, bool>> filter, int dummy)
		{
			return this.FORM_TEMPLATE_GROUPService.Repository.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPs()
		{
			return this.FORM_TEMPLATE_GROUPService.GetAll();
		}


		public IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPs(Expression<Func<FORM_TEMPLATE_GROUP, bool>> filter)
		{
			return this.FORM_TEMPLATE_GROUPService.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPs(ISpecification<FORM_TEMPLATE_GROUP> specification)
		{
			return this.FORM_TEMPLATE_GROUPService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPs(IQueryable<FORM_TEMPLATE_GROUP> query)
		{
			return this.FORM_TEMPLATE_GROUPService.Assembler.Assemble(query);
		}


		public IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPs(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORM_TEMPLATE_GROUPService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPs(object[] keyWords)
		{
			return this.FORM_TEMPLATE_GROUPService.Find(keyWords);
		}


		public IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPsPaged(int startIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_GROUPService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPsPaged(IQueryable<FORM_TEMPLATE_GROUP> source, int pageIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_GROUPService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPsPaged(IQueryable<FORM_TEMPLATE_GROUP> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORM_TEMPLATE_GROUPService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_GROUPService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_GROUPService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATE_GROUP, bool>> filter)
		{
			return this.FORM_TEMPLATE_GROUPService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORM_TEMPLATE_GROUPDto ReadFORM_TEMPLATE_GROUPs(string dtoKey)
		{
			return this.FORM_TEMPLATE_GROUPService.GetByKey(dtoKey);
		}


		public int CountFORM_TEMPLATE_GROUPs()
		{
			return this.FORM_TEMPLATE_GROUPService.Count();
		}


		public int CountFORM_TEMPLATE_GROUPs(string filterExpression)
		{
			return this.FORM_TEMPLATE_GROUPService.Count(filterExpression);
		}


		public int CountFORM_TEMPLATE_GROUPs(Expression<Func<FORM_TEMPLATE_GROUP, bool>> filter)
		{
			return this.FORM_TEMPLATE_GROUPService.Count(filter);
		}


		public string CreateFORM_TEMPLATE_GROUP(FORM_TEMPLATE_GROUPDto form_template_group, bool doSaveChanges = true)
		{
			string key = this.FORM_TEMPLATE_GROUPService.Add(form_template_group);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_TEMPLATE_GROUP(FORM_TEMPLATE_GROUPDto form_template_group, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_GROUPService.Update(form_template_group);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_TEMPLATE_GROUPs(IEnumerable<FORM_TEMPLATE_GROUPDto> form_template_groups, bool doSaveChanges = true)
		{
			if (form_template_groups == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_GROUPDto instance in form_template_groups)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_GROUPService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_TEMPLATE_GROUP(FORM_TEMPLATE_GROUPDto form_template_group, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_GROUPService.Delete(form_template_group);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_TEMPLATE_GROUPs(IEnumerable<FORM_TEMPLATE_GROUPDto> form_template_groups, bool doSaveChanges = true)
		{
			if (form_template_groups == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_GROUPDto instance in form_template_groups)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_GROUPService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORM_TEMPLATE_GROUP(FORM_TEMPLATE_GROUPDto form_template_group, bool doSaveChanges = true)
		{
			switch (form_template_group.RowState)
			{
				case RowState.Insert:
					this.CreateFORM_TEMPLATE_GROUP(form_template_group, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORM_TEMPLATE_GROUP(form_template_group, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORM_TEMPLATE_GROUP(form_template_group, doSaveChanges);
					break;
			}
		}


		public void SaveFORM_TEMPLATE_GROUPs(IEnumerable<FORM_TEMPLATE_GROUPDto> form_template_groups, bool doSaveChanges = true)
		{
			if (form_template_groups == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_GROUPDto instance in form_template_groups)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORM_TEMPLATE_GROUP(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORM_TEMPLATE_GROUP CRUD Operations


		#region FORM_TEMPLATE_EXPRESSION CRUD Operations


		private IFORM_TEMPLATE_EXPRESSIONService form_template_expression;
		public virtual IFORM_TEMPLATE_EXPRESSIONService FORM_TEMPLATE_EXPRESSIONService
		{
			get
			{
				if (this.form_template_expression == null)
				{
					IFORM_TEMPLATE_EXPRESSIONAssembler assembler = new FORM_TEMPLATE_EXPRESSIONAssembler();
					IFORM_TEMPLATE_EXPRESSIONRepository repository = new FORM_TEMPLATE_EXPRESSIONRepository(this.UnitOfWork);
					this.form_template_expression = new FORM_TEMPLATE_EXPRESSIONService(assembler, repository);
				}
				return this.form_template_expression;
			}
		}


		public IQueryable<FORM_TEMPLATE_EXPRESSION> FORM_TEMPLATE_EXPRESSIONs
		{
			get { return this.FORM_TEMPLATE_EXPRESSIONService.Repository.GetAll(); }
		}


		public IQueryable<FORM_TEMPLATE_EXPRESSION> ReadFORM_TEMPLATE_EXPRESSIONs(Expression<Func<FORM_TEMPLATE_EXPRESSION, bool>> filter, int dummy)
		{
			return this.FORM_TEMPLATE_EXPRESSIONService.Repository.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_EXPRESSIONDto> ReadFORM_TEMPLATE_EXPRESSIONs()
		{
			return this.FORM_TEMPLATE_EXPRESSIONService.GetAll();
		}


		public IEnumerable<FORM_TEMPLATE_EXPRESSIONDto> ReadFORM_TEMPLATE_EXPRESSIONs(Expression<Func<FORM_TEMPLATE_EXPRESSION, bool>> filter)
		{
			return this.FORM_TEMPLATE_EXPRESSIONService.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_EXPRESSIONDto> ReadFORM_TEMPLATE_EXPRESSIONs(ISpecification<FORM_TEMPLATE_EXPRESSION> specification)
		{
			return this.FORM_TEMPLATE_EXPRESSIONService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_TEMPLATE_EXPRESSIONDto> ReadFORM_TEMPLATE_EXPRESSIONs(IQueryable<FORM_TEMPLATE_EXPRESSION> query)
		{
			return this.FORM_TEMPLATE_EXPRESSIONService.Assembler.Assemble(query);
		}


		public IEnumerable<FORM_TEMPLATE_EXPRESSIONDto> ReadFORM_TEMPLATE_EXPRESSIONs(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORM_TEMPLATE_EXPRESSIONService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORM_TEMPLATE_EXPRESSIONDto> ReadFORM_TEMPLATE_EXPRESSIONs(object[] keyWords)
		{
			return this.FORM_TEMPLATE_EXPRESSIONService.Find(keyWords);
		}


		public IEnumerable<FORM_TEMPLATE_EXPRESSIONDto> ReadFORM_TEMPLATE_EXPRESSIONsPaged(int startIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_EXPRESSIONService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_TEMPLATE_EXPRESSIONDto> ReadFORM_TEMPLATE_EXPRESSIONsPaged(IQueryable<FORM_TEMPLATE_EXPRESSION> source, int pageIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_EXPRESSIONService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATE_EXPRESSIONDto> ReadFORM_TEMPLATE_EXPRESSIONsPaged(IQueryable<FORM_TEMPLATE_EXPRESSION> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORM_TEMPLATE_EXPRESSIONService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATE_EXPRESSIONDto> ReadFORM_TEMPLATE_EXPRESSIONsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_EXPRESSIONService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_EXPRESSIONDto> ReadFORM_TEMPLATE_EXPRESSIONsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_EXPRESSIONService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_EXPRESSIONDto> ReadFORM_TEMPLATE_EXPRESSIONsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATE_EXPRESSION, bool>> filter)
		{
			return this.FORM_TEMPLATE_EXPRESSIONService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORM_TEMPLATE_EXPRESSIONDto ReadFORM_TEMPLATE_EXPRESSIONs(string dtoKey)
		{
			return this.FORM_TEMPLATE_EXPRESSIONService.GetByKey(dtoKey);
		}


		public int CountFORM_TEMPLATE_EXPRESSIONs()
		{
			return this.FORM_TEMPLATE_EXPRESSIONService.Count();
		}


		public int CountFORM_TEMPLATE_EXPRESSIONs(string filterExpression)
		{
			return this.FORM_TEMPLATE_EXPRESSIONService.Count(filterExpression);
		}


		public int CountFORM_TEMPLATE_EXPRESSIONs(Expression<Func<FORM_TEMPLATE_EXPRESSION, bool>> filter)
		{
			return this.FORM_TEMPLATE_EXPRESSIONService.Count(filter);
		}


		public string CreateFORM_TEMPLATE_EXPRESSION(FORM_TEMPLATE_EXPRESSIONDto form_template_expression, bool doSaveChanges = true)
		{
			string key = this.FORM_TEMPLATE_EXPRESSIONService.Add(form_template_expression);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_TEMPLATE_EXPRESSION(FORM_TEMPLATE_EXPRESSIONDto form_template_expression, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_EXPRESSIONService.Update(form_template_expression);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_TEMPLATE_EXPRESSIONs(IEnumerable<FORM_TEMPLATE_EXPRESSIONDto> form_template_expressions, bool doSaveChanges = true)
		{
			if (form_template_expressions == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_EXPRESSIONDto instance in form_template_expressions)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_EXPRESSIONService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_TEMPLATE_EXPRESSION(FORM_TEMPLATE_EXPRESSIONDto form_template_expression, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_EXPRESSIONService.Delete(form_template_expression);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_TEMPLATE_EXPRESSIONs(IEnumerable<FORM_TEMPLATE_EXPRESSIONDto> form_template_expressions, bool doSaveChanges = true)
		{
			if (form_template_expressions == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_EXPRESSIONDto instance in form_template_expressions)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_EXPRESSIONService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORM_TEMPLATE_EXPRESSION(FORM_TEMPLATE_EXPRESSIONDto form_template_expression, bool doSaveChanges = true)
		{
			switch (form_template_expression.RowState)
			{
				case RowState.Insert:
					this.CreateFORM_TEMPLATE_EXPRESSION(form_template_expression, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORM_TEMPLATE_EXPRESSION(form_template_expression, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORM_TEMPLATE_EXPRESSION(form_template_expression, doSaveChanges);
					break;
			}
		}


		public void SaveFORM_TEMPLATE_EXPRESSIONs(IEnumerable<FORM_TEMPLATE_EXPRESSIONDto> form_template_expressions, bool doSaveChanges = true)
		{
			if (form_template_expressions == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_EXPRESSIONDto instance in form_template_expressions)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORM_TEMPLATE_EXPRESSION(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORM_TEMPLATE_EXPRESSION CRUD Operations


		#region FORM_TEMPLATE_ELEMENTS_BK CRUD Operations


		private IFORM_TEMPLATE_ELEMENTS_BKService form_template_elements_bk;
		public virtual IFORM_TEMPLATE_ELEMENTS_BKService FORM_TEMPLATE_ELEMENTS_BKService
		{
			get
			{
				if (this.form_template_elements_bk == null)
				{
					IFORM_TEMPLATE_ELEMENTS_BKAssembler assembler = new FORM_TEMPLATE_ELEMENTS_BKAssembler();
					IFORM_TEMPLATE_ELEMENTS_BKRepository repository = new FORM_TEMPLATE_ELEMENTS_BKRepository(this.UnitOfWork);
					this.form_template_elements_bk = new FORM_TEMPLATE_ELEMENTS_BKService(assembler, repository);
				}
				return this.form_template_elements_bk;
			}
		}


		public IQueryable<FORM_TEMPLATE_ELEMENTS_BK> FORM_TEMPLATE_ELEMENTS_BKs
		{
			get { return this.FORM_TEMPLATE_ELEMENTS_BKService.Repository.GetAll(); }
		}


		public IQueryable<FORM_TEMPLATE_ELEMENTS_BK> ReadFORM_TEMPLATE_ELEMENTS_BKs(Expression<Func<FORM_TEMPLATE_ELEMENTS_BK, bool>> filter, int dummy)
		{
			return this.FORM_TEMPLATE_ELEMENTS_BKService.Repository.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENTS_BKDto> ReadFORM_TEMPLATE_ELEMENTS_BKs()
		{
			return this.FORM_TEMPLATE_ELEMENTS_BKService.GetAll();
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENTS_BKDto> ReadFORM_TEMPLATE_ELEMENTS_BKs(Expression<Func<FORM_TEMPLATE_ELEMENTS_BK, bool>> filter)
		{
			return this.FORM_TEMPLATE_ELEMENTS_BKService.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENTS_BKDto> ReadFORM_TEMPLATE_ELEMENTS_BKs(ISpecification<FORM_TEMPLATE_ELEMENTS_BK> specification)
		{
			return this.FORM_TEMPLATE_ELEMENTS_BKService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENTS_BKDto> ReadFORM_TEMPLATE_ELEMENTS_BKs(IQueryable<FORM_TEMPLATE_ELEMENTS_BK> query)
		{
			return this.FORM_TEMPLATE_ELEMENTS_BKService.Assembler.Assemble(query);
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENTS_BKDto> ReadFORM_TEMPLATE_ELEMENTS_BKs(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORM_TEMPLATE_ELEMENTS_BKService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENTS_BKDto> ReadFORM_TEMPLATE_ELEMENTS_BKs(object[] keyWords)
		{
			return this.FORM_TEMPLATE_ELEMENTS_BKService.Find(keyWords);
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENTS_BKDto> ReadFORM_TEMPLATE_ELEMENTS_BKsPaged(int startIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_ELEMENTS_BKService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENTS_BKDto> ReadFORM_TEMPLATE_ELEMENTS_BKsPaged(IQueryable<FORM_TEMPLATE_ELEMENTS_BK> source, int pageIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_ELEMENTS_BKService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENTS_BKDto> ReadFORM_TEMPLATE_ELEMENTS_BKsPaged(IQueryable<FORM_TEMPLATE_ELEMENTS_BK> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORM_TEMPLATE_ELEMENTS_BKService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENTS_BKDto> ReadFORM_TEMPLATE_ELEMENTS_BKsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_ELEMENTS_BKService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENTS_BKDto> ReadFORM_TEMPLATE_ELEMENTS_BKsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_ELEMENTS_BKService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENTS_BKDto> ReadFORM_TEMPLATE_ELEMENTS_BKsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATE_ELEMENTS_BK, bool>> filter)
		{
			return this.FORM_TEMPLATE_ELEMENTS_BKService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORM_TEMPLATE_ELEMENTS_BKDto ReadFORM_TEMPLATE_ELEMENTS_BKs(string dtoKey)
		{
			return this.FORM_TEMPLATE_ELEMENTS_BKService.GetByKey(dtoKey);
		}


		public int CountFORM_TEMPLATE_ELEMENTS_BKs()
		{
			return this.FORM_TEMPLATE_ELEMENTS_BKService.Count();
		}


		public int CountFORM_TEMPLATE_ELEMENTS_BKs(string filterExpression)
		{
			return this.FORM_TEMPLATE_ELEMENTS_BKService.Count(filterExpression);
		}


		public int CountFORM_TEMPLATE_ELEMENTS_BKs(Expression<Func<FORM_TEMPLATE_ELEMENTS_BK, bool>> filter)
		{
			return this.FORM_TEMPLATE_ELEMENTS_BKService.Count(filter);
		}


		public string CreateFORM_TEMPLATE_ELEMENTS_BK(FORM_TEMPLATE_ELEMENTS_BKDto form_template_elements_bk, bool doSaveChanges = true)
		{
			string key = this.FORM_TEMPLATE_ELEMENTS_BKService.Add(form_template_elements_bk);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_TEMPLATE_ELEMENTS_BK(FORM_TEMPLATE_ELEMENTS_BKDto form_template_elements_bk, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_ELEMENTS_BKService.Update(form_template_elements_bk);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_TEMPLATE_ELEMENTS_BKs(IEnumerable<FORM_TEMPLATE_ELEMENTS_BKDto> form_template_elements_bks, bool doSaveChanges = true)
		{
			if (form_template_elements_bks == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_ELEMENTS_BKDto instance in form_template_elements_bks)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_ELEMENTS_BKService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_TEMPLATE_ELEMENTS_BK(FORM_TEMPLATE_ELEMENTS_BKDto form_template_elements_bk, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_ELEMENTS_BKService.Delete(form_template_elements_bk);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_TEMPLATE_ELEMENTS_BKs(IEnumerable<FORM_TEMPLATE_ELEMENTS_BKDto> form_template_elements_bks, bool doSaveChanges = true)
		{
			if (form_template_elements_bks == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_ELEMENTS_BKDto instance in form_template_elements_bks)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_ELEMENTS_BKService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORM_TEMPLATE_ELEMENTS_BK(FORM_TEMPLATE_ELEMENTS_BKDto form_template_elements_bk, bool doSaveChanges = true)
		{
			switch (form_template_elements_bk.RowState)
			{
				case RowState.Insert:
					this.CreateFORM_TEMPLATE_ELEMENTS_BK(form_template_elements_bk, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORM_TEMPLATE_ELEMENTS_BK(form_template_elements_bk, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORM_TEMPLATE_ELEMENTS_BK(form_template_elements_bk, doSaveChanges);
					break;
			}
		}


		public void SaveFORM_TEMPLATE_ELEMENTS_BKs(IEnumerable<FORM_TEMPLATE_ELEMENTS_BKDto> form_template_elements_bks, bool doSaveChanges = true)
		{
			if (form_template_elements_bks == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_ELEMENTS_BKDto instance in form_template_elements_bks)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORM_TEMPLATE_ELEMENTS_BK(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORM_TEMPLATE_ELEMENTS_BK CRUD Operations


		#region FORM_TEMPLATE_ELEMENT CRUD Operations


		private IFORM_TEMPLATE_ELEMENTService form_template_element;
		public virtual IFORM_TEMPLATE_ELEMENTService FORM_TEMPLATE_ELEMENTService
		{
			get
			{
				if (this.form_template_element == null)
				{
					IFORM_TEMPLATE_ELEMENTAssembler assembler = new FORM_TEMPLATE_ELEMENTAssembler();
					IFORM_TEMPLATE_ELEMENTRepository repository = new FORM_TEMPLATE_ELEMENTRepository(this.UnitOfWork);
					this.form_template_element = new FORM_TEMPLATE_ELEMENTService(assembler, repository);
				}
				return this.form_template_element;
			}
		}


		public IQueryable<FORM_TEMPLATE_ELEMENT> FORM_TEMPLATE_ELEMENTs
		{
			get { return this.FORM_TEMPLATE_ELEMENTService.Repository.GetAll(); }
		}


		public IQueryable<FORM_TEMPLATE_ELEMENT> ReadFORM_TEMPLATE_ELEMENTs(Expression<Func<FORM_TEMPLATE_ELEMENT, bool>> filter, int dummy)
		{
			return this.FORM_TEMPLATE_ELEMENTService.Repository.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTs()
		{
			return this.FORM_TEMPLATE_ELEMENTService.GetAll();
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTs(Expression<Func<FORM_TEMPLATE_ELEMENT, bool>> filter)
		{
			return this.FORM_TEMPLATE_ELEMENTService.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTs(ISpecification<FORM_TEMPLATE_ELEMENT> specification)
		{
			return this.FORM_TEMPLATE_ELEMENTService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTs(IQueryable<FORM_TEMPLATE_ELEMENT> query)
		{
			return this.FORM_TEMPLATE_ELEMENTService.Assembler.Assemble(query);
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTs(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORM_TEMPLATE_ELEMENTService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTs(object[] keyWords)
		{
			return this.FORM_TEMPLATE_ELEMENTService.Find(keyWords);
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTsPaged(int startIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_ELEMENTService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTsPaged(IQueryable<FORM_TEMPLATE_ELEMENT> source, int pageIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_ELEMENTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTsPaged(IQueryable<FORM_TEMPLATE_ELEMENT> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORM_TEMPLATE_ELEMENTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_ELEMENTService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_ELEMENTService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATE_ELEMENT, bool>> filter)
		{
			return this.FORM_TEMPLATE_ELEMENTService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORM_TEMPLATE_ELEMENTDto ReadFORM_TEMPLATE_ELEMENTs(string dtoKey)
		{
			return this.FORM_TEMPLATE_ELEMENTService.GetByKey(dtoKey);
		}


		public int CountFORM_TEMPLATE_ELEMENTs()
		{
			return this.FORM_TEMPLATE_ELEMENTService.Count();
		}


		public int CountFORM_TEMPLATE_ELEMENTs(string filterExpression)
		{
			return this.FORM_TEMPLATE_ELEMENTService.Count(filterExpression);
		}


		public int CountFORM_TEMPLATE_ELEMENTs(Expression<Func<FORM_TEMPLATE_ELEMENT, bool>> filter)
		{
			return this.FORM_TEMPLATE_ELEMENTService.Count(filter);
		}


		public string CreateFORM_TEMPLATE_ELEMENT(FORM_TEMPLATE_ELEMENTDto form_template_element, bool doSaveChanges = true)
		{
			string key = this.FORM_TEMPLATE_ELEMENTService.Add(form_template_element);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_TEMPLATE_ELEMENT(FORM_TEMPLATE_ELEMENTDto form_template_element, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_ELEMENTService.Update(form_template_element);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_TEMPLATE_ELEMENTs(IEnumerable<FORM_TEMPLATE_ELEMENTDto> form_template_elements, bool doSaveChanges = true)
		{
			if (form_template_elements == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_ELEMENTDto instance in form_template_elements)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_ELEMENTService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_TEMPLATE_ELEMENT(FORM_TEMPLATE_ELEMENTDto form_template_element, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_ELEMENTService.Delete(form_template_element);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_TEMPLATE_ELEMENTs(IEnumerable<FORM_TEMPLATE_ELEMENTDto> form_template_elements, bool doSaveChanges = true)
		{
			if (form_template_elements == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_ELEMENTDto instance in form_template_elements)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_ELEMENTService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORM_TEMPLATE_ELEMENT(FORM_TEMPLATE_ELEMENTDto form_template_element, bool doSaveChanges = true)
		{
			switch (form_template_element.RowState)
			{
				case RowState.Insert:
					this.CreateFORM_TEMPLATE_ELEMENT(form_template_element, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORM_TEMPLATE_ELEMENT(form_template_element, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORM_TEMPLATE_ELEMENT(form_template_element, doSaveChanges);
					break;
			}
		}


		public void SaveFORM_TEMPLATE_ELEMENTs(IEnumerable<FORM_TEMPLATE_ELEMENTDto> form_template_elements, bool doSaveChanges = true)
		{
			if (form_template_elements == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_ELEMENTDto instance in form_template_elements)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORM_TEMPLATE_ELEMENT(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORM_TEMPLATE_ELEMENT CRUD Operations


		#region FORM_TEMPLATE_ELEMENT_READONLY CRUD Operations


		private IFORM_TEMPLATE_ELEMENT_READONLYService form_template_element_readonly;
		public virtual IFORM_TEMPLATE_ELEMENT_READONLYService FORM_TEMPLATE_ELEMENT_READONLYService
		{
			get
			{
				if (this.form_template_element_readonly == null)
				{
					IFORM_TEMPLATE_ELEMENT_READONLYAssembler assembler = new FORM_TEMPLATE_ELEMENT_READONLYAssembler();
					IFORM_TEMPLATE_ELEMENT_READONLYRepository repository = new FORM_TEMPLATE_ELEMENT_READONLYRepository(this.UnitOfWork);
					this.form_template_element_readonly = new FORM_TEMPLATE_ELEMENT_READONLYService(assembler, repository);
				}
				return this.form_template_element_readonly;
			}
		}


		public IQueryable<FORM_TEMPLATE_ELEMENT_READONLY> FORM_TEMPLATE_ELEMENT_READONLies
		{
			get { return this.FORM_TEMPLATE_ELEMENT_READONLYService.Repository.GetAll(); }
		}


		public IQueryable<FORM_TEMPLATE_ELEMENT_READONLY> ReadFORM_TEMPLATE_ELEMENT_READONLies(Expression<Func<FORM_TEMPLATE_ELEMENT_READONLY, bool>> filter, int dummy)
		{
			return this.FORM_TEMPLATE_ELEMENT_READONLYService.Repository.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENT_READONLYDto> ReadFORM_TEMPLATE_ELEMENT_READONLies()
		{
			return this.FORM_TEMPLATE_ELEMENT_READONLYService.GetAll();
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENT_READONLYDto> ReadFORM_TEMPLATE_ELEMENT_READONLies(Expression<Func<FORM_TEMPLATE_ELEMENT_READONLY, bool>> filter)
		{
			return this.FORM_TEMPLATE_ELEMENT_READONLYService.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENT_READONLYDto> ReadFORM_TEMPLATE_ELEMENT_READONLies(ISpecification<FORM_TEMPLATE_ELEMENT_READONLY> specification)
		{
			return this.FORM_TEMPLATE_ELEMENT_READONLYService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENT_READONLYDto> ReadFORM_TEMPLATE_ELEMENT_READONLies(IQueryable<FORM_TEMPLATE_ELEMENT_READONLY> query)
		{
			return this.FORM_TEMPLATE_ELEMENT_READONLYService.Assembler.Assemble(query);
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENT_READONLYDto> ReadFORM_TEMPLATE_ELEMENT_READONLies(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORM_TEMPLATE_ELEMENT_READONLYService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENT_READONLYDto> ReadFORM_TEMPLATE_ELEMENT_READONLies(object[] keyWords)
		{
			return this.FORM_TEMPLATE_ELEMENT_READONLYService.Find(keyWords);
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENT_READONLYDto> ReadFORM_TEMPLATE_ELEMENT_READONLiesPaged(int startIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_ELEMENT_READONLYService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENT_READONLYDto> ReadFORM_TEMPLATE_ELEMENT_READONLiesPaged(IQueryable<FORM_TEMPLATE_ELEMENT_READONLY> source, int pageIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_ELEMENT_READONLYService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENT_READONLYDto> ReadFORM_TEMPLATE_ELEMENT_READONLiesPaged(IQueryable<FORM_TEMPLATE_ELEMENT_READONLY> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORM_TEMPLATE_ELEMENT_READONLYService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENT_READONLYDto> ReadFORM_TEMPLATE_ELEMENT_READONLiesFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_ELEMENT_READONLYService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENT_READONLYDto> ReadFORM_TEMPLATE_ELEMENT_READONLiesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_ELEMENT_READONLYService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENT_READONLYDto> ReadFORM_TEMPLATE_ELEMENT_READONLiesPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATE_ELEMENT_READONLY, bool>> filter)
		{
			return this.FORM_TEMPLATE_ELEMENT_READONLYService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORM_TEMPLATE_ELEMENT_READONLYDto ReadFORM_TEMPLATE_ELEMENT_READONLies(string dtoKey)
		{
			return this.FORM_TEMPLATE_ELEMENT_READONLYService.GetByKey(dtoKey);
		}


		public int CountFORM_TEMPLATE_ELEMENT_READONLies()
		{
			return this.FORM_TEMPLATE_ELEMENT_READONLYService.Count();
		}


		public int CountFORM_TEMPLATE_ELEMENT_READONLies(string filterExpression)
		{
			return this.FORM_TEMPLATE_ELEMENT_READONLYService.Count(filterExpression);
		}


		public int CountFORM_TEMPLATE_ELEMENT_READONLies(Expression<Func<FORM_TEMPLATE_ELEMENT_READONLY, bool>> filter)
		{
			return this.FORM_TEMPLATE_ELEMENT_READONLYService.Count(filter);
		}


		public string CreateFORM_TEMPLATE_ELEMENT_READONLY(FORM_TEMPLATE_ELEMENT_READONLYDto form_template_element_readonly, bool doSaveChanges = true)
		{
			string key = this.FORM_TEMPLATE_ELEMENT_READONLYService.Add(form_template_element_readonly);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_TEMPLATE_ELEMENT_READONLY(FORM_TEMPLATE_ELEMENT_READONLYDto form_template_element_readonly, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_ELEMENT_READONLYService.Update(form_template_element_readonly);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_TEMPLATE_ELEMENT_READONLies(IEnumerable<FORM_TEMPLATE_ELEMENT_READONLYDto> form_template_element_readonlies, bool doSaveChanges = true)
		{
			if (form_template_element_readonlies == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_ELEMENT_READONLYDto instance in form_template_element_readonlies)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_ELEMENT_READONLYService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_TEMPLATE_ELEMENT_READONLY(FORM_TEMPLATE_ELEMENT_READONLYDto form_template_element_readonly, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_ELEMENT_READONLYService.Delete(form_template_element_readonly);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_TEMPLATE_ELEMENT_READONLies(IEnumerable<FORM_TEMPLATE_ELEMENT_READONLYDto> form_template_element_readonlies, bool doSaveChanges = true)
		{
			if (form_template_element_readonlies == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_ELEMENT_READONLYDto instance in form_template_element_readonlies)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_ELEMENT_READONLYService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORM_TEMPLATE_ELEMENT_READONLY(FORM_TEMPLATE_ELEMENT_READONLYDto form_template_element_readonly, bool doSaveChanges = true)
		{
			switch (form_template_element_readonly.RowState)
			{
				case RowState.Insert:
					this.CreateFORM_TEMPLATE_ELEMENT_READONLY(form_template_element_readonly, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORM_TEMPLATE_ELEMENT_READONLY(form_template_element_readonly, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORM_TEMPLATE_ELEMENT_READONLY(form_template_element_readonly, doSaveChanges);
					break;
			}
		}


		public void SaveFORM_TEMPLATE_ELEMENT_READONLies(IEnumerable<FORM_TEMPLATE_ELEMENT_READONLYDto> form_template_element_readonlies, bool doSaveChanges = true)
		{
			if (form_template_element_readonlies == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_ELEMENT_READONLYDto instance in form_template_element_readonlies)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORM_TEMPLATE_ELEMENT_READONLY(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORM_TEMPLATE_ELEMENT_READONLY CRUD Operations


		#region FORM_TEMPLATE_DYNAMIC_ELEMENT CRUD Operations


		private IFORM_TEMPLATE_DYNAMIC_ELEMENTService form_template_dynamic_element;
		public virtual IFORM_TEMPLATE_DYNAMIC_ELEMENTService FORM_TEMPLATE_DYNAMIC_ELEMENTService
		{
			get
			{
				if (this.form_template_dynamic_element == null)
				{
					IFORM_TEMPLATE_DYNAMIC_ELEMENTAssembler assembler = new FORM_TEMPLATE_DYNAMIC_ELEMENTAssembler();
					IFORM_TEMPLATE_DYNAMIC_ELEMENTRepository repository = new FORM_TEMPLATE_DYNAMIC_ELEMENTRepository(this.UnitOfWork);
					this.form_template_dynamic_element = new FORM_TEMPLATE_DYNAMIC_ELEMENTService(assembler, repository);
				}
				return this.form_template_dynamic_element;
			}
		}


		public IQueryable<FORM_TEMPLATE_DYNAMIC_ELEMENT> FORM_TEMPLATE_DYNAMIC_ELEMENTs
		{
			get { return this.FORM_TEMPLATE_DYNAMIC_ELEMENTService.Repository.GetAll(); }
		}


		public IQueryable<FORM_TEMPLATE_DYNAMIC_ELEMENT> ReadFORM_TEMPLATE_DYNAMIC_ELEMENTs(Expression<Func<FORM_TEMPLATE_DYNAMIC_ELEMENT, bool>> filter, int dummy)
		{
			return this.FORM_TEMPLATE_DYNAMIC_ELEMENTService.Repository.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_DYNAMIC_ELEMENTDto> ReadFORM_TEMPLATE_DYNAMIC_ELEMENTs()
		{
			return this.FORM_TEMPLATE_DYNAMIC_ELEMENTService.GetAll();
		}


		public IEnumerable<FORM_TEMPLATE_DYNAMIC_ELEMENTDto> ReadFORM_TEMPLATE_DYNAMIC_ELEMENTs(Expression<Func<FORM_TEMPLATE_DYNAMIC_ELEMENT, bool>> filter)
		{
			return this.FORM_TEMPLATE_DYNAMIC_ELEMENTService.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_DYNAMIC_ELEMENTDto> ReadFORM_TEMPLATE_DYNAMIC_ELEMENTs(ISpecification<FORM_TEMPLATE_DYNAMIC_ELEMENT> specification)
		{
			return this.FORM_TEMPLATE_DYNAMIC_ELEMENTService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_TEMPLATE_DYNAMIC_ELEMENTDto> ReadFORM_TEMPLATE_DYNAMIC_ELEMENTs(IQueryable<FORM_TEMPLATE_DYNAMIC_ELEMENT> query)
		{
			return this.FORM_TEMPLATE_DYNAMIC_ELEMENTService.Assembler.Assemble(query);
		}


		public IEnumerable<FORM_TEMPLATE_DYNAMIC_ELEMENTDto> ReadFORM_TEMPLATE_DYNAMIC_ELEMENTs(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORM_TEMPLATE_DYNAMIC_ELEMENTService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORM_TEMPLATE_DYNAMIC_ELEMENTDto> ReadFORM_TEMPLATE_DYNAMIC_ELEMENTs(object[] keyWords)
		{
			return this.FORM_TEMPLATE_DYNAMIC_ELEMENTService.Find(keyWords);
		}


		public IEnumerable<FORM_TEMPLATE_DYNAMIC_ELEMENTDto> ReadFORM_TEMPLATE_DYNAMIC_ELEMENTsPaged(int startIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_DYNAMIC_ELEMENTService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_TEMPLATE_DYNAMIC_ELEMENTDto> ReadFORM_TEMPLATE_DYNAMIC_ELEMENTsPaged(IQueryable<FORM_TEMPLATE_DYNAMIC_ELEMENT> source, int pageIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_DYNAMIC_ELEMENTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATE_DYNAMIC_ELEMENTDto> ReadFORM_TEMPLATE_DYNAMIC_ELEMENTsPaged(IQueryable<FORM_TEMPLATE_DYNAMIC_ELEMENT> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORM_TEMPLATE_DYNAMIC_ELEMENTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_TEMPLATE_DYNAMIC_ELEMENTDto> ReadFORM_TEMPLATE_DYNAMIC_ELEMENTsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_DYNAMIC_ELEMENTService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_DYNAMIC_ELEMENTDto> ReadFORM_TEMPLATE_DYNAMIC_ELEMENTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_DYNAMIC_ELEMENTService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_DYNAMIC_ELEMENTDto> ReadFORM_TEMPLATE_DYNAMIC_ELEMENTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_TEMPLATE_DYNAMIC_ELEMENT, bool>> filter)
		{
			return this.FORM_TEMPLATE_DYNAMIC_ELEMENTService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORM_TEMPLATE_DYNAMIC_ELEMENTDto ReadFORM_TEMPLATE_DYNAMIC_ELEMENTs(string dtoKey)
		{
			return this.FORM_TEMPLATE_DYNAMIC_ELEMENTService.GetByKey(dtoKey);
		}


		public int CountFORM_TEMPLATE_DYNAMIC_ELEMENTs()
		{
			return this.FORM_TEMPLATE_DYNAMIC_ELEMENTService.Count();
		}


		public int CountFORM_TEMPLATE_DYNAMIC_ELEMENTs(string filterExpression)
		{
			return this.FORM_TEMPLATE_DYNAMIC_ELEMENTService.Count(filterExpression);
		}


		public int CountFORM_TEMPLATE_DYNAMIC_ELEMENTs(Expression<Func<FORM_TEMPLATE_DYNAMIC_ELEMENT, bool>> filter)
		{
			return this.FORM_TEMPLATE_DYNAMIC_ELEMENTService.Count(filter);
		}


		public string CreateFORM_TEMPLATE_DYNAMIC_ELEMENT(FORM_TEMPLATE_DYNAMIC_ELEMENTDto form_template_dynamic_element, bool doSaveChanges = true)
		{
			string key = this.FORM_TEMPLATE_DYNAMIC_ELEMENTService.Add(form_template_dynamic_element);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_TEMPLATE_DYNAMIC_ELEMENT(FORM_TEMPLATE_DYNAMIC_ELEMENTDto form_template_dynamic_element, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_DYNAMIC_ELEMENTService.Update(form_template_dynamic_element);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_TEMPLATE_DYNAMIC_ELEMENTs(IEnumerable<FORM_TEMPLATE_DYNAMIC_ELEMENTDto> form_template_dynamic_elements, bool doSaveChanges = true)
		{
			if (form_template_dynamic_elements == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_DYNAMIC_ELEMENTDto instance in form_template_dynamic_elements)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_DYNAMIC_ELEMENTService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_TEMPLATE_DYNAMIC_ELEMENT(FORM_TEMPLATE_DYNAMIC_ELEMENTDto form_template_dynamic_element, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_DYNAMIC_ELEMENTService.Delete(form_template_dynamic_element);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_TEMPLATE_DYNAMIC_ELEMENTs(IEnumerable<FORM_TEMPLATE_DYNAMIC_ELEMENTDto> form_template_dynamic_elements, bool doSaveChanges = true)
		{
			if (form_template_dynamic_elements == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_DYNAMIC_ELEMENTDto instance in form_template_dynamic_elements)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_DYNAMIC_ELEMENTService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORM_TEMPLATE_DYNAMIC_ELEMENT(FORM_TEMPLATE_DYNAMIC_ELEMENTDto form_template_dynamic_element, bool doSaveChanges = true)
		{
			switch (form_template_dynamic_element.RowState)
			{
				case RowState.Insert:
					this.CreateFORM_TEMPLATE_DYNAMIC_ELEMENT(form_template_dynamic_element, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORM_TEMPLATE_DYNAMIC_ELEMENT(form_template_dynamic_element, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORM_TEMPLATE_DYNAMIC_ELEMENT(form_template_dynamic_element, doSaveChanges);
					break;
			}
		}


		public void SaveFORM_TEMPLATE_DYNAMIC_ELEMENTs(IEnumerable<FORM_TEMPLATE_DYNAMIC_ELEMENTDto> form_template_dynamic_elements, bool doSaveChanges = true)
		{
			if (form_template_dynamic_elements == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_DYNAMIC_ELEMENTDto instance in form_template_dynamic_elements)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORM_TEMPLATE_DYNAMIC_ELEMENT(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORM_TEMPLATE_DYNAMIC_ELEMENT CRUD Operations


		#region FORM_OPTION_TYPE CRUD Operations


		private IFORM_OPTION_TYPEService form_option_type;
		public virtual IFORM_OPTION_TYPEService FORM_OPTION_TYPEService
		{
			get
			{
				if (this.form_option_type == null)
				{
					IFORM_OPTION_TYPEAssembler assembler = new FORM_OPTION_TYPEAssembler();
					IFORM_OPTION_TYPERepository repository = new FORM_OPTION_TYPERepository(this.UnitOfWork);
					this.form_option_type = new FORM_OPTION_TYPEService(assembler, repository);
				}
				return this.form_option_type;
			}
		}


		public IQueryable<FORM_OPTION_TYPE> FORM_OPTION_TYPEs
		{
			get { return this.FORM_OPTION_TYPEService.Repository.GetAll(); }
		}


		public IQueryable<FORM_OPTION_TYPE> ReadFORM_OPTION_TYPEs(Expression<Func<FORM_OPTION_TYPE, bool>> filter, int dummy)
		{
			return this.FORM_OPTION_TYPEService.Repository.Find(filter);
		}


		public IEnumerable<FORM_OPTION_TYPEDto> ReadFORM_OPTION_TYPEs()
		{
			return this.FORM_OPTION_TYPEService.GetAll();
		}


		public IEnumerable<FORM_OPTION_TYPEDto> ReadFORM_OPTION_TYPEs(Expression<Func<FORM_OPTION_TYPE, bool>> filter)
		{
			return this.FORM_OPTION_TYPEService.Find(filter);
		}


		public IEnumerable<FORM_OPTION_TYPEDto> ReadFORM_OPTION_TYPEs(ISpecification<FORM_OPTION_TYPE> specification)
		{
			return this.FORM_OPTION_TYPEService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_OPTION_TYPEDto> ReadFORM_OPTION_TYPEs(IQueryable<FORM_OPTION_TYPE> query)
		{
			return this.FORM_OPTION_TYPEService.Assembler.Assemble(query);
		}


		public IEnumerable<FORM_OPTION_TYPEDto> ReadFORM_OPTION_TYPEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORM_OPTION_TYPEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORM_OPTION_TYPEDto> ReadFORM_OPTION_TYPEs(object[] keyWords)
		{
			return this.FORM_OPTION_TYPEService.Find(keyWords);
		}


		public IEnumerable<FORM_OPTION_TYPEDto> ReadFORM_OPTION_TYPEsPaged(int startIndex, int pageSize)
		{
			return this.FORM_OPTION_TYPEService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_OPTION_TYPEDto> ReadFORM_OPTION_TYPEsPaged(IQueryable<FORM_OPTION_TYPE> source, int pageIndex, int pageSize)
		{
			return this.FORM_OPTION_TYPEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_OPTION_TYPEDto> ReadFORM_OPTION_TYPEsPaged(IQueryable<FORM_OPTION_TYPE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORM_OPTION_TYPEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_OPTION_TYPEDto> ReadFORM_OPTION_TYPEsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_OPTION_TYPEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_OPTION_TYPEDto> ReadFORM_OPTION_TYPEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_OPTION_TYPEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORM_OPTION_TYPEDto> ReadFORM_OPTION_TYPEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_OPTION_TYPE, bool>> filter)
		{
			return this.FORM_OPTION_TYPEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORM_OPTION_TYPEDto ReadFORM_OPTION_TYPEs(string dtoKey)
		{
			return this.FORM_OPTION_TYPEService.GetByKey(dtoKey);
		}


		public int CountFORM_OPTION_TYPEs()
		{
			return this.FORM_OPTION_TYPEService.Count();
		}


		public int CountFORM_OPTION_TYPEs(string filterExpression)
		{
			return this.FORM_OPTION_TYPEService.Count(filterExpression);
		}


		public int CountFORM_OPTION_TYPEs(Expression<Func<FORM_OPTION_TYPE, bool>> filter)
		{
			return this.FORM_OPTION_TYPEService.Count(filter);
		}


		public string CreateFORM_OPTION_TYPE(FORM_OPTION_TYPEDto form_option_type, bool doSaveChanges = true)
		{
			string key = this.FORM_OPTION_TYPEService.Add(form_option_type);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_OPTION_TYPE(FORM_OPTION_TYPEDto form_option_type, bool doSaveChanges = true)
		{
			this.FORM_OPTION_TYPEService.Update(form_option_type);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_OPTION_TYPEs(IEnumerable<FORM_OPTION_TYPEDto> form_option_types, bool doSaveChanges = true)
		{
			if (form_option_types == null)
			{
				return;
			}
			foreach (FORM_OPTION_TYPEDto instance in form_option_types)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_OPTION_TYPEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_OPTION_TYPE(FORM_OPTION_TYPEDto form_option_type, bool doSaveChanges = true)
		{
			this.FORM_OPTION_TYPEService.Delete(form_option_type);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_OPTION_TYPEs(IEnumerable<FORM_OPTION_TYPEDto> form_option_types, bool doSaveChanges = true)
		{
			if (form_option_types == null)
			{
				return;
			}
			foreach (FORM_OPTION_TYPEDto instance in form_option_types)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_OPTION_TYPEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORM_OPTION_TYPE(FORM_OPTION_TYPEDto form_option_type, bool doSaveChanges = true)
		{
			switch (form_option_type.RowState)
			{
				case RowState.Insert:
					this.CreateFORM_OPTION_TYPE(form_option_type, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORM_OPTION_TYPE(form_option_type, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORM_OPTION_TYPE(form_option_type, doSaveChanges);
					break;
			}
		}


		public void SaveFORM_OPTION_TYPEs(IEnumerable<FORM_OPTION_TYPEDto> form_option_types, bool doSaveChanges = true)
		{
			if (form_option_types == null)
			{
				return;
			}
			foreach (FORM_OPTION_TYPEDto instance in form_option_types)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORM_OPTION_TYPE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORM_OPTION_TYPE CRUD Operations


		#region FORM_INSTANCES_DELLOG CRUD Operations


		private IFORM_INSTANCES_DELLOGService form_instances_dellog;
		public virtual IFORM_INSTANCES_DELLOGService FORM_INSTANCES_DELLOGService
		{
			get
			{
				if (this.form_instances_dellog == null)
				{
					IFORM_INSTANCES_DELLOGAssembler assembler = new FORM_INSTANCES_DELLOGAssembler();
					IFORM_INSTANCES_DELLOGRepository repository = new FORM_INSTANCES_DELLOGRepository(this.UnitOfWork);
					this.form_instances_dellog = new FORM_INSTANCES_DELLOGService(assembler, repository);
				}
				return this.form_instances_dellog;
			}
		}


		public IQueryable<FORM_INSTANCES_DELLOG> FORM_INSTANCES_DELLOGs
		{
			get { return this.FORM_INSTANCES_DELLOGService.Repository.GetAll(); }
		}


		public IQueryable<FORM_INSTANCES_DELLOG> ReadFORM_INSTANCES_DELLOGs(Expression<Func<FORM_INSTANCES_DELLOG, bool>> filter, int dummy)
		{
			return this.FORM_INSTANCES_DELLOGService.Repository.Find(filter);
		}


		public IEnumerable<FORM_INSTANCES_DELLOGDto> ReadFORM_INSTANCES_DELLOGs()
		{
			return this.FORM_INSTANCES_DELLOGService.GetAll();
		}


		public IEnumerable<FORM_INSTANCES_DELLOGDto> ReadFORM_INSTANCES_DELLOGs(Expression<Func<FORM_INSTANCES_DELLOG, bool>> filter)
		{
			return this.FORM_INSTANCES_DELLOGService.Find(filter);
		}


		public IEnumerable<FORM_INSTANCES_DELLOGDto> ReadFORM_INSTANCES_DELLOGs(ISpecification<FORM_INSTANCES_DELLOG> specification)
		{
			return this.FORM_INSTANCES_DELLOGService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_INSTANCES_DELLOGDto> ReadFORM_INSTANCES_DELLOGs(IQueryable<FORM_INSTANCES_DELLOG> query)
		{
			return this.FORM_INSTANCES_DELLOGService.Assembler.Assemble(query);
		}


		public IEnumerable<FORM_INSTANCES_DELLOGDto> ReadFORM_INSTANCES_DELLOGs(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORM_INSTANCES_DELLOGService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORM_INSTANCES_DELLOGDto> ReadFORM_INSTANCES_DELLOGs(object[] keyWords)
		{
			return this.FORM_INSTANCES_DELLOGService.Find(keyWords);
		}


		public IEnumerable<FORM_INSTANCES_DELLOGDto> ReadFORM_INSTANCES_DELLOGsPaged(int startIndex, int pageSize)
		{
			return this.FORM_INSTANCES_DELLOGService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_INSTANCES_DELLOGDto> ReadFORM_INSTANCES_DELLOGsPaged(IQueryable<FORM_INSTANCES_DELLOG> source, int pageIndex, int pageSize)
		{
			return this.FORM_INSTANCES_DELLOGService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_INSTANCES_DELLOGDto> ReadFORM_INSTANCES_DELLOGsPaged(IQueryable<FORM_INSTANCES_DELLOG> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORM_INSTANCES_DELLOGService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_INSTANCES_DELLOGDto> ReadFORM_INSTANCES_DELLOGsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCES_DELLOGService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_INSTANCES_DELLOGDto> ReadFORM_INSTANCES_DELLOGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCES_DELLOGService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORM_INSTANCES_DELLOGDto> ReadFORM_INSTANCES_DELLOGsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_INSTANCES_DELLOG, bool>> filter)
		{
			return this.FORM_INSTANCES_DELLOGService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORM_INSTANCES_DELLOGDto ReadFORM_INSTANCES_DELLOGs(string dtoKey)
		{
			return this.FORM_INSTANCES_DELLOGService.GetByKey(dtoKey);
		}


		public int CountFORM_INSTANCES_DELLOGs()
		{
			return this.FORM_INSTANCES_DELLOGService.Count();
		}


		public int CountFORM_INSTANCES_DELLOGs(string filterExpression)
		{
			return this.FORM_INSTANCES_DELLOGService.Count(filterExpression);
		}


		public int CountFORM_INSTANCES_DELLOGs(Expression<Func<FORM_INSTANCES_DELLOG, bool>> filter)
		{
			return this.FORM_INSTANCES_DELLOGService.Count(filter);
		}


		public string CreateFORM_INSTANCES_DELLOG(FORM_INSTANCES_DELLOGDto form_instances_dellog, bool doSaveChanges = true)
		{
			string key = this.FORM_INSTANCES_DELLOGService.Add(form_instances_dellog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_INSTANCES_DELLOG(FORM_INSTANCES_DELLOGDto form_instances_dellog, bool doSaveChanges = true)
		{
			this.FORM_INSTANCES_DELLOGService.Update(form_instances_dellog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_INSTANCES_DELLOGs(IEnumerable<FORM_INSTANCES_DELLOGDto> form_instances_dellogs, bool doSaveChanges = true)
		{
			if (form_instances_dellogs == null)
			{
				return;
			}
			foreach (FORM_INSTANCES_DELLOGDto instance in form_instances_dellogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCES_DELLOGService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_INSTANCES_DELLOG(FORM_INSTANCES_DELLOGDto form_instances_dellog, bool doSaveChanges = true)
		{
			this.FORM_INSTANCES_DELLOGService.Delete(form_instances_dellog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_INSTANCES_DELLOGs(IEnumerable<FORM_INSTANCES_DELLOGDto> form_instances_dellogs, bool doSaveChanges = true)
		{
			if (form_instances_dellogs == null)
			{
				return;
			}
			foreach (FORM_INSTANCES_DELLOGDto instance in form_instances_dellogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCES_DELLOGService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORM_INSTANCES_DELLOG(FORM_INSTANCES_DELLOGDto form_instances_dellog, bool doSaveChanges = true)
		{
			switch (form_instances_dellog.RowState)
			{
				case RowState.Insert:
					this.CreateFORM_INSTANCES_DELLOG(form_instances_dellog, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORM_INSTANCES_DELLOG(form_instances_dellog, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORM_INSTANCES_DELLOG(form_instances_dellog, doSaveChanges);
					break;
			}
		}


		public void SaveFORM_INSTANCES_DELLOGs(IEnumerable<FORM_INSTANCES_DELLOGDto> form_instances_dellogs, bool doSaveChanges = true)
		{
			if (form_instances_dellogs == null)
			{
				return;
			}
			foreach (FORM_INSTANCES_DELLOGDto instance in form_instances_dellogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORM_INSTANCES_DELLOG(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORM_INSTANCES_DELLOG CRUD Operations


		#region FORM_INSTANCES_BK CRUD Operations


		private IFORM_INSTANCES_BKService form_instances_bk;
		public virtual IFORM_INSTANCES_BKService FORM_INSTANCES_BKService
		{
			get
			{
				if (this.form_instances_bk == null)
				{
					IFORM_INSTANCES_BKAssembler assembler = new FORM_INSTANCES_BKAssembler();
					IFORM_INSTANCES_BKRepository repository = new FORM_INSTANCES_BKRepository(this.UnitOfWork);
					this.form_instances_bk = new FORM_INSTANCES_BKService(assembler, repository);
				}
				return this.form_instances_bk;
			}
		}


		public IQueryable<FORM_INSTANCES_BK> FORM_INSTANCES_BKs
		{
			get { return this.FORM_INSTANCES_BKService.Repository.GetAll(); }
		}


		public IQueryable<FORM_INSTANCES_BK> ReadFORM_INSTANCES_BKs(Expression<Func<FORM_INSTANCES_BK, bool>> filter, int dummy)
		{
			return this.FORM_INSTANCES_BKService.Repository.Find(filter);
		}


		public IEnumerable<FORM_INSTANCES_BKDto> ReadFORM_INSTANCES_BKs()
		{
			return this.FORM_INSTANCES_BKService.GetAll();
		}


		public IEnumerable<FORM_INSTANCES_BKDto> ReadFORM_INSTANCES_BKs(Expression<Func<FORM_INSTANCES_BK, bool>> filter)
		{
			return this.FORM_INSTANCES_BKService.Find(filter);
		}


		public IEnumerable<FORM_INSTANCES_BKDto> ReadFORM_INSTANCES_BKs(ISpecification<FORM_INSTANCES_BK> specification)
		{
			return this.FORM_INSTANCES_BKService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_INSTANCES_BKDto> ReadFORM_INSTANCES_BKs(IQueryable<FORM_INSTANCES_BK> query)
		{
			return this.FORM_INSTANCES_BKService.Assembler.Assemble(query);
		}


		public IEnumerable<FORM_INSTANCES_BKDto> ReadFORM_INSTANCES_BKs(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORM_INSTANCES_BKService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORM_INSTANCES_BKDto> ReadFORM_INSTANCES_BKs(object[] keyWords)
		{
			return this.FORM_INSTANCES_BKService.Find(keyWords);
		}


		public IEnumerable<FORM_INSTANCES_BKDto> ReadFORM_INSTANCES_BKsPaged(int startIndex, int pageSize)
		{
			return this.FORM_INSTANCES_BKService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_INSTANCES_BKDto> ReadFORM_INSTANCES_BKsPaged(IQueryable<FORM_INSTANCES_BK> source, int pageIndex, int pageSize)
		{
			return this.FORM_INSTANCES_BKService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_INSTANCES_BKDto> ReadFORM_INSTANCES_BKsPaged(IQueryable<FORM_INSTANCES_BK> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORM_INSTANCES_BKService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_INSTANCES_BKDto> ReadFORM_INSTANCES_BKsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCES_BKService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_INSTANCES_BKDto> ReadFORM_INSTANCES_BKsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCES_BKService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORM_INSTANCES_BKDto> ReadFORM_INSTANCES_BKsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_INSTANCES_BK, bool>> filter)
		{
			return this.FORM_INSTANCES_BKService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORM_INSTANCES_BKDto ReadFORM_INSTANCES_BKs(string dtoKey)
		{
			return this.FORM_INSTANCES_BKService.GetByKey(dtoKey);
		}


		public int CountFORM_INSTANCES_BKs()
		{
			return this.FORM_INSTANCES_BKService.Count();
		}


		public int CountFORM_INSTANCES_BKs(string filterExpression)
		{
			return this.FORM_INSTANCES_BKService.Count(filterExpression);
		}


		public int CountFORM_INSTANCES_BKs(Expression<Func<FORM_INSTANCES_BK, bool>> filter)
		{
			return this.FORM_INSTANCES_BKService.Count(filter);
		}


		public string CreateFORM_INSTANCES_BK(FORM_INSTANCES_BKDto form_instances_bk, bool doSaveChanges = true)
		{
			string key = this.FORM_INSTANCES_BKService.Add(form_instances_bk);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_INSTANCES_BK(FORM_INSTANCES_BKDto form_instances_bk, bool doSaveChanges = true)
		{
			this.FORM_INSTANCES_BKService.Update(form_instances_bk);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_INSTANCES_BKs(IEnumerable<FORM_INSTANCES_BKDto> form_instances_bks, bool doSaveChanges = true)
		{
			if (form_instances_bks == null)
			{
				return;
			}
			foreach (FORM_INSTANCES_BKDto instance in form_instances_bks)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCES_BKService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_INSTANCES_BK(FORM_INSTANCES_BKDto form_instances_bk, bool doSaveChanges = true)
		{
			this.FORM_INSTANCES_BKService.Delete(form_instances_bk);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_INSTANCES_BKs(IEnumerable<FORM_INSTANCES_BKDto> form_instances_bks, bool doSaveChanges = true)
		{
			if (form_instances_bks == null)
			{
				return;
			}
			foreach (FORM_INSTANCES_BKDto instance in form_instances_bks)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCES_BKService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORM_INSTANCES_BK(FORM_INSTANCES_BKDto form_instances_bk, bool doSaveChanges = true)
		{
			switch (form_instances_bk.RowState)
			{
				case RowState.Insert:
					this.CreateFORM_INSTANCES_BK(form_instances_bk, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORM_INSTANCES_BK(form_instances_bk, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORM_INSTANCES_BK(form_instances_bk, doSaveChanges);
					break;
			}
		}


		public void SaveFORM_INSTANCES_BKs(IEnumerable<FORM_INSTANCES_BKDto> form_instances_bks, bool doSaveChanges = true)
		{
			if (form_instances_bks == null)
			{
				return;
			}
			foreach (FORM_INSTANCES_BKDto instance in form_instances_bks)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORM_INSTANCES_BK(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORM_INSTANCES_BK CRUD Operations


		#region FORM_INSTANCE CRUD Operations


		private IFORM_INSTANCEService form_instance;
		public virtual IFORM_INSTANCEService FORM_INSTANCEService
		{
			get
			{
				if (this.form_instance == null)
				{
					IFORM_INSTANCEAssembler assembler = new FORM_INSTANCEAssembler();
					IFORM_INSTANCERepository repository = new FORM_INSTANCERepository(this.UnitOfWork);
					this.form_instance = new FORM_INSTANCEService(assembler, repository);
				}
				return this.form_instance;
			}
		}


		public IQueryable<FORM_INSTANCE> FORM_INSTANCEs
		{
			get { return this.FORM_INSTANCEService.Repository.GetAll(); }
		}


		public IQueryable<FORM_INSTANCE> ReadFORM_INSTANCEs(Expression<Func<FORM_INSTANCE, bool>> filter, int dummy)
		{
			return this.FORM_INSTANCEService.Repository.Find(filter);
		}


		public IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEs()
		{
			return this.FORM_INSTANCEService.GetAll();
		}


		public IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEs(Expression<Func<FORM_INSTANCE, bool>> filter)
		{
			return this.FORM_INSTANCEService.Find(filter);
		}


		public IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEs(ISpecification<FORM_INSTANCE> specification)
		{
			return this.FORM_INSTANCEService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEs(IQueryable<FORM_INSTANCE> query)
		{
			return this.FORM_INSTANCEService.Assembler.Assemble(query);
		}


		public IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORM_INSTANCEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEs(object[] keyWords)
		{
			return this.FORM_INSTANCEService.Find(keyWords);
		}


		public IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEsPaged(int startIndex, int pageSize)
		{
			return this.FORM_INSTANCEService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEsPaged(IQueryable<FORM_INSTANCE> source, int pageIndex, int pageSize)
		{
			return this.FORM_INSTANCEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEsPaged(IQueryable<FORM_INSTANCE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORM_INSTANCEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_INSTANCE, bool>> filter)
		{
			return this.FORM_INSTANCEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORM_INSTANCEDto ReadFORM_INSTANCEs(string dtoKey)
		{
			return this.FORM_INSTANCEService.GetByKey(dtoKey);
		}


		public int CountFORM_INSTANCEs()
		{
			return this.FORM_INSTANCEService.Count();
		}


		public int CountFORM_INSTANCEs(string filterExpression)
		{
			return this.FORM_INSTANCEService.Count(filterExpression);
		}


		public int CountFORM_INSTANCEs(Expression<Func<FORM_INSTANCE, bool>> filter)
		{
			return this.FORM_INSTANCEService.Count(filter);
		}


		public string CreateFORM_INSTANCE(FORM_INSTANCEDto form_instance, bool doSaveChanges = true)
		{
			string key = this.FORM_INSTANCEService.Add(form_instance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_INSTANCE(FORM_INSTANCEDto form_instance, bool doSaveChanges = true)
		{
			this.FORM_INSTANCEService.Update(form_instance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_INSTANCEs(IEnumerable<FORM_INSTANCEDto> form_instances, bool doSaveChanges = true)
		{
			if (form_instances == null)
			{
				return;
			}
			foreach (FORM_INSTANCEDto instance in form_instances)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_INSTANCE(FORM_INSTANCEDto form_instance, bool doSaveChanges = true)
		{
			this.FORM_INSTANCEService.Delete(form_instance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_INSTANCEs(IEnumerable<FORM_INSTANCEDto> form_instances, bool doSaveChanges = true)
		{
			if (form_instances == null)
			{
				return;
			}
			foreach (FORM_INSTANCEDto instance in form_instances)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORM_INSTANCE(FORM_INSTANCEDto form_instance, bool doSaveChanges = true)
		{
			switch (form_instance.RowState)
			{
				case RowState.Insert:
					this.CreateFORM_INSTANCE(form_instance, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORM_INSTANCE(form_instance, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORM_INSTANCE(form_instance, doSaveChanges);
					break;
			}
		}


		public void SaveFORM_INSTANCEs(IEnumerable<FORM_INSTANCEDto> form_instances, bool doSaveChanges = true)
		{
			if (form_instances == null)
			{
				return;
			}
			foreach (FORM_INSTANCEDto instance in form_instances)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORM_INSTANCE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORM_INSTANCE CRUD Operations


		#region FORM_INSTANCE_TRANSLOG CRUD Operations


		private IFORM_INSTANCE_TRANSLOGService form_instance_translog;
		public virtual IFORM_INSTANCE_TRANSLOGService FORM_INSTANCE_TRANSLOGService
		{
			get
			{
				if (this.form_instance_translog == null)
				{
					IFORM_INSTANCE_TRANSLOGAssembler assembler = new FORM_INSTANCE_TRANSLOGAssembler();
					IFORM_INSTANCE_TRANSLOGRepository repository = new FORM_INSTANCE_TRANSLOGRepository(this.UnitOfWork);
					this.form_instance_translog = new FORM_INSTANCE_TRANSLOGService(assembler, repository);
				}
				return this.form_instance_translog;
			}
		}


		public IQueryable<FORM_INSTANCE_TRANSLOG> FORM_INSTANCE_TRANSLOGs
		{
			get { return this.FORM_INSTANCE_TRANSLOGService.Repository.GetAll(); }
		}


		public IQueryable<FORM_INSTANCE_TRANSLOG> ReadFORM_INSTANCE_TRANSLOGs(Expression<Func<FORM_INSTANCE_TRANSLOG, bool>> filter, int dummy)
		{
			return this.FORM_INSTANCE_TRANSLOGService.Repository.Find(filter);
		}


		public IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGs()
		{
			return this.FORM_INSTANCE_TRANSLOGService.GetAll();
		}


		public IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGs(Expression<Func<FORM_INSTANCE_TRANSLOG, bool>> filter)
		{
			return this.FORM_INSTANCE_TRANSLOGService.Find(filter);
		}


		public IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGs(ISpecification<FORM_INSTANCE_TRANSLOG> specification)
		{
			return this.FORM_INSTANCE_TRANSLOGService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGs(IQueryable<FORM_INSTANCE_TRANSLOG> query)
		{
			return this.FORM_INSTANCE_TRANSLOGService.Assembler.Assemble(query);
		}


		public IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGs(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORM_INSTANCE_TRANSLOGService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGs(object[] keyWords)
		{
			return this.FORM_INSTANCE_TRANSLOGService.Find(keyWords);
		}


		public IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGsPaged(int startIndex, int pageSize)
		{
			return this.FORM_INSTANCE_TRANSLOGService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGsPaged(IQueryable<FORM_INSTANCE_TRANSLOG> source, int pageIndex, int pageSize)
		{
			return this.FORM_INSTANCE_TRANSLOGService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGsPaged(IQueryable<FORM_INSTANCE_TRANSLOG> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORM_INSTANCE_TRANSLOGService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCE_TRANSLOGService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCE_TRANSLOGService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_INSTANCE_TRANSLOG, bool>> filter)
		{
			return this.FORM_INSTANCE_TRANSLOGService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORM_INSTANCE_TRANSLOGDto ReadFORM_INSTANCE_TRANSLOGs(string dtoKey)
		{
			return this.FORM_INSTANCE_TRANSLOGService.GetByKey(dtoKey);
		}


		public int CountFORM_INSTANCE_TRANSLOGs()
		{
			return this.FORM_INSTANCE_TRANSLOGService.Count();
		}


		public int CountFORM_INSTANCE_TRANSLOGs(string filterExpression)
		{
			return this.FORM_INSTANCE_TRANSLOGService.Count(filterExpression);
		}


		public int CountFORM_INSTANCE_TRANSLOGs(Expression<Func<FORM_INSTANCE_TRANSLOG, bool>> filter)
		{
			return this.FORM_INSTANCE_TRANSLOGService.Count(filter);
		}


		public string CreateFORM_INSTANCE_TRANSLOG(FORM_INSTANCE_TRANSLOGDto form_instance_translog, bool doSaveChanges = true)
		{
			string key = this.FORM_INSTANCE_TRANSLOGService.Add(form_instance_translog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_INSTANCE_TRANSLOG(FORM_INSTANCE_TRANSLOGDto form_instance_translog, bool doSaveChanges = true)
		{
			this.FORM_INSTANCE_TRANSLOGService.Update(form_instance_translog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_INSTANCE_TRANSLOGs(IEnumerable<FORM_INSTANCE_TRANSLOGDto> form_instance_translogs, bool doSaveChanges = true)
		{
			if (form_instance_translogs == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_TRANSLOGDto instance in form_instance_translogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCE_TRANSLOGService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_INSTANCE_TRANSLOG(FORM_INSTANCE_TRANSLOGDto form_instance_translog, bool doSaveChanges = true)
		{
			this.FORM_INSTANCE_TRANSLOGService.Delete(form_instance_translog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_INSTANCE_TRANSLOGs(IEnumerable<FORM_INSTANCE_TRANSLOGDto> form_instance_translogs, bool doSaveChanges = true)
		{
			if (form_instance_translogs == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_TRANSLOGDto instance in form_instance_translogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCE_TRANSLOGService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORM_INSTANCE_TRANSLOG(FORM_INSTANCE_TRANSLOGDto form_instance_translog, bool doSaveChanges = true)
		{
			switch (form_instance_translog.RowState)
			{
				case RowState.Insert:
					this.CreateFORM_INSTANCE_TRANSLOG(form_instance_translog, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORM_INSTANCE_TRANSLOG(form_instance_translog, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORM_INSTANCE_TRANSLOG(form_instance_translog, doSaveChanges);
					break;
			}
		}


		public void SaveFORM_INSTANCE_TRANSLOGs(IEnumerable<FORM_INSTANCE_TRANSLOGDto> form_instance_translogs, bool doSaveChanges = true)
		{
			if (form_instance_translogs == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_TRANSLOGDto instance in form_instance_translogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORM_INSTANCE_TRANSLOG(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORM_INSTANCE_TRANSLOG CRUD Operations


		#region FORM_INSTANCE_TARGETS_DELLOG CRUD Operations


		private IFORM_INSTANCE_TARGETS_DELLOGService form_instance_targets_dellog;
		public virtual IFORM_INSTANCE_TARGETS_DELLOGService FORM_INSTANCE_TARGETS_DELLOGService
		{
			get
			{
				if (this.form_instance_targets_dellog == null)
				{
					IFORM_INSTANCE_TARGETS_DELLOGAssembler assembler = new FORM_INSTANCE_TARGETS_DELLOGAssembler();
					IFORM_INSTANCE_TARGETS_DELLOGRepository repository = new FORM_INSTANCE_TARGETS_DELLOGRepository(this.UnitOfWork);
					this.form_instance_targets_dellog = new FORM_INSTANCE_TARGETS_DELLOGService(assembler, repository);
				}
				return this.form_instance_targets_dellog;
			}
		}


		public IQueryable<FORM_INSTANCE_TARGETS_DELLOG> FORM_INSTANCE_TARGETS_DELLOGs
		{
			get { return this.FORM_INSTANCE_TARGETS_DELLOGService.Repository.GetAll(); }
		}


		public IQueryable<FORM_INSTANCE_TARGETS_DELLOG> ReadFORM_INSTANCE_TARGETS_DELLOGs(Expression<Func<FORM_INSTANCE_TARGETS_DELLOG, bool>> filter, int dummy)
		{
			return this.FORM_INSTANCE_TARGETS_DELLOGService.Repository.Find(filter);
		}


		public IEnumerable<FORM_INSTANCE_TARGETS_DELLOGDto> ReadFORM_INSTANCE_TARGETS_DELLOGs()
		{
			return this.FORM_INSTANCE_TARGETS_DELLOGService.GetAll();
		}


		public IEnumerable<FORM_INSTANCE_TARGETS_DELLOGDto> ReadFORM_INSTANCE_TARGETS_DELLOGs(Expression<Func<FORM_INSTANCE_TARGETS_DELLOG, bool>> filter)
		{
			return this.FORM_INSTANCE_TARGETS_DELLOGService.Find(filter);
		}


		public IEnumerable<FORM_INSTANCE_TARGETS_DELLOGDto> ReadFORM_INSTANCE_TARGETS_DELLOGs(ISpecification<FORM_INSTANCE_TARGETS_DELLOG> specification)
		{
			return this.FORM_INSTANCE_TARGETS_DELLOGService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_INSTANCE_TARGETS_DELLOGDto> ReadFORM_INSTANCE_TARGETS_DELLOGs(IQueryable<FORM_INSTANCE_TARGETS_DELLOG> query)
		{
			return this.FORM_INSTANCE_TARGETS_DELLOGService.Assembler.Assemble(query);
		}


		public IEnumerable<FORM_INSTANCE_TARGETS_DELLOGDto> ReadFORM_INSTANCE_TARGETS_DELLOGs(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORM_INSTANCE_TARGETS_DELLOGService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORM_INSTANCE_TARGETS_DELLOGDto> ReadFORM_INSTANCE_TARGETS_DELLOGs(object[] keyWords)
		{
			return this.FORM_INSTANCE_TARGETS_DELLOGService.Find(keyWords);
		}


		public IEnumerable<FORM_INSTANCE_TARGETS_DELLOGDto> ReadFORM_INSTANCE_TARGETS_DELLOGsPaged(int startIndex, int pageSize)
		{
			return this.FORM_INSTANCE_TARGETS_DELLOGService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_INSTANCE_TARGETS_DELLOGDto> ReadFORM_INSTANCE_TARGETS_DELLOGsPaged(IQueryable<FORM_INSTANCE_TARGETS_DELLOG> source, int pageIndex, int pageSize)
		{
			return this.FORM_INSTANCE_TARGETS_DELLOGService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_INSTANCE_TARGETS_DELLOGDto> ReadFORM_INSTANCE_TARGETS_DELLOGsPaged(IQueryable<FORM_INSTANCE_TARGETS_DELLOG> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORM_INSTANCE_TARGETS_DELLOGService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_INSTANCE_TARGETS_DELLOGDto> ReadFORM_INSTANCE_TARGETS_DELLOGsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCE_TARGETS_DELLOGService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_INSTANCE_TARGETS_DELLOGDto> ReadFORM_INSTANCE_TARGETS_DELLOGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCE_TARGETS_DELLOGService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORM_INSTANCE_TARGETS_DELLOGDto> ReadFORM_INSTANCE_TARGETS_DELLOGsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_INSTANCE_TARGETS_DELLOG, bool>> filter)
		{
			return this.FORM_INSTANCE_TARGETS_DELLOGService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORM_INSTANCE_TARGETS_DELLOGDto ReadFORM_INSTANCE_TARGETS_DELLOGs(string dtoKey)
		{
			return this.FORM_INSTANCE_TARGETS_DELLOGService.GetByKey(dtoKey);
		}


		public int CountFORM_INSTANCE_TARGETS_DELLOGs()
		{
			return this.FORM_INSTANCE_TARGETS_DELLOGService.Count();
		}


		public int CountFORM_INSTANCE_TARGETS_DELLOGs(string filterExpression)
		{
			return this.FORM_INSTANCE_TARGETS_DELLOGService.Count(filterExpression);
		}


		public int CountFORM_INSTANCE_TARGETS_DELLOGs(Expression<Func<FORM_INSTANCE_TARGETS_DELLOG, bool>> filter)
		{
			return this.FORM_INSTANCE_TARGETS_DELLOGService.Count(filter);
		}


		public string CreateFORM_INSTANCE_TARGETS_DELLOG(FORM_INSTANCE_TARGETS_DELLOGDto form_instance_targets_dellog, bool doSaveChanges = true)
		{
			string key = this.FORM_INSTANCE_TARGETS_DELLOGService.Add(form_instance_targets_dellog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_INSTANCE_TARGETS_DELLOG(FORM_INSTANCE_TARGETS_DELLOGDto form_instance_targets_dellog, bool doSaveChanges = true)
		{
			this.FORM_INSTANCE_TARGETS_DELLOGService.Update(form_instance_targets_dellog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_INSTANCE_TARGETS_DELLOGs(IEnumerable<FORM_INSTANCE_TARGETS_DELLOGDto> form_instance_targets_dellogs, bool doSaveChanges = true)
		{
			if (form_instance_targets_dellogs == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_TARGETS_DELLOGDto instance in form_instance_targets_dellogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCE_TARGETS_DELLOGService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_INSTANCE_TARGETS_DELLOG(FORM_INSTANCE_TARGETS_DELLOGDto form_instance_targets_dellog, bool doSaveChanges = true)
		{
			this.FORM_INSTANCE_TARGETS_DELLOGService.Delete(form_instance_targets_dellog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_INSTANCE_TARGETS_DELLOGs(IEnumerable<FORM_INSTANCE_TARGETS_DELLOGDto> form_instance_targets_dellogs, bool doSaveChanges = true)
		{
			if (form_instance_targets_dellogs == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_TARGETS_DELLOGDto instance in form_instance_targets_dellogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCE_TARGETS_DELLOGService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORM_INSTANCE_TARGETS_DELLOG(FORM_INSTANCE_TARGETS_DELLOGDto form_instance_targets_dellog, bool doSaveChanges = true)
		{
			switch (form_instance_targets_dellog.RowState)
			{
				case RowState.Insert:
					this.CreateFORM_INSTANCE_TARGETS_DELLOG(form_instance_targets_dellog, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORM_INSTANCE_TARGETS_DELLOG(form_instance_targets_dellog, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORM_INSTANCE_TARGETS_DELLOG(form_instance_targets_dellog, doSaveChanges);
					break;
			}
		}


		public void SaveFORM_INSTANCE_TARGETS_DELLOGs(IEnumerable<FORM_INSTANCE_TARGETS_DELLOGDto> form_instance_targets_dellogs, bool doSaveChanges = true)
		{
			if (form_instance_targets_dellogs == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_TARGETS_DELLOGDto instance in form_instance_targets_dellogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORM_INSTANCE_TARGETS_DELLOG(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORM_INSTANCE_TARGETS_DELLOG CRUD Operations


		#region FORM_INSTANCE_TARGETS_BK CRUD Operations


		private IFORM_INSTANCE_TARGETS_BKService form_instance_targets_bk;
		public virtual IFORM_INSTANCE_TARGETS_BKService FORM_INSTANCE_TARGETS_BKService
		{
			get
			{
				if (this.form_instance_targets_bk == null)
				{
					IFORM_INSTANCE_TARGETS_BKAssembler assembler = new FORM_INSTANCE_TARGETS_BKAssembler();
					IFORM_INSTANCE_TARGETS_BKRepository repository = new FORM_INSTANCE_TARGETS_BKRepository(this.UnitOfWork);
					this.form_instance_targets_bk = new FORM_INSTANCE_TARGETS_BKService(assembler, repository);
				}
				return this.form_instance_targets_bk;
			}
		}


		public IQueryable<FORM_INSTANCE_TARGETS_BK> FORM_INSTANCE_TARGETS_BKs
		{
			get { return this.FORM_INSTANCE_TARGETS_BKService.Repository.GetAll(); }
		}


		public IQueryable<FORM_INSTANCE_TARGETS_BK> ReadFORM_INSTANCE_TARGETS_BKs(Expression<Func<FORM_INSTANCE_TARGETS_BK, bool>> filter, int dummy)
		{
			return this.FORM_INSTANCE_TARGETS_BKService.Repository.Find(filter);
		}


		public IEnumerable<FORM_INSTANCE_TARGETS_BKDto> ReadFORM_INSTANCE_TARGETS_BKs()
		{
			return this.FORM_INSTANCE_TARGETS_BKService.GetAll();
		}


		public IEnumerable<FORM_INSTANCE_TARGETS_BKDto> ReadFORM_INSTANCE_TARGETS_BKs(Expression<Func<FORM_INSTANCE_TARGETS_BK, bool>> filter)
		{
			return this.FORM_INSTANCE_TARGETS_BKService.Find(filter);
		}


		public IEnumerable<FORM_INSTANCE_TARGETS_BKDto> ReadFORM_INSTANCE_TARGETS_BKs(ISpecification<FORM_INSTANCE_TARGETS_BK> specification)
		{
			return this.FORM_INSTANCE_TARGETS_BKService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_INSTANCE_TARGETS_BKDto> ReadFORM_INSTANCE_TARGETS_BKs(IQueryable<FORM_INSTANCE_TARGETS_BK> query)
		{
			return this.FORM_INSTANCE_TARGETS_BKService.Assembler.Assemble(query);
		}


		public IEnumerable<FORM_INSTANCE_TARGETS_BKDto> ReadFORM_INSTANCE_TARGETS_BKs(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORM_INSTANCE_TARGETS_BKService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORM_INSTANCE_TARGETS_BKDto> ReadFORM_INSTANCE_TARGETS_BKs(object[] keyWords)
		{
			return this.FORM_INSTANCE_TARGETS_BKService.Find(keyWords);
		}


		public IEnumerable<FORM_INSTANCE_TARGETS_BKDto> ReadFORM_INSTANCE_TARGETS_BKsPaged(int startIndex, int pageSize)
		{
			return this.FORM_INSTANCE_TARGETS_BKService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_INSTANCE_TARGETS_BKDto> ReadFORM_INSTANCE_TARGETS_BKsPaged(IQueryable<FORM_INSTANCE_TARGETS_BK> source, int pageIndex, int pageSize)
		{
			return this.FORM_INSTANCE_TARGETS_BKService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_INSTANCE_TARGETS_BKDto> ReadFORM_INSTANCE_TARGETS_BKsPaged(IQueryable<FORM_INSTANCE_TARGETS_BK> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORM_INSTANCE_TARGETS_BKService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_INSTANCE_TARGETS_BKDto> ReadFORM_INSTANCE_TARGETS_BKsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCE_TARGETS_BKService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_INSTANCE_TARGETS_BKDto> ReadFORM_INSTANCE_TARGETS_BKsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCE_TARGETS_BKService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORM_INSTANCE_TARGETS_BKDto> ReadFORM_INSTANCE_TARGETS_BKsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_INSTANCE_TARGETS_BK, bool>> filter)
		{
			return this.FORM_INSTANCE_TARGETS_BKService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORM_INSTANCE_TARGETS_BKDto ReadFORM_INSTANCE_TARGETS_BKs(string dtoKey)
		{
			return this.FORM_INSTANCE_TARGETS_BKService.GetByKey(dtoKey);
		}


		public int CountFORM_INSTANCE_TARGETS_BKs()
		{
			return this.FORM_INSTANCE_TARGETS_BKService.Count();
		}


		public int CountFORM_INSTANCE_TARGETS_BKs(string filterExpression)
		{
			return this.FORM_INSTANCE_TARGETS_BKService.Count(filterExpression);
		}


		public int CountFORM_INSTANCE_TARGETS_BKs(Expression<Func<FORM_INSTANCE_TARGETS_BK, bool>> filter)
		{
			return this.FORM_INSTANCE_TARGETS_BKService.Count(filter);
		}


		public string CreateFORM_INSTANCE_TARGETS_BK(FORM_INSTANCE_TARGETS_BKDto form_instance_targets_bk, bool doSaveChanges = true)
		{
			string key = this.FORM_INSTANCE_TARGETS_BKService.Add(form_instance_targets_bk);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_INSTANCE_TARGETS_BK(FORM_INSTANCE_TARGETS_BKDto form_instance_targets_bk, bool doSaveChanges = true)
		{
			this.FORM_INSTANCE_TARGETS_BKService.Update(form_instance_targets_bk);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_INSTANCE_TARGETS_BKs(IEnumerable<FORM_INSTANCE_TARGETS_BKDto> form_instance_targets_bks, bool doSaveChanges = true)
		{
			if (form_instance_targets_bks == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_TARGETS_BKDto instance in form_instance_targets_bks)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCE_TARGETS_BKService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_INSTANCE_TARGETS_BK(FORM_INSTANCE_TARGETS_BKDto form_instance_targets_bk, bool doSaveChanges = true)
		{
			this.FORM_INSTANCE_TARGETS_BKService.Delete(form_instance_targets_bk);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_INSTANCE_TARGETS_BKs(IEnumerable<FORM_INSTANCE_TARGETS_BKDto> form_instance_targets_bks, bool doSaveChanges = true)
		{
			if (form_instance_targets_bks == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_TARGETS_BKDto instance in form_instance_targets_bks)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCE_TARGETS_BKService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORM_INSTANCE_TARGETS_BK(FORM_INSTANCE_TARGETS_BKDto form_instance_targets_bk, bool doSaveChanges = true)
		{
			switch (form_instance_targets_bk.RowState)
			{
				case RowState.Insert:
					this.CreateFORM_INSTANCE_TARGETS_BK(form_instance_targets_bk, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORM_INSTANCE_TARGETS_BK(form_instance_targets_bk, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORM_INSTANCE_TARGETS_BK(form_instance_targets_bk, doSaveChanges);
					break;
			}
		}


		public void SaveFORM_INSTANCE_TARGETS_BKs(IEnumerable<FORM_INSTANCE_TARGETS_BKDto> form_instance_targets_bks, bool doSaveChanges = true)
		{
			if (form_instance_targets_bks == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_TARGETS_BKDto instance in form_instance_targets_bks)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORM_INSTANCE_TARGETS_BK(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORM_INSTANCE_TARGETS_BK CRUD Operations


		#region FORM_INSTANCE_TARGET CRUD Operations


		private IFORM_INSTANCE_TARGETService form_instance_target;
		public virtual IFORM_INSTANCE_TARGETService FORM_INSTANCE_TARGETService
		{
			get
			{
				if (this.form_instance_target == null)
				{
					IFORM_INSTANCE_TARGETAssembler assembler = new FORM_INSTANCE_TARGETAssembler();
					IFORM_INSTANCE_TARGETRepository repository = new FORM_INSTANCE_TARGETRepository(this.UnitOfWork);
					this.form_instance_target = new FORM_INSTANCE_TARGETService(assembler, repository);
				}
				return this.form_instance_target;
			}
		}


		public IQueryable<FORM_INSTANCE_TARGET> FORM_INSTANCE_TARGETs
		{
			get { return this.FORM_INSTANCE_TARGETService.Repository.GetAll(); }
		}


		public IQueryable<FORM_INSTANCE_TARGET> ReadFORM_INSTANCE_TARGETs(Expression<Func<FORM_INSTANCE_TARGET, bool>> filter, int dummy)
		{
			return this.FORM_INSTANCE_TARGETService.Repository.Find(filter);
		}


		public IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETs()
		{
			return this.FORM_INSTANCE_TARGETService.GetAll();
		}


		public IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETs(Expression<Func<FORM_INSTANCE_TARGET, bool>> filter)
		{
			return this.FORM_INSTANCE_TARGETService.Find(filter);
		}


		public IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETs(ISpecification<FORM_INSTANCE_TARGET> specification)
		{
			return this.FORM_INSTANCE_TARGETService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETs(IQueryable<FORM_INSTANCE_TARGET> query)
		{
			return this.FORM_INSTANCE_TARGETService.Assembler.Assemble(query);
		}


		public IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETs(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORM_INSTANCE_TARGETService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETs(object[] keyWords)
		{
			return this.FORM_INSTANCE_TARGETService.Find(keyWords);
		}


		public IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETsPaged(int startIndex, int pageSize)
		{
			return this.FORM_INSTANCE_TARGETService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETsPaged(IQueryable<FORM_INSTANCE_TARGET> source, int pageIndex, int pageSize)
		{
			return this.FORM_INSTANCE_TARGETService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETsPaged(IQueryable<FORM_INSTANCE_TARGET> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORM_INSTANCE_TARGETService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCE_TARGETService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCE_TARGETService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_INSTANCE_TARGET, bool>> filter)
		{
			return this.FORM_INSTANCE_TARGETService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORM_INSTANCE_TARGETDto ReadFORM_INSTANCE_TARGETs(string dtoKey)
		{
			return this.FORM_INSTANCE_TARGETService.GetByKey(dtoKey);
		}


		public int CountFORM_INSTANCE_TARGETs()
		{
			return this.FORM_INSTANCE_TARGETService.Count();
		}


		public int CountFORM_INSTANCE_TARGETs(string filterExpression)
		{
			return this.FORM_INSTANCE_TARGETService.Count(filterExpression);
		}


		public int CountFORM_INSTANCE_TARGETs(Expression<Func<FORM_INSTANCE_TARGET, bool>> filter)
		{
			return this.FORM_INSTANCE_TARGETService.Count(filter);
		}


		public string CreateFORM_INSTANCE_TARGET(FORM_INSTANCE_TARGETDto form_instance_target, bool doSaveChanges = true)
		{
			string key = this.FORM_INSTANCE_TARGETService.Add(form_instance_target);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_INSTANCE_TARGET(FORM_INSTANCE_TARGETDto form_instance_target, bool doSaveChanges = true)
		{
			this.FORM_INSTANCE_TARGETService.Update(form_instance_target);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_INSTANCE_TARGETs(IEnumerable<FORM_INSTANCE_TARGETDto> form_instance_targets, bool doSaveChanges = true)
		{
			if (form_instance_targets == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_TARGETDto instance in form_instance_targets)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCE_TARGETService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_INSTANCE_TARGET(FORM_INSTANCE_TARGETDto form_instance_target, bool doSaveChanges = true)
		{
			this.FORM_INSTANCE_TARGETService.Delete(form_instance_target);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_INSTANCE_TARGETs(IEnumerable<FORM_INSTANCE_TARGETDto> form_instance_targets, bool doSaveChanges = true)
		{
			if (form_instance_targets == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_TARGETDto instance in form_instance_targets)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCE_TARGETService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORM_INSTANCE_TARGET(FORM_INSTANCE_TARGETDto form_instance_target, bool doSaveChanges = true)
		{
			switch (form_instance_target.RowState)
			{
				case RowState.Insert:
					this.CreateFORM_INSTANCE_TARGET(form_instance_target, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORM_INSTANCE_TARGET(form_instance_target, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORM_INSTANCE_TARGET(form_instance_target, doSaveChanges);
					break;
			}
		}


		public void SaveFORM_INSTANCE_TARGETs(IEnumerable<FORM_INSTANCE_TARGETDto> form_instance_targets, bool doSaveChanges = true)
		{
			if (form_instance_targets == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_TARGETDto instance in form_instance_targets)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORM_INSTANCE_TARGET(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORM_INSTANCE_TARGET CRUD Operations


		#region FORM_INSTANCE_RETURN_LOG CRUD Operations


		private IFORM_INSTANCE_RETURN_LOGService form_instance_return_log;
		public virtual IFORM_INSTANCE_RETURN_LOGService FORM_INSTANCE_RETURN_LOGService
		{
			get
			{
				if (this.form_instance_return_log == null)
				{
					IFORM_INSTANCE_RETURN_LOGAssembler assembler = new FORM_INSTANCE_RETURN_LOGAssembler();
					IFORM_INSTANCE_RETURN_LOGRepository repository = new FORM_INSTANCE_RETURN_LOGRepository(this.UnitOfWork);
					this.form_instance_return_log = new FORM_INSTANCE_RETURN_LOGService(assembler, repository);
				}
				return this.form_instance_return_log;
			}
		}


		public IQueryable<FORM_INSTANCE_RETURN_LOG> FORM_INSTANCE_RETURN_LOGs
		{
			get { return this.FORM_INSTANCE_RETURN_LOGService.Repository.GetAll(); }
		}


		public IQueryable<FORM_INSTANCE_RETURN_LOG> ReadFORM_INSTANCE_RETURN_LOGs(Expression<Func<FORM_INSTANCE_RETURN_LOG, bool>> filter, int dummy)
		{
			return this.FORM_INSTANCE_RETURN_LOGService.Repository.Find(filter);
		}


		public IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGs()
		{
			return this.FORM_INSTANCE_RETURN_LOGService.GetAll();
		}


		public IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGs(Expression<Func<FORM_INSTANCE_RETURN_LOG, bool>> filter)
		{
			return this.FORM_INSTANCE_RETURN_LOGService.Find(filter);
		}


		public IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGs(ISpecification<FORM_INSTANCE_RETURN_LOG> specification)
		{
			return this.FORM_INSTANCE_RETURN_LOGService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGs(IQueryable<FORM_INSTANCE_RETURN_LOG> query)
		{
			return this.FORM_INSTANCE_RETURN_LOGService.Assembler.Assemble(query);
		}


		public IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGs(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORM_INSTANCE_RETURN_LOGService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGs(object[] keyWords)
		{
			return this.FORM_INSTANCE_RETURN_LOGService.Find(keyWords);
		}


		public IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGsPaged(int startIndex, int pageSize)
		{
			return this.FORM_INSTANCE_RETURN_LOGService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGsPaged(IQueryable<FORM_INSTANCE_RETURN_LOG> source, int pageIndex, int pageSize)
		{
			return this.FORM_INSTANCE_RETURN_LOGService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGsPaged(IQueryable<FORM_INSTANCE_RETURN_LOG> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORM_INSTANCE_RETURN_LOGService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCE_RETURN_LOGService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCE_RETURN_LOGService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_INSTANCE_RETURN_LOG, bool>> filter)
		{
			return this.FORM_INSTANCE_RETURN_LOGService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORM_INSTANCE_RETURN_LOGDto ReadFORM_INSTANCE_RETURN_LOGs(string dtoKey)
		{
			return this.FORM_INSTANCE_RETURN_LOGService.GetByKey(dtoKey);
		}


		public int CountFORM_INSTANCE_RETURN_LOGs()
		{
			return this.FORM_INSTANCE_RETURN_LOGService.Count();
		}


		public int CountFORM_INSTANCE_RETURN_LOGs(string filterExpression)
		{
			return this.FORM_INSTANCE_RETURN_LOGService.Count(filterExpression);
		}


		public int CountFORM_INSTANCE_RETURN_LOGs(Expression<Func<FORM_INSTANCE_RETURN_LOG, bool>> filter)
		{
			return this.FORM_INSTANCE_RETURN_LOGService.Count(filter);
		}


		public string CreateFORM_INSTANCE_RETURN_LOG(FORM_INSTANCE_RETURN_LOGDto form_instance_return_log, bool doSaveChanges = true)
		{
			string key = this.FORM_INSTANCE_RETURN_LOGService.Add(form_instance_return_log);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_INSTANCE_RETURN_LOG(FORM_INSTANCE_RETURN_LOGDto form_instance_return_log, bool doSaveChanges = true)
		{
			this.FORM_INSTANCE_RETURN_LOGService.Update(form_instance_return_log);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_INSTANCE_RETURN_LOGs(IEnumerable<FORM_INSTANCE_RETURN_LOGDto> form_instance_return_logs, bool doSaveChanges = true)
		{
			if (form_instance_return_logs == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_RETURN_LOGDto instance in form_instance_return_logs)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCE_RETURN_LOGService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_INSTANCE_RETURN_LOG(FORM_INSTANCE_RETURN_LOGDto form_instance_return_log, bool doSaveChanges = true)
		{
			this.FORM_INSTANCE_RETURN_LOGService.Delete(form_instance_return_log);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_INSTANCE_RETURN_LOGs(IEnumerable<FORM_INSTANCE_RETURN_LOGDto> form_instance_return_logs, bool doSaveChanges = true)
		{
			if (form_instance_return_logs == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_RETURN_LOGDto instance in form_instance_return_logs)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCE_RETURN_LOGService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORM_INSTANCE_RETURN_LOG(FORM_INSTANCE_RETURN_LOGDto form_instance_return_log, bool doSaveChanges = true)
		{
			switch (form_instance_return_log.RowState)
			{
				case RowState.Insert:
					this.CreateFORM_INSTANCE_RETURN_LOG(form_instance_return_log, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORM_INSTANCE_RETURN_LOG(form_instance_return_log, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORM_INSTANCE_RETURN_LOG(form_instance_return_log, doSaveChanges);
					break;
			}
		}


		public void SaveFORM_INSTANCE_RETURN_LOGs(IEnumerable<FORM_INSTANCE_RETURN_LOGDto> form_instance_return_logs, bool doSaveChanges = true)
		{
			if (form_instance_return_logs == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_RETURN_LOGDto instance in form_instance_return_logs)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORM_INSTANCE_RETURN_LOG(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORM_INSTANCE_RETURN_LOG CRUD Operations


		#region FORM_INSTANCE_EXPRESSIONS_BK CRUD Operations


		private IFORM_INSTANCE_EXPRESSIONS_BKService form_instance_expressions_bk;
		public virtual IFORM_INSTANCE_EXPRESSIONS_BKService FORM_INSTANCE_EXPRESSIONS_BKService
		{
			get
			{
				if (this.form_instance_expressions_bk == null)
				{
					IFORM_INSTANCE_EXPRESSIONS_BKAssembler assembler = new FORM_INSTANCE_EXPRESSIONS_BKAssembler();
					IFORM_INSTANCE_EXPRESSIONS_BKRepository repository = new FORM_INSTANCE_EXPRESSIONS_BKRepository(this.UnitOfWork);
					this.form_instance_expressions_bk = new FORM_INSTANCE_EXPRESSIONS_BKService(assembler, repository);
				}
				return this.form_instance_expressions_bk;
			}
		}


		public IQueryable<FORM_INSTANCE_EXPRESSIONS_BK> FORM_INSTANCE_EXPRESSIONS_BKs
		{
			get { return this.FORM_INSTANCE_EXPRESSIONS_BKService.Repository.GetAll(); }
		}


		public IQueryable<FORM_INSTANCE_EXPRESSIONS_BK> ReadFORM_INSTANCE_EXPRESSIONS_BKs(Expression<Func<FORM_INSTANCE_EXPRESSIONS_BK, bool>> filter, int dummy)
		{
			return this.FORM_INSTANCE_EXPRESSIONS_BKService.Repository.Find(filter);
		}


		public IEnumerable<FORM_INSTANCE_EXPRESSIONS_BKDto> ReadFORM_INSTANCE_EXPRESSIONS_BKs()
		{
			return this.FORM_INSTANCE_EXPRESSIONS_BKService.GetAll();
		}


		public IEnumerable<FORM_INSTANCE_EXPRESSIONS_BKDto> ReadFORM_INSTANCE_EXPRESSIONS_BKs(Expression<Func<FORM_INSTANCE_EXPRESSIONS_BK, bool>> filter)
		{
			return this.FORM_INSTANCE_EXPRESSIONS_BKService.Find(filter);
		}


		public IEnumerable<FORM_INSTANCE_EXPRESSIONS_BKDto> ReadFORM_INSTANCE_EXPRESSIONS_BKs(ISpecification<FORM_INSTANCE_EXPRESSIONS_BK> specification)
		{
			return this.FORM_INSTANCE_EXPRESSIONS_BKService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_INSTANCE_EXPRESSIONS_BKDto> ReadFORM_INSTANCE_EXPRESSIONS_BKs(IQueryable<FORM_INSTANCE_EXPRESSIONS_BK> query)
		{
			return this.FORM_INSTANCE_EXPRESSIONS_BKService.Assembler.Assemble(query);
		}


		public IEnumerable<FORM_INSTANCE_EXPRESSIONS_BKDto> ReadFORM_INSTANCE_EXPRESSIONS_BKs(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORM_INSTANCE_EXPRESSIONS_BKService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORM_INSTANCE_EXPRESSIONS_BKDto> ReadFORM_INSTANCE_EXPRESSIONS_BKs(object[] keyWords)
		{
			return this.FORM_INSTANCE_EXPRESSIONS_BKService.Find(keyWords);
		}


		public IEnumerable<FORM_INSTANCE_EXPRESSIONS_BKDto> ReadFORM_INSTANCE_EXPRESSIONS_BKsPaged(int startIndex, int pageSize)
		{
			return this.FORM_INSTANCE_EXPRESSIONS_BKService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_INSTANCE_EXPRESSIONS_BKDto> ReadFORM_INSTANCE_EXPRESSIONS_BKsPaged(IQueryable<FORM_INSTANCE_EXPRESSIONS_BK> source, int pageIndex, int pageSize)
		{
			return this.FORM_INSTANCE_EXPRESSIONS_BKService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_INSTANCE_EXPRESSIONS_BKDto> ReadFORM_INSTANCE_EXPRESSIONS_BKsPaged(IQueryable<FORM_INSTANCE_EXPRESSIONS_BK> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORM_INSTANCE_EXPRESSIONS_BKService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_INSTANCE_EXPRESSIONS_BKDto> ReadFORM_INSTANCE_EXPRESSIONS_BKsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCE_EXPRESSIONS_BKService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_INSTANCE_EXPRESSIONS_BKDto> ReadFORM_INSTANCE_EXPRESSIONS_BKsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCE_EXPRESSIONS_BKService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORM_INSTANCE_EXPRESSIONS_BKDto> ReadFORM_INSTANCE_EXPRESSIONS_BKsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_INSTANCE_EXPRESSIONS_BK, bool>> filter)
		{
			return this.FORM_INSTANCE_EXPRESSIONS_BKService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORM_INSTANCE_EXPRESSIONS_BKDto ReadFORM_INSTANCE_EXPRESSIONS_BKs(string dtoKey)
		{
			return this.FORM_INSTANCE_EXPRESSIONS_BKService.GetByKey(dtoKey);
		}


		public int CountFORM_INSTANCE_EXPRESSIONS_BKs()
		{
			return this.FORM_INSTANCE_EXPRESSIONS_BKService.Count();
		}


		public int CountFORM_INSTANCE_EXPRESSIONS_BKs(string filterExpression)
		{
			return this.FORM_INSTANCE_EXPRESSIONS_BKService.Count(filterExpression);
		}


		public int CountFORM_INSTANCE_EXPRESSIONS_BKs(Expression<Func<FORM_INSTANCE_EXPRESSIONS_BK, bool>> filter)
		{
			return this.FORM_INSTANCE_EXPRESSIONS_BKService.Count(filter);
		}


		public string CreateFORM_INSTANCE_EXPRESSIONS_BK(FORM_INSTANCE_EXPRESSIONS_BKDto form_instance_expressions_bk, bool doSaveChanges = true)
		{
			string key = this.FORM_INSTANCE_EXPRESSIONS_BKService.Add(form_instance_expressions_bk);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_INSTANCE_EXPRESSIONS_BK(FORM_INSTANCE_EXPRESSIONS_BKDto form_instance_expressions_bk, bool doSaveChanges = true)
		{
			this.FORM_INSTANCE_EXPRESSIONS_BKService.Update(form_instance_expressions_bk);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_INSTANCE_EXPRESSIONS_BKs(IEnumerable<FORM_INSTANCE_EXPRESSIONS_BKDto> form_instance_expressions_bks, bool doSaveChanges = true)
		{
			if (form_instance_expressions_bks == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_EXPRESSIONS_BKDto instance in form_instance_expressions_bks)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCE_EXPRESSIONS_BKService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_INSTANCE_EXPRESSIONS_BK(FORM_INSTANCE_EXPRESSIONS_BKDto form_instance_expressions_bk, bool doSaveChanges = true)
		{
			this.FORM_INSTANCE_EXPRESSIONS_BKService.Delete(form_instance_expressions_bk);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_INSTANCE_EXPRESSIONS_BKs(IEnumerable<FORM_INSTANCE_EXPRESSIONS_BKDto> form_instance_expressions_bks, bool doSaveChanges = true)
		{
			if (form_instance_expressions_bks == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_EXPRESSIONS_BKDto instance in form_instance_expressions_bks)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCE_EXPRESSIONS_BKService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORM_INSTANCE_EXPRESSIONS_BK(FORM_INSTANCE_EXPRESSIONS_BKDto form_instance_expressions_bk, bool doSaveChanges = true)
		{
			switch (form_instance_expressions_bk.RowState)
			{
				case RowState.Insert:
					this.CreateFORM_INSTANCE_EXPRESSIONS_BK(form_instance_expressions_bk, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORM_INSTANCE_EXPRESSIONS_BK(form_instance_expressions_bk, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORM_INSTANCE_EXPRESSIONS_BK(form_instance_expressions_bk, doSaveChanges);
					break;
			}
		}


		public void SaveFORM_INSTANCE_EXPRESSIONS_BKs(IEnumerable<FORM_INSTANCE_EXPRESSIONS_BKDto> form_instance_expressions_bks, bool doSaveChanges = true)
		{
			if (form_instance_expressions_bks == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_EXPRESSIONS_BKDto instance in form_instance_expressions_bks)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORM_INSTANCE_EXPRESSIONS_BK(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORM_INSTANCE_EXPRESSIONS_BK CRUD Operations


		#region FORM_INSTANCE_EXPRESSION CRUD Operations


		private IFORM_INSTANCE_EXPRESSIONService form_instance_expression;
		public virtual IFORM_INSTANCE_EXPRESSIONService FORM_INSTANCE_EXPRESSIONService
		{
			get
			{
				if (this.form_instance_expression == null)
				{
					IFORM_INSTANCE_EXPRESSIONAssembler assembler = new FORM_INSTANCE_EXPRESSIONAssembler();
					IFORM_INSTANCE_EXPRESSIONRepository repository = new FORM_INSTANCE_EXPRESSIONRepository(this.UnitOfWork);
					this.form_instance_expression = new FORM_INSTANCE_EXPRESSIONService(assembler, repository);
				}
				return this.form_instance_expression;
			}
		}


		public IQueryable<FORM_INSTANCE_EXPRESSION> FORM_INSTANCE_EXPRESSIONs
		{
			get { return this.FORM_INSTANCE_EXPRESSIONService.Repository.GetAll(); }
		}


		public IQueryable<FORM_INSTANCE_EXPRESSION> ReadFORM_INSTANCE_EXPRESSIONs(Expression<Func<FORM_INSTANCE_EXPRESSION, bool>> filter, int dummy)
		{
			return this.FORM_INSTANCE_EXPRESSIONService.Repository.Find(filter);
		}


		public IEnumerable<FORM_INSTANCE_EXPRESSIONDto> ReadFORM_INSTANCE_EXPRESSIONs()
		{
			return this.FORM_INSTANCE_EXPRESSIONService.GetAll();
		}


		public IEnumerable<FORM_INSTANCE_EXPRESSIONDto> ReadFORM_INSTANCE_EXPRESSIONs(Expression<Func<FORM_INSTANCE_EXPRESSION, bool>> filter)
		{
			return this.FORM_INSTANCE_EXPRESSIONService.Find(filter);
		}


		public IEnumerable<FORM_INSTANCE_EXPRESSIONDto> ReadFORM_INSTANCE_EXPRESSIONs(ISpecification<FORM_INSTANCE_EXPRESSION> specification)
		{
			return this.FORM_INSTANCE_EXPRESSIONService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_INSTANCE_EXPRESSIONDto> ReadFORM_INSTANCE_EXPRESSIONs(IQueryable<FORM_INSTANCE_EXPRESSION> query)
		{
			return this.FORM_INSTANCE_EXPRESSIONService.Assembler.Assemble(query);
		}


		public IEnumerable<FORM_INSTANCE_EXPRESSIONDto> ReadFORM_INSTANCE_EXPRESSIONs(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORM_INSTANCE_EXPRESSIONService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORM_INSTANCE_EXPRESSIONDto> ReadFORM_INSTANCE_EXPRESSIONs(object[] keyWords)
		{
			return this.FORM_INSTANCE_EXPRESSIONService.Find(keyWords);
		}


		public IEnumerable<FORM_INSTANCE_EXPRESSIONDto> ReadFORM_INSTANCE_EXPRESSIONsPaged(int startIndex, int pageSize)
		{
			return this.FORM_INSTANCE_EXPRESSIONService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_INSTANCE_EXPRESSIONDto> ReadFORM_INSTANCE_EXPRESSIONsPaged(IQueryable<FORM_INSTANCE_EXPRESSION> source, int pageIndex, int pageSize)
		{
			return this.FORM_INSTANCE_EXPRESSIONService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_INSTANCE_EXPRESSIONDto> ReadFORM_INSTANCE_EXPRESSIONsPaged(IQueryable<FORM_INSTANCE_EXPRESSION> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORM_INSTANCE_EXPRESSIONService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_INSTANCE_EXPRESSIONDto> ReadFORM_INSTANCE_EXPRESSIONsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCE_EXPRESSIONService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_INSTANCE_EXPRESSIONDto> ReadFORM_INSTANCE_EXPRESSIONsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCE_EXPRESSIONService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORM_INSTANCE_EXPRESSIONDto> ReadFORM_INSTANCE_EXPRESSIONsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_INSTANCE_EXPRESSION, bool>> filter)
		{
			return this.FORM_INSTANCE_EXPRESSIONService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORM_INSTANCE_EXPRESSIONDto ReadFORM_INSTANCE_EXPRESSIONs(string dtoKey)
		{
			return this.FORM_INSTANCE_EXPRESSIONService.GetByKey(dtoKey);
		}


		public int CountFORM_INSTANCE_EXPRESSIONs()
		{
			return this.FORM_INSTANCE_EXPRESSIONService.Count();
		}


		public int CountFORM_INSTANCE_EXPRESSIONs(string filterExpression)
		{
			return this.FORM_INSTANCE_EXPRESSIONService.Count(filterExpression);
		}


		public int CountFORM_INSTANCE_EXPRESSIONs(Expression<Func<FORM_INSTANCE_EXPRESSION, bool>> filter)
		{
			return this.FORM_INSTANCE_EXPRESSIONService.Count(filter);
		}


		public string CreateFORM_INSTANCE_EXPRESSION(FORM_INSTANCE_EXPRESSIONDto form_instance_expression, bool doSaveChanges = true)
		{
			string key = this.FORM_INSTANCE_EXPRESSIONService.Add(form_instance_expression);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_INSTANCE_EXPRESSION(FORM_INSTANCE_EXPRESSIONDto form_instance_expression, bool doSaveChanges = true)
		{
			this.FORM_INSTANCE_EXPRESSIONService.Update(form_instance_expression);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_INSTANCE_EXPRESSIONs(IEnumerable<FORM_INSTANCE_EXPRESSIONDto> form_instance_expressions, bool doSaveChanges = true)
		{
			if (form_instance_expressions == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_EXPRESSIONDto instance in form_instance_expressions)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCE_EXPRESSIONService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_INSTANCE_EXPRESSION(FORM_INSTANCE_EXPRESSIONDto form_instance_expression, bool doSaveChanges = true)
		{
			this.FORM_INSTANCE_EXPRESSIONService.Delete(form_instance_expression);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_INSTANCE_EXPRESSIONs(IEnumerable<FORM_INSTANCE_EXPRESSIONDto> form_instance_expressions, bool doSaveChanges = true)
		{
			if (form_instance_expressions == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_EXPRESSIONDto instance in form_instance_expressions)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCE_EXPRESSIONService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORM_INSTANCE_EXPRESSION(FORM_INSTANCE_EXPRESSIONDto form_instance_expression, bool doSaveChanges = true)
		{
			switch (form_instance_expression.RowState)
			{
				case RowState.Insert:
					this.CreateFORM_INSTANCE_EXPRESSION(form_instance_expression, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORM_INSTANCE_EXPRESSION(form_instance_expression, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORM_INSTANCE_EXPRESSION(form_instance_expression, doSaveChanges);
					break;
			}
		}


		public void SaveFORM_INSTANCE_EXPRESSIONs(IEnumerable<FORM_INSTANCE_EXPRESSIONDto> form_instance_expressions, bool doSaveChanges = true)
		{
			if (form_instance_expressions == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_EXPRESSIONDto instance in form_instance_expressions)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORM_INSTANCE_EXPRESSION(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORM_INSTANCE_EXPRESSION CRUD Operations


		#region FORM_INSTANCE_ELEMENTS_BK CRUD Operations


		private IFORM_INSTANCE_ELEMENTS_BKService form_instance_elements_bk;
		public virtual IFORM_INSTANCE_ELEMENTS_BKService FORM_INSTANCE_ELEMENTS_BKService
		{
			get
			{
				if (this.form_instance_elements_bk == null)
				{
					IFORM_INSTANCE_ELEMENTS_BKAssembler assembler = new FORM_INSTANCE_ELEMENTS_BKAssembler();
					IFORM_INSTANCE_ELEMENTS_BKRepository repository = new FORM_INSTANCE_ELEMENTS_BKRepository(this.UnitOfWork);
					this.form_instance_elements_bk = new FORM_INSTANCE_ELEMENTS_BKService(assembler, repository);
				}
				return this.form_instance_elements_bk;
			}
		}


		public IQueryable<FORM_INSTANCE_ELEMENTS_BK> FORM_INSTANCE_ELEMENTS_BKs
		{
			get { return this.FORM_INSTANCE_ELEMENTS_BKService.Repository.GetAll(); }
		}


		public IQueryable<FORM_INSTANCE_ELEMENTS_BK> ReadFORM_INSTANCE_ELEMENTS_BKs(Expression<Func<FORM_INSTANCE_ELEMENTS_BK, bool>> filter, int dummy)
		{
			return this.FORM_INSTANCE_ELEMENTS_BKService.Repository.Find(filter);
		}


		public IEnumerable<FORM_INSTANCE_ELEMENTS_BKDto> ReadFORM_INSTANCE_ELEMENTS_BKs()
		{
			return this.FORM_INSTANCE_ELEMENTS_BKService.GetAll();
		}


		public IEnumerable<FORM_INSTANCE_ELEMENTS_BKDto> ReadFORM_INSTANCE_ELEMENTS_BKs(Expression<Func<FORM_INSTANCE_ELEMENTS_BK, bool>> filter)
		{
			return this.FORM_INSTANCE_ELEMENTS_BKService.Find(filter);
		}


		public IEnumerable<FORM_INSTANCE_ELEMENTS_BKDto> ReadFORM_INSTANCE_ELEMENTS_BKs(ISpecification<FORM_INSTANCE_ELEMENTS_BK> specification)
		{
			return this.FORM_INSTANCE_ELEMENTS_BKService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_INSTANCE_ELEMENTS_BKDto> ReadFORM_INSTANCE_ELEMENTS_BKs(IQueryable<FORM_INSTANCE_ELEMENTS_BK> query)
		{
			return this.FORM_INSTANCE_ELEMENTS_BKService.Assembler.Assemble(query);
		}


		public IEnumerable<FORM_INSTANCE_ELEMENTS_BKDto> ReadFORM_INSTANCE_ELEMENTS_BKs(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORM_INSTANCE_ELEMENTS_BKService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORM_INSTANCE_ELEMENTS_BKDto> ReadFORM_INSTANCE_ELEMENTS_BKs(object[] keyWords)
		{
			return this.FORM_INSTANCE_ELEMENTS_BKService.Find(keyWords);
		}


		public IEnumerable<FORM_INSTANCE_ELEMENTS_BKDto> ReadFORM_INSTANCE_ELEMENTS_BKsPaged(int startIndex, int pageSize)
		{
			return this.FORM_INSTANCE_ELEMENTS_BKService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_INSTANCE_ELEMENTS_BKDto> ReadFORM_INSTANCE_ELEMENTS_BKsPaged(IQueryable<FORM_INSTANCE_ELEMENTS_BK> source, int pageIndex, int pageSize)
		{
			return this.FORM_INSTANCE_ELEMENTS_BKService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_INSTANCE_ELEMENTS_BKDto> ReadFORM_INSTANCE_ELEMENTS_BKsPaged(IQueryable<FORM_INSTANCE_ELEMENTS_BK> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORM_INSTANCE_ELEMENTS_BKService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_INSTANCE_ELEMENTS_BKDto> ReadFORM_INSTANCE_ELEMENTS_BKsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCE_ELEMENTS_BKService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_INSTANCE_ELEMENTS_BKDto> ReadFORM_INSTANCE_ELEMENTS_BKsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCE_ELEMENTS_BKService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORM_INSTANCE_ELEMENTS_BKDto> ReadFORM_INSTANCE_ELEMENTS_BKsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_INSTANCE_ELEMENTS_BK, bool>> filter)
		{
			return this.FORM_INSTANCE_ELEMENTS_BKService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORM_INSTANCE_ELEMENTS_BKDto ReadFORM_INSTANCE_ELEMENTS_BKs(string dtoKey)
		{
			return this.FORM_INSTANCE_ELEMENTS_BKService.GetByKey(dtoKey);
		}


		public int CountFORM_INSTANCE_ELEMENTS_BKs()
		{
			return this.FORM_INSTANCE_ELEMENTS_BKService.Count();
		}


		public int CountFORM_INSTANCE_ELEMENTS_BKs(string filterExpression)
		{
			return this.FORM_INSTANCE_ELEMENTS_BKService.Count(filterExpression);
		}


		public int CountFORM_INSTANCE_ELEMENTS_BKs(Expression<Func<FORM_INSTANCE_ELEMENTS_BK, bool>> filter)
		{
			return this.FORM_INSTANCE_ELEMENTS_BKService.Count(filter);
		}


		public string CreateFORM_INSTANCE_ELEMENTS_BK(FORM_INSTANCE_ELEMENTS_BKDto form_instance_elements_bk, bool doSaveChanges = true)
		{
			string key = this.FORM_INSTANCE_ELEMENTS_BKService.Add(form_instance_elements_bk);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_INSTANCE_ELEMENTS_BK(FORM_INSTANCE_ELEMENTS_BKDto form_instance_elements_bk, bool doSaveChanges = true)
		{
			this.FORM_INSTANCE_ELEMENTS_BKService.Update(form_instance_elements_bk);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_INSTANCE_ELEMENTS_BKs(IEnumerable<FORM_INSTANCE_ELEMENTS_BKDto> form_instance_elements_bks, bool doSaveChanges = true)
		{
			if (form_instance_elements_bks == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_ELEMENTS_BKDto instance in form_instance_elements_bks)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCE_ELEMENTS_BKService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_INSTANCE_ELEMENTS_BK(FORM_INSTANCE_ELEMENTS_BKDto form_instance_elements_bk, bool doSaveChanges = true)
		{
			this.FORM_INSTANCE_ELEMENTS_BKService.Delete(form_instance_elements_bk);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_INSTANCE_ELEMENTS_BKs(IEnumerable<FORM_INSTANCE_ELEMENTS_BKDto> form_instance_elements_bks, bool doSaveChanges = true)
		{
			if (form_instance_elements_bks == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_ELEMENTS_BKDto instance in form_instance_elements_bks)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCE_ELEMENTS_BKService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORM_INSTANCE_ELEMENTS_BK(FORM_INSTANCE_ELEMENTS_BKDto form_instance_elements_bk, bool doSaveChanges = true)
		{
			switch (form_instance_elements_bk.RowState)
			{
				case RowState.Insert:
					this.CreateFORM_INSTANCE_ELEMENTS_BK(form_instance_elements_bk, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORM_INSTANCE_ELEMENTS_BK(form_instance_elements_bk, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORM_INSTANCE_ELEMENTS_BK(form_instance_elements_bk, doSaveChanges);
					break;
			}
		}


		public void SaveFORM_INSTANCE_ELEMENTS_BKs(IEnumerable<FORM_INSTANCE_ELEMENTS_BKDto> form_instance_elements_bks, bool doSaveChanges = true)
		{
			if (form_instance_elements_bks == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_ELEMENTS_BKDto instance in form_instance_elements_bks)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORM_INSTANCE_ELEMENTS_BK(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORM_INSTANCE_ELEMENTS_BK CRUD Operations


		#region FORM_INSTANCE_ELEMENT CRUD Operations


		private IFORM_INSTANCE_ELEMENTService form_instance_element;
		public virtual IFORM_INSTANCE_ELEMENTService FORM_INSTANCE_ELEMENTService
		{
			get
			{
				if (this.form_instance_element == null)
				{
					IFORM_INSTANCE_ELEMENTAssembler assembler = new FORM_INSTANCE_ELEMENTAssembler();
					IFORM_INSTANCE_ELEMENTRepository repository = new FORM_INSTANCE_ELEMENTRepository(this.UnitOfWork);
					this.form_instance_element = new FORM_INSTANCE_ELEMENTService(assembler, repository);
				}
				return this.form_instance_element;
			}
		}


		public IQueryable<FORM_INSTANCE_ELEMENT> FORM_INSTANCE_ELEMENTs
		{
			get { return this.FORM_INSTANCE_ELEMENTService.Repository.GetAll(); }
		}


		public IQueryable<FORM_INSTANCE_ELEMENT> ReadFORM_INSTANCE_ELEMENTs(Expression<Func<FORM_INSTANCE_ELEMENT, bool>> filter, int dummy)
		{
			return this.FORM_INSTANCE_ELEMENTService.Repository.Find(filter);
		}


		public IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTs()
		{
			return this.FORM_INSTANCE_ELEMENTService.GetAll();
		}


		public IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTs(Expression<Func<FORM_INSTANCE_ELEMENT, bool>> filter)
		{
			return this.FORM_INSTANCE_ELEMENTService.Find(filter);
		}


		public IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTs(ISpecification<FORM_INSTANCE_ELEMENT> specification)
		{
			return this.FORM_INSTANCE_ELEMENTService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTs(IQueryable<FORM_INSTANCE_ELEMENT> query)
		{
			return this.FORM_INSTANCE_ELEMENTService.Assembler.Assemble(query);
		}


		public IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTs(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORM_INSTANCE_ELEMENTService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTs(object[] keyWords)
		{
			return this.FORM_INSTANCE_ELEMENTService.Find(keyWords);
		}


		public IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTsPaged(int startIndex, int pageSize)
		{
			return this.FORM_INSTANCE_ELEMENTService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTsPaged(IQueryable<FORM_INSTANCE_ELEMENT> source, int pageIndex, int pageSize)
		{
			return this.FORM_INSTANCE_ELEMENTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTsPaged(IQueryable<FORM_INSTANCE_ELEMENT> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORM_INSTANCE_ELEMENTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCE_ELEMENTService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCE_ELEMENTService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_INSTANCE_ELEMENT, bool>> filter)
		{
			return this.FORM_INSTANCE_ELEMENTService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORM_INSTANCE_ELEMENTDto ReadFORM_INSTANCE_ELEMENTs(string dtoKey)
		{
			return this.FORM_INSTANCE_ELEMENTService.GetByKey(dtoKey);
		}


		public int CountFORM_INSTANCE_ELEMENTs()
		{
			return this.FORM_INSTANCE_ELEMENTService.Count();
		}


		public int CountFORM_INSTANCE_ELEMENTs(string filterExpression)
		{
			return this.FORM_INSTANCE_ELEMENTService.Count(filterExpression);
		}


		public int CountFORM_INSTANCE_ELEMENTs(Expression<Func<FORM_INSTANCE_ELEMENT, bool>> filter)
		{
			return this.FORM_INSTANCE_ELEMENTService.Count(filter);
		}


		public string CreateFORM_INSTANCE_ELEMENT(FORM_INSTANCE_ELEMENTDto form_instance_element, bool doSaveChanges = true)
		{
			string key = this.FORM_INSTANCE_ELEMENTService.Add(form_instance_element);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_INSTANCE_ELEMENT(FORM_INSTANCE_ELEMENTDto form_instance_element, bool doSaveChanges = true)
		{
			this.FORM_INSTANCE_ELEMENTService.Update(form_instance_element);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_INSTANCE_ELEMENTs(IEnumerable<FORM_INSTANCE_ELEMENTDto> form_instance_elements, bool doSaveChanges = true)
		{
			if (form_instance_elements == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_ELEMENTDto instance in form_instance_elements)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCE_ELEMENTService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_INSTANCE_ELEMENT(FORM_INSTANCE_ELEMENTDto form_instance_element, bool doSaveChanges = true)
		{
			this.FORM_INSTANCE_ELEMENTService.Delete(form_instance_element);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_INSTANCE_ELEMENTs(IEnumerable<FORM_INSTANCE_ELEMENTDto> form_instance_elements, bool doSaveChanges = true)
		{
			if (form_instance_elements == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_ELEMENTDto instance in form_instance_elements)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCE_ELEMENTService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORM_INSTANCE_ELEMENT(FORM_INSTANCE_ELEMENTDto form_instance_element, bool doSaveChanges = true)
		{
			switch (form_instance_element.RowState)
			{
				case RowState.Insert:
					this.CreateFORM_INSTANCE_ELEMENT(form_instance_element, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORM_INSTANCE_ELEMENT(form_instance_element, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORM_INSTANCE_ELEMENT(form_instance_element, doSaveChanges);
					break;
			}
		}


		public void SaveFORM_INSTANCE_ELEMENTs(IEnumerable<FORM_INSTANCE_ELEMENTDto> form_instance_elements, bool doSaveChanges = true)
		{
			if (form_instance_elements == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_ELEMENTDto instance in form_instance_elements)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORM_INSTANCE_ELEMENT(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORM_INSTANCE_ELEMENT CRUD Operations


		#region FORM_INSTANCE_BLOCK CRUD Operations


		private IFORM_INSTANCE_BLOCKService form_instance_block;
		public virtual IFORM_INSTANCE_BLOCKService FORM_INSTANCE_BLOCKService
		{
			get
			{
				if (this.form_instance_block == null)
				{
					IFORM_INSTANCE_BLOCKAssembler assembler = new FORM_INSTANCE_BLOCKAssembler();
					IFORM_INSTANCE_BLOCKRepository repository = new FORM_INSTANCE_BLOCKRepository(this.UnitOfWork);
					this.form_instance_block = new FORM_INSTANCE_BLOCKService(assembler, repository);
				}
				return this.form_instance_block;
			}
		}


		public IQueryable<FORM_INSTANCE_BLOCK> FORM_INSTANCE_BLOCKs
		{
			get { return this.FORM_INSTANCE_BLOCKService.Repository.GetAll(); }
		}


		public IQueryable<FORM_INSTANCE_BLOCK> ReadFORM_INSTANCE_BLOCKs(Expression<Func<FORM_INSTANCE_BLOCK, bool>> filter, int dummy)
		{
			return this.FORM_INSTANCE_BLOCKService.Repository.Find(filter);
		}


		public IEnumerable<FORM_INSTANCE_BLOCKDto> ReadFORM_INSTANCE_BLOCKs()
		{
			return this.FORM_INSTANCE_BLOCKService.GetAll();
		}


		public IEnumerable<FORM_INSTANCE_BLOCKDto> ReadFORM_INSTANCE_BLOCKs(Expression<Func<FORM_INSTANCE_BLOCK, bool>> filter)
		{
			return this.FORM_INSTANCE_BLOCKService.Find(filter);
		}


		public IEnumerable<FORM_INSTANCE_BLOCKDto> ReadFORM_INSTANCE_BLOCKs(ISpecification<FORM_INSTANCE_BLOCK> specification)
		{
			return this.FORM_INSTANCE_BLOCKService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_INSTANCE_BLOCKDto> ReadFORM_INSTANCE_BLOCKs(IQueryable<FORM_INSTANCE_BLOCK> query)
		{
			return this.FORM_INSTANCE_BLOCKService.Assembler.Assemble(query);
		}


		public IEnumerable<FORM_INSTANCE_BLOCKDto> ReadFORM_INSTANCE_BLOCKs(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORM_INSTANCE_BLOCKService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORM_INSTANCE_BLOCKDto> ReadFORM_INSTANCE_BLOCKs(object[] keyWords)
		{
			return this.FORM_INSTANCE_BLOCKService.Find(keyWords);
		}


		public IEnumerable<FORM_INSTANCE_BLOCKDto> ReadFORM_INSTANCE_BLOCKsPaged(int startIndex, int pageSize)
		{
			return this.FORM_INSTANCE_BLOCKService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_INSTANCE_BLOCKDto> ReadFORM_INSTANCE_BLOCKsPaged(IQueryable<FORM_INSTANCE_BLOCK> source, int pageIndex, int pageSize)
		{
			return this.FORM_INSTANCE_BLOCKService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_INSTANCE_BLOCKDto> ReadFORM_INSTANCE_BLOCKsPaged(IQueryable<FORM_INSTANCE_BLOCK> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORM_INSTANCE_BLOCKService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_INSTANCE_BLOCKDto> ReadFORM_INSTANCE_BLOCKsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCE_BLOCKService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_INSTANCE_BLOCKDto> ReadFORM_INSTANCE_BLOCKsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCE_BLOCKService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORM_INSTANCE_BLOCKDto> ReadFORM_INSTANCE_BLOCKsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_INSTANCE_BLOCK, bool>> filter)
		{
			return this.FORM_INSTANCE_BLOCKService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORM_INSTANCE_BLOCKDto ReadFORM_INSTANCE_BLOCKs(string dtoKey)
		{
			return this.FORM_INSTANCE_BLOCKService.GetByKey(dtoKey);
		}


		public int CountFORM_INSTANCE_BLOCKs()
		{
			return this.FORM_INSTANCE_BLOCKService.Count();
		}


		public int CountFORM_INSTANCE_BLOCKs(string filterExpression)
		{
			return this.FORM_INSTANCE_BLOCKService.Count(filterExpression);
		}


		public int CountFORM_INSTANCE_BLOCKs(Expression<Func<FORM_INSTANCE_BLOCK, bool>> filter)
		{
			return this.FORM_INSTANCE_BLOCKService.Count(filter);
		}


		public string CreateFORM_INSTANCE_BLOCK(FORM_INSTANCE_BLOCKDto form_instance_block, bool doSaveChanges = true)
		{
			string key = this.FORM_INSTANCE_BLOCKService.Add(form_instance_block);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_INSTANCE_BLOCK(FORM_INSTANCE_BLOCKDto form_instance_block, bool doSaveChanges = true)
		{
			this.FORM_INSTANCE_BLOCKService.Update(form_instance_block);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_INSTANCE_BLOCKs(IEnumerable<FORM_INSTANCE_BLOCKDto> form_instance_blocks, bool doSaveChanges = true)
		{
			if (form_instance_blocks == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_BLOCKDto instance in form_instance_blocks)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCE_BLOCKService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_INSTANCE_BLOCK(FORM_INSTANCE_BLOCKDto form_instance_block, bool doSaveChanges = true)
		{
			this.FORM_INSTANCE_BLOCKService.Delete(form_instance_block);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_INSTANCE_BLOCKs(IEnumerable<FORM_INSTANCE_BLOCKDto> form_instance_blocks, bool doSaveChanges = true)
		{
			if (form_instance_blocks == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_BLOCKDto instance in form_instance_blocks)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCE_BLOCKService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORM_INSTANCE_BLOCK(FORM_INSTANCE_BLOCKDto form_instance_block, bool doSaveChanges = true)
		{
			switch (form_instance_block.RowState)
			{
				case RowState.Insert:
					this.CreateFORM_INSTANCE_BLOCK(form_instance_block, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORM_INSTANCE_BLOCK(form_instance_block, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORM_INSTANCE_BLOCK(form_instance_block, doSaveChanges);
					break;
			}
		}


		public void SaveFORM_INSTANCE_BLOCKs(IEnumerable<FORM_INSTANCE_BLOCKDto> form_instance_blocks, bool doSaveChanges = true)
		{
			if (form_instance_blocks == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_BLOCKDto instance in form_instance_blocks)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORM_INSTANCE_BLOCK(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORM_INSTANCE_BLOCK CRUD Operations


		#region FORM_INSTANCE_ATTACHMENT CRUD Operations


		private IFORM_INSTANCE_ATTACHMENTService form_instance_attachment;
		public virtual IFORM_INSTANCE_ATTACHMENTService FORM_INSTANCE_ATTACHMENTService
		{
			get
			{
				if (this.form_instance_attachment == null)
				{
					IFORM_INSTANCE_ATTACHMENTAssembler assembler = new FORM_INSTANCE_ATTACHMENTAssembler();
					IFORM_INSTANCE_ATTACHMENTRepository repository = new FORM_INSTANCE_ATTACHMENTRepository(this.UnitOfWork);
					this.form_instance_attachment = new FORM_INSTANCE_ATTACHMENTService(assembler, repository);
				}
				return this.form_instance_attachment;
			}
		}


		public IQueryable<FORM_INSTANCE_ATTACHMENT> FORM_INSTANCE_ATTACHMENTs
		{
			get { return this.FORM_INSTANCE_ATTACHMENTService.Repository.GetAll(); }
		}


		public IQueryable<FORM_INSTANCE_ATTACHMENT> ReadFORM_INSTANCE_ATTACHMENTs(Expression<Func<FORM_INSTANCE_ATTACHMENT, bool>> filter, int dummy)
		{
			return this.FORM_INSTANCE_ATTACHMENTService.Repository.Find(filter);
		}


		public IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTs()
		{
			return this.FORM_INSTANCE_ATTACHMENTService.GetAll();
		}


		public IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTs(Expression<Func<FORM_INSTANCE_ATTACHMENT, bool>> filter)
		{
			return this.FORM_INSTANCE_ATTACHMENTService.Find(filter);
		}


		public IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTs(ISpecification<FORM_INSTANCE_ATTACHMENT> specification)
		{
			return this.FORM_INSTANCE_ATTACHMENTService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTs(IQueryable<FORM_INSTANCE_ATTACHMENT> query)
		{
			return this.FORM_INSTANCE_ATTACHMENTService.Assembler.Assemble(query);
		}


		public IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTs(string[] propertyToSearch, object[] keyWords)
		{
			return this.FORM_INSTANCE_ATTACHMENTService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTs(object[] keyWords)
		{
			return this.FORM_INSTANCE_ATTACHMENTService.Find(keyWords);
		}


		public IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTsPaged(int startIndex, int pageSize)
		{
			return this.FORM_INSTANCE_ATTACHMENTService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTsPaged(IQueryable<FORM_INSTANCE_ATTACHMENT> source, int pageIndex, int pageSize)
		{
			return this.FORM_INSTANCE_ATTACHMENTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTsPaged(IQueryable<FORM_INSTANCE_ATTACHMENT> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FORM_INSTANCE_ATTACHMENTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCE_ATTACHMENTService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCE_ATTACHMENTService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FORM_INSTANCE_ATTACHMENT, bool>> filter)
		{
			return this.FORM_INSTANCE_ATTACHMENTService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FORM_INSTANCE_ATTACHMENTDto ReadFORM_INSTANCE_ATTACHMENTs(string dtoKey)
		{
			return this.FORM_INSTANCE_ATTACHMENTService.GetByKey(dtoKey);
		}


		public int CountFORM_INSTANCE_ATTACHMENTs()
		{
			return this.FORM_INSTANCE_ATTACHMENTService.Count();
		}


		public int CountFORM_INSTANCE_ATTACHMENTs(string filterExpression)
		{
			return this.FORM_INSTANCE_ATTACHMENTService.Count(filterExpression);
		}


		public int CountFORM_INSTANCE_ATTACHMENTs(Expression<Func<FORM_INSTANCE_ATTACHMENT, bool>> filter)
		{
			return this.FORM_INSTANCE_ATTACHMENTService.Count(filter);
		}


		public string CreateFORM_INSTANCE_ATTACHMENT(FORM_INSTANCE_ATTACHMENTDto form_instance_attachment, bool doSaveChanges = true)
		{
			string key = this.FORM_INSTANCE_ATTACHMENTService.Add(form_instance_attachment);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_INSTANCE_ATTACHMENT(FORM_INSTANCE_ATTACHMENTDto form_instance_attachment, bool doSaveChanges = true)
		{
			this.FORM_INSTANCE_ATTACHMENTService.Update(form_instance_attachment);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_INSTANCE_ATTACHMENTs(IEnumerable<FORM_INSTANCE_ATTACHMENTDto> form_instance_attachments, bool doSaveChanges = true)
		{
			if (form_instance_attachments == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_ATTACHMENTDto instance in form_instance_attachments)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCE_ATTACHMENTService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_INSTANCE_ATTACHMENT(FORM_INSTANCE_ATTACHMENTDto form_instance_attachment, bool doSaveChanges = true)
		{
			this.FORM_INSTANCE_ATTACHMENTService.Delete(form_instance_attachment);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_INSTANCE_ATTACHMENTs(IEnumerable<FORM_INSTANCE_ATTACHMENTDto> form_instance_attachments, bool doSaveChanges = true)
		{
			if (form_instance_attachments == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_ATTACHMENTDto instance in form_instance_attachments)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCE_ATTACHMENTService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFORM_INSTANCE_ATTACHMENT(FORM_INSTANCE_ATTACHMENTDto form_instance_attachment, bool doSaveChanges = true)
		{
			switch (form_instance_attachment.RowState)
			{
				case RowState.Insert:
					this.CreateFORM_INSTANCE_ATTACHMENT(form_instance_attachment, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFORM_INSTANCE_ATTACHMENT(form_instance_attachment, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFORM_INSTANCE_ATTACHMENT(form_instance_attachment, doSaveChanges);
					break;
			}
		}


		public void SaveFORM_INSTANCE_ATTACHMENTs(IEnumerable<FORM_INSTANCE_ATTACHMENTDto> form_instance_attachments, bool doSaveChanges = true)
		{
			if (form_instance_attachments == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_ATTACHMENTDto instance in form_instance_attachments)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFORM_INSTANCE_ATTACHMENT(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FORM_INSTANCE_ATTACHMENT CRUD Operations


		#region FIXMEMBERDATUM CRUD Operations


		private IFIXMEMBERDATUMService fixmemberdatum;
		public virtual IFIXMEMBERDATUMService FIXMEMBERDATUMService
		{
			get
			{
				if (this.fixmemberdatum == null)
				{
					IFIXMEMBERDATUMAssembler assembler = new FIXMEMBERDATUMAssembler();
					IFIXMEMBERDATUMRepository repository = new FIXMEMBERDATUMRepository(this.UnitOfWork);
					this.fixmemberdatum = new FIXMEMBERDATUMService(assembler, repository);
				}
				return this.fixmemberdatum;
			}
		}


		public IQueryable<FIXMEMBERDATUM> FIXMEMBERDATa
		{
			get { return this.FIXMEMBERDATUMService.Repository.GetAll(); }
		}


		public IQueryable<FIXMEMBERDATUM> ReadFIXMEMBERDATa(Expression<Func<FIXMEMBERDATUM, bool>> filter, int dummy)
		{
			return this.FIXMEMBERDATUMService.Repository.Find(filter);
		}


		public IEnumerable<FIXMEMBERDATUMDto> ReadFIXMEMBERDATa()
		{
			return this.FIXMEMBERDATUMService.GetAll();
		}


		public IEnumerable<FIXMEMBERDATUMDto> ReadFIXMEMBERDATa(Expression<Func<FIXMEMBERDATUM, bool>> filter)
		{
			return this.FIXMEMBERDATUMService.Find(filter);
		}


		public IEnumerable<FIXMEMBERDATUMDto> ReadFIXMEMBERDATa(ISpecification<FIXMEMBERDATUM> specification)
		{
			return this.FIXMEMBERDATUMService.Find(specification.GetExpression());
		}


		public IEnumerable<FIXMEMBERDATUMDto> ReadFIXMEMBERDATa(IQueryable<FIXMEMBERDATUM> query)
		{
			return this.FIXMEMBERDATUMService.Assembler.Assemble(query);
		}


		public IEnumerable<FIXMEMBERDATUMDto> ReadFIXMEMBERDATa(string[] propertyToSearch, object[] keyWords)
		{
			return this.FIXMEMBERDATUMService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<FIXMEMBERDATUMDto> ReadFIXMEMBERDATa(object[] keyWords)
		{
			return this.FIXMEMBERDATUMService.Find(keyWords);
		}


		public IEnumerable<FIXMEMBERDATUMDto> ReadFIXMEMBERDATaPaged(int startIndex, int pageSize)
		{
			return this.FIXMEMBERDATUMService.Find(startIndex, pageSize);
		}


		public IEnumerable<FIXMEMBERDATUMDto> ReadFIXMEMBERDATaPaged(IQueryable<FIXMEMBERDATUM> source, int pageIndex, int pageSize)
		{
			return this.FIXMEMBERDATUMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FIXMEMBERDATUMDto> ReadFIXMEMBERDATaPaged(IQueryable<FIXMEMBERDATUM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.FIXMEMBERDATUMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<FIXMEMBERDATUMDto> ReadFIXMEMBERDATaFiltered(string sortExpression, string filterExpression)
		{
			return this.FIXMEMBERDATUMService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FIXMEMBERDATUMDto> ReadFIXMEMBERDATaPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FIXMEMBERDATUMService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<FIXMEMBERDATUMDto> ReadFIXMEMBERDATaPagedAndFiltered(int startIndex, int pageSize, Expression<Func<FIXMEMBERDATUM, bool>> filter)
		{
			return this.FIXMEMBERDATUMService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public FIXMEMBERDATUMDto ReadFIXMEMBERDATa(string dtoKey)
		{
			return this.FIXMEMBERDATUMService.GetByKey(dtoKey);
		}


		public int CountFIXMEMBERDATa()
		{
			return this.FIXMEMBERDATUMService.Count();
		}


		public int CountFIXMEMBERDATa(string filterExpression)
		{
			return this.FIXMEMBERDATUMService.Count(filterExpression);
		}


		public int CountFIXMEMBERDATa(Expression<Func<FIXMEMBERDATUM, bool>> filter)
		{
			return this.FIXMEMBERDATUMService.Count(filter);
		}


		public string CreateFIXMEMBERDATUM(FIXMEMBERDATUMDto fixmemberdatum, bool doSaveChanges = true)
		{
			string key = this.FIXMEMBERDATUMService.Add(fixmemberdatum);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFIXMEMBERDATUM(FIXMEMBERDATUMDto fixmemberdatum, bool doSaveChanges = true)
		{
			this.FIXMEMBERDATUMService.Update(fixmemberdatum);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFIXMEMBERDATa(IEnumerable<FIXMEMBERDATUMDto> fixmemberdata, bool doSaveChanges = true)
		{
			if (fixmemberdata == null)
			{
				return;
			}
			foreach (FIXMEMBERDATUMDto instance in fixmemberdata)
			{
				if (instance == null)
				{
					continue;
				}


				this.FIXMEMBERDATUMService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFIXMEMBERDATUM(FIXMEMBERDATUMDto fixmemberdatum, bool doSaveChanges = true)
		{
			this.FIXMEMBERDATUMService.Delete(fixmemberdatum);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFIXMEMBERDATa(IEnumerable<FIXMEMBERDATUMDto> fixmemberdata, bool doSaveChanges = true)
		{
			if (fixmemberdata == null)
			{
				return;
			}
			foreach (FIXMEMBERDATUMDto instance in fixmemberdata)
			{
				if (instance == null)
				{
					continue;
				}


				this.FIXMEMBERDATUMService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveFIXMEMBERDATUM(FIXMEMBERDATUMDto fixmemberdatum, bool doSaveChanges = true)
		{
			switch (fixmemberdatum.RowState)
			{
				case RowState.Insert:
					this.CreateFIXMEMBERDATUM(fixmemberdatum, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateFIXMEMBERDATUM(fixmemberdatum, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteFIXMEMBERDATUM(fixmemberdatum, doSaveChanges);
					break;
			}
		}


		public void SaveFIXMEMBERDATa(IEnumerable<FIXMEMBERDATUMDto> fixmemberdata, bool doSaveChanges = true)
		{
			if (fixmemberdata == null)
			{
				return;
			}
			foreach (FIXMEMBERDATUMDto instance in fixmemberdata)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveFIXMEMBERDATUM(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion FIXMEMBERDATUM CRUD Operations


		#region ELEARNINGITEM CRUD Operations


		private IELEARNINGITEMService elearningitem;
		public virtual IELEARNINGITEMService ELEARNINGITEMService
		{
			get
			{
				if (this.elearningitem == null)
				{
					IELEARNINGITEMAssembler assembler = new ELEARNINGITEMAssembler();
					IELEARNINGITEMRepository repository = new ELEARNINGITEMRepository(this.UnitOfWork);
					this.elearningitem = new ELEARNINGITEMService(assembler, repository);
				}
				return this.elearningitem;
			}
		}


		public IQueryable<ELEARNINGITEM> ELEARNINGITEMs
		{
			get { return this.ELEARNINGITEMService.Repository.GetAll(); }
		}


		public IQueryable<ELEARNINGITEM> ReadELEARNINGITEMs(Expression<Func<ELEARNINGITEM, bool>> filter, int dummy)
		{
			return this.ELEARNINGITEMService.Repository.Find(filter);
		}


		public IEnumerable<ELEARNINGITEMDto> ReadELEARNINGITEMs()
		{
			return this.ELEARNINGITEMService.GetAll();
		}


		public IEnumerable<ELEARNINGITEMDto> ReadELEARNINGITEMs(Expression<Func<ELEARNINGITEM, bool>> filter)
		{
			return this.ELEARNINGITEMService.Find(filter);
		}


		public IEnumerable<ELEARNINGITEMDto> ReadELEARNINGITEMs(ISpecification<ELEARNINGITEM> specification)
		{
			return this.ELEARNINGITEMService.Find(specification.GetExpression());
		}


		public IEnumerable<ELEARNINGITEMDto> ReadELEARNINGITEMs(IQueryable<ELEARNINGITEM> query)
		{
			return this.ELEARNINGITEMService.Assembler.Assemble(query);
		}


		public IEnumerable<ELEARNINGITEMDto> ReadELEARNINGITEMs(string[] propertyToSearch, object[] keyWords)
		{
			return this.ELEARNINGITEMService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<ELEARNINGITEMDto> ReadELEARNINGITEMs(object[] keyWords)
		{
			return this.ELEARNINGITEMService.Find(keyWords);
		}


		public IEnumerable<ELEARNINGITEMDto> ReadELEARNINGITEMsPaged(int startIndex, int pageSize)
		{
			return this.ELEARNINGITEMService.Find(startIndex, pageSize);
		}


		public IEnumerable<ELEARNINGITEMDto> ReadELEARNINGITEMsPaged(IQueryable<ELEARNINGITEM> source, int pageIndex, int pageSize)
		{
			return this.ELEARNINGITEMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<ELEARNINGITEMDto> ReadELEARNINGITEMsPaged(IQueryable<ELEARNINGITEM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.ELEARNINGITEMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<ELEARNINGITEMDto> ReadELEARNINGITEMsFiltered(string sortExpression, string filterExpression)
		{
			return this.ELEARNINGITEMService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<ELEARNINGITEMDto> ReadELEARNINGITEMsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.ELEARNINGITEMService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<ELEARNINGITEMDto> ReadELEARNINGITEMsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<ELEARNINGITEM, bool>> filter)
		{
			return this.ELEARNINGITEMService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public ELEARNINGITEMDto ReadELEARNINGITEMs(string dtoKey)
		{
			return this.ELEARNINGITEMService.GetByKey(dtoKey);
		}


		public int CountELEARNINGITEMs()
		{
			return this.ELEARNINGITEMService.Count();
		}


		public int CountELEARNINGITEMs(string filterExpression)
		{
			return this.ELEARNINGITEMService.Count(filterExpression);
		}


		public int CountELEARNINGITEMs(Expression<Func<ELEARNINGITEM, bool>> filter)
		{
			return this.ELEARNINGITEMService.Count(filter);
		}


		public string CreateELEARNINGITEM(ELEARNINGITEMDto elearningitem, bool doSaveChanges = true)
		{
			string key = this.ELEARNINGITEMService.Add(elearningitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateELEARNINGITEM(ELEARNINGITEMDto elearningitem, bool doSaveChanges = true)
		{
			this.ELEARNINGITEMService.Update(elearningitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateELEARNINGITEMs(IEnumerable<ELEARNINGITEMDto> elearningitems, bool doSaveChanges = true)
		{
			if (elearningitems == null)
			{
				return;
			}
			foreach (ELEARNINGITEMDto instance in elearningitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.ELEARNINGITEMService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteELEARNINGITEM(ELEARNINGITEMDto elearningitem, bool doSaveChanges = true)
		{
			this.ELEARNINGITEMService.Delete(elearningitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteELEARNINGITEMs(IEnumerable<ELEARNINGITEMDto> elearningitems, bool doSaveChanges = true)
		{
			if (elearningitems == null)
			{
				return;
			}
			foreach (ELEARNINGITEMDto instance in elearningitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.ELEARNINGITEMService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveELEARNINGITEM(ELEARNINGITEMDto elearningitem, bool doSaveChanges = true)
		{
			switch (elearningitem.RowState)
			{
				case RowState.Insert:
					this.CreateELEARNINGITEM(elearningitem, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateELEARNINGITEM(elearningitem, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteELEARNINGITEM(elearningitem, doSaveChanges);
					break;
			}
		}


		public void SaveELEARNINGITEMs(IEnumerable<ELEARNINGITEMDto> elearningitems, bool doSaveChanges = true)
		{
			if (elearningitems == null)
			{
				return;
			}
			foreach (ELEARNINGITEMDto instance in elearningitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveELEARNINGITEM(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion ELEARNINGITEM CRUD Operations


		#region ELEARNINGEMPITEMLOG CRUD Operations


		private IELEARNINGEMPITEMLOGService elearningempitemlog;
		public virtual IELEARNINGEMPITEMLOGService ELEARNINGEMPITEMLOGService
		{
			get
			{
				if (this.elearningempitemlog == null)
				{
					IELEARNINGEMPITEMLOGAssembler assembler = new ELEARNINGEMPITEMLOGAssembler();
					IELEARNINGEMPITEMLOGRepository repository = new ELEARNINGEMPITEMLOGRepository(this.UnitOfWork);
					this.elearningempitemlog = new ELEARNINGEMPITEMLOGService(assembler, repository);
				}
				return this.elearningempitemlog;
			}
		}


		public IQueryable<ELEARNINGEMPITEMLOG> ELEARNINGEMPITEMLOGs
		{
			get { return this.ELEARNINGEMPITEMLOGService.Repository.GetAll(); }
		}


		public IQueryable<ELEARNINGEMPITEMLOG> ReadELEARNINGEMPITEMLOGs(Expression<Func<ELEARNINGEMPITEMLOG, bool>> filter, int dummy)
		{
			return this.ELEARNINGEMPITEMLOGService.Repository.Find(filter);
		}


		public IEnumerable<ELEARNINGEMPITEMLOGDto> ReadELEARNINGEMPITEMLOGs()
		{
			return this.ELEARNINGEMPITEMLOGService.GetAll();
		}


		public IEnumerable<ELEARNINGEMPITEMLOGDto> ReadELEARNINGEMPITEMLOGs(Expression<Func<ELEARNINGEMPITEMLOG, bool>> filter)
		{
			return this.ELEARNINGEMPITEMLOGService.Find(filter);
		}


		public IEnumerable<ELEARNINGEMPITEMLOGDto> ReadELEARNINGEMPITEMLOGs(ISpecification<ELEARNINGEMPITEMLOG> specification)
		{
			return this.ELEARNINGEMPITEMLOGService.Find(specification.GetExpression());
		}


		public IEnumerable<ELEARNINGEMPITEMLOGDto> ReadELEARNINGEMPITEMLOGs(IQueryable<ELEARNINGEMPITEMLOG> query)
		{
			return this.ELEARNINGEMPITEMLOGService.Assembler.Assemble(query);
		}


		public IEnumerable<ELEARNINGEMPITEMLOGDto> ReadELEARNINGEMPITEMLOGs(string[] propertyToSearch, object[] keyWords)
		{
			return this.ELEARNINGEMPITEMLOGService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<ELEARNINGEMPITEMLOGDto> ReadELEARNINGEMPITEMLOGs(object[] keyWords)
		{
			return this.ELEARNINGEMPITEMLOGService.Find(keyWords);
		}


		public IEnumerable<ELEARNINGEMPITEMLOGDto> ReadELEARNINGEMPITEMLOGsPaged(int startIndex, int pageSize)
		{
			return this.ELEARNINGEMPITEMLOGService.Find(startIndex, pageSize);
		}


		public IEnumerable<ELEARNINGEMPITEMLOGDto> ReadELEARNINGEMPITEMLOGsPaged(IQueryable<ELEARNINGEMPITEMLOG> source, int pageIndex, int pageSize)
		{
			return this.ELEARNINGEMPITEMLOGService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<ELEARNINGEMPITEMLOGDto> ReadELEARNINGEMPITEMLOGsPaged(IQueryable<ELEARNINGEMPITEMLOG> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.ELEARNINGEMPITEMLOGService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<ELEARNINGEMPITEMLOGDto> ReadELEARNINGEMPITEMLOGsFiltered(string sortExpression, string filterExpression)
		{
			return this.ELEARNINGEMPITEMLOGService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<ELEARNINGEMPITEMLOGDto> ReadELEARNINGEMPITEMLOGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.ELEARNINGEMPITEMLOGService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<ELEARNINGEMPITEMLOGDto> ReadELEARNINGEMPITEMLOGsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<ELEARNINGEMPITEMLOG, bool>> filter)
		{
			return this.ELEARNINGEMPITEMLOGService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public ELEARNINGEMPITEMLOGDto ReadELEARNINGEMPITEMLOGs(string dtoKey)
		{
			return this.ELEARNINGEMPITEMLOGService.GetByKey(dtoKey);
		}


		public int CountELEARNINGEMPITEMLOGs()
		{
			return this.ELEARNINGEMPITEMLOGService.Count();
		}


		public int CountELEARNINGEMPITEMLOGs(string filterExpression)
		{
			return this.ELEARNINGEMPITEMLOGService.Count(filterExpression);
		}


		public int CountELEARNINGEMPITEMLOGs(Expression<Func<ELEARNINGEMPITEMLOG, bool>> filter)
		{
			return this.ELEARNINGEMPITEMLOGService.Count(filter);
		}


		public string CreateELEARNINGEMPITEMLOG(ELEARNINGEMPITEMLOGDto elearningempitemlog, bool doSaveChanges = true)
		{
			string key = this.ELEARNINGEMPITEMLOGService.Add(elearningempitemlog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateELEARNINGEMPITEMLOG(ELEARNINGEMPITEMLOGDto elearningempitemlog, bool doSaveChanges = true)
		{
			this.ELEARNINGEMPITEMLOGService.Update(elearningempitemlog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateELEARNINGEMPITEMLOGs(IEnumerable<ELEARNINGEMPITEMLOGDto> elearningempitemlogs, bool doSaveChanges = true)
		{
			if (elearningempitemlogs == null)
			{
				return;
			}
			foreach (ELEARNINGEMPITEMLOGDto instance in elearningempitemlogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.ELEARNINGEMPITEMLOGService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteELEARNINGEMPITEMLOG(ELEARNINGEMPITEMLOGDto elearningempitemlog, bool doSaveChanges = true)
		{
			this.ELEARNINGEMPITEMLOGService.Delete(elearningempitemlog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteELEARNINGEMPITEMLOGs(IEnumerable<ELEARNINGEMPITEMLOGDto> elearningempitemlogs, bool doSaveChanges = true)
		{
			if (elearningempitemlogs == null)
			{
				return;
			}
			foreach (ELEARNINGEMPITEMLOGDto instance in elearningempitemlogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.ELEARNINGEMPITEMLOGService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveELEARNINGEMPITEMLOG(ELEARNINGEMPITEMLOGDto elearningempitemlog, bool doSaveChanges = true)
		{
			switch (elearningempitemlog.RowState)
			{
				case RowState.Insert:
					this.CreateELEARNINGEMPITEMLOG(elearningempitemlog, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateELEARNINGEMPITEMLOG(elearningempitemlog, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteELEARNINGEMPITEMLOG(elearningempitemlog, doSaveChanges);
					break;
			}
		}


		public void SaveELEARNINGEMPITEMLOGs(IEnumerable<ELEARNINGEMPITEMLOGDto> elearningempitemlogs, bool doSaveChanges = true)
		{
			if (elearningempitemlogs == null)
			{
				return;
			}
			foreach (ELEARNINGEMPITEMLOGDto instance in elearningempitemlogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveELEARNINGEMPITEMLOG(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion ELEARNINGEMPITEMLOG CRUD Operations


		#region ELEARNINGEMPITEM CRUD Operations


		private IELEARNINGEMPITEMService elearningempitem;
		public virtual IELEARNINGEMPITEMService ELEARNINGEMPITEMService
		{
			get
			{
				if (this.elearningempitem == null)
				{
					IELEARNINGEMPITEMAssembler assembler = new ELEARNINGEMPITEMAssembler();
					IELEARNINGEMPITEMRepository repository = new ELEARNINGEMPITEMRepository(this.UnitOfWork);
					this.elearningempitem = new ELEARNINGEMPITEMService(assembler, repository);
				}
				return this.elearningempitem;
			}
		}


		public IQueryable<ELEARNINGEMPITEM> ELEARNINGEMPITEMs
		{
			get { return this.ELEARNINGEMPITEMService.Repository.GetAll(); }
		}


		public IQueryable<ELEARNINGEMPITEM> ReadELEARNINGEMPITEMs(Expression<Func<ELEARNINGEMPITEM, bool>> filter, int dummy)
		{
			return this.ELEARNINGEMPITEMService.Repository.Find(filter);
		}


		public IEnumerable<ELEARNINGEMPITEMDto> ReadELEARNINGEMPITEMs()
		{
			return this.ELEARNINGEMPITEMService.GetAll();
		}


		public IEnumerable<ELEARNINGEMPITEMDto> ReadELEARNINGEMPITEMs(Expression<Func<ELEARNINGEMPITEM, bool>> filter)
		{
			return this.ELEARNINGEMPITEMService.Find(filter);
		}


		public IEnumerable<ELEARNINGEMPITEMDto> ReadELEARNINGEMPITEMs(ISpecification<ELEARNINGEMPITEM> specification)
		{
			return this.ELEARNINGEMPITEMService.Find(specification.GetExpression());
		}


		public IEnumerable<ELEARNINGEMPITEMDto> ReadELEARNINGEMPITEMs(IQueryable<ELEARNINGEMPITEM> query)
		{
			return this.ELEARNINGEMPITEMService.Assembler.Assemble(query);
		}


		public IEnumerable<ELEARNINGEMPITEMDto> ReadELEARNINGEMPITEMs(string[] propertyToSearch, object[] keyWords)
		{
			return this.ELEARNINGEMPITEMService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<ELEARNINGEMPITEMDto> ReadELEARNINGEMPITEMs(object[] keyWords)
		{
			return this.ELEARNINGEMPITEMService.Find(keyWords);
		}


		public IEnumerable<ELEARNINGEMPITEMDto> ReadELEARNINGEMPITEMsPaged(int startIndex, int pageSize)
		{
			return this.ELEARNINGEMPITEMService.Find(startIndex, pageSize);
		}


		public IEnumerable<ELEARNINGEMPITEMDto> ReadELEARNINGEMPITEMsPaged(IQueryable<ELEARNINGEMPITEM> source, int pageIndex, int pageSize)
		{
			return this.ELEARNINGEMPITEMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<ELEARNINGEMPITEMDto> ReadELEARNINGEMPITEMsPaged(IQueryable<ELEARNINGEMPITEM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.ELEARNINGEMPITEMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<ELEARNINGEMPITEMDto> ReadELEARNINGEMPITEMsFiltered(string sortExpression, string filterExpression)
		{
			return this.ELEARNINGEMPITEMService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<ELEARNINGEMPITEMDto> ReadELEARNINGEMPITEMsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.ELEARNINGEMPITEMService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<ELEARNINGEMPITEMDto> ReadELEARNINGEMPITEMsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<ELEARNINGEMPITEM, bool>> filter)
		{
			return this.ELEARNINGEMPITEMService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public ELEARNINGEMPITEMDto ReadELEARNINGEMPITEMs(string dtoKey)
		{
			return this.ELEARNINGEMPITEMService.GetByKey(dtoKey);
		}


		public int CountELEARNINGEMPITEMs()
		{
			return this.ELEARNINGEMPITEMService.Count();
		}


		public int CountELEARNINGEMPITEMs(string filterExpression)
		{
			return this.ELEARNINGEMPITEMService.Count(filterExpression);
		}


		public int CountELEARNINGEMPITEMs(Expression<Func<ELEARNINGEMPITEM, bool>> filter)
		{
			return this.ELEARNINGEMPITEMService.Count(filter);
		}


		public string CreateELEARNINGEMPITEM(ELEARNINGEMPITEMDto elearningempitem, bool doSaveChanges = true)
		{
			string key = this.ELEARNINGEMPITEMService.Add(elearningempitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateELEARNINGEMPITEM(ELEARNINGEMPITEMDto elearningempitem, bool doSaveChanges = true)
		{
			this.ELEARNINGEMPITEMService.Update(elearningempitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateELEARNINGEMPITEMs(IEnumerable<ELEARNINGEMPITEMDto> elearningempitems, bool doSaveChanges = true)
		{
			if (elearningempitems == null)
			{
				return;
			}
			foreach (ELEARNINGEMPITEMDto instance in elearningempitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.ELEARNINGEMPITEMService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteELEARNINGEMPITEM(ELEARNINGEMPITEMDto elearningempitem, bool doSaveChanges = true)
		{
			this.ELEARNINGEMPITEMService.Delete(elearningempitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteELEARNINGEMPITEMs(IEnumerable<ELEARNINGEMPITEMDto> elearningempitems, bool doSaveChanges = true)
		{
			if (elearningempitems == null)
			{
				return;
			}
			foreach (ELEARNINGEMPITEMDto instance in elearningempitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.ELEARNINGEMPITEMService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveELEARNINGEMPITEM(ELEARNINGEMPITEMDto elearningempitem, bool doSaveChanges = true)
		{
			switch (elearningempitem.RowState)
			{
				case RowState.Insert:
					this.CreateELEARNINGEMPITEM(elearningempitem, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateELEARNINGEMPITEM(elearningempitem, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteELEARNINGEMPITEM(elearningempitem, doSaveChanges);
					break;
			}
		}


		public void SaveELEARNINGEMPITEMs(IEnumerable<ELEARNINGEMPITEMDto> elearningempitems, bool doSaveChanges = true)
		{
			if (elearningempitems == null)
			{
				return;
			}
			foreach (ELEARNINGEMPITEMDto instance in elearningempitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveELEARNINGEMPITEM(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion ELEARNINGEMPITEM CRUD Operations


		#region ELEARNINGCLASS CRUD Operations


		private IELEARNINGCLASSService elearningclass;
		public virtual IELEARNINGCLASSService ELEARNINGCLASSService
		{
			get
			{
				if (this.elearningclass == null)
				{
					IELEARNINGCLASSAssembler assembler = new ELEARNINGCLASSAssembler();
					IELEARNINGCLASSRepository repository = new ELEARNINGCLASSRepository(this.UnitOfWork);
					this.elearningclass = new ELEARNINGCLASSService(assembler, repository);
				}
				return this.elearningclass;
			}
		}


		public IQueryable<ELEARNINGCLASS> ELEARNINGCLASSes
		{
			get { return this.ELEARNINGCLASSService.Repository.GetAll(); }
		}


		public IQueryable<ELEARNINGCLASS> ReadELEARNINGCLASSes(Expression<Func<ELEARNINGCLASS, bool>> filter, int dummy)
		{
			return this.ELEARNINGCLASSService.Repository.Find(filter);
		}


		public IEnumerable<ELEARNINGCLASSDto> ReadELEARNINGCLASSes()
		{
			return this.ELEARNINGCLASSService.GetAll();
		}


		public IEnumerable<ELEARNINGCLASSDto> ReadELEARNINGCLASSes(Expression<Func<ELEARNINGCLASS, bool>> filter)
		{
			return this.ELEARNINGCLASSService.Find(filter);
		}


		public IEnumerable<ELEARNINGCLASSDto> ReadELEARNINGCLASSes(ISpecification<ELEARNINGCLASS> specification)
		{
			return this.ELEARNINGCLASSService.Find(specification.GetExpression());
		}


		public IEnumerable<ELEARNINGCLASSDto> ReadELEARNINGCLASSes(IQueryable<ELEARNINGCLASS> query)
		{
			return this.ELEARNINGCLASSService.Assembler.Assemble(query);
		}


		public IEnumerable<ELEARNINGCLASSDto> ReadELEARNINGCLASSes(string[] propertyToSearch, object[] keyWords)
		{
			return this.ELEARNINGCLASSService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<ELEARNINGCLASSDto> ReadELEARNINGCLASSes(object[] keyWords)
		{
			return this.ELEARNINGCLASSService.Find(keyWords);
		}


		public IEnumerable<ELEARNINGCLASSDto> ReadELEARNINGCLASSesPaged(int startIndex, int pageSize)
		{
			return this.ELEARNINGCLASSService.Find(startIndex, pageSize);
		}


		public IEnumerable<ELEARNINGCLASSDto> ReadELEARNINGCLASSesPaged(IQueryable<ELEARNINGCLASS> source, int pageIndex, int pageSize)
		{
			return this.ELEARNINGCLASSService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<ELEARNINGCLASSDto> ReadELEARNINGCLASSesPaged(IQueryable<ELEARNINGCLASS> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.ELEARNINGCLASSService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<ELEARNINGCLASSDto> ReadELEARNINGCLASSesFiltered(string sortExpression, string filterExpression)
		{
			return this.ELEARNINGCLASSService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<ELEARNINGCLASSDto> ReadELEARNINGCLASSesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.ELEARNINGCLASSService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<ELEARNINGCLASSDto> ReadELEARNINGCLASSesPagedAndFiltered(int startIndex, int pageSize, Expression<Func<ELEARNINGCLASS, bool>> filter)
		{
			return this.ELEARNINGCLASSService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public ELEARNINGCLASSDto ReadELEARNINGCLASSes(string dtoKey)
		{
			return this.ELEARNINGCLASSService.GetByKey(dtoKey);
		}


		public int CountELEARNINGCLASSes()
		{
			return this.ELEARNINGCLASSService.Count();
		}


		public int CountELEARNINGCLASSes(string filterExpression)
		{
			return this.ELEARNINGCLASSService.Count(filterExpression);
		}


		public int CountELEARNINGCLASSes(Expression<Func<ELEARNINGCLASS, bool>> filter)
		{
			return this.ELEARNINGCLASSService.Count(filter);
		}


		public string CreateELEARNINGCLASS(ELEARNINGCLASSDto elearningclass, bool doSaveChanges = true)
		{
			string key = this.ELEARNINGCLASSService.Add(elearningclass);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateELEARNINGCLASS(ELEARNINGCLASSDto elearningclass, bool doSaveChanges = true)
		{
			this.ELEARNINGCLASSService.Update(elearningclass);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateELEARNINGCLASSes(IEnumerable<ELEARNINGCLASSDto> elearningclasses, bool doSaveChanges = true)
		{
			if (elearningclasses == null)
			{
				return;
			}
			foreach (ELEARNINGCLASSDto instance in elearningclasses)
			{
				if (instance == null)
				{
					continue;
				}


				this.ELEARNINGCLASSService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteELEARNINGCLASS(ELEARNINGCLASSDto elearningclass, bool doSaveChanges = true)
		{
			this.ELEARNINGCLASSService.Delete(elearningclass);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteELEARNINGCLASSes(IEnumerable<ELEARNINGCLASSDto> elearningclasses, bool doSaveChanges = true)
		{
			if (elearningclasses == null)
			{
				return;
			}
			foreach (ELEARNINGCLASSDto instance in elearningclasses)
			{
				if (instance == null)
				{
					continue;
				}


				this.ELEARNINGCLASSService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveELEARNINGCLASS(ELEARNINGCLASSDto elearningclass, bool doSaveChanges = true)
		{
			switch (elearningclass.RowState)
			{
				case RowState.Insert:
					this.CreateELEARNINGCLASS(elearningclass, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateELEARNINGCLASS(elearningclass, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteELEARNINGCLASS(elearningclass, doSaveChanges);
					break;
			}
		}


		public void SaveELEARNINGCLASSes(IEnumerable<ELEARNINGCLASSDto> elearningclasses, bool doSaveChanges = true)
		{
			if (elearningclasses == null)
			{
				return;
			}
			foreach (ELEARNINGCLASSDto instance in elearningclasses)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveELEARNINGCLASS(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion ELEARNINGCLASS CRUD Operations


		#region ELEARNINGBOOKING CRUD Operations


		private IELEARNINGBOOKINGService elearningbooking;
		public virtual IELEARNINGBOOKINGService ELEARNINGBOOKINGService
		{
			get
			{
				if (this.elearningbooking == null)
				{
					IELEARNINGBOOKINGAssembler assembler = new ELEARNINGBOOKINGAssembler();
					IELEARNINGBOOKINGRepository repository = new ELEARNINGBOOKINGRepository(this.UnitOfWork);
					this.elearningbooking = new ELEARNINGBOOKINGService(assembler, repository);
				}
				return this.elearningbooking;
			}
		}


		public IQueryable<ELEARNINGBOOKING> ELEARNINGBOOKINGs
		{
			get { return this.ELEARNINGBOOKINGService.Repository.GetAll(); }
		}


		public IQueryable<ELEARNINGBOOKING> ReadELEARNINGBOOKINGs(Expression<Func<ELEARNINGBOOKING, bool>> filter, int dummy)
		{
			return this.ELEARNINGBOOKINGService.Repository.Find(filter);
		}


		public IEnumerable<ELEARNINGBOOKINGDto> ReadELEARNINGBOOKINGs()
		{
			return this.ELEARNINGBOOKINGService.GetAll();
		}


		public IEnumerable<ELEARNINGBOOKINGDto> ReadELEARNINGBOOKINGs(Expression<Func<ELEARNINGBOOKING, bool>> filter)
		{
			return this.ELEARNINGBOOKINGService.Find(filter);
		}


		public IEnumerable<ELEARNINGBOOKINGDto> ReadELEARNINGBOOKINGs(ISpecification<ELEARNINGBOOKING> specification)
		{
			return this.ELEARNINGBOOKINGService.Find(specification.GetExpression());
		}


		public IEnumerable<ELEARNINGBOOKINGDto> ReadELEARNINGBOOKINGs(IQueryable<ELEARNINGBOOKING> query)
		{
			return this.ELEARNINGBOOKINGService.Assembler.Assemble(query);
		}


		public IEnumerable<ELEARNINGBOOKINGDto> ReadELEARNINGBOOKINGs(string[] propertyToSearch, object[] keyWords)
		{
			return this.ELEARNINGBOOKINGService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<ELEARNINGBOOKINGDto> ReadELEARNINGBOOKINGs(object[] keyWords)
		{
			return this.ELEARNINGBOOKINGService.Find(keyWords);
		}


		public IEnumerable<ELEARNINGBOOKINGDto> ReadELEARNINGBOOKINGsPaged(int startIndex, int pageSize)
		{
			return this.ELEARNINGBOOKINGService.Find(startIndex, pageSize);
		}


		public IEnumerable<ELEARNINGBOOKINGDto> ReadELEARNINGBOOKINGsPaged(IQueryable<ELEARNINGBOOKING> source, int pageIndex, int pageSize)
		{
			return this.ELEARNINGBOOKINGService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<ELEARNINGBOOKINGDto> ReadELEARNINGBOOKINGsPaged(IQueryable<ELEARNINGBOOKING> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.ELEARNINGBOOKINGService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<ELEARNINGBOOKINGDto> ReadELEARNINGBOOKINGsFiltered(string sortExpression, string filterExpression)
		{
			return this.ELEARNINGBOOKINGService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<ELEARNINGBOOKINGDto> ReadELEARNINGBOOKINGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.ELEARNINGBOOKINGService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<ELEARNINGBOOKINGDto> ReadELEARNINGBOOKINGsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<ELEARNINGBOOKING, bool>> filter)
		{
			return this.ELEARNINGBOOKINGService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public ELEARNINGBOOKINGDto ReadELEARNINGBOOKINGs(string dtoKey)
		{
			return this.ELEARNINGBOOKINGService.GetByKey(dtoKey);
		}


		public int CountELEARNINGBOOKINGs()
		{
			return this.ELEARNINGBOOKINGService.Count();
		}


		public int CountELEARNINGBOOKINGs(string filterExpression)
		{
			return this.ELEARNINGBOOKINGService.Count(filterExpression);
		}


		public int CountELEARNINGBOOKINGs(Expression<Func<ELEARNINGBOOKING, bool>> filter)
		{
			return this.ELEARNINGBOOKINGService.Count(filter);
		}


		public string CreateELEARNINGBOOKING(ELEARNINGBOOKINGDto elearningbooking, bool doSaveChanges = true)
		{
			string key = this.ELEARNINGBOOKINGService.Add(elearningbooking);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateELEARNINGBOOKING(ELEARNINGBOOKINGDto elearningbooking, bool doSaveChanges = true)
		{
			this.ELEARNINGBOOKINGService.Update(elearningbooking);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateELEARNINGBOOKINGs(IEnumerable<ELEARNINGBOOKINGDto> elearningbookings, bool doSaveChanges = true)
		{
			if (elearningbookings == null)
			{
				return;
			}
			foreach (ELEARNINGBOOKINGDto instance in elearningbookings)
			{
				if (instance == null)
				{
					continue;
				}


				this.ELEARNINGBOOKINGService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteELEARNINGBOOKING(ELEARNINGBOOKINGDto elearningbooking, bool doSaveChanges = true)
		{
			this.ELEARNINGBOOKINGService.Delete(elearningbooking);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteELEARNINGBOOKINGs(IEnumerable<ELEARNINGBOOKINGDto> elearningbookings, bool doSaveChanges = true)
		{
			if (elearningbookings == null)
			{
				return;
			}
			foreach (ELEARNINGBOOKINGDto instance in elearningbookings)
			{
				if (instance == null)
				{
					continue;
				}


				this.ELEARNINGBOOKINGService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveELEARNINGBOOKING(ELEARNINGBOOKINGDto elearningbooking, bool doSaveChanges = true)
		{
			switch (elearningbooking.RowState)
			{
				case RowState.Insert:
					this.CreateELEARNINGBOOKING(elearningbooking, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateELEARNINGBOOKING(elearningbooking, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteELEARNINGBOOKING(elearningbooking, doSaveChanges);
					break;
			}
		}


		public void SaveELEARNINGBOOKINGs(IEnumerable<ELEARNINGBOOKINGDto> elearningbookings, bool doSaveChanges = true)
		{
			if (elearningbookings == null)
			{
				return;
			}
			foreach (ELEARNINGBOOKINGDto instance in elearningbookings)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveELEARNINGBOOKING(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion ELEARNINGBOOKING CRUD Operations


		#region EDUTERMFORMREQTEMPLATEDET CRUD Operations


		private IEDUTERMFORMREQTEMPLATEDETService edutermformreqtemplatedet;
		public virtual IEDUTERMFORMREQTEMPLATEDETService EDUTERMFORMREQTEMPLATEDETService
		{
			get
			{
				if (this.edutermformreqtemplatedet == null)
				{
					IEDUTERMFORMREQTEMPLATEDETAssembler assembler = new EDUTERMFORMREQTEMPLATEDETAssembler();
					IEDUTERMFORMREQTEMPLATEDETRepository repository = new EDUTERMFORMREQTEMPLATEDETRepository(this.UnitOfWork);
					this.edutermformreqtemplatedet = new EDUTERMFORMREQTEMPLATEDETService(assembler, repository);
				}
				return this.edutermformreqtemplatedet;
			}
		}


		public IQueryable<EDUTERMFORMREQTEMPLATEDET> EDUTERMFORMREQTEMPLATEDETs
		{
			get { return this.EDUTERMFORMREQTEMPLATEDETService.Repository.GetAll(); }
		}


		public IQueryable<EDUTERMFORMREQTEMPLATEDET> ReadEDUTERMFORMREQTEMPLATEDETs(Expression<Func<EDUTERMFORMREQTEMPLATEDET, bool>> filter, int dummy)
		{
			return this.EDUTERMFORMREQTEMPLATEDETService.Repository.Find(filter);
		}


		public IEnumerable<EDUTERMFORMREQTEMPLATEDETDto> ReadEDUTERMFORMREQTEMPLATEDETs()
		{
			return this.EDUTERMFORMREQTEMPLATEDETService.GetAll();
		}


		public IEnumerable<EDUTERMFORMREQTEMPLATEDETDto> ReadEDUTERMFORMREQTEMPLATEDETs(Expression<Func<EDUTERMFORMREQTEMPLATEDET, bool>> filter)
		{
			return this.EDUTERMFORMREQTEMPLATEDETService.Find(filter);
		}


		public IEnumerable<EDUTERMFORMREQTEMPLATEDETDto> ReadEDUTERMFORMREQTEMPLATEDETs(ISpecification<EDUTERMFORMREQTEMPLATEDET> specification)
		{
			return this.EDUTERMFORMREQTEMPLATEDETService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUTERMFORMREQTEMPLATEDETDto> ReadEDUTERMFORMREQTEMPLATEDETs(IQueryable<EDUTERMFORMREQTEMPLATEDET> query)
		{
			return this.EDUTERMFORMREQTEMPLATEDETService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUTERMFORMREQTEMPLATEDETDto> ReadEDUTERMFORMREQTEMPLATEDETs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUTERMFORMREQTEMPLATEDETService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUTERMFORMREQTEMPLATEDETDto> ReadEDUTERMFORMREQTEMPLATEDETs(object[] keyWords)
		{
			return this.EDUTERMFORMREQTEMPLATEDETService.Find(keyWords);
		}


		public IEnumerable<EDUTERMFORMREQTEMPLATEDETDto> ReadEDUTERMFORMREQTEMPLATEDETsPaged(int startIndex, int pageSize)
		{
			return this.EDUTERMFORMREQTEMPLATEDETService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUTERMFORMREQTEMPLATEDETDto> ReadEDUTERMFORMREQTEMPLATEDETsPaged(IQueryable<EDUTERMFORMREQTEMPLATEDET> source, int pageIndex, int pageSize)
		{
			return this.EDUTERMFORMREQTEMPLATEDETService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUTERMFORMREQTEMPLATEDETDto> ReadEDUTERMFORMREQTEMPLATEDETsPaged(IQueryable<EDUTERMFORMREQTEMPLATEDET> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUTERMFORMREQTEMPLATEDETService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUTERMFORMREQTEMPLATEDETDto> ReadEDUTERMFORMREQTEMPLATEDETsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUTERMFORMREQTEMPLATEDETService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUTERMFORMREQTEMPLATEDETDto> ReadEDUTERMFORMREQTEMPLATEDETsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUTERMFORMREQTEMPLATEDETService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUTERMFORMREQTEMPLATEDETDto> ReadEDUTERMFORMREQTEMPLATEDETsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUTERMFORMREQTEMPLATEDET, bool>> filter)
		{
			return this.EDUTERMFORMREQTEMPLATEDETService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUTERMFORMREQTEMPLATEDETDto ReadEDUTERMFORMREQTEMPLATEDETs(string dtoKey)
		{
			return this.EDUTERMFORMREQTEMPLATEDETService.GetByKey(dtoKey);
		}


		public int CountEDUTERMFORMREQTEMPLATEDETs()
		{
			return this.EDUTERMFORMREQTEMPLATEDETService.Count();
		}


		public int CountEDUTERMFORMREQTEMPLATEDETs(string filterExpression)
		{
			return this.EDUTERMFORMREQTEMPLATEDETService.Count(filterExpression);
		}


		public int CountEDUTERMFORMREQTEMPLATEDETs(Expression<Func<EDUTERMFORMREQTEMPLATEDET, bool>> filter)
		{
			return this.EDUTERMFORMREQTEMPLATEDETService.Count(filter);
		}


		public string CreateEDUTERMFORMREQTEMPLATEDET(EDUTERMFORMREQTEMPLATEDETDto edutermformreqtemplatedet, bool doSaveChanges = true)
		{
			string key = this.EDUTERMFORMREQTEMPLATEDETService.Add(edutermformreqtemplatedet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUTERMFORMREQTEMPLATEDET(EDUTERMFORMREQTEMPLATEDETDto edutermformreqtemplatedet, bool doSaveChanges = true)
		{
			this.EDUTERMFORMREQTEMPLATEDETService.Update(edutermformreqtemplatedet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUTERMFORMREQTEMPLATEDETs(IEnumerable<EDUTERMFORMREQTEMPLATEDETDto> edutermformreqtemplatedets, bool doSaveChanges = true)
		{
			if (edutermformreqtemplatedets == null)
			{
				return;
			}
			foreach (EDUTERMFORMREQTEMPLATEDETDto instance in edutermformreqtemplatedets)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUTERMFORMREQTEMPLATEDETService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUTERMFORMREQTEMPLATEDET(EDUTERMFORMREQTEMPLATEDETDto edutermformreqtemplatedet, bool doSaveChanges = true)
		{
			this.EDUTERMFORMREQTEMPLATEDETService.Delete(edutermformreqtemplatedet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUTERMFORMREQTEMPLATEDETs(IEnumerable<EDUTERMFORMREQTEMPLATEDETDto> edutermformreqtemplatedets, bool doSaveChanges = true)
		{
			if (edutermformreqtemplatedets == null)
			{
				return;
			}
			foreach (EDUTERMFORMREQTEMPLATEDETDto instance in edutermformreqtemplatedets)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUTERMFORMREQTEMPLATEDETService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUTERMFORMREQTEMPLATEDET(EDUTERMFORMREQTEMPLATEDETDto edutermformreqtemplatedet, bool doSaveChanges = true)
		{
			switch (edutermformreqtemplatedet.RowState)
			{
				case RowState.Insert:
					this.CreateEDUTERMFORMREQTEMPLATEDET(edutermformreqtemplatedet, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUTERMFORMREQTEMPLATEDET(edutermformreqtemplatedet, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUTERMFORMREQTEMPLATEDET(edutermformreqtemplatedet, doSaveChanges);
					break;
			}
		}


		public void SaveEDUTERMFORMREQTEMPLATEDETs(IEnumerable<EDUTERMFORMREQTEMPLATEDETDto> edutermformreqtemplatedets, bool doSaveChanges = true)
		{
			if (edutermformreqtemplatedets == null)
			{
				return;
			}
			foreach (EDUTERMFORMREQTEMPLATEDETDto instance in edutermformreqtemplatedets)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUTERMFORMREQTEMPLATEDET(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUTERMFORMREQTEMPLATEDET CRUD Operations


		#region EDUTERMFORMREQTEMPLATE CRUD Operations


		private IEDUTERMFORMREQTEMPLATEService edutermformreqtemplate;
		public virtual IEDUTERMFORMREQTEMPLATEService EDUTERMFORMREQTEMPLATEService
		{
			get
			{
				if (this.edutermformreqtemplate == null)
				{
					IEDUTERMFORMREQTEMPLATEAssembler assembler = new EDUTERMFORMREQTEMPLATEAssembler();
					IEDUTERMFORMREQTEMPLATERepository repository = new EDUTERMFORMREQTEMPLATERepository(this.UnitOfWork);
					this.edutermformreqtemplate = new EDUTERMFORMREQTEMPLATEService(assembler, repository);
				}
				return this.edutermformreqtemplate;
			}
		}


		public IQueryable<EDUTERMFORMREQTEMPLATE> EDUTERMFORMREQTEMPLATEs
		{
			get { return this.EDUTERMFORMREQTEMPLATEService.Repository.GetAll(); }
		}


		public IQueryable<EDUTERMFORMREQTEMPLATE> ReadEDUTERMFORMREQTEMPLATEs(Expression<Func<EDUTERMFORMREQTEMPLATE, bool>> filter, int dummy)
		{
			return this.EDUTERMFORMREQTEMPLATEService.Repository.Find(filter);
		}


		public IEnumerable<EDUTERMFORMREQTEMPLATEDto> ReadEDUTERMFORMREQTEMPLATEs()
		{
			return this.EDUTERMFORMREQTEMPLATEService.GetAll();
		}


		public IEnumerable<EDUTERMFORMREQTEMPLATEDto> ReadEDUTERMFORMREQTEMPLATEs(Expression<Func<EDUTERMFORMREQTEMPLATE, bool>> filter)
		{
			return this.EDUTERMFORMREQTEMPLATEService.Find(filter);
		}


		public IEnumerable<EDUTERMFORMREQTEMPLATEDto> ReadEDUTERMFORMREQTEMPLATEs(ISpecification<EDUTERMFORMREQTEMPLATE> specification)
		{
			return this.EDUTERMFORMREQTEMPLATEService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUTERMFORMREQTEMPLATEDto> ReadEDUTERMFORMREQTEMPLATEs(IQueryable<EDUTERMFORMREQTEMPLATE> query)
		{
			return this.EDUTERMFORMREQTEMPLATEService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUTERMFORMREQTEMPLATEDto> ReadEDUTERMFORMREQTEMPLATEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUTERMFORMREQTEMPLATEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUTERMFORMREQTEMPLATEDto> ReadEDUTERMFORMREQTEMPLATEs(object[] keyWords)
		{
			return this.EDUTERMFORMREQTEMPLATEService.Find(keyWords);
		}


		public IEnumerable<EDUTERMFORMREQTEMPLATEDto> ReadEDUTERMFORMREQTEMPLATEsPaged(int startIndex, int pageSize)
		{
			return this.EDUTERMFORMREQTEMPLATEService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUTERMFORMREQTEMPLATEDto> ReadEDUTERMFORMREQTEMPLATEsPaged(IQueryable<EDUTERMFORMREQTEMPLATE> source, int pageIndex, int pageSize)
		{
			return this.EDUTERMFORMREQTEMPLATEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUTERMFORMREQTEMPLATEDto> ReadEDUTERMFORMREQTEMPLATEsPaged(IQueryable<EDUTERMFORMREQTEMPLATE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUTERMFORMREQTEMPLATEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUTERMFORMREQTEMPLATEDto> ReadEDUTERMFORMREQTEMPLATEsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUTERMFORMREQTEMPLATEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUTERMFORMREQTEMPLATEDto> ReadEDUTERMFORMREQTEMPLATEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUTERMFORMREQTEMPLATEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUTERMFORMREQTEMPLATEDto> ReadEDUTERMFORMREQTEMPLATEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUTERMFORMREQTEMPLATE, bool>> filter)
		{
			return this.EDUTERMFORMREQTEMPLATEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUTERMFORMREQTEMPLATEDto ReadEDUTERMFORMREQTEMPLATEs(string dtoKey)
		{
			return this.EDUTERMFORMREQTEMPLATEService.GetByKey(dtoKey);
		}


		public int CountEDUTERMFORMREQTEMPLATEs()
		{
			return this.EDUTERMFORMREQTEMPLATEService.Count();
		}


		public int CountEDUTERMFORMREQTEMPLATEs(string filterExpression)
		{
			return this.EDUTERMFORMREQTEMPLATEService.Count(filterExpression);
		}


		public int CountEDUTERMFORMREQTEMPLATEs(Expression<Func<EDUTERMFORMREQTEMPLATE, bool>> filter)
		{
			return this.EDUTERMFORMREQTEMPLATEService.Count(filter);
		}


		public string CreateEDUTERMFORMREQTEMPLATE(EDUTERMFORMREQTEMPLATEDto edutermformreqtemplate, bool doSaveChanges = true)
		{
			string key = this.EDUTERMFORMREQTEMPLATEService.Add(edutermformreqtemplate);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUTERMFORMREQTEMPLATE(EDUTERMFORMREQTEMPLATEDto edutermformreqtemplate, bool doSaveChanges = true)
		{
			this.EDUTERMFORMREQTEMPLATEService.Update(edutermformreqtemplate);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUTERMFORMREQTEMPLATEs(IEnumerable<EDUTERMFORMREQTEMPLATEDto> edutermformreqtemplates, bool doSaveChanges = true)
		{
			if (edutermformreqtemplates == null)
			{
				return;
			}
			foreach (EDUTERMFORMREQTEMPLATEDto instance in edutermformreqtemplates)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUTERMFORMREQTEMPLATEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUTERMFORMREQTEMPLATE(EDUTERMFORMREQTEMPLATEDto edutermformreqtemplate, bool doSaveChanges = true)
		{
			this.EDUTERMFORMREQTEMPLATEService.Delete(edutermformreqtemplate);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUTERMFORMREQTEMPLATEs(IEnumerable<EDUTERMFORMREQTEMPLATEDto> edutermformreqtemplates, bool doSaveChanges = true)
		{
			if (edutermformreqtemplates == null)
			{
				return;
			}
			foreach (EDUTERMFORMREQTEMPLATEDto instance in edutermformreqtemplates)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUTERMFORMREQTEMPLATEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUTERMFORMREQTEMPLATE(EDUTERMFORMREQTEMPLATEDto edutermformreqtemplate, bool doSaveChanges = true)
		{
			switch (edutermformreqtemplate.RowState)
			{
				case RowState.Insert:
					this.CreateEDUTERMFORMREQTEMPLATE(edutermformreqtemplate, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUTERMFORMREQTEMPLATE(edutermformreqtemplate, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUTERMFORMREQTEMPLATE(edutermformreqtemplate, doSaveChanges);
					break;
			}
		}


		public void SaveEDUTERMFORMREQTEMPLATEs(IEnumerable<EDUTERMFORMREQTEMPLATEDto> edutermformreqtemplates, bool doSaveChanges = true)
		{
			if (edutermformreqtemplates == null)
			{
				return;
			}
			foreach (EDUTERMFORMREQTEMPLATEDto instance in edutermformreqtemplates)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUTERMFORMREQTEMPLATE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUTERMFORMREQTEMPLATE CRUD Operations


		#region EDUTERMFORMREQ CRUD Operations


		private IEDUTERMFORMREQService edutermformreq;
		public virtual IEDUTERMFORMREQService EDUTERMFORMREQService
		{
			get
			{
				if (this.edutermformreq == null)
				{
					IEDUTERMFORMREQAssembler assembler = new EDUTERMFORMREQAssembler();
					IEDUTERMFORMREQRepository repository = new EDUTERMFORMREQRepository(this.UnitOfWork);
					this.edutermformreq = new EDUTERMFORMREQService(assembler, repository);
				}
				return this.edutermformreq;
			}
		}


		public IQueryable<EDUTERMFORMREQ> EDUTERMFORMREQs
		{
			get { return this.EDUTERMFORMREQService.Repository.GetAll(); }
		}


		public IQueryable<EDUTERMFORMREQ> ReadEDUTERMFORMREQs(Expression<Func<EDUTERMFORMREQ, bool>> filter, int dummy)
		{
			return this.EDUTERMFORMREQService.Repository.Find(filter);
		}


		public IEnumerable<EDUTERMFORMREQDto> ReadEDUTERMFORMREQs()
		{
			return this.EDUTERMFORMREQService.GetAll();
		}


		public IEnumerable<EDUTERMFORMREQDto> ReadEDUTERMFORMREQs(Expression<Func<EDUTERMFORMREQ, bool>> filter)
		{
			return this.EDUTERMFORMREQService.Find(filter);
		}


		public IEnumerable<EDUTERMFORMREQDto> ReadEDUTERMFORMREQs(ISpecification<EDUTERMFORMREQ> specification)
		{
			return this.EDUTERMFORMREQService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUTERMFORMREQDto> ReadEDUTERMFORMREQs(IQueryable<EDUTERMFORMREQ> query)
		{
			return this.EDUTERMFORMREQService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUTERMFORMREQDto> ReadEDUTERMFORMREQs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUTERMFORMREQService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUTERMFORMREQDto> ReadEDUTERMFORMREQs(object[] keyWords)
		{
			return this.EDUTERMFORMREQService.Find(keyWords);
		}


		public IEnumerable<EDUTERMFORMREQDto> ReadEDUTERMFORMREQsPaged(int startIndex, int pageSize)
		{
			return this.EDUTERMFORMREQService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUTERMFORMREQDto> ReadEDUTERMFORMREQsPaged(IQueryable<EDUTERMFORMREQ> source, int pageIndex, int pageSize)
		{
			return this.EDUTERMFORMREQService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUTERMFORMREQDto> ReadEDUTERMFORMREQsPaged(IQueryable<EDUTERMFORMREQ> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUTERMFORMREQService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUTERMFORMREQDto> ReadEDUTERMFORMREQsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUTERMFORMREQService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUTERMFORMREQDto> ReadEDUTERMFORMREQsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUTERMFORMREQService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUTERMFORMREQDto> ReadEDUTERMFORMREQsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUTERMFORMREQ, bool>> filter)
		{
			return this.EDUTERMFORMREQService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUTERMFORMREQDto ReadEDUTERMFORMREQs(string dtoKey)
		{
			return this.EDUTERMFORMREQService.GetByKey(dtoKey);
		}


		public int CountEDUTERMFORMREQs()
		{
			return this.EDUTERMFORMREQService.Count();
		}


		public int CountEDUTERMFORMREQs(string filterExpression)
		{
			return this.EDUTERMFORMREQService.Count(filterExpression);
		}


		public int CountEDUTERMFORMREQs(Expression<Func<EDUTERMFORMREQ, bool>> filter)
		{
			return this.EDUTERMFORMREQService.Count(filter);
		}


		public string CreateEDUTERMFORMREQ(EDUTERMFORMREQDto edutermformreq, bool doSaveChanges = true)
		{
			string key = this.EDUTERMFORMREQService.Add(edutermformreq);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUTERMFORMREQ(EDUTERMFORMREQDto edutermformreq, bool doSaveChanges = true)
		{
			this.EDUTERMFORMREQService.Update(edutermformreq);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUTERMFORMREQs(IEnumerable<EDUTERMFORMREQDto> edutermformreqs, bool doSaveChanges = true)
		{
			if (edutermformreqs == null)
			{
				return;
			}
			foreach (EDUTERMFORMREQDto instance in edutermformreqs)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUTERMFORMREQService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUTERMFORMREQ(EDUTERMFORMREQDto edutermformreq, bool doSaveChanges = true)
		{
			this.EDUTERMFORMREQService.Delete(edutermformreq);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUTERMFORMREQs(IEnumerable<EDUTERMFORMREQDto> edutermformreqs, bool doSaveChanges = true)
		{
			if (edutermformreqs == null)
			{
				return;
			}
			foreach (EDUTERMFORMREQDto instance in edutermformreqs)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUTERMFORMREQService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUTERMFORMREQ(EDUTERMFORMREQDto edutermformreq, bool doSaveChanges = true)
		{
			switch (edutermformreq.RowState)
			{
				case RowState.Insert:
					this.CreateEDUTERMFORMREQ(edutermformreq, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUTERMFORMREQ(edutermformreq, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUTERMFORMREQ(edutermformreq, doSaveChanges);
					break;
			}
		}


		public void SaveEDUTERMFORMREQs(IEnumerable<EDUTERMFORMREQDto> edutermformreqs, bool doSaveChanges = true)
		{
			if (edutermformreqs == null)
			{
				return;
			}
			foreach (EDUTERMFORMREQDto instance in edutermformreqs)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUTERMFORMREQ(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUTERMFORMREQ CRUD Operations


		#region EDUTERMFORMINSTANCE CRUD Operations


		private IEDUTERMFORMINSTANCEService edutermforminstance;
		public virtual IEDUTERMFORMINSTANCEService EDUTERMFORMINSTANCEService
		{
			get
			{
				if (this.edutermforminstance == null)
				{
					IEDUTERMFORMINSTANCEAssembler assembler = new EDUTERMFORMINSTANCEAssembler();
					IEDUTERMFORMINSTANCERepository repository = new EDUTERMFORMINSTANCERepository(this.UnitOfWork);
					this.edutermforminstance = new EDUTERMFORMINSTANCEService(assembler, repository);
				}
				return this.edutermforminstance;
			}
		}


		public IQueryable<EDUTERMFORMINSTANCE> EDUTERMFORMINSTANCEs
		{
			get { return this.EDUTERMFORMINSTANCEService.Repository.GetAll(); }
		}


		public IQueryable<EDUTERMFORMINSTANCE> ReadEDUTERMFORMINSTANCEs(Expression<Func<EDUTERMFORMINSTANCE, bool>> filter, int dummy)
		{
			return this.EDUTERMFORMINSTANCEService.Repository.Find(filter);
		}


		public IEnumerable<EDUTERMFORMINSTANCEDto> ReadEDUTERMFORMINSTANCEs()
		{
			return this.EDUTERMFORMINSTANCEService.GetAll();
		}


		public IEnumerable<EDUTERMFORMINSTANCEDto> ReadEDUTERMFORMINSTANCEs(Expression<Func<EDUTERMFORMINSTANCE, bool>> filter)
		{
			return this.EDUTERMFORMINSTANCEService.Find(filter);
		}


		public IEnumerable<EDUTERMFORMINSTANCEDto> ReadEDUTERMFORMINSTANCEs(ISpecification<EDUTERMFORMINSTANCE> specification)
		{
			return this.EDUTERMFORMINSTANCEService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUTERMFORMINSTANCEDto> ReadEDUTERMFORMINSTANCEs(IQueryable<EDUTERMFORMINSTANCE> query)
		{
			return this.EDUTERMFORMINSTANCEService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUTERMFORMINSTANCEDto> ReadEDUTERMFORMINSTANCEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUTERMFORMINSTANCEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUTERMFORMINSTANCEDto> ReadEDUTERMFORMINSTANCEs(object[] keyWords)
		{
			return this.EDUTERMFORMINSTANCEService.Find(keyWords);
		}


		public IEnumerable<EDUTERMFORMINSTANCEDto> ReadEDUTERMFORMINSTANCEsPaged(int startIndex, int pageSize)
		{
			return this.EDUTERMFORMINSTANCEService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUTERMFORMINSTANCEDto> ReadEDUTERMFORMINSTANCEsPaged(IQueryable<EDUTERMFORMINSTANCE> source, int pageIndex, int pageSize)
		{
			return this.EDUTERMFORMINSTANCEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUTERMFORMINSTANCEDto> ReadEDUTERMFORMINSTANCEsPaged(IQueryable<EDUTERMFORMINSTANCE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUTERMFORMINSTANCEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUTERMFORMINSTANCEDto> ReadEDUTERMFORMINSTANCEsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUTERMFORMINSTANCEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUTERMFORMINSTANCEDto> ReadEDUTERMFORMINSTANCEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUTERMFORMINSTANCEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUTERMFORMINSTANCEDto> ReadEDUTERMFORMINSTANCEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUTERMFORMINSTANCE, bool>> filter)
		{
			return this.EDUTERMFORMINSTANCEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUTERMFORMINSTANCEDto ReadEDUTERMFORMINSTANCEs(string dtoKey)
		{
			return this.EDUTERMFORMINSTANCEService.GetByKey(dtoKey);
		}


		public int CountEDUTERMFORMINSTANCEs()
		{
			return this.EDUTERMFORMINSTANCEService.Count();
		}


		public int CountEDUTERMFORMINSTANCEs(string filterExpression)
		{
			return this.EDUTERMFORMINSTANCEService.Count(filterExpression);
		}


		public int CountEDUTERMFORMINSTANCEs(Expression<Func<EDUTERMFORMINSTANCE, bool>> filter)
		{
			return this.EDUTERMFORMINSTANCEService.Count(filter);
		}


		public string CreateEDUTERMFORMINSTANCE(EDUTERMFORMINSTANCEDto edutermforminstance, bool doSaveChanges = true)
		{
			string key = this.EDUTERMFORMINSTANCEService.Add(edutermforminstance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUTERMFORMINSTANCE(EDUTERMFORMINSTANCEDto edutermforminstance, bool doSaveChanges = true)
		{
			this.EDUTERMFORMINSTANCEService.Update(edutermforminstance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUTERMFORMINSTANCEs(IEnumerable<EDUTERMFORMINSTANCEDto> edutermforminstances, bool doSaveChanges = true)
		{
			if (edutermforminstances == null)
			{
				return;
			}
			foreach (EDUTERMFORMINSTANCEDto instance in edutermforminstances)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUTERMFORMINSTANCEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUTERMFORMINSTANCE(EDUTERMFORMINSTANCEDto edutermforminstance, bool doSaveChanges = true)
		{
			this.EDUTERMFORMINSTANCEService.Delete(edutermforminstance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUTERMFORMINSTANCEs(IEnumerable<EDUTERMFORMINSTANCEDto> edutermforminstances, bool doSaveChanges = true)
		{
			if (edutermforminstances == null)
			{
				return;
			}
			foreach (EDUTERMFORMINSTANCEDto instance in edutermforminstances)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUTERMFORMINSTANCEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUTERMFORMINSTANCE(EDUTERMFORMINSTANCEDto edutermforminstance, bool doSaveChanges = true)
		{
			switch (edutermforminstance.RowState)
			{
				case RowState.Insert:
					this.CreateEDUTERMFORMINSTANCE(edutermforminstance, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUTERMFORMINSTANCE(edutermforminstance, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUTERMFORMINSTANCE(edutermforminstance, doSaveChanges);
					break;
			}
		}


		public void SaveEDUTERMFORMINSTANCEs(IEnumerable<EDUTERMFORMINSTANCEDto> edutermforminstances, bool doSaveChanges = true)
		{
			if (edutermforminstances == null)
			{
				return;
			}
			foreach (EDUTERMFORMINSTANCEDto instance in edutermforminstances)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUTERMFORMINSTANCE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUTERMFORMINSTANCE CRUD Operations


		#region EDUTERM CRUD Operations


		private IEDUTERMService eduterm;
		public virtual IEDUTERMService EDUTERMService
		{
			get
			{
				if (this.eduterm == null)
				{
					IEDUTERMAssembler assembler = new EDUTERMAssembler();
					IEDUTERMRepository repository = new EDUTERMRepository(this.UnitOfWork);
					this.eduterm = new EDUTERMService(assembler, repository);
				}
				return this.eduterm;
			}
		}


		public IQueryable<EDUTERM> EDUTERMs
		{
			get { return this.EDUTERMService.Repository.GetAll(); }
		}


		public IQueryable<EDUTERM> ReadEDUTERMs(Expression<Func<EDUTERM, bool>> filter, int dummy)
		{
			return this.EDUTERMService.Repository.Find(filter);
		}


		public IEnumerable<EDUTERMDto> ReadEDUTERMs()
		{
			return this.EDUTERMService.GetAll();
		}


		public IEnumerable<EDUTERMDto> ReadEDUTERMs(Expression<Func<EDUTERM, bool>> filter)
		{
			return this.EDUTERMService.Find(filter);
		}


		public IEnumerable<EDUTERMDto> ReadEDUTERMs(ISpecification<EDUTERM> specification)
		{
			return this.EDUTERMService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUTERMDto> ReadEDUTERMs(IQueryable<EDUTERM> query)
		{
			return this.EDUTERMService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUTERMDto> ReadEDUTERMs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUTERMService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUTERMDto> ReadEDUTERMs(object[] keyWords)
		{
			return this.EDUTERMService.Find(keyWords);
		}


		public IEnumerable<EDUTERMDto> ReadEDUTERMsPaged(int startIndex, int pageSize)
		{
			return this.EDUTERMService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUTERMDto> ReadEDUTERMsPaged(IQueryable<EDUTERM> source, int pageIndex, int pageSize)
		{
			return this.EDUTERMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUTERMDto> ReadEDUTERMsPaged(IQueryable<EDUTERM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUTERMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUTERMDto> ReadEDUTERMsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUTERMService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUTERMDto> ReadEDUTERMsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUTERMService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUTERMDto> ReadEDUTERMsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUTERM, bool>> filter)
		{
			return this.EDUTERMService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUTERMDto ReadEDUTERMs(string dtoKey)
		{
			return this.EDUTERMService.GetByKey(dtoKey);
		}


		public int CountEDUTERMs()
		{
			return this.EDUTERMService.Count();
		}


		public int CountEDUTERMs(string filterExpression)
		{
			return this.EDUTERMService.Count(filterExpression);
		}


		public int CountEDUTERMs(Expression<Func<EDUTERM, bool>> filter)
		{
			return this.EDUTERMService.Count(filter);
		}


		public string CreateEDUTERM(EDUTERMDto eduterm, bool doSaveChanges = true)
		{
			string key = this.EDUTERMService.Add(eduterm);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUTERM(EDUTERMDto eduterm, bool doSaveChanges = true)
		{
			this.EDUTERMService.Update(eduterm);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUTERMs(IEnumerable<EDUTERMDto> eduterms, bool doSaveChanges = true)
		{
			if (eduterms == null)
			{
				return;
			}
			foreach (EDUTERMDto instance in eduterms)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUTERMService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUTERM(EDUTERMDto eduterm, bool doSaveChanges = true)
		{
			this.EDUTERMService.Delete(eduterm);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUTERMs(IEnumerable<EDUTERMDto> eduterms, bool doSaveChanges = true)
		{
			if (eduterms == null)
			{
				return;
			}
			foreach (EDUTERMDto instance in eduterms)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUTERMService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUTERM(EDUTERMDto eduterm, bool doSaveChanges = true)
		{
			switch (eduterm.RowState)
			{
				case RowState.Insert:
					this.CreateEDUTERM(eduterm, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUTERM(eduterm, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUTERM(eduterm, doSaveChanges);
					break;
			}
		}


		public void SaveEDUTERMs(IEnumerable<EDUTERMDto> eduterms, bool doSaveChanges = true)
		{
			if (eduterms == null)
			{
				return;
			}
			foreach (EDUTERMDto instance in eduterms)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUTERM(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUTERM CRUD Operations


		#region EDUTEAMRUNDOWN CRUD Operations


		private IEDUTEAMRUNDOWNService eduteamrundown;
		public virtual IEDUTEAMRUNDOWNService EDUTEAMRUNDOWNService
		{
			get
			{
				if (this.eduteamrundown == null)
				{
					IEDUTEAMRUNDOWNAssembler assembler = new EDUTEAMRUNDOWNAssembler();
					IEDUTEAMRUNDOWNRepository repository = new EDUTEAMRUNDOWNRepository(this.UnitOfWork);
					this.eduteamrundown = new EDUTEAMRUNDOWNService(assembler, repository);
				}
				return this.eduteamrundown;
			}
		}


		public IQueryable<EDUTEAMRUNDOWN> EDUTEAMRUNDOWNs
		{
			get { return this.EDUTEAMRUNDOWNService.Repository.GetAll(); }
		}


		public IQueryable<EDUTEAMRUNDOWN> ReadEDUTEAMRUNDOWNs(Expression<Func<EDUTEAMRUNDOWN, bool>> filter, int dummy)
		{
			return this.EDUTEAMRUNDOWNService.Repository.Find(filter);
		}


		public IEnumerable<EDUTEAMRUNDOWNDto> ReadEDUTEAMRUNDOWNs()
		{
			return this.EDUTEAMRUNDOWNService.GetAll();
		}


		public IEnumerable<EDUTEAMRUNDOWNDto> ReadEDUTEAMRUNDOWNs(Expression<Func<EDUTEAMRUNDOWN, bool>> filter)
		{
			return this.EDUTEAMRUNDOWNService.Find(filter);
		}


		public IEnumerable<EDUTEAMRUNDOWNDto> ReadEDUTEAMRUNDOWNs(ISpecification<EDUTEAMRUNDOWN> specification)
		{
			return this.EDUTEAMRUNDOWNService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUTEAMRUNDOWNDto> ReadEDUTEAMRUNDOWNs(IQueryable<EDUTEAMRUNDOWN> query)
		{
			return this.EDUTEAMRUNDOWNService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUTEAMRUNDOWNDto> ReadEDUTEAMRUNDOWNs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUTEAMRUNDOWNService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUTEAMRUNDOWNDto> ReadEDUTEAMRUNDOWNs(object[] keyWords)
		{
			return this.EDUTEAMRUNDOWNService.Find(keyWords);
		}


		public IEnumerable<EDUTEAMRUNDOWNDto> ReadEDUTEAMRUNDOWNsPaged(int startIndex, int pageSize)
		{
			return this.EDUTEAMRUNDOWNService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUTEAMRUNDOWNDto> ReadEDUTEAMRUNDOWNsPaged(IQueryable<EDUTEAMRUNDOWN> source, int pageIndex, int pageSize)
		{
			return this.EDUTEAMRUNDOWNService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUTEAMRUNDOWNDto> ReadEDUTEAMRUNDOWNsPaged(IQueryable<EDUTEAMRUNDOWN> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUTEAMRUNDOWNService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUTEAMRUNDOWNDto> ReadEDUTEAMRUNDOWNsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUTEAMRUNDOWNService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUTEAMRUNDOWNDto> ReadEDUTEAMRUNDOWNsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUTEAMRUNDOWNService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUTEAMRUNDOWNDto> ReadEDUTEAMRUNDOWNsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUTEAMRUNDOWN, bool>> filter)
		{
			return this.EDUTEAMRUNDOWNService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUTEAMRUNDOWNDto ReadEDUTEAMRUNDOWNs(string dtoKey)
		{
			return this.EDUTEAMRUNDOWNService.GetByKey(dtoKey);
		}


		public int CountEDUTEAMRUNDOWNs()
		{
			return this.EDUTEAMRUNDOWNService.Count();
		}


		public int CountEDUTEAMRUNDOWNs(string filterExpression)
		{
			return this.EDUTEAMRUNDOWNService.Count(filterExpression);
		}


		public int CountEDUTEAMRUNDOWNs(Expression<Func<EDUTEAMRUNDOWN, bool>> filter)
		{
			return this.EDUTEAMRUNDOWNService.Count(filter);
		}


		public string CreateEDUTEAMRUNDOWN(EDUTEAMRUNDOWNDto eduteamrundown, bool doSaveChanges = true)
		{
			string key = this.EDUTEAMRUNDOWNService.Add(eduteamrundown);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUTEAMRUNDOWN(EDUTEAMRUNDOWNDto eduteamrundown, bool doSaveChanges = true)
		{
			this.EDUTEAMRUNDOWNService.Update(eduteamrundown);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUTEAMRUNDOWNs(IEnumerable<EDUTEAMRUNDOWNDto> eduteamrundowns, bool doSaveChanges = true)
		{
			if (eduteamrundowns == null)
			{
				return;
			}
			foreach (EDUTEAMRUNDOWNDto instance in eduteamrundowns)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUTEAMRUNDOWNService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUTEAMRUNDOWN(EDUTEAMRUNDOWNDto eduteamrundown, bool doSaveChanges = true)
		{
			this.EDUTEAMRUNDOWNService.Delete(eduteamrundown);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUTEAMRUNDOWNs(IEnumerable<EDUTEAMRUNDOWNDto> eduteamrundowns, bool doSaveChanges = true)
		{
			if (eduteamrundowns == null)
			{
				return;
			}
			foreach (EDUTEAMRUNDOWNDto instance in eduteamrundowns)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUTEAMRUNDOWNService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUTEAMRUNDOWN(EDUTEAMRUNDOWNDto eduteamrundown, bool doSaveChanges = true)
		{
			switch (eduteamrundown.RowState)
			{
				case RowState.Insert:
					this.CreateEDUTEAMRUNDOWN(eduteamrundown, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUTEAMRUNDOWN(eduteamrundown, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUTEAMRUNDOWN(eduteamrundown, doSaveChanges);
					break;
			}
		}


		public void SaveEDUTEAMRUNDOWNs(IEnumerable<EDUTEAMRUNDOWNDto> eduteamrundowns, bool doSaveChanges = true)
		{
			if (eduteamrundowns == null)
			{
				return;
			}
			foreach (EDUTEAMRUNDOWNDto instance in eduteamrundowns)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUTEAMRUNDOWN(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUTEAMRUNDOWN CRUD Operations


		#region EDUTEAMMEMBERRUNDOWN_TRANSLOG CRUD Operations


		private IEDUTEAMMEMBERRUNDOWN_TRANSLOGService eduteammemberrundown_translog;
		public virtual IEDUTEAMMEMBERRUNDOWN_TRANSLOGService EDUTEAMMEMBERRUNDOWN_TRANSLOGService
		{
			get
			{
				if (this.eduteammemberrundown_translog == null)
				{
					IEDUTEAMMEMBERRUNDOWN_TRANSLOGAssembler assembler = new EDUTEAMMEMBERRUNDOWN_TRANSLOGAssembler();
					IEDUTEAMMEMBERRUNDOWN_TRANSLOGRepository repository = new EDUTEAMMEMBERRUNDOWN_TRANSLOGRepository(this.UnitOfWork);
					this.eduteammemberrundown_translog = new EDUTEAMMEMBERRUNDOWN_TRANSLOGService(assembler, repository);
				}
				return this.eduteammemberrundown_translog;
			}
		}


		public IQueryable<EDUTEAMMEMBERRUNDOWN_TRANSLOG> EDUTEAMMEMBERRUNDOWN_TRANSLOGs
		{
			get { return this.EDUTEAMMEMBERRUNDOWN_TRANSLOGService.Repository.GetAll(); }
		}


		public IQueryable<EDUTEAMMEMBERRUNDOWN_TRANSLOG> ReadEDUTEAMMEMBERRUNDOWN_TRANSLOGs(Expression<Func<EDUTEAMMEMBERRUNDOWN_TRANSLOG, bool>> filter, int dummy)
		{
			return this.EDUTEAMMEMBERRUNDOWN_TRANSLOGService.Repository.Find(filter);
		}


		public IEnumerable<EDUTEAMMEMBERRUNDOWN_TRANSLOGDto> ReadEDUTEAMMEMBERRUNDOWN_TRANSLOGs()
		{
			return this.EDUTEAMMEMBERRUNDOWN_TRANSLOGService.GetAll();
		}


		public IEnumerable<EDUTEAMMEMBERRUNDOWN_TRANSLOGDto> ReadEDUTEAMMEMBERRUNDOWN_TRANSLOGs(Expression<Func<EDUTEAMMEMBERRUNDOWN_TRANSLOG, bool>> filter)
		{
			return this.EDUTEAMMEMBERRUNDOWN_TRANSLOGService.Find(filter);
		}


		public IEnumerable<EDUTEAMMEMBERRUNDOWN_TRANSLOGDto> ReadEDUTEAMMEMBERRUNDOWN_TRANSLOGs(ISpecification<EDUTEAMMEMBERRUNDOWN_TRANSLOG> specification)
		{
			return this.EDUTEAMMEMBERRUNDOWN_TRANSLOGService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUTEAMMEMBERRUNDOWN_TRANSLOGDto> ReadEDUTEAMMEMBERRUNDOWN_TRANSLOGs(IQueryable<EDUTEAMMEMBERRUNDOWN_TRANSLOG> query)
		{
			return this.EDUTEAMMEMBERRUNDOWN_TRANSLOGService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUTEAMMEMBERRUNDOWN_TRANSLOGDto> ReadEDUTEAMMEMBERRUNDOWN_TRANSLOGs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUTEAMMEMBERRUNDOWN_TRANSLOGService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUTEAMMEMBERRUNDOWN_TRANSLOGDto> ReadEDUTEAMMEMBERRUNDOWN_TRANSLOGs(object[] keyWords)
		{
			return this.EDUTEAMMEMBERRUNDOWN_TRANSLOGService.Find(keyWords);
		}


		public IEnumerable<EDUTEAMMEMBERRUNDOWN_TRANSLOGDto> ReadEDUTEAMMEMBERRUNDOWN_TRANSLOGsPaged(int startIndex, int pageSize)
		{
			return this.EDUTEAMMEMBERRUNDOWN_TRANSLOGService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUTEAMMEMBERRUNDOWN_TRANSLOGDto> ReadEDUTEAMMEMBERRUNDOWN_TRANSLOGsPaged(IQueryable<EDUTEAMMEMBERRUNDOWN_TRANSLOG> source, int pageIndex, int pageSize)
		{
			return this.EDUTEAMMEMBERRUNDOWN_TRANSLOGService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUTEAMMEMBERRUNDOWN_TRANSLOGDto> ReadEDUTEAMMEMBERRUNDOWN_TRANSLOGsPaged(IQueryable<EDUTEAMMEMBERRUNDOWN_TRANSLOG> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUTEAMMEMBERRUNDOWN_TRANSLOGService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUTEAMMEMBERRUNDOWN_TRANSLOGDto> ReadEDUTEAMMEMBERRUNDOWN_TRANSLOGsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUTEAMMEMBERRUNDOWN_TRANSLOGService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUTEAMMEMBERRUNDOWN_TRANSLOGDto> ReadEDUTEAMMEMBERRUNDOWN_TRANSLOGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUTEAMMEMBERRUNDOWN_TRANSLOGService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUTEAMMEMBERRUNDOWN_TRANSLOGDto> ReadEDUTEAMMEMBERRUNDOWN_TRANSLOGsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUTEAMMEMBERRUNDOWN_TRANSLOG, bool>> filter)
		{
			return this.EDUTEAMMEMBERRUNDOWN_TRANSLOGService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUTEAMMEMBERRUNDOWN_TRANSLOGDto ReadEDUTEAMMEMBERRUNDOWN_TRANSLOGs(string dtoKey)
		{
			return this.EDUTEAMMEMBERRUNDOWN_TRANSLOGService.GetByKey(dtoKey);
		}


		public int CountEDUTEAMMEMBERRUNDOWN_TRANSLOGs()
		{
			return this.EDUTEAMMEMBERRUNDOWN_TRANSLOGService.Count();
		}


		public int CountEDUTEAMMEMBERRUNDOWN_TRANSLOGs(string filterExpression)
		{
			return this.EDUTEAMMEMBERRUNDOWN_TRANSLOGService.Count(filterExpression);
		}


		public int CountEDUTEAMMEMBERRUNDOWN_TRANSLOGs(Expression<Func<EDUTEAMMEMBERRUNDOWN_TRANSLOG, bool>> filter)
		{
			return this.EDUTEAMMEMBERRUNDOWN_TRANSLOGService.Count(filter);
		}


		public string CreateEDUTEAMMEMBERRUNDOWN_TRANSLOG(EDUTEAMMEMBERRUNDOWN_TRANSLOGDto eduteammemberrundown_translog, bool doSaveChanges = true)
		{
			string key = this.EDUTEAMMEMBERRUNDOWN_TRANSLOGService.Add(eduteammemberrundown_translog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUTEAMMEMBERRUNDOWN_TRANSLOG(EDUTEAMMEMBERRUNDOWN_TRANSLOGDto eduteammemberrundown_translog, bool doSaveChanges = true)
		{
			this.EDUTEAMMEMBERRUNDOWN_TRANSLOGService.Update(eduteammemberrundown_translog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUTEAMMEMBERRUNDOWN_TRANSLOGs(IEnumerable<EDUTEAMMEMBERRUNDOWN_TRANSLOGDto> eduteammemberrundown_translogs, bool doSaveChanges = true)
		{
			if (eduteammemberrundown_translogs == null)
			{
				return;
			}
			foreach (EDUTEAMMEMBERRUNDOWN_TRANSLOGDto instance in eduteammemberrundown_translogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUTEAMMEMBERRUNDOWN_TRANSLOGService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUTEAMMEMBERRUNDOWN_TRANSLOG(EDUTEAMMEMBERRUNDOWN_TRANSLOGDto eduteammemberrundown_translog, bool doSaveChanges = true)
		{
			this.EDUTEAMMEMBERRUNDOWN_TRANSLOGService.Delete(eduteammemberrundown_translog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUTEAMMEMBERRUNDOWN_TRANSLOGs(IEnumerable<EDUTEAMMEMBERRUNDOWN_TRANSLOGDto> eduteammemberrundown_translogs, bool doSaveChanges = true)
		{
			if (eduteammemberrundown_translogs == null)
			{
				return;
			}
			foreach (EDUTEAMMEMBERRUNDOWN_TRANSLOGDto instance in eduteammemberrundown_translogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUTEAMMEMBERRUNDOWN_TRANSLOGService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUTEAMMEMBERRUNDOWN_TRANSLOG(EDUTEAMMEMBERRUNDOWN_TRANSLOGDto eduteammemberrundown_translog, bool doSaveChanges = true)
		{
			switch (eduteammemberrundown_translog.RowState)
			{
				case RowState.Insert:
					this.CreateEDUTEAMMEMBERRUNDOWN_TRANSLOG(eduteammemberrundown_translog, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUTEAMMEMBERRUNDOWN_TRANSLOG(eduteammemberrundown_translog, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUTEAMMEMBERRUNDOWN_TRANSLOG(eduteammemberrundown_translog, doSaveChanges);
					break;
			}
		}


		public void SaveEDUTEAMMEMBERRUNDOWN_TRANSLOGs(IEnumerable<EDUTEAMMEMBERRUNDOWN_TRANSLOGDto> eduteammemberrundown_translogs, bool doSaveChanges = true)
		{
			if (eduteammemberrundown_translogs == null)
			{
				return;
			}
			foreach (EDUTEAMMEMBERRUNDOWN_TRANSLOGDto instance in eduteammemberrundown_translogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUTEAMMEMBERRUNDOWN_TRANSLOG(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUTEAMMEMBERRUNDOWN_TRANSLOG CRUD Operations


		#region EDUTEAMMEMBERRUNDOWN CRUD Operations


		private IEDUTEAMMEMBERRUNDOWNService eduteammemberrundown;
		public virtual IEDUTEAMMEMBERRUNDOWNService EDUTEAMMEMBERRUNDOWNService
		{
			get
			{
				if (this.eduteammemberrundown == null)
				{
					IEDUTEAMMEMBERRUNDOWNAssembler assembler = new EDUTEAMMEMBERRUNDOWNAssembler();
					IEDUTEAMMEMBERRUNDOWNRepository repository = new EDUTEAMMEMBERRUNDOWNRepository(this.UnitOfWork);
					this.eduteammemberrundown = new EDUTEAMMEMBERRUNDOWNService(assembler, repository);
				}
				return this.eduteammemberrundown;
			}
		}


		public IQueryable<EDUTEAMMEMBERRUNDOWN> EDUTEAMMEMBERRUNDOWNs
		{
			get { return this.EDUTEAMMEMBERRUNDOWNService.Repository.GetAll(); }
		}


		public IQueryable<EDUTEAMMEMBERRUNDOWN> ReadEDUTEAMMEMBERRUNDOWNs(Expression<Func<EDUTEAMMEMBERRUNDOWN, bool>> filter, int dummy)
		{
			return this.EDUTEAMMEMBERRUNDOWNService.Repository.Find(filter);
		}


		public IEnumerable<EDUTEAMMEMBERRUNDOWNDto> ReadEDUTEAMMEMBERRUNDOWNs()
		{
			return this.EDUTEAMMEMBERRUNDOWNService.GetAll();
		}


		public IEnumerable<EDUTEAMMEMBERRUNDOWNDto> ReadEDUTEAMMEMBERRUNDOWNs(Expression<Func<EDUTEAMMEMBERRUNDOWN, bool>> filter)
		{
			return this.EDUTEAMMEMBERRUNDOWNService.Find(filter);
		}


		public IEnumerable<EDUTEAMMEMBERRUNDOWNDto> ReadEDUTEAMMEMBERRUNDOWNs(ISpecification<EDUTEAMMEMBERRUNDOWN> specification)
		{
			return this.EDUTEAMMEMBERRUNDOWNService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUTEAMMEMBERRUNDOWNDto> ReadEDUTEAMMEMBERRUNDOWNs(IQueryable<EDUTEAMMEMBERRUNDOWN> query)
		{
			return this.EDUTEAMMEMBERRUNDOWNService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUTEAMMEMBERRUNDOWNDto> ReadEDUTEAMMEMBERRUNDOWNs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUTEAMMEMBERRUNDOWNService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUTEAMMEMBERRUNDOWNDto> ReadEDUTEAMMEMBERRUNDOWNs(object[] keyWords)
		{
			return this.EDUTEAMMEMBERRUNDOWNService.Find(keyWords);
		}


		public IEnumerable<EDUTEAMMEMBERRUNDOWNDto> ReadEDUTEAMMEMBERRUNDOWNsPaged(int startIndex, int pageSize)
		{
			return this.EDUTEAMMEMBERRUNDOWNService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUTEAMMEMBERRUNDOWNDto> ReadEDUTEAMMEMBERRUNDOWNsPaged(IQueryable<EDUTEAMMEMBERRUNDOWN> source, int pageIndex, int pageSize)
		{
			return this.EDUTEAMMEMBERRUNDOWNService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUTEAMMEMBERRUNDOWNDto> ReadEDUTEAMMEMBERRUNDOWNsPaged(IQueryable<EDUTEAMMEMBERRUNDOWN> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUTEAMMEMBERRUNDOWNService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUTEAMMEMBERRUNDOWNDto> ReadEDUTEAMMEMBERRUNDOWNsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUTEAMMEMBERRUNDOWNService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUTEAMMEMBERRUNDOWNDto> ReadEDUTEAMMEMBERRUNDOWNsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUTEAMMEMBERRUNDOWNService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUTEAMMEMBERRUNDOWNDto> ReadEDUTEAMMEMBERRUNDOWNsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUTEAMMEMBERRUNDOWN, bool>> filter)
		{
			return this.EDUTEAMMEMBERRUNDOWNService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUTEAMMEMBERRUNDOWNDto ReadEDUTEAMMEMBERRUNDOWNs(string dtoKey)
		{
			return this.EDUTEAMMEMBERRUNDOWNService.GetByKey(dtoKey);
		}


		public int CountEDUTEAMMEMBERRUNDOWNs()
		{
			return this.EDUTEAMMEMBERRUNDOWNService.Count();
		}


		public int CountEDUTEAMMEMBERRUNDOWNs(string filterExpression)
		{
			return this.EDUTEAMMEMBERRUNDOWNService.Count(filterExpression);
		}


		public int CountEDUTEAMMEMBERRUNDOWNs(Expression<Func<EDUTEAMMEMBERRUNDOWN, bool>> filter)
		{
			return this.EDUTEAMMEMBERRUNDOWNService.Count(filter);
		}


		public string CreateEDUTEAMMEMBERRUNDOWN(EDUTEAMMEMBERRUNDOWNDto eduteammemberrundown, bool doSaveChanges = true)
		{
			string key = this.EDUTEAMMEMBERRUNDOWNService.Add(eduteammemberrundown);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUTEAMMEMBERRUNDOWN(EDUTEAMMEMBERRUNDOWNDto eduteammemberrundown, bool doSaveChanges = true)
		{
			this.EDUTEAMMEMBERRUNDOWNService.Update(eduteammemberrundown);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUTEAMMEMBERRUNDOWNs(IEnumerable<EDUTEAMMEMBERRUNDOWNDto> eduteammemberrundowns, bool doSaveChanges = true)
		{
			if (eduteammemberrundowns == null)
			{
				return;
			}
			foreach (EDUTEAMMEMBERRUNDOWNDto instance in eduteammemberrundowns)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUTEAMMEMBERRUNDOWNService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUTEAMMEMBERRUNDOWN(EDUTEAMMEMBERRUNDOWNDto eduteammemberrundown, bool doSaveChanges = true)
		{
			this.EDUTEAMMEMBERRUNDOWNService.Delete(eduteammemberrundown);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUTEAMMEMBERRUNDOWNs(IEnumerable<EDUTEAMMEMBERRUNDOWNDto> eduteammemberrundowns, bool doSaveChanges = true)
		{
			if (eduteammemberrundowns == null)
			{
				return;
			}
			foreach (EDUTEAMMEMBERRUNDOWNDto instance in eduteammemberrundowns)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUTEAMMEMBERRUNDOWNService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUTEAMMEMBERRUNDOWN(EDUTEAMMEMBERRUNDOWNDto eduteammemberrundown, bool doSaveChanges = true)
		{
			switch (eduteammemberrundown.RowState)
			{
				case RowState.Insert:
					this.CreateEDUTEAMMEMBERRUNDOWN(eduteammemberrundown, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUTEAMMEMBERRUNDOWN(eduteammemberrundown, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUTEAMMEMBERRUNDOWN(eduteammemberrundown, doSaveChanges);
					break;
			}
		}


		public void SaveEDUTEAMMEMBERRUNDOWNs(IEnumerable<EDUTEAMMEMBERRUNDOWNDto> eduteammemberrundowns, bool doSaveChanges = true)
		{
			if (eduteammemberrundowns == null)
			{
				return;
			}
			foreach (EDUTEAMMEMBERRUNDOWNDto instance in eduteammemberrundowns)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUTEAMMEMBERRUNDOWN(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUTEAMMEMBERRUNDOWN CRUD Operations


		#region EDUTEAMMEMBER CRUD Operations


		private IEDUTEAMMEMBERService eduteammember;
		public virtual IEDUTEAMMEMBERService EDUTEAMMEMBERService
		{
			get
			{
				if (this.eduteammember == null)
				{
					IEDUTEAMMEMBERAssembler assembler = new EDUTEAMMEMBERAssembler();
					IEDUTEAMMEMBERRepository repository = new EDUTEAMMEMBERRepository(this.UnitOfWork);
					this.eduteammember = new EDUTEAMMEMBERService(assembler, repository);
				}
				return this.eduteammember;
			}
		}


		public IQueryable<EDUTEAMMEMBER> EDUTEAMMEMBERs
		{
			get { return this.EDUTEAMMEMBERService.Repository.GetAll(); }
		}


		public IQueryable<EDUTEAMMEMBER> ReadEDUTEAMMEMBERs(Expression<Func<EDUTEAMMEMBER, bool>> filter, int dummy)
		{
			return this.EDUTEAMMEMBERService.Repository.Find(filter);
		}


		public IEnumerable<EDUTEAMMEMBERDto> ReadEDUTEAMMEMBERs()
		{
			return this.EDUTEAMMEMBERService.GetAll();
		}


		public IEnumerable<EDUTEAMMEMBERDto> ReadEDUTEAMMEMBERs(Expression<Func<EDUTEAMMEMBER, bool>> filter)
		{
			return this.EDUTEAMMEMBERService.Find(filter);
		}


		public IEnumerable<EDUTEAMMEMBERDto> ReadEDUTEAMMEMBERs(ISpecification<EDUTEAMMEMBER> specification)
		{
			return this.EDUTEAMMEMBERService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUTEAMMEMBERDto> ReadEDUTEAMMEMBERs(IQueryable<EDUTEAMMEMBER> query)
		{
			return this.EDUTEAMMEMBERService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUTEAMMEMBERDto> ReadEDUTEAMMEMBERs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUTEAMMEMBERService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUTEAMMEMBERDto> ReadEDUTEAMMEMBERs(object[] keyWords)
		{
			return this.EDUTEAMMEMBERService.Find(keyWords);
		}


		public IEnumerable<EDUTEAMMEMBERDto> ReadEDUTEAMMEMBERsPaged(int startIndex, int pageSize)
		{
			return this.EDUTEAMMEMBERService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUTEAMMEMBERDto> ReadEDUTEAMMEMBERsPaged(IQueryable<EDUTEAMMEMBER> source, int pageIndex, int pageSize)
		{
			return this.EDUTEAMMEMBERService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUTEAMMEMBERDto> ReadEDUTEAMMEMBERsPaged(IQueryable<EDUTEAMMEMBER> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUTEAMMEMBERService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUTEAMMEMBERDto> ReadEDUTEAMMEMBERsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUTEAMMEMBERService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUTEAMMEMBERDto> ReadEDUTEAMMEMBERsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUTEAMMEMBERService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUTEAMMEMBERDto> ReadEDUTEAMMEMBERsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUTEAMMEMBER, bool>> filter)
		{
			return this.EDUTEAMMEMBERService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUTEAMMEMBERDto ReadEDUTEAMMEMBERs(string dtoKey)
		{
			return this.EDUTEAMMEMBERService.GetByKey(dtoKey);
		}


		public int CountEDUTEAMMEMBERs()
		{
			return this.EDUTEAMMEMBERService.Count();
		}


		public int CountEDUTEAMMEMBERs(string filterExpression)
		{
			return this.EDUTEAMMEMBERService.Count(filterExpression);
		}


		public int CountEDUTEAMMEMBERs(Expression<Func<EDUTEAMMEMBER, bool>> filter)
		{
			return this.EDUTEAMMEMBERService.Count(filter);
		}


		public string CreateEDUTEAMMEMBER(EDUTEAMMEMBERDto eduteammember, bool doSaveChanges = true)
		{
			string key = this.EDUTEAMMEMBERService.Add(eduteammember);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUTEAMMEMBER(EDUTEAMMEMBERDto eduteammember, bool doSaveChanges = true)
		{
			this.EDUTEAMMEMBERService.Update(eduteammember);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUTEAMMEMBERs(IEnumerable<EDUTEAMMEMBERDto> eduteammembers, bool doSaveChanges = true)
		{
			if (eduteammembers == null)
			{
				return;
			}
			foreach (EDUTEAMMEMBERDto instance in eduteammembers)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUTEAMMEMBERService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUTEAMMEMBER(EDUTEAMMEMBERDto eduteammember, bool doSaveChanges = true)
		{
			this.EDUTEAMMEMBERService.Delete(eduteammember);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUTEAMMEMBERs(IEnumerable<EDUTEAMMEMBERDto> eduteammembers, bool doSaveChanges = true)
		{
			if (eduteammembers == null)
			{
				return;
			}
			foreach (EDUTEAMMEMBERDto instance in eduteammembers)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUTEAMMEMBERService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUTEAMMEMBER(EDUTEAMMEMBERDto eduteammember, bool doSaveChanges = true)
		{
			switch (eduteammember.RowState)
			{
				case RowState.Insert:
					this.CreateEDUTEAMMEMBER(eduteammember, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUTEAMMEMBER(eduteammember, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUTEAMMEMBER(eduteammember, doSaveChanges);
					break;
			}
		}


		public void SaveEDUTEAMMEMBERs(IEnumerable<EDUTEAMMEMBERDto> eduteammembers, bool doSaveChanges = true)
		{
			if (eduteammembers == null)
			{
				return;
			}
			foreach (EDUTEAMMEMBERDto instance in eduteammembers)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUTEAMMEMBER(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUTEAMMEMBER CRUD Operations


		#region EDUTEAM CRUD Operations


		private IEDUTEAMService eduteam;
		public virtual IEDUTEAMService EDUTEAMService
		{
			get
			{
				if (this.eduteam == null)
				{
					IEDUTEAMAssembler assembler = new EDUTEAMAssembler();
					IEDUTEAMRepository repository = new EDUTEAMRepository(this.UnitOfWork);
					this.eduteam = new EDUTEAMService(assembler, repository);
				}
				return this.eduteam;
			}
		}


		public IQueryable<EDUTEAM> EDUTEAMs
		{
			get { return this.EDUTEAMService.Repository.GetAll(); }
		}


		public IQueryable<EDUTEAM> ReadEDUTEAMs(Expression<Func<EDUTEAM, bool>> filter, int dummy)
		{
			return this.EDUTEAMService.Repository.Find(filter);
		}


		public IEnumerable<EDUTEAMDto> ReadEDUTEAMs()
		{
			return this.EDUTEAMService.GetAll();
		}


		public IEnumerable<EDUTEAMDto> ReadEDUTEAMs(Expression<Func<EDUTEAM, bool>> filter)
		{
			return this.EDUTEAMService.Find(filter);
		}


		public IEnumerable<EDUTEAMDto> ReadEDUTEAMs(ISpecification<EDUTEAM> specification)
		{
			return this.EDUTEAMService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUTEAMDto> ReadEDUTEAMs(IQueryable<EDUTEAM> query)
		{
			return this.EDUTEAMService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUTEAMDto> ReadEDUTEAMs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUTEAMService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUTEAMDto> ReadEDUTEAMs(object[] keyWords)
		{
			return this.EDUTEAMService.Find(keyWords);
		}


		public IEnumerable<EDUTEAMDto> ReadEDUTEAMsPaged(int startIndex, int pageSize)
		{
			return this.EDUTEAMService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUTEAMDto> ReadEDUTEAMsPaged(IQueryable<EDUTEAM> source, int pageIndex, int pageSize)
		{
			return this.EDUTEAMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUTEAMDto> ReadEDUTEAMsPaged(IQueryable<EDUTEAM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUTEAMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUTEAMDto> ReadEDUTEAMsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUTEAMService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUTEAMDto> ReadEDUTEAMsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUTEAMService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUTEAMDto> ReadEDUTEAMsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUTEAM, bool>> filter)
		{
			return this.EDUTEAMService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUTEAMDto ReadEDUTEAMs(string dtoKey)
		{
			return this.EDUTEAMService.GetByKey(dtoKey);
		}


		public int CountEDUTEAMs()
		{
			return this.EDUTEAMService.Count();
		}


		public int CountEDUTEAMs(string filterExpression)
		{
			return this.EDUTEAMService.Count(filterExpression);
		}


		public int CountEDUTEAMs(Expression<Func<EDUTEAM, bool>> filter)
		{
			return this.EDUTEAMService.Count(filter);
		}


		public string CreateEDUTEAM(EDUTEAMDto eduteam, bool doSaveChanges = true)
		{
			string key = this.EDUTEAMService.Add(eduteam);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUTEAM(EDUTEAMDto eduteam, bool doSaveChanges = true)
		{
			this.EDUTEAMService.Update(eduteam);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUTEAMs(IEnumerable<EDUTEAMDto> eduteams, bool doSaveChanges = true)
		{
			if (eduteams == null)
			{
				return;
			}
			foreach (EDUTEAMDto instance in eduteams)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUTEAMService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUTEAM(EDUTEAMDto eduteam, bool doSaveChanges = true)
		{
			this.EDUTEAMService.Delete(eduteam);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUTEAMs(IEnumerable<EDUTEAMDto> eduteams, bool doSaveChanges = true)
		{
			if (eduteams == null)
			{
				return;
			}
			foreach (EDUTEAMDto instance in eduteams)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUTEAMService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUTEAM(EDUTEAMDto eduteam, bool doSaveChanges = true)
		{
			switch (eduteam.RowState)
			{
				case RowState.Insert:
					this.CreateEDUTEAM(eduteam, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUTEAM(eduteam, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUTEAM(eduteam, doSaveChanges);
					break;
			}
		}


		public void SaveEDUTEAMs(IEnumerable<EDUTEAMDto> eduteams, bool doSaveChanges = true)
		{
			if (eduteams == null)
			{
				return;
			}
			foreach (EDUTEAMDto instance in eduteams)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUTEAM(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUTEAM CRUD Operations


		#region EDUTEACHERTYPE CRUD Operations


		private IEDUTEACHERTYPEService eduteachertype;
		public virtual IEDUTEACHERTYPEService EDUTEACHERTYPEService
		{
			get
			{
				if (this.eduteachertype == null)
				{
					IEDUTEACHERTYPEAssembler assembler = new EDUTEACHERTYPEAssembler();
					IEDUTEACHERTYPERepository repository = new EDUTEACHERTYPERepository(this.UnitOfWork);
					this.eduteachertype = new EDUTEACHERTYPEService(assembler, repository);
				}
				return this.eduteachertype;
			}
		}


		public IQueryable<EDUTEACHERTYPE> EDUTEACHERTYPEs
		{
			get { return this.EDUTEACHERTYPEService.Repository.GetAll(); }
		}


		public IQueryable<EDUTEACHERTYPE> ReadEDUTEACHERTYPEs(Expression<Func<EDUTEACHERTYPE, bool>> filter, int dummy)
		{
			return this.EDUTEACHERTYPEService.Repository.Find(filter);
		}


		public IEnumerable<EDUTEACHERTYPEDto> ReadEDUTEACHERTYPEs()
		{
			return this.EDUTEACHERTYPEService.GetAll();
		}


		public IEnumerable<EDUTEACHERTYPEDto> ReadEDUTEACHERTYPEs(Expression<Func<EDUTEACHERTYPE, bool>> filter)
		{
			return this.EDUTEACHERTYPEService.Find(filter);
		}


		public IEnumerable<EDUTEACHERTYPEDto> ReadEDUTEACHERTYPEs(ISpecification<EDUTEACHERTYPE> specification)
		{
			return this.EDUTEACHERTYPEService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUTEACHERTYPEDto> ReadEDUTEACHERTYPEs(IQueryable<EDUTEACHERTYPE> query)
		{
			return this.EDUTEACHERTYPEService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUTEACHERTYPEDto> ReadEDUTEACHERTYPEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUTEACHERTYPEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUTEACHERTYPEDto> ReadEDUTEACHERTYPEs(object[] keyWords)
		{
			return this.EDUTEACHERTYPEService.Find(keyWords);
		}


		public IEnumerable<EDUTEACHERTYPEDto> ReadEDUTEACHERTYPEsPaged(int startIndex, int pageSize)
		{
			return this.EDUTEACHERTYPEService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUTEACHERTYPEDto> ReadEDUTEACHERTYPEsPaged(IQueryable<EDUTEACHERTYPE> source, int pageIndex, int pageSize)
		{
			return this.EDUTEACHERTYPEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUTEACHERTYPEDto> ReadEDUTEACHERTYPEsPaged(IQueryable<EDUTEACHERTYPE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUTEACHERTYPEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUTEACHERTYPEDto> ReadEDUTEACHERTYPEsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUTEACHERTYPEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUTEACHERTYPEDto> ReadEDUTEACHERTYPEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUTEACHERTYPEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUTEACHERTYPEDto> ReadEDUTEACHERTYPEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUTEACHERTYPE, bool>> filter)
		{
			return this.EDUTEACHERTYPEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUTEACHERTYPEDto ReadEDUTEACHERTYPEs(string dtoKey)
		{
			return this.EDUTEACHERTYPEService.GetByKey(dtoKey);
		}


		public int CountEDUTEACHERTYPEs()
		{
			return this.EDUTEACHERTYPEService.Count();
		}


		public int CountEDUTEACHERTYPEs(string filterExpression)
		{
			return this.EDUTEACHERTYPEService.Count(filterExpression);
		}


		public int CountEDUTEACHERTYPEs(Expression<Func<EDUTEACHERTYPE, bool>> filter)
		{
			return this.EDUTEACHERTYPEService.Count(filter);
		}


		public string CreateEDUTEACHERTYPE(EDUTEACHERTYPEDto eduteachertype, bool doSaveChanges = true)
		{
			string key = this.EDUTEACHERTYPEService.Add(eduteachertype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUTEACHERTYPE(EDUTEACHERTYPEDto eduteachertype, bool doSaveChanges = true)
		{
			this.EDUTEACHERTYPEService.Update(eduteachertype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUTEACHERTYPEs(IEnumerable<EDUTEACHERTYPEDto> eduteachertypes, bool doSaveChanges = true)
		{
			if (eduteachertypes == null)
			{
				return;
			}
			foreach (EDUTEACHERTYPEDto instance in eduteachertypes)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUTEACHERTYPEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUTEACHERTYPE(EDUTEACHERTYPEDto eduteachertype, bool doSaveChanges = true)
		{
			this.EDUTEACHERTYPEService.Delete(eduteachertype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUTEACHERTYPEs(IEnumerable<EDUTEACHERTYPEDto> eduteachertypes, bool doSaveChanges = true)
		{
			if (eduteachertypes == null)
			{
				return;
			}
			foreach (EDUTEACHERTYPEDto instance in eduteachertypes)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUTEACHERTYPEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUTEACHERTYPE(EDUTEACHERTYPEDto eduteachertype, bool doSaveChanges = true)
		{
			switch (eduteachertype.RowState)
			{
				case RowState.Insert:
					this.CreateEDUTEACHERTYPE(eduteachertype, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUTEACHERTYPE(eduteachertype, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUTEACHERTYPE(eduteachertype, doSaveChanges);
					break;
			}
		}


		public void SaveEDUTEACHERTYPEs(IEnumerable<EDUTEACHERTYPEDto> eduteachertypes, bool doSaveChanges = true)
		{
			if (eduteachertypes == null)
			{
				return;
			}
			foreach (EDUTEACHERTYPEDto instance in eduteachertypes)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUTEACHERTYPE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUTEACHERTYPE CRUD Operations


		#region EDUSTOPACTSCHEDULE CRUD Operations


		private IEDUSTOPACTSCHEDULEService edustopactschedule;
		public virtual IEDUSTOPACTSCHEDULEService EDUSTOPACTSCHEDULEService
		{
			get
			{
				if (this.edustopactschedule == null)
				{
					IEDUSTOPACTSCHEDULEAssembler assembler = new EDUSTOPACTSCHEDULEAssembler();
					IEDUSTOPACTSCHEDULERepository repository = new EDUSTOPACTSCHEDULERepository(this.UnitOfWork);
					this.edustopactschedule = new EDUSTOPACTSCHEDULEService(assembler, repository);
				}
				return this.edustopactschedule;
			}
		}


		public IQueryable<EDUSTOPACTSCHEDULE> EDUSTOPACTSCHEDULEs
		{
			get { return this.EDUSTOPACTSCHEDULEService.Repository.GetAll(); }
		}


		public IQueryable<EDUSTOPACTSCHEDULE> ReadEDUSTOPACTSCHEDULEs(Expression<Func<EDUSTOPACTSCHEDULE, bool>> filter, int dummy)
		{
			return this.EDUSTOPACTSCHEDULEService.Repository.Find(filter);
		}


		public IEnumerable<EDUSTOPACTSCHEDULEDto> ReadEDUSTOPACTSCHEDULEs()
		{
			return this.EDUSTOPACTSCHEDULEService.GetAll();
		}


		public IEnumerable<EDUSTOPACTSCHEDULEDto> ReadEDUSTOPACTSCHEDULEs(Expression<Func<EDUSTOPACTSCHEDULE, bool>> filter)
		{
			return this.EDUSTOPACTSCHEDULEService.Find(filter);
		}


		public IEnumerable<EDUSTOPACTSCHEDULEDto> ReadEDUSTOPACTSCHEDULEs(ISpecification<EDUSTOPACTSCHEDULE> specification)
		{
			return this.EDUSTOPACTSCHEDULEService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUSTOPACTSCHEDULEDto> ReadEDUSTOPACTSCHEDULEs(IQueryable<EDUSTOPACTSCHEDULE> query)
		{
			return this.EDUSTOPACTSCHEDULEService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUSTOPACTSCHEDULEDto> ReadEDUSTOPACTSCHEDULEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUSTOPACTSCHEDULEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUSTOPACTSCHEDULEDto> ReadEDUSTOPACTSCHEDULEs(object[] keyWords)
		{
			return this.EDUSTOPACTSCHEDULEService.Find(keyWords);
		}


		public IEnumerable<EDUSTOPACTSCHEDULEDto> ReadEDUSTOPACTSCHEDULEsPaged(int startIndex, int pageSize)
		{
			return this.EDUSTOPACTSCHEDULEService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUSTOPACTSCHEDULEDto> ReadEDUSTOPACTSCHEDULEsPaged(IQueryable<EDUSTOPACTSCHEDULE> source, int pageIndex, int pageSize)
		{
			return this.EDUSTOPACTSCHEDULEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUSTOPACTSCHEDULEDto> ReadEDUSTOPACTSCHEDULEsPaged(IQueryable<EDUSTOPACTSCHEDULE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUSTOPACTSCHEDULEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUSTOPACTSCHEDULEDto> ReadEDUSTOPACTSCHEDULEsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUSTOPACTSCHEDULEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUSTOPACTSCHEDULEDto> ReadEDUSTOPACTSCHEDULEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUSTOPACTSCHEDULEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUSTOPACTSCHEDULEDto> ReadEDUSTOPACTSCHEDULEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUSTOPACTSCHEDULE, bool>> filter)
		{
			return this.EDUSTOPACTSCHEDULEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUSTOPACTSCHEDULEDto ReadEDUSTOPACTSCHEDULEs(string dtoKey)
		{
			return this.EDUSTOPACTSCHEDULEService.GetByKey(dtoKey);
		}


		public int CountEDUSTOPACTSCHEDULEs()
		{
			return this.EDUSTOPACTSCHEDULEService.Count();
		}


		public int CountEDUSTOPACTSCHEDULEs(string filterExpression)
		{
			return this.EDUSTOPACTSCHEDULEService.Count(filterExpression);
		}


		public int CountEDUSTOPACTSCHEDULEs(Expression<Func<EDUSTOPACTSCHEDULE, bool>> filter)
		{
			return this.EDUSTOPACTSCHEDULEService.Count(filter);
		}


		public string CreateEDUSTOPACTSCHEDULE(EDUSTOPACTSCHEDULEDto edustopactschedule, bool doSaveChanges = true)
		{
			string key = this.EDUSTOPACTSCHEDULEService.Add(edustopactschedule);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUSTOPACTSCHEDULE(EDUSTOPACTSCHEDULEDto edustopactschedule, bool doSaveChanges = true)
		{
			this.EDUSTOPACTSCHEDULEService.Update(edustopactschedule);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUSTOPACTSCHEDULEs(IEnumerable<EDUSTOPACTSCHEDULEDto> edustopactschedules, bool doSaveChanges = true)
		{
			if (edustopactschedules == null)
			{
				return;
			}
			foreach (EDUSTOPACTSCHEDULEDto instance in edustopactschedules)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUSTOPACTSCHEDULEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUSTOPACTSCHEDULE(EDUSTOPACTSCHEDULEDto edustopactschedule, bool doSaveChanges = true)
		{
			this.EDUSTOPACTSCHEDULEService.Delete(edustopactschedule);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUSTOPACTSCHEDULEs(IEnumerable<EDUSTOPACTSCHEDULEDto> edustopactschedules, bool doSaveChanges = true)
		{
			if (edustopactschedules == null)
			{
				return;
			}
			foreach (EDUSTOPACTSCHEDULEDto instance in edustopactschedules)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUSTOPACTSCHEDULEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUSTOPACTSCHEDULE(EDUSTOPACTSCHEDULEDto edustopactschedule, bool doSaveChanges = true)
		{
			switch (edustopactschedule.RowState)
			{
				case RowState.Insert:
					this.CreateEDUSTOPACTSCHEDULE(edustopactschedule, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUSTOPACTSCHEDULE(edustopactschedule, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUSTOPACTSCHEDULE(edustopactschedule, doSaveChanges);
					break;
			}
		}


		public void SaveEDUSTOPACTSCHEDULEs(IEnumerable<EDUSTOPACTSCHEDULEDto> edustopactschedules, bool doSaveChanges = true)
		{
			if (edustopactschedules == null)
			{
				return;
			}
			foreach (EDUSTOPACTSCHEDULEDto instance in edustopactschedules)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUSTOPACTSCHEDULE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUSTOPACTSCHEDULE CRUD Operations


		#region EDUSTOPACTATTACHMENT CRUD Operations


		private IEDUSTOPACTATTACHMENTService edustopactattachment;
		public virtual IEDUSTOPACTATTACHMENTService EDUSTOPACTATTACHMENTService
		{
			get
			{
				if (this.edustopactattachment == null)
				{
					IEDUSTOPACTATTACHMENTAssembler assembler = new EDUSTOPACTATTACHMENTAssembler();
					IEDUSTOPACTATTACHMENTRepository repository = new EDUSTOPACTATTACHMENTRepository(this.UnitOfWork);
					this.edustopactattachment = new EDUSTOPACTATTACHMENTService(assembler, repository);
				}
				return this.edustopactattachment;
			}
		}


		public IQueryable<EDUSTOPACTATTACHMENT> EDUSTOPACTATTACHMENTs
		{
			get { return this.EDUSTOPACTATTACHMENTService.Repository.GetAll(); }
		}


		public IQueryable<EDUSTOPACTATTACHMENT> ReadEDUSTOPACTATTACHMENTs(Expression<Func<EDUSTOPACTATTACHMENT, bool>> filter, int dummy)
		{
			return this.EDUSTOPACTATTACHMENTService.Repository.Find(filter);
		}


		public IEnumerable<EDUSTOPACTATTACHMENTDto> ReadEDUSTOPACTATTACHMENTs()
		{
			return this.EDUSTOPACTATTACHMENTService.GetAll();
		}


		public IEnumerable<EDUSTOPACTATTACHMENTDto> ReadEDUSTOPACTATTACHMENTs(Expression<Func<EDUSTOPACTATTACHMENT, bool>> filter)
		{
			return this.EDUSTOPACTATTACHMENTService.Find(filter);
		}


		public IEnumerable<EDUSTOPACTATTACHMENTDto> ReadEDUSTOPACTATTACHMENTs(ISpecification<EDUSTOPACTATTACHMENT> specification)
		{
			return this.EDUSTOPACTATTACHMENTService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUSTOPACTATTACHMENTDto> ReadEDUSTOPACTATTACHMENTs(IQueryable<EDUSTOPACTATTACHMENT> query)
		{
			return this.EDUSTOPACTATTACHMENTService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUSTOPACTATTACHMENTDto> ReadEDUSTOPACTATTACHMENTs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUSTOPACTATTACHMENTService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUSTOPACTATTACHMENTDto> ReadEDUSTOPACTATTACHMENTs(object[] keyWords)
		{
			return this.EDUSTOPACTATTACHMENTService.Find(keyWords);
		}


		public IEnumerable<EDUSTOPACTATTACHMENTDto> ReadEDUSTOPACTATTACHMENTsPaged(int startIndex, int pageSize)
		{
			return this.EDUSTOPACTATTACHMENTService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUSTOPACTATTACHMENTDto> ReadEDUSTOPACTATTACHMENTsPaged(IQueryable<EDUSTOPACTATTACHMENT> source, int pageIndex, int pageSize)
		{
			return this.EDUSTOPACTATTACHMENTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUSTOPACTATTACHMENTDto> ReadEDUSTOPACTATTACHMENTsPaged(IQueryable<EDUSTOPACTATTACHMENT> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUSTOPACTATTACHMENTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUSTOPACTATTACHMENTDto> ReadEDUSTOPACTATTACHMENTsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUSTOPACTATTACHMENTService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUSTOPACTATTACHMENTDto> ReadEDUSTOPACTATTACHMENTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUSTOPACTATTACHMENTService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUSTOPACTATTACHMENTDto> ReadEDUSTOPACTATTACHMENTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUSTOPACTATTACHMENT, bool>> filter)
		{
			return this.EDUSTOPACTATTACHMENTService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUSTOPACTATTACHMENTDto ReadEDUSTOPACTATTACHMENTs(string dtoKey)
		{
			return this.EDUSTOPACTATTACHMENTService.GetByKey(dtoKey);
		}


		public int CountEDUSTOPACTATTACHMENTs()
		{
			return this.EDUSTOPACTATTACHMENTService.Count();
		}


		public int CountEDUSTOPACTATTACHMENTs(string filterExpression)
		{
			return this.EDUSTOPACTATTACHMENTService.Count(filterExpression);
		}


		public int CountEDUSTOPACTATTACHMENTs(Expression<Func<EDUSTOPACTATTACHMENT, bool>> filter)
		{
			return this.EDUSTOPACTATTACHMENTService.Count(filter);
		}


		public string CreateEDUSTOPACTATTACHMENT(EDUSTOPACTATTACHMENTDto edustopactattachment, bool doSaveChanges = true)
		{
			string key = this.EDUSTOPACTATTACHMENTService.Add(edustopactattachment);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUSTOPACTATTACHMENT(EDUSTOPACTATTACHMENTDto edustopactattachment, bool doSaveChanges = true)
		{
			this.EDUSTOPACTATTACHMENTService.Update(edustopactattachment);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUSTOPACTATTACHMENTs(IEnumerable<EDUSTOPACTATTACHMENTDto> edustopactattachments, bool doSaveChanges = true)
		{
			if (edustopactattachments == null)
			{
				return;
			}
			foreach (EDUSTOPACTATTACHMENTDto instance in edustopactattachments)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUSTOPACTATTACHMENTService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUSTOPACTATTACHMENT(EDUSTOPACTATTACHMENTDto edustopactattachment, bool doSaveChanges = true)
		{
			this.EDUSTOPACTATTACHMENTService.Delete(edustopactattachment);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUSTOPACTATTACHMENTs(IEnumerable<EDUSTOPACTATTACHMENTDto> edustopactattachments, bool doSaveChanges = true)
		{
			if (edustopactattachments == null)
			{
				return;
			}
			foreach (EDUSTOPACTATTACHMENTDto instance in edustopactattachments)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUSTOPACTATTACHMENTService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUSTOPACTATTACHMENT(EDUSTOPACTATTACHMENTDto edustopactattachment, bool doSaveChanges = true)
		{
			switch (edustopactattachment.RowState)
			{
				case RowState.Insert:
					this.CreateEDUSTOPACTATTACHMENT(edustopactattachment, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUSTOPACTATTACHMENT(edustopactattachment, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUSTOPACTATTACHMENT(edustopactattachment, doSaveChanges);
					break;
			}
		}


		public void SaveEDUSTOPACTATTACHMENTs(IEnumerable<EDUSTOPACTATTACHMENTDto> edustopactattachments, bool doSaveChanges = true)
		{
			if (edustopactattachments == null)
			{
				return;
			}
			foreach (EDUSTOPACTATTACHMENTDto instance in edustopactattachments)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUSTOPACTATTACHMENT(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUSTOPACTATTACHMENT CRUD Operations


		#region EDUSTOP CRUD Operations


		private IEDUSTOPService edustop;
		public virtual IEDUSTOPService EDUSTOPService
		{
			get
			{
				if (this.edustop == null)
				{
					IEDUSTOPAssembler assembler = new EDUSTOPAssembler();
					IEDUSTOPRepository repository = new EDUSTOPRepository(this.UnitOfWork);
					this.edustop = new EDUSTOPService(assembler, repository);
				}
				return this.edustop;
			}
		}


		public IQueryable<EDUSTOP> EDUSTOPs
		{
			get { return this.EDUSTOPService.Repository.GetAll(); }
		}


		public IQueryable<EDUSTOP> ReadEDUSTOPs(Expression<Func<EDUSTOP, bool>> filter, int dummy)
		{
			return this.EDUSTOPService.Repository.Find(filter);
		}


		public IEnumerable<EDUSTOPDto> ReadEDUSTOPs()
		{
			return this.EDUSTOPService.GetAll();
		}


		public IEnumerable<EDUSTOPDto> ReadEDUSTOPs(Expression<Func<EDUSTOP, bool>> filter)
		{
			return this.EDUSTOPService.Find(filter);
		}


		public IEnumerable<EDUSTOPDto> ReadEDUSTOPs(ISpecification<EDUSTOP> specification)
		{
			return this.EDUSTOPService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUSTOPDto> ReadEDUSTOPs(IQueryable<EDUSTOP> query)
		{
			return this.EDUSTOPService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUSTOPDto> ReadEDUSTOPs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUSTOPService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUSTOPDto> ReadEDUSTOPs(object[] keyWords)
		{
			return this.EDUSTOPService.Find(keyWords);
		}


		public IEnumerable<EDUSTOPDto> ReadEDUSTOPsPaged(int startIndex, int pageSize)
		{
			return this.EDUSTOPService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUSTOPDto> ReadEDUSTOPsPaged(IQueryable<EDUSTOP> source, int pageIndex, int pageSize)
		{
			return this.EDUSTOPService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUSTOPDto> ReadEDUSTOPsPaged(IQueryable<EDUSTOP> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUSTOPService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUSTOPDto> ReadEDUSTOPsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUSTOPService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUSTOPDto> ReadEDUSTOPsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUSTOPService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUSTOPDto> ReadEDUSTOPsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUSTOP, bool>> filter)
		{
			return this.EDUSTOPService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUSTOPDto ReadEDUSTOPs(string dtoKey)
		{
			return this.EDUSTOPService.GetByKey(dtoKey);
		}


		public int CountEDUSTOPs()
		{
			return this.EDUSTOPService.Count();
		}


		public int CountEDUSTOPs(string filterExpression)
		{
			return this.EDUSTOPService.Count(filterExpression);
		}


		public int CountEDUSTOPs(Expression<Func<EDUSTOP, bool>> filter)
		{
			return this.EDUSTOPService.Count(filter);
		}


		public string CreateEDUSTOP(EDUSTOPDto edustop, bool doSaveChanges = true)
		{
			string key = this.EDUSTOPService.Add(edustop);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUSTOP(EDUSTOPDto edustop, bool doSaveChanges = true)
		{
			this.EDUSTOPService.Update(edustop);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUSTOPs(IEnumerable<EDUSTOPDto> edustops, bool doSaveChanges = true)
		{
			if (edustops == null)
			{
				return;
			}
			foreach (EDUSTOPDto instance in edustops)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUSTOPService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUSTOP(EDUSTOPDto edustop, bool doSaveChanges = true)
		{
			this.EDUSTOPService.Delete(edustop);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUSTOPs(IEnumerable<EDUSTOPDto> edustops, bool doSaveChanges = true)
		{
			if (edustops == null)
			{
				return;
			}
			foreach (EDUSTOPDto instance in edustops)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUSTOPService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUSTOP(EDUSTOPDto edustop, bool doSaveChanges = true)
		{
			switch (edustop.RowState)
			{
				case RowState.Insert:
					this.CreateEDUSTOP(edustop, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUSTOP(edustop, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUSTOP(edustop, doSaveChanges);
					break;
			}
		}


		public void SaveEDUSTOPs(IEnumerable<EDUSTOPDto> edustops, bool doSaveChanges = true)
		{
			if (edustops == null)
			{
				return;
			}
			foreach (EDUSTOPDto instance in edustops)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUSTOP(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUSTOP CRUD Operations


		#region EDUSETTING CRUD Operations


		private IEDUSETTINGService edusetting;
		public virtual IEDUSETTINGService EDUSETTINGService
		{
			get
			{
				if (this.edusetting == null)
				{
					IEDUSETTINGAssembler assembler = new EDUSETTINGAssembler();
					IEDUSETTINGRepository repository = new EDUSETTINGRepository(this.UnitOfWork);
					this.edusetting = new EDUSETTINGService(assembler, repository);
				}
				return this.edusetting;
			}
		}


		public IQueryable<EDUSETTING> EDUSETTINGs
		{
			get { return this.EDUSETTINGService.Repository.GetAll(); }
		}


		public IQueryable<EDUSETTING> ReadEDUSETTINGs(Expression<Func<EDUSETTING, bool>> filter, int dummy)
		{
			return this.EDUSETTINGService.Repository.Find(filter);
		}


		public IEnumerable<EDUSETTINGDto> ReadEDUSETTINGs()
		{
			return this.EDUSETTINGService.GetAll();
		}


		public IEnumerable<EDUSETTINGDto> ReadEDUSETTINGs(Expression<Func<EDUSETTING, bool>> filter)
		{
			return this.EDUSETTINGService.Find(filter);
		}


		public IEnumerable<EDUSETTINGDto> ReadEDUSETTINGs(ISpecification<EDUSETTING> specification)
		{
			return this.EDUSETTINGService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUSETTINGDto> ReadEDUSETTINGs(IQueryable<EDUSETTING> query)
		{
			return this.EDUSETTINGService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUSETTINGDto> ReadEDUSETTINGs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUSETTINGService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUSETTINGDto> ReadEDUSETTINGs(object[] keyWords)
		{
			return this.EDUSETTINGService.Find(keyWords);
		}


		public IEnumerable<EDUSETTINGDto> ReadEDUSETTINGsPaged(int startIndex, int pageSize)
		{
			return this.EDUSETTINGService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUSETTINGDto> ReadEDUSETTINGsPaged(IQueryable<EDUSETTING> source, int pageIndex, int pageSize)
		{
			return this.EDUSETTINGService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUSETTINGDto> ReadEDUSETTINGsPaged(IQueryable<EDUSETTING> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUSETTINGService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUSETTINGDto> ReadEDUSETTINGsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUSETTINGService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUSETTINGDto> ReadEDUSETTINGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUSETTINGService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUSETTINGDto> ReadEDUSETTINGsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUSETTING, bool>> filter)
		{
			return this.EDUSETTINGService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUSETTINGDto ReadEDUSETTINGs(string dtoKey)
		{
			return this.EDUSETTINGService.GetByKey(dtoKey);
		}


		public int CountEDUSETTINGs()
		{
			return this.EDUSETTINGService.Count();
		}


		public int CountEDUSETTINGs(string filterExpression)
		{
			return this.EDUSETTINGService.Count(filterExpression);
		}


		public int CountEDUSETTINGs(Expression<Func<EDUSETTING, bool>> filter)
		{
			return this.EDUSETTINGService.Count(filter);
		}


		public string CreateEDUSETTING(EDUSETTINGDto edusetting, bool doSaveChanges = true)
		{
			string key = this.EDUSETTINGService.Add(edusetting);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUSETTING(EDUSETTINGDto edusetting, bool doSaveChanges = true)
		{
			this.EDUSETTINGService.Update(edusetting);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUSETTINGs(IEnumerable<EDUSETTINGDto> edusettings, bool doSaveChanges = true)
		{
			if (edusettings == null)
			{
				return;
			}
			foreach (EDUSETTINGDto instance in edusettings)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUSETTINGService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUSETTING(EDUSETTINGDto edusetting, bool doSaveChanges = true)
		{
			this.EDUSETTINGService.Delete(edusetting);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUSETTINGs(IEnumerable<EDUSETTINGDto> edusettings, bool doSaveChanges = true)
		{
			if (edusettings == null)
			{
				return;
			}
			foreach (EDUSETTINGDto instance in edusettings)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUSETTINGService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUSETTING(EDUSETTINGDto edusetting, bool doSaveChanges = true)
		{
			switch (edusetting.RowState)
			{
				case RowState.Insert:
					this.CreateEDUSETTING(edusetting, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUSETTING(edusetting, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUSETTING(edusetting, doSaveChanges);
					break;
			}
		}


		public void SaveEDUSETTINGs(IEnumerable<EDUSETTINGDto> edusettings, bool doSaveChanges = true)
		{
			if (edusettings == null)
			{
				return;
			}
			foreach (EDUSETTINGDto instance in edusettings)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUSETTING(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUSETTING CRUD Operations


		#region EDUSENTENCE CRUD Operations


		private IEDUSENTENCEService edusentence;
		public virtual IEDUSENTENCEService EDUSENTENCEService
		{
			get
			{
				if (this.edusentence == null)
				{
					IEDUSENTENCEAssembler assembler = new EDUSENTENCEAssembler();
					IEDUSENTENCERepository repository = new EDUSENTENCERepository(this.UnitOfWork);
					this.edusentence = new EDUSENTENCEService(assembler, repository);
				}
				return this.edusentence;
			}
		}


		public IQueryable<EDUSENTENCE> EDUSENTENCEs
		{
			get { return this.EDUSENTENCEService.Repository.GetAll(); }
		}


		public IQueryable<EDUSENTENCE> ReadEDUSENTENCEs(Expression<Func<EDUSENTENCE, bool>> filter, int dummy)
		{
			return this.EDUSENTENCEService.Repository.Find(filter);
		}


		public IEnumerable<EDUSENTENCEDto> ReadEDUSENTENCEs()
		{
			return this.EDUSENTENCEService.GetAll();
		}


		public IEnumerable<EDUSENTENCEDto> ReadEDUSENTENCEs(Expression<Func<EDUSENTENCE, bool>> filter)
		{
			return this.EDUSENTENCEService.Find(filter);
		}


		public IEnumerable<EDUSENTENCEDto> ReadEDUSENTENCEs(ISpecification<EDUSENTENCE> specification)
		{
			return this.EDUSENTENCEService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUSENTENCEDto> ReadEDUSENTENCEs(IQueryable<EDUSENTENCE> query)
		{
			return this.EDUSENTENCEService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUSENTENCEDto> ReadEDUSENTENCEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUSENTENCEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUSENTENCEDto> ReadEDUSENTENCEs(object[] keyWords)
		{
			return this.EDUSENTENCEService.Find(keyWords);
		}


		public IEnumerable<EDUSENTENCEDto> ReadEDUSENTENCEsPaged(int startIndex, int pageSize)
		{
			return this.EDUSENTENCEService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUSENTENCEDto> ReadEDUSENTENCEsPaged(IQueryable<EDUSENTENCE> source, int pageIndex, int pageSize)
		{
			return this.EDUSENTENCEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUSENTENCEDto> ReadEDUSENTENCEsPaged(IQueryable<EDUSENTENCE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUSENTENCEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUSENTENCEDto> ReadEDUSENTENCEsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUSENTENCEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUSENTENCEDto> ReadEDUSENTENCEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUSENTENCEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUSENTENCEDto> ReadEDUSENTENCEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUSENTENCE, bool>> filter)
		{
			return this.EDUSENTENCEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUSENTENCEDto ReadEDUSENTENCEs(string dtoKey)
		{
			return this.EDUSENTENCEService.GetByKey(dtoKey);
		}


		public int CountEDUSENTENCEs()
		{
			return this.EDUSENTENCEService.Count();
		}


		public int CountEDUSENTENCEs(string filterExpression)
		{
			return this.EDUSENTENCEService.Count(filterExpression);
		}


		public int CountEDUSENTENCEs(Expression<Func<EDUSENTENCE, bool>> filter)
		{
			return this.EDUSENTENCEService.Count(filter);
		}


		public string CreateEDUSENTENCE(EDUSENTENCEDto edusentence, bool doSaveChanges = true)
		{
			string key = this.EDUSENTENCEService.Add(edusentence);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUSENTENCE(EDUSENTENCEDto edusentence, bool doSaveChanges = true)
		{
			this.EDUSENTENCEService.Update(edusentence);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUSENTENCEs(IEnumerable<EDUSENTENCEDto> edusentences, bool doSaveChanges = true)
		{
			if (edusentences == null)
			{
				return;
			}
			foreach (EDUSENTENCEDto instance in edusentences)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUSENTENCEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUSENTENCE(EDUSENTENCEDto edusentence, bool doSaveChanges = true)
		{
			this.EDUSENTENCEService.Delete(edusentence);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUSENTENCEs(IEnumerable<EDUSENTENCEDto> edusentences, bool doSaveChanges = true)
		{
			if (edusentences == null)
			{
				return;
			}
			foreach (EDUSENTENCEDto instance in edusentences)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUSENTENCEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUSENTENCE(EDUSENTENCEDto edusentence, bool doSaveChanges = true)
		{
			switch (edusentence.RowState)
			{
				case RowState.Insert:
					this.CreateEDUSENTENCE(edusentence, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUSENTENCE(edusentence, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUSENTENCE(edusentence, doSaveChanges);
					break;
			}
		}


		public void SaveEDUSENTENCEs(IEnumerable<EDUSENTENCEDto> edusentences, bool doSaveChanges = true)
		{
			if (edusentences == null)
			{
				return;
			}
			foreach (EDUSENTENCEDto instance in edusentences)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUSENTENCE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUSENTENCE CRUD Operations


		#region EDUSCORE CRUD Operations


		private IEDUSCOREService eduscore;
		public virtual IEDUSCOREService EDUSCOREService
		{
			get
			{
				if (this.eduscore == null)
				{
					IEDUSCOREAssembler assembler = new EDUSCOREAssembler();
					IEDUSCORERepository repository = new EDUSCORERepository(this.UnitOfWork);
					this.eduscore = new EDUSCOREService(assembler, repository);
				}
				return this.eduscore;
			}
		}


		public IQueryable<EDUSCORE> EDUSCOREs
		{
			get { return this.EDUSCOREService.Repository.GetAll(); }
		}


		public IQueryable<EDUSCORE> ReadEDUSCOREs(Expression<Func<EDUSCORE, bool>> filter, int dummy)
		{
			return this.EDUSCOREService.Repository.Find(filter);
		}


		public IEnumerable<EDUSCOREDto> ReadEDUSCOREs()
		{
			return this.EDUSCOREService.GetAll();
		}


		public IEnumerable<EDUSCOREDto> ReadEDUSCOREs(Expression<Func<EDUSCORE, bool>> filter)
		{
			return this.EDUSCOREService.Find(filter);
		}


		public IEnumerable<EDUSCOREDto> ReadEDUSCOREs(ISpecification<EDUSCORE> specification)
		{
			return this.EDUSCOREService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUSCOREDto> ReadEDUSCOREs(IQueryable<EDUSCORE> query)
		{
			return this.EDUSCOREService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUSCOREDto> ReadEDUSCOREs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUSCOREService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUSCOREDto> ReadEDUSCOREs(object[] keyWords)
		{
			return this.EDUSCOREService.Find(keyWords);
		}


		public IEnumerable<EDUSCOREDto> ReadEDUSCOREsPaged(int startIndex, int pageSize)
		{
			return this.EDUSCOREService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUSCOREDto> ReadEDUSCOREsPaged(IQueryable<EDUSCORE> source, int pageIndex, int pageSize)
		{
			return this.EDUSCOREService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUSCOREDto> ReadEDUSCOREsPaged(IQueryable<EDUSCORE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUSCOREService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUSCOREDto> ReadEDUSCOREsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUSCOREService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUSCOREDto> ReadEDUSCOREsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUSCOREService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUSCOREDto> ReadEDUSCOREsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUSCORE, bool>> filter)
		{
			return this.EDUSCOREService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUSCOREDto ReadEDUSCOREs(string dtoKey)
		{
			return this.EDUSCOREService.GetByKey(dtoKey);
		}


		public int CountEDUSCOREs()
		{
			return this.EDUSCOREService.Count();
		}


		public int CountEDUSCOREs(string filterExpression)
		{
			return this.EDUSCOREService.Count(filterExpression);
		}


		public int CountEDUSCOREs(Expression<Func<EDUSCORE, bool>> filter)
		{
			return this.EDUSCOREService.Count(filter);
		}


		public string CreateEDUSCORE(EDUSCOREDto eduscore, bool doSaveChanges = true)
		{
			string key = this.EDUSCOREService.Add(eduscore);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUSCORE(EDUSCOREDto eduscore, bool doSaveChanges = true)
		{
			this.EDUSCOREService.Update(eduscore);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUSCOREs(IEnumerable<EDUSCOREDto> eduscores, bool doSaveChanges = true)
		{
			if (eduscores == null)
			{
				return;
			}
			foreach (EDUSCOREDto instance in eduscores)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUSCOREService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUSCORE(EDUSCOREDto eduscore, bool doSaveChanges = true)
		{
			this.EDUSCOREService.Delete(eduscore);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUSCOREs(IEnumerable<EDUSCOREDto> eduscores, bool doSaveChanges = true)
		{
			if (eduscores == null)
			{
				return;
			}
			foreach (EDUSCOREDto instance in eduscores)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUSCOREService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUSCORE(EDUSCOREDto eduscore, bool doSaveChanges = true)
		{
			switch (eduscore.RowState)
			{
				case RowState.Insert:
					this.CreateEDUSCORE(eduscore, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUSCORE(eduscore, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUSCORE(eduscore, doSaveChanges);
					break;
			}
		}


		public void SaveEDUSCOREs(IEnumerable<EDUSCOREDto> eduscores, bool doSaveChanges = true)
		{
			if (eduscores == null)
			{
				return;
			}
			foreach (EDUSCOREDto instance in eduscores)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUSCORE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUSCORE CRUD Operations


		#region EDUREFTEACHER CRUD Operations


		private IEDUREFTEACHERService edurefteacher;
		public virtual IEDUREFTEACHERService EDUREFTEACHERService
		{
			get
			{
				if (this.edurefteacher == null)
				{
					IEDUREFTEACHERAssembler assembler = new EDUREFTEACHERAssembler();
					IEDUREFTEACHERRepository repository = new EDUREFTEACHERRepository(this.UnitOfWork);
					this.edurefteacher = new EDUREFTEACHERService(assembler, repository);
				}
				return this.edurefteacher;
			}
		}


		public IQueryable<EDUREFTEACHER> EDUREFTEACHERs
		{
			get { return this.EDUREFTEACHERService.Repository.GetAll(); }
		}


		public IQueryable<EDUREFTEACHER> ReadEDUREFTEACHERs(Expression<Func<EDUREFTEACHER, bool>> filter, int dummy)
		{
			return this.EDUREFTEACHERService.Repository.Find(filter);
		}


		public IEnumerable<EDUREFTEACHERDto> ReadEDUREFTEACHERs()
		{
			return this.EDUREFTEACHERService.GetAll();
		}


		public IEnumerable<EDUREFTEACHERDto> ReadEDUREFTEACHERs(Expression<Func<EDUREFTEACHER, bool>> filter)
		{
			return this.EDUREFTEACHERService.Find(filter);
		}


		public IEnumerable<EDUREFTEACHERDto> ReadEDUREFTEACHERs(ISpecification<EDUREFTEACHER> specification)
		{
			return this.EDUREFTEACHERService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUREFTEACHERDto> ReadEDUREFTEACHERs(IQueryable<EDUREFTEACHER> query)
		{
			return this.EDUREFTEACHERService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUREFTEACHERDto> ReadEDUREFTEACHERs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUREFTEACHERService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUREFTEACHERDto> ReadEDUREFTEACHERs(object[] keyWords)
		{
			return this.EDUREFTEACHERService.Find(keyWords);
		}


		public IEnumerable<EDUREFTEACHERDto> ReadEDUREFTEACHERsPaged(int startIndex, int pageSize)
		{
			return this.EDUREFTEACHERService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUREFTEACHERDto> ReadEDUREFTEACHERsPaged(IQueryable<EDUREFTEACHER> source, int pageIndex, int pageSize)
		{
			return this.EDUREFTEACHERService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUREFTEACHERDto> ReadEDUREFTEACHERsPaged(IQueryable<EDUREFTEACHER> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUREFTEACHERService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUREFTEACHERDto> ReadEDUREFTEACHERsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUREFTEACHERService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUREFTEACHERDto> ReadEDUREFTEACHERsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUREFTEACHERService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUREFTEACHERDto> ReadEDUREFTEACHERsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUREFTEACHER, bool>> filter)
		{
			return this.EDUREFTEACHERService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUREFTEACHERDto ReadEDUREFTEACHERs(string dtoKey)
		{
			return this.EDUREFTEACHERService.GetByKey(dtoKey);
		}


		public int CountEDUREFTEACHERs()
		{
			return this.EDUREFTEACHERService.Count();
		}


		public int CountEDUREFTEACHERs(string filterExpression)
		{
			return this.EDUREFTEACHERService.Count(filterExpression);
		}


		public int CountEDUREFTEACHERs(Expression<Func<EDUREFTEACHER, bool>> filter)
		{
			return this.EDUREFTEACHERService.Count(filter);
		}


		public string CreateEDUREFTEACHER(EDUREFTEACHERDto edurefteacher, bool doSaveChanges = true)
		{
			string key = this.EDUREFTEACHERService.Add(edurefteacher);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUREFTEACHER(EDUREFTEACHERDto edurefteacher, bool doSaveChanges = true)
		{
			this.EDUREFTEACHERService.Update(edurefteacher);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUREFTEACHERs(IEnumerable<EDUREFTEACHERDto> edurefteachers, bool doSaveChanges = true)
		{
			if (edurefteachers == null)
			{
				return;
			}
			foreach (EDUREFTEACHERDto instance in edurefteachers)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUREFTEACHERService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUREFTEACHER(EDUREFTEACHERDto edurefteacher, bool doSaveChanges = true)
		{
			this.EDUREFTEACHERService.Delete(edurefteacher);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUREFTEACHERs(IEnumerable<EDUREFTEACHERDto> edurefteachers, bool doSaveChanges = true)
		{
			if (edurefteachers == null)
			{
				return;
			}
			foreach (EDUREFTEACHERDto instance in edurefteachers)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUREFTEACHERService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUREFTEACHER(EDUREFTEACHERDto edurefteacher, bool doSaveChanges = true)
		{
			switch (edurefteacher.RowState)
			{
				case RowState.Insert:
					this.CreateEDUREFTEACHER(edurefteacher, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUREFTEACHER(edurefteacher, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUREFTEACHER(edurefteacher, doSaveChanges);
					break;
			}
		}


		public void SaveEDUREFTEACHERs(IEnumerable<EDUREFTEACHERDto> edurefteachers, bool doSaveChanges = true)
		{
			if (edurefteachers == null)
			{
				return;
			}
			foreach (EDUREFTEACHERDto instance in edurefteachers)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUREFTEACHER(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUREFTEACHER CRUD Operations


		#region EDUQUESTION CRUD Operations


		private IEDUQUESTIONService eduquestion;
		public virtual IEDUQUESTIONService EDUQUESTIONService
		{
			get
			{
				if (this.eduquestion == null)
				{
					IEDUQUESTIONAssembler assembler = new EDUQUESTIONAssembler();
					IEDUQUESTIONRepository repository = new EDUQUESTIONRepository(this.UnitOfWork);
					this.eduquestion = new EDUQUESTIONService(assembler, repository);
				}
				return this.eduquestion;
			}
		}


		public IQueryable<EDUQUESTION> EDUQUESTIONs
		{
			get { return this.EDUQUESTIONService.Repository.GetAll(); }
		}


		public IQueryable<EDUQUESTION> ReadEDUQUESTIONs(Expression<Func<EDUQUESTION, bool>> filter, int dummy)
		{
			return this.EDUQUESTIONService.Repository.Find(filter);
		}


		public IEnumerable<EDUQUESTIONDto> ReadEDUQUESTIONs()
		{
			return this.EDUQUESTIONService.GetAll();
		}


		public IEnumerable<EDUQUESTIONDto> ReadEDUQUESTIONs(Expression<Func<EDUQUESTION, bool>> filter)
		{
			return this.EDUQUESTIONService.Find(filter);
		}


		public IEnumerable<EDUQUESTIONDto> ReadEDUQUESTIONs(ISpecification<EDUQUESTION> specification)
		{
			return this.EDUQUESTIONService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUQUESTIONDto> ReadEDUQUESTIONs(IQueryable<EDUQUESTION> query)
		{
			return this.EDUQUESTIONService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUQUESTIONDto> ReadEDUQUESTIONs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUQUESTIONService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUQUESTIONDto> ReadEDUQUESTIONs(object[] keyWords)
		{
			return this.EDUQUESTIONService.Find(keyWords);
		}


		public IEnumerable<EDUQUESTIONDto> ReadEDUQUESTIONsPaged(int startIndex, int pageSize)
		{
			return this.EDUQUESTIONService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUQUESTIONDto> ReadEDUQUESTIONsPaged(IQueryable<EDUQUESTION> source, int pageIndex, int pageSize)
		{
			return this.EDUQUESTIONService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUQUESTIONDto> ReadEDUQUESTIONsPaged(IQueryable<EDUQUESTION> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUQUESTIONService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUQUESTIONDto> ReadEDUQUESTIONsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUQUESTIONService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUQUESTIONDto> ReadEDUQUESTIONsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUQUESTIONService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUQUESTIONDto> ReadEDUQUESTIONsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUQUESTION, bool>> filter)
		{
			return this.EDUQUESTIONService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUQUESTIONDto ReadEDUQUESTIONs(string dtoKey)
		{
			return this.EDUQUESTIONService.GetByKey(dtoKey);
		}


		public int CountEDUQUESTIONs()
		{
			return this.EDUQUESTIONService.Count();
		}


		public int CountEDUQUESTIONs(string filterExpression)
		{
			return this.EDUQUESTIONService.Count(filterExpression);
		}


		public int CountEDUQUESTIONs(Expression<Func<EDUQUESTION, bool>> filter)
		{
			return this.EDUQUESTIONService.Count(filter);
		}


		public string CreateEDUQUESTION(EDUQUESTIONDto eduquestion, bool doSaveChanges = true)
		{
			string key = this.EDUQUESTIONService.Add(eduquestion);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUQUESTION(EDUQUESTIONDto eduquestion, bool doSaveChanges = true)
		{
			this.EDUQUESTIONService.Update(eduquestion);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUQUESTIONs(IEnumerable<EDUQUESTIONDto> eduquestions, bool doSaveChanges = true)
		{
			if (eduquestions == null)
			{
				return;
			}
			foreach (EDUQUESTIONDto instance in eduquestions)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUQUESTIONService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUQUESTION(EDUQUESTIONDto eduquestion, bool doSaveChanges = true)
		{
			this.EDUQUESTIONService.Delete(eduquestion);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUQUESTIONs(IEnumerable<EDUQUESTIONDto> eduquestions, bool doSaveChanges = true)
		{
			if (eduquestions == null)
			{
				return;
			}
			foreach (EDUQUESTIONDto instance in eduquestions)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUQUESTIONService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUQUESTION(EDUQUESTIONDto eduquestion, bool doSaveChanges = true)
		{
			switch (eduquestion.RowState)
			{
				case RowState.Insert:
					this.CreateEDUQUESTION(eduquestion, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUQUESTION(eduquestion, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUQUESTION(eduquestion, doSaveChanges);
					break;
			}
		}


		public void SaveEDUQUESTIONs(IEnumerable<EDUQUESTIONDto> eduquestions, bool doSaveChanges = true)
		{
			if (eduquestions == null)
			{
				return;
			}
			foreach (EDUQUESTIONDto instance in eduquestions)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUQUESTION(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUQUESTION CRUD Operations


		#region EDUPASSPORTTEMPLATETARGET CRUD Operations


		private IEDUPASSPORTTEMPLATETARGETService edupassporttemplatetarget;
		public virtual IEDUPASSPORTTEMPLATETARGETService EDUPASSPORTTEMPLATETARGETService
		{
			get
			{
				if (this.edupassporttemplatetarget == null)
				{
					IEDUPASSPORTTEMPLATETARGETAssembler assembler = new EDUPASSPORTTEMPLATETARGETAssembler();
					IEDUPASSPORTTEMPLATETARGETRepository repository = new EDUPASSPORTTEMPLATETARGETRepository(this.UnitOfWork);
					this.edupassporttemplatetarget = new EDUPASSPORTTEMPLATETARGETService(assembler, repository);
				}
				return this.edupassporttemplatetarget;
			}
		}


		public IQueryable<EDUPASSPORTTEMPLATETARGET> EDUPASSPORTTEMPLATETARGETs
		{
			get { return this.EDUPASSPORTTEMPLATETARGETService.Repository.GetAll(); }
		}


		public IQueryable<EDUPASSPORTTEMPLATETARGET> ReadEDUPASSPORTTEMPLATETARGETs(Expression<Func<EDUPASSPORTTEMPLATETARGET, bool>> filter, int dummy)
		{
			return this.EDUPASSPORTTEMPLATETARGETService.Repository.Find(filter);
		}


		public IEnumerable<EDUPASSPORTTEMPLATETARGETDto> ReadEDUPASSPORTTEMPLATETARGETs()
		{
			return this.EDUPASSPORTTEMPLATETARGETService.GetAll();
		}


		public IEnumerable<EDUPASSPORTTEMPLATETARGETDto> ReadEDUPASSPORTTEMPLATETARGETs(Expression<Func<EDUPASSPORTTEMPLATETARGET, bool>> filter)
		{
			return this.EDUPASSPORTTEMPLATETARGETService.Find(filter);
		}


		public IEnumerable<EDUPASSPORTTEMPLATETARGETDto> ReadEDUPASSPORTTEMPLATETARGETs(ISpecification<EDUPASSPORTTEMPLATETARGET> specification)
		{
			return this.EDUPASSPORTTEMPLATETARGETService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUPASSPORTTEMPLATETARGETDto> ReadEDUPASSPORTTEMPLATETARGETs(IQueryable<EDUPASSPORTTEMPLATETARGET> query)
		{
			return this.EDUPASSPORTTEMPLATETARGETService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUPASSPORTTEMPLATETARGETDto> ReadEDUPASSPORTTEMPLATETARGETs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUPASSPORTTEMPLATETARGETService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUPASSPORTTEMPLATETARGETDto> ReadEDUPASSPORTTEMPLATETARGETs(object[] keyWords)
		{
			return this.EDUPASSPORTTEMPLATETARGETService.Find(keyWords);
		}


		public IEnumerable<EDUPASSPORTTEMPLATETARGETDto> ReadEDUPASSPORTTEMPLATETARGETsPaged(int startIndex, int pageSize)
		{
			return this.EDUPASSPORTTEMPLATETARGETService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUPASSPORTTEMPLATETARGETDto> ReadEDUPASSPORTTEMPLATETARGETsPaged(IQueryable<EDUPASSPORTTEMPLATETARGET> source, int pageIndex, int pageSize)
		{
			return this.EDUPASSPORTTEMPLATETARGETService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUPASSPORTTEMPLATETARGETDto> ReadEDUPASSPORTTEMPLATETARGETsPaged(IQueryable<EDUPASSPORTTEMPLATETARGET> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUPASSPORTTEMPLATETARGETService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUPASSPORTTEMPLATETARGETDto> ReadEDUPASSPORTTEMPLATETARGETsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUPASSPORTTEMPLATETARGETService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUPASSPORTTEMPLATETARGETDto> ReadEDUPASSPORTTEMPLATETARGETsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUPASSPORTTEMPLATETARGETService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUPASSPORTTEMPLATETARGETDto> ReadEDUPASSPORTTEMPLATETARGETsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUPASSPORTTEMPLATETARGET, bool>> filter)
		{
			return this.EDUPASSPORTTEMPLATETARGETService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUPASSPORTTEMPLATETARGETDto ReadEDUPASSPORTTEMPLATETARGETs(string dtoKey)
		{
			return this.EDUPASSPORTTEMPLATETARGETService.GetByKey(dtoKey);
		}


		public int CountEDUPASSPORTTEMPLATETARGETs()
		{
			return this.EDUPASSPORTTEMPLATETARGETService.Count();
		}


		public int CountEDUPASSPORTTEMPLATETARGETs(string filterExpression)
		{
			return this.EDUPASSPORTTEMPLATETARGETService.Count(filterExpression);
		}


		public int CountEDUPASSPORTTEMPLATETARGETs(Expression<Func<EDUPASSPORTTEMPLATETARGET, bool>> filter)
		{
			return this.EDUPASSPORTTEMPLATETARGETService.Count(filter);
		}


		public string CreateEDUPASSPORTTEMPLATETARGET(EDUPASSPORTTEMPLATETARGETDto edupassporttemplatetarget, bool doSaveChanges = true)
		{
			string key = this.EDUPASSPORTTEMPLATETARGETService.Add(edupassporttemplatetarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUPASSPORTTEMPLATETARGET(EDUPASSPORTTEMPLATETARGETDto edupassporttemplatetarget, bool doSaveChanges = true)
		{
			this.EDUPASSPORTTEMPLATETARGETService.Update(edupassporttemplatetarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUPASSPORTTEMPLATETARGETs(IEnumerable<EDUPASSPORTTEMPLATETARGETDto> edupassporttemplatetargets, bool doSaveChanges = true)
		{
			if (edupassporttemplatetargets == null)
			{
				return;
			}
			foreach (EDUPASSPORTTEMPLATETARGETDto instance in edupassporttemplatetargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUPASSPORTTEMPLATETARGETService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUPASSPORTTEMPLATETARGET(EDUPASSPORTTEMPLATETARGETDto edupassporttemplatetarget, bool doSaveChanges = true)
		{
			this.EDUPASSPORTTEMPLATETARGETService.Delete(edupassporttemplatetarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUPASSPORTTEMPLATETARGETs(IEnumerable<EDUPASSPORTTEMPLATETARGETDto> edupassporttemplatetargets, bool doSaveChanges = true)
		{
			if (edupassporttemplatetargets == null)
			{
				return;
			}
			foreach (EDUPASSPORTTEMPLATETARGETDto instance in edupassporttemplatetargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUPASSPORTTEMPLATETARGETService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUPASSPORTTEMPLATETARGET(EDUPASSPORTTEMPLATETARGETDto edupassporttemplatetarget, bool doSaveChanges = true)
		{
			switch (edupassporttemplatetarget.RowState)
			{
				case RowState.Insert:
					this.CreateEDUPASSPORTTEMPLATETARGET(edupassporttemplatetarget, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUPASSPORTTEMPLATETARGET(edupassporttemplatetarget, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUPASSPORTTEMPLATETARGET(edupassporttemplatetarget, doSaveChanges);
					break;
			}
		}


		public void SaveEDUPASSPORTTEMPLATETARGETs(IEnumerable<EDUPASSPORTTEMPLATETARGETDto> edupassporttemplatetargets, bool doSaveChanges = true)
		{
			if (edupassporttemplatetargets == null)
			{
				return;
			}
			foreach (EDUPASSPORTTEMPLATETARGETDto instance in edupassporttemplatetargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUPASSPORTTEMPLATETARGET(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUPASSPORTTEMPLATETARGET CRUD Operations


		#region EDUPASSPORTTEMPLATEITEM CRUD Operations


		private IEDUPASSPORTTEMPLATEITEMService edupassporttemplateitem;
		public virtual IEDUPASSPORTTEMPLATEITEMService EDUPASSPORTTEMPLATEITEMService
		{
			get
			{
				if (this.edupassporttemplateitem == null)
				{
					IEDUPASSPORTTEMPLATEITEMAssembler assembler = new EDUPASSPORTTEMPLATEITEMAssembler();
					IEDUPASSPORTTEMPLATEITEMRepository repository = new EDUPASSPORTTEMPLATEITEMRepository(this.UnitOfWork);
					this.edupassporttemplateitem = new EDUPASSPORTTEMPLATEITEMService(assembler, repository);
				}
				return this.edupassporttemplateitem;
			}
		}


		public IQueryable<EDUPASSPORTTEMPLATEITEM> EDUPASSPORTTEMPLATEITEMs
		{
			get { return this.EDUPASSPORTTEMPLATEITEMService.Repository.GetAll(); }
		}


		public IQueryable<EDUPASSPORTTEMPLATEITEM> ReadEDUPASSPORTTEMPLATEITEMs(Expression<Func<EDUPASSPORTTEMPLATEITEM, bool>> filter, int dummy)
		{
			return this.EDUPASSPORTTEMPLATEITEMService.Repository.Find(filter);
		}


		public IEnumerable<EDUPASSPORTTEMPLATEITEMDto> ReadEDUPASSPORTTEMPLATEITEMs()
		{
			return this.EDUPASSPORTTEMPLATEITEMService.GetAll();
		}


		public IEnumerable<EDUPASSPORTTEMPLATEITEMDto> ReadEDUPASSPORTTEMPLATEITEMs(Expression<Func<EDUPASSPORTTEMPLATEITEM, bool>> filter)
		{
			return this.EDUPASSPORTTEMPLATEITEMService.Find(filter);
		}


		public IEnumerable<EDUPASSPORTTEMPLATEITEMDto> ReadEDUPASSPORTTEMPLATEITEMs(ISpecification<EDUPASSPORTTEMPLATEITEM> specification)
		{
			return this.EDUPASSPORTTEMPLATEITEMService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUPASSPORTTEMPLATEITEMDto> ReadEDUPASSPORTTEMPLATEITEMs(IQueryable<EDUPASSPORTTEMPLATEITEM> query)
		{
			return this.EDUPASSPORTTEMPLATEITEMService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUPASSPORTTEMPLATEITEMDto> ReadEDUPASSPORTTEMPLATEITEMs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUPASSPORTTEMPLATEITEMService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUPASSPORTTEMPLATEITEMDto> ReadEDUPASSPORTTEMPLATEITEMs(object[] keyWords)
		{
			return this.EDUPASSPORTTEMPLATEITEMService.Find(keyWords);
		}


		public IEnumerable<EDUPASSPORTTEMPLATEITEMDto> ReadEDUPASSPORTTEMPLATEITEMsPaged(int startIndex, int pageSize)
		{
			return this.EDUPASSPORTTEMPLATEITEMService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUPASSPORTTEMPLATEITEMDto> ReadEDUPASSPORTTEMPLATEITEMsPaged(IQueryable<EDUPASSPORTTEMPLATEITEM> source, int pageIndex, int pageSize)
		{
			return this.EDUPASSPORTTEMPLATEITEMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUPASSPORTTEMPLATEITEMDto> ReadEDUPASSPORTTEMPLATEITEMsPaged(IQueryable<EDUPASSPORTTEMPLATEITEM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUPASSPORTTEMPLATEITEMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUPASSPORTTEMPLATEITEMDto> ReadEDUPASSPORTTEMPLATEITEMsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUPASSPORTTEMPLATEITEMService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUPASSPORTTEMPLATEITEMDto> ReadEDUPASSPORTTEMPLATEITEMsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUPASSPORTTEMPLATEITEMService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUPASSPORTTEMPLATEITEMDto> ReadEDUPASSPORTTEMPLATEITEMsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUPASSPORTTEMPLATEITEM, bool>> filter)
		{
			return this.EDUPASSPORTTEMPLATEITEMService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUPASSPORTTEMPLATEITEMDto ReadEDUPASSPORTTEMPLATEITEMs(string dtoKey)
		{
			return this.EDUPASSPORTTEMPLATEITEMService.GetByKey(dtoKey);
		}


		public int CountEDUPASSPORTTEMPLATEITEMs()
		{
			return this.EDUPASSPORTTEMPLATEITEMService.Count();
		}


		public int CountEDUPASSPORTTEMPLATEITEMs(string filterExpression)
		{
			return this.EDUPASSPORTTEMPLATEITEMService.Count(filterExpression);
		}


		public int CountEDUPASSPORTTEMPLATEITEMs(Expression<Func<EDUPASSPORTTEMPLATEITEM, bool>> filter)
		{
			return this.EDUPASSPORTTEMPLATEITEMService.Count(filter);
		}


		public string CreateEDUPASSPORTTEMPLATEITEM(EDUPASSPORTTEMPLATEITEMDto edupassporttemplateitem, bool doSaveChanges = true)
		{
			string key = this.EDUPASSPORTTEMPLATEITEMService.Add(edupassporttemplateitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUPASSPORTTEMPLATEITEM(EDUPASSPORTTEMPLATEITEMDto edupassporttemplateitem, bool doSaveChanges = true)
		{
			this.EDUPASSPORTTEMPLATEITEMService.Update(edupassporttemplateitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUPASSPORTTEMPLATEITEMs(IEnumerable<EDUPASSPORTTEMPLATEITEMDto> edupassporttemplateitems, bool doSaveChanges = true)
		{
			if (edupassporttemplateitems == null)
			{
				return;
			}
			foreach (EDUPASSPORTTEMPLATEITEMDto instance in edupassporttemplateitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUPASSPORTTEMPLATEITEMService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUPASSPORTTEMPLATEITEM(EDUPASSPORTTEMPLATEITEMDto edupassporttemplateitem, bool doSaveChanges = true)
		{
			this.EDUPASSPORTTEMPLATEITEMService.Delete(edupassporttemplateitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUPASSPORTTEMPLATEITEMs(IEnumerable<EDUPASSPORTTEMPLATEITEMDto> edupassporttemplateitems, bool doSaveChanges = true)
		{
			if (edupassporttemplateitems == null)
			{
				return;
			}
			foreach (EDUPASSPORTTEMPLATEITEMDto instance in edupassporttemplateitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUPASSPORTTEMPLATEITEMService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUPASSPORTTEMPLATEITEM(EDUPASSPORTTEMPLATEITEMDto edupassporttemplateitem, bool doSaveChanges = true)
		{
			switch (edupassporttemplateitem.RowState)
			{
				case RowState.Insert:
					this.CreateEDUPASSPORTTEMPLATEITEM(edupassporttemplateitem, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUPASSPORTTEMPLATEITEM(edupassporttemplateitem, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUPASSPORTTEMPLATEITEM(edupassporttemplateitem, doSaveChanges);
					break;
			}
		}


		public void SaveEDUPASSPORTTEMPLATEITEMs(IEnumerable<EDUPASSPORTTEMPLATEITEMDto> edupassporttemplateitems, bool doSaveChanges = true)
		{
			if (edupassporttemplateitems == null)
			{
				return;
			}
			foreach (EDUPASSPORTTEMPLATEITEMDto instance in edupassporttemplateitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUPASSPORTTEMPLATEITEM(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUPASSPORTTEMPLATEITEM CRUD Operations


		#region EDUPASSPORTTEMPLATE CRUD Operations


		private IEDUPASSPORTTEMPLATEService edupassporttemplate;
		public virtual IEDUPASSPORTTEMPLATEService EDUPASSPORTTEMPLATEService
		{
			get
			{
				if (this.edupassporttemplate == null)
				{
					IEDUPASSPORTTEMPLATEAssembler assembler = new EDUPASSPORTTEMPLATEAssembler();
					IEDUPASSPORTTEMPLATERepository repository = new EDUPASSPORTTEMPLATERepository(this.UnitOfWork);
					this.edupassporttemplate = new EDUPASSPORTTEMPLATEService(assembler, repository);
				}
				return this.edupassporttemplate;
			}
		}


		public IQueryable<EDUPASSPORTTEMPLATE> EDUPASSPORTTEMPLATEs
		{
			get { return this.EDUPASSPORTTEMPLATEService.Repository.GetAll(); }
		}


		public IQueryable<EDUPASSPORTTEMPLATE> ReadEDUPASSPORTTEMPLATEs(Expression<Func<EDUPASSPORTTEMPLATE, bool>> filter, int dummy)
		{
			return this.EDUPASSPORTTEMPLATEService.Repository.Find(filter);
		}


		public IEnumerable<EDUPASSPORTTEMPLATEDto> ReadEDUPASSPORTTEMPLATEs()
		{
			return this.EDUPASSPORTTEMPLATEService.GetAll();
		}


		public IEnumerable<EDUPASSPORTTEMPLATEDto> ReadEDUPASSPORTTEMPLATEs(Expression<Func<EDUPASSPORTTEMPLATE, bool>> filter)
		{
			return this.EDUPASSPORTTEMPLATEService.Find(filter);
		}


		public IEnumerable<EDUPASSPORTTEMPLATEDto> ReadEDUPASSPORTTEMPLATEs(ISpecification<EDUPASSPORTTEMPLATE> specification)
		{
			return this.EDUPASSPORTTEMPLATEService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUPASSPORTTEMPLATEDto> ReadEDUPASSPORTTEMPLATEs(IQueryable<EDUPASSPORTTEMPLATE> query)
		{
			return this.EDUPASSPORTTEMPLATEService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUPASSPORTTEMPLATEDto> ReadEDUPASSPORTTEMPLATEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUPASSPORTTEMPLATEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUPASSPORTTEMPLATEDto> ReadEDUPASSPORTTEMPLATEs(object[] keyWords)
		{
			return this.EDUPASSPORTTEMPLATEService.Find(keyWords);
		}


		public IEnumerable<EDUPASSPORTTEMPLATEDto> ReadEDUPASSPORTTEMPLATEsPaged(int startIndex, int pageSize)
		{
			return this.EDUPASSPORTTEMPLATEService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUPASSPORTTEMPLATEDto> ReadEDUPASSPORTTEMPLATEsPaged(IQueryable<EDUPASSPORTTEMPLATE> source, int pageIndex, int pageSize)
		{
			return this.EDUPASSPORTTEMPLATEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUPASSPORTTEMPLATEDto> ReadEDUPASSPORTTEMPLATEsPaged(IQueryable<EDUPASSPORTTEMPLATE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUPASSPORTTEMPLATEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUPASSPORTTEMPLATEDto> ReadEDUPASSPORTTEMPLATEsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUPASSPORTTEMPLATEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUPASSPORTTEMPLATEDto> ReadEDUPASSPORTTEMPLATEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUPASSPORTTEMPLATEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUPASSPORTTEMPLATEDto> ReadEDUPASSPORTTEMPLATEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUPASSPORTTEMPLATE, bool>> filter)
		{
			return this.EDUPASSPORTTEMPLATEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUPASSPORTTEMPLATEDto ReadEDUPASSPORTTEMPLATEs(string dtoKey)
		{
			return this.EDUPASSPORTTEMPLATEService.GetByKey(dtoKey);
		}


		public int CountEDUPASSPORTTEMPLATEs()
		{
			return this.EDUPASSPORTTEMPLATEService.Count();
		}


		public int CountEDUPASSPORTTEMPLATEs(string filterExpression)
		{
			return this.EDUPASSPORTTEMPLATEService.Count(filterExpression);
		}


		public int CountEDUPASSPORTTEMPLATEs(Expression<Func<EDUPASSPORTTEMPLATE, bool>> filter)
		{
			return this.EDUPASSPORTTEMPLATEService.Count(filter);
		}


		public string CreateEDUPASSPORTTEMPLATE(EDUPASSPORTTEMPLATEDto edupassporttemplate, bool doSaveChanges = true)
		{
			string key = this.EDUPASSPORTTEMPLATEService.Add(edupassporttemplate);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUPASSPORTTEMPLATE(EDUPASSPORTTEMPLATEDto edupassporttemplate, bool doSaveChanges = true)
		{
			this.EDUPASSPORTTEMPLATEService.Update(edupassporttemplate);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUPASSPORTTEMPLATEs(IEnumerable<EDUPASSPORTTEMPLATEDto> edupassporttemplates, bool doSaveChanges = true)
		{
			if (edupassporttemplates == null)
			{
				return;
			}
			foreach (EDUPASSPORTTEMPLATEDto instance in edupassporttemplates)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUPASSPORTTEMPLATEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUPASSPORTTEMPLATE(EDUPASSPORTTEMPLATEDto edupassporttemplate, bool doSaveChanges = true)
		{
			this.EDUPASSPORTTEMPLATEService.Delete(edupassporttemplate);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUPASSPORTTEMPLATEs(IEnumerable<EDUPASSPORTTEMPLATEDto> edupassporttemplates, bool doSaveChanges = true)
		{
			if (edupassporttemplates == null)
			{
				return;
			}
			foreach (EDUPASSPORTTEMPLATEDto instance in edupassporttemplates)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUPASSPORTTEMPLATEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUPASSPORTTEMPLATE(EDUPASSPORTTEMPLATEDto edupassporttemplate, bool doSaveChanges = true)
		{
			switch (edupassporttemplate.RowState)
			{
				case RowState.Insert:
					this.CreateEDUPASSPORTTEMPLATE(edupassporttemplate, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUPASSPORTTEMPLATE(edupassporttemplate, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUPASSPORTTEMPLATE(edupassporttemplate, doSaveChanges);
					break;
			}
		}


		public void SaveEDUPASSPORTTEMPLATEs(IEnumerable<EDUPASSPORTTEMPLATEDto> edupassporttemplates, bool doSaveChanges = true)
		{
			if (edupassporttemplates == null)
			{
				return;
			}
			foreach (EDUPASSPORTTEMPLATEDto instance in edupassporttemplates)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUPASSPORTTEMPLATE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUPASSPORTTEMPLATE CRUD Operations


		#region EDUPASSPORTPREF CRUD Operations


		private IEDUPASSPORTPREFService edupassportpref;
		public virtual IEDUPASSPORTPREFService EDUPASSPORTPREFService
		{
			get
			{
				if (this.edupassportpref == null)
				{
					IEDUPASSPORTPREFAssembler assembler = new EDUPASSPORTPREFAssembler();
					IEDUPASSPORTPREFRepository repository = new EDUPASSPORTPREFRepository(this.UnitOfWork);
					this.edupassportpref = new EDUPASSPORTPREFService(assembler, repository);
				}
				return this.edupassportpref;
			}
		}


		public IQueryable<EDUPASSPORTPREF> EDUPASSPORTPREFs
		{
			get { return this.EDUPASSPORTPREFService.Repository.GetAll(); }
		}


		public IQueryable<EDUPASSPORTPREF> ReadEDUPASSPORTPREFs(Expression<Func<EDUPASSPORTPREF, bool>> filter, int dummy)
		{
			return this.EDUPASSPORTPREFService.Repository.Find(filter);
		}


		public IEnumerable<EDUPASSPORTPREFDto> ReadEDUPASSPORTPREFs()
		{
			return this.EDUPASSPORTPREFService.GetAll();
		}


		public IEnumerable<EDUPASSPORTPREFDto> ReadEDUPASSPORTPREFs(Expression<Func<EDUPASSPORTPREF, bool>> filter)
		{
			return this.EDUPASSPORTPREFService.Find(filter);
		}


		public IEnumerable<EDUPASSPORTPREFDto> ReadEDUPASSPORTPREFs(ISpecification<EDUPASSPORTPREF> specification)
		{
			return this.EDUPASSPORTPREFService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUPASSPORTPREFDto> ReadEDUPASSPORTPREFs(IQueryable<EDUPASSPORTPREF> query)
		{
			return this.EDUPASSPORTPREFService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUPASSPORTPREFDto> ReadEDUPASSPORTPREFs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUPASSPORTPREFService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUPASSPORTPREFDto> ReadEDUPASSPORTPREFs(object[] keyWords)
		{
			return this.EDUPASSPORTPREFService.Find(keyWords);
		}


		public IEnumerable<EDUPASSPORTPREFDto> ReadEDUPASSPORTPREFsPaged(int startIndex, int pageSize)
		{
			return this.EDUPASSPORTPREFService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUPASSPORTPREFDto> ReadEDUPASSPORTPREFsPaged(IQueryable<EDUPASSPORTPREF> source, int pageIndex, int pageSize)
		{
			return this.EDUPASSPORTPREFService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUPASSPORTPREFDto> ReadEDUPASSPORTPREFsPaged(IQueryable<EDUPASSPORTPREF> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUPASSPORTPREFService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUPASSPORTPREFDto> ReadEDUPASSPORTPREFsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUPASSPORTPREFService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUPASSPORTPREFDto> ReadEDUPASSPORTPREFsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUPASSPORTPREFService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUPASSPORTPREFDto> ReadEDUPASSPORTPREFsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUPASSPORTPREF, bool>> filter)
		{
			return this.EDUPASSPORTPREFService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUPASSPORTPREFDto ReadEDUPASSPORTPREFs(string dtoKey)
		{
			return this.EDUPASSPORTPREFService.GetByKey(dtoKey);
		}


		public int CountEDUPASSPORTPREFs()
		{
			return this.EDUPASSPORTPREFService.Count();
		}


		public int CountEDUPASSPORTPREFs(string filterExpression)
		{
			return this.EDUPASSPORTPREFService.Count(filterExpression);
		}


		public int CountEDUPASSPORTPREFs(Expression<Func<EDUPASSPORTPREF, bool>> filter)
		{
			return this.EDUPASSPORTPREFService.Count(filter);
		}


		public string CreateEDUPASSPORTPREF(EDUPASSPORTPREFDto edupassportpref, bool doSaveChanges = true)
		{
			string key = this.EDUPASSPORTPREFService.Add(edupassportpref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUPASSPORTPREF(EDUPASSPORTPREFDto edupassportpref, bool doSaveChanges = true)
		{
			this.EDUPASSPORTPREFService.Update(edupassportpref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUPASSPORTPREFs(IEnumerable<EDUPASSPORTPREFDto> edupassportprefs, bool doSaveChanges = true)
		{
			if (edupassportprefs == null)
			{
				return;
			}
			foreach (EDUPASSPORTPREFDto instance in edupassportprefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUPASSPORTPREFService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUPASSPORTPREF(EDUPASSPORTPREFDto edupassportpref, bool doSaveChanges = true)
		{
			this.EDUPASSPORTPREFService.Delete(edupassportpref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUPASSPORTPREFs(IEnumerable<EDUPASSPORTPREFDto> edupassportprefs, bool doSaveChanges = true)
		{
			if (edupassportprefs == null)
			{
				return;
			}
			foreach (EDUPASSPORTPREFDto instance in edupassportprefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUPASSPORTPREFService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUPASSPORTPREF(EDUPASSPORTPREFDto edupassportpref, bool doSaveChanges = true)
		{
			switch (edupassportpref.RowState)
			{
				case RowState.Insert:
					this.CreateEDUPASSPORTPREF(edupassportpref, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUPASSPORTPREF(edupassportpref, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUPASSPORTPREF(edupassportpref, doSaveChanges);
					break;
			}
		}


		public void SaveEDUPASSPORTPREFs(IEnumerable<EDUPASSPORTPREFDto> edupassportprefs, bool doSaveChanges = true)
		{
			if (edupassportprefs == null)
			{
				return;
			}
			foreach (EDUPASSPORTPREFDto instance in edupassportprefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUPASSPORTPREF(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUPASSPORTPREF CRUD Operations


		#region EDUPASSPORTITEMTARGET CRUD Operations


		private IEDUPASSPORTITEMTARGETService edupassportitemtarget;
		public virtual IEDUPASSPORTITEMTARGETService EDUPASSPORTITEMTARGETService
		{
			get
			{
				if (this.edupassportitemtarget == null)
				{
					IEDUPASSPORTITEMTARGETAssembler assembler = new EDUPASSPORTITEMTARGETAssembler();
					IEDUPASSPORTITEMTARGETRepository repository = new EDUPASSPORTITEMTARGETRepository(this.UnitOfWork);
					this.edupassportitemtarget = new EDUPASSPORTITEMTARGETService(assembler, repository);
				}
				return this.edupassportitemtarget;
			}
		}


		public IQueryable<EDUPASSPORTITEMTARGET> EDUPASSPORTITEMTARGETs
		{
			get { return this.EDUPASSPORTITEMTARGETService.Repository.GetAll(); }
		}


		public IQueryable<EDUPASSPORTITEMTARGET> ReadEDUPASSPORTITEMTARGETs(Expression<Func<EDUPASSPORTITEMTARGET, bool>> filter, int dummy)
		{
			return this.EDUPASSPORTITEMTARGETService.Repository.Find(filter);
		}


		public IEnumerable<EDUPASSPORTITEMTARGETDto> ReadEDUPASSPORTITEMTARGETs()
		{
			return this.EDUPASSPORTITEMTARGETService.GetAll();
		}


		public IEnumerable<EDUPASSPORTITEMTARGETDto> ReadEDUPASSPORTITEMTARGETs(Expression<Func<EDUPASSPORTITEMTARGET, bool>> filter)
		{
			return this.EDUPASSPORTITEMTARGETService.Find(filter);
		}


		public IEnumerable<EDUPASSPORTITEMTARGETDto> ReadEDUPASSPORTITEMTARGETs(ISpecification<EDUPASSPORTITEMTARGET> specification)
		{
			return this.EDUPASSPORTITEMTARGETService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUPASSPORTITEMTARGETDto> ReadEDUPASSPORTITEMTARGETs(IQueryable<EDUPASSPORTITEMTARGET> query)
		{
			return this.EDUPASSPORTITEMTARGETService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUPASSPORTITEMTARGETDto> ReadEDUPASSPORTITEMTARGETs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUPASSPORTITEMTARGETService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUPASSPORTITEMTARGETDto> ReadEDUPASSPORTITEMTARGETs(object[] keyWords)
		{
			return this.EDUPASSPORTITEMTARGETService.Find(keyWords);
		}


		public IEnumerable<EDUPASSPORTITEMTARGETDto> ReadEDUPASSPORTITEMTARGETsPaged(int startIndex, int pageSize)
		{
			return this.EDUPASSPORTITEMTARGETService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUPASSPORTITEMTARGETDto> ReadEDUPASSPORTITEMTARGETsPaged(IQueryable<EDUPASSPORTITEMTARGET> source, int pageIndex, int pageSize)
		{
			return this.EDUPASSPORTITEMTARGETService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUPASSPORTITEMTARGETDto> ReadEDUPASSPORTITEMTARGETsPaged(IQueryable<EDUPASSPORTITEMTARGET> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUPASSPORTITEMTARGETService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUPASSPORTITEMTARGETDto> ReadEDUPASSPORTITEMTARGETsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUPASSPORTITEMTARGETService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUPASSPORTITEMTARGETDto> ReadEDUPASSPORTITEMTARGETsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUPASSPORTITEMTARGETService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUPASSPORTITEMTARGETDto> ReadEDUPASSPORTITEMTARGETsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUPASSPORTITEMTARGET, bool>> filter)
		{
			return this.EDUPASSPORTITEMTARGETService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUPASSPORTITEMTARGETDto ReadEDUPASSPORTITEMTARGETs(string dtoKey)
		{
			return this.EDUPASSPORTITEMTARGETService.GetByKey(dtoKey);
		}


		public int CountEDUPASSPORTITEMTARGETs()
		{
			return this.EDUPASSPORTITEMTARGETService.Count();
		}


		public int CountEDUPASSPORTITEMTARGETs(string filterExpression)
		{
			return this.EDUPASSPORTITEMTARGETService.Count(filterExpression);
		}


		public int CountEDUPASSPORTITEMTARGETs(Expression<Func<EDUPASSPORTITEMTARGET, bool>> filter)
		{
			return this.EDUPASSPORTITEMTARGETService.Count(filter);
		}


		public string CreateEDUPASSPORTITEMTARGET(EDUPASSPORTITEMTARGETDto edupassportitemtarget, bool doSaveChanges = true)
		{
			string key = this.EDUPASSPORTITEMTARGETService.Add(edupassportitemtarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUPASSPORTITEMTARGET(EDUPASSPORTITEMTARGETDto edupassportitemtarget, bool doSaveChanges = true)
		{
			this.EDUPASSPORTITEMTARGETService.Update(edupassportitemtarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUPASSPORTITEMTARGETs(IEnumerable<EDUPASSPORTITEMTARGETDto> edupassportitemtargets, bool doSaveChanges = true)
		{
			if (edupassportitemtargets == null)
			{
				return;
			}
			foreach (EDUPASSPORTITEMTARGETDto instance in edupassportitemtargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUPASSPORTITEMTARGETService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUPASSPORTITEMTARGET(EDUPASSPORTITEMTARGETDto edupassportitemtarget, bool doSaveChanges = true)
		{
			this.EDUPASSPORTITEMTARGETService.Delete(edupassportitemtarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUPASSPORTITEMTARGETs(IEnumerable<EDUPASSPORTITEMTARGETDto> edupassportitemtargets, bool doSaveChanges = true)
		{
			if (edupassportitemtargets == null)
			{
				return;
			}
			foreach (EDUPASSPORTITEMTARGETDto instance in edupassportitemtargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUPASSPORTITEMTARGETService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUPASSPORTITEMTARGET(EDUPASSPORTITEMTARGETDto edupassportitemtarget, bool doSaveChanges = true)
		{
			switch (edupassportitemtarget.RowState)
			{
				case RowState.Insert:
					this.CreateEDUPASSPORTITEMTARGET(edupassportitemtarget, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUPASSPORTITEMTARGET(edupassportitemtarget, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUPASSPORTITEMTARGET(edupassportitemtarget, doSaveChanges);
					break;
			}
		}


		public void SaveEDUPASSPORTITEMTARGETs(IEnumerable<EDUPASSPORTITEMTARGETDto> edupassportitemtargets, bool doSaveChanges = true)
		{
			if (edupassportitemtargets == null)
			{
				return;
			}
			foreach (EDUPASSPORTITEMTARGETDto instance in edupassportitemtargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUPASSPORTITEMTARGET(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUPASSPORTITEMTARGET CRUD Operations


		#region EDUPASSPORTITEMDET CRUD Operations


		private IEDUPASSPORTITEMDETService edupassportitemdet;
		public virtual IEDUPASSPORTITEMDETService EDUPASSPORTITEMDETService
		{
			get
			{
				if (this.edupassportitemdet == null)
				{
					IEDUPASSPORTITEMDETAssembler assembler = new EDUPASSPORTITEMDETAssembler();
					IEDUPASSPORTITEMDETRepository repository = new EDUPASSPORTITEMDETRepository(this.UnitOfWork);
					this.edupassportitemdet = new EDUPASSPORTITEMDETService(assembler, repository);
				}
				return this.edupassportitemdet;
			}
		}


		public IQueryable<EDUPASSPORTITEMDET> EDUPASSPORTITEMDETs
		{
			get { return this.EDUPASSPORTITEMDETService.Repository.GetAll(); }
		}


		public IQueryable<EDUPASSPORTITEMDET> ReadEDUPASSPORTITEMDETs(Expression<Func<EDUPASSPORTITEMDET, bool>> filter, int dummy)
		{
			return this.EDUPASSPORTITEMDETService.Repository.Find(filter);
		}


		public IEnumerable<EDUPASSPORTITEMDETDto> ReadEDUPASSPORTITEMDETs()
		{
			return this.EDUPASSPORTITEMDETService.GetAll();
		}


		public IEnumerable<EDUPASSPORTITEMDETDto> ReadEDUPASSPORTITEMDETs(Expression<Func<EDUPASSPORTITEMDET, bool>> filter)
		{
			return this.EDUPASSPORTITEMDETService.Find(filter);
		}


		public IEnumerable<EDUPASSPORTITEMDETDto> ReadEDUPASSPORTITEMDETs(ISpecification<EDUPASSPORTITEMDET> specification)
		{
			return this.EDUPASSPORTITEMDETService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUPASSPORTITEMDETDto> ReadEDUPASSPORTITEMDETs(IQueryable<EDUPASSPORTITEMDET> query)
		{
			return this.EDUPASSPORTITEMDETService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUPASSPORTITEMDETDto> ReadEDUPASSPORTITEMDETs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUPASSPORTITEMDETService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUPASSPORTITEMDETDto> ReadEDUPASSPORTITEMDETs(object[] keyWords)
		{
			return this.EDUPASSPORTITEMDETService.Find(keyWords);
		}


		public IEnumerable<EDUPASSPORTITEMDETDto> ReadEDUPASSPORTITEMDETsPaged(int startIndex, int pageSize)
		{
			return this.EDUPASSPORTITEMDETService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUPASSPORTITEMDETDto> ReadEDUPASSPORTITEMDETsPaged(IQueryable<EDUPASSPORTITEMDET> source, int pageIndex, int pageSize)
		{
			return this.EDUPASSPORTITEMDETService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUPASSPORTITEMDETDto> ReadEDUPASSPORTITEMDETsPaged(IQueryable<EDUPASSPORTITEMDET> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUPASSPORTITEMDETService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUPASSPORTITEMDETDto> ReadEDUPASSPORTITEMDETsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUPASSPORTITEMDETService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUPASSPORTITEMDETDto> ReadEDUPASSPORTITEMDETsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUPASSPORTITEMDETService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUPASSPORTITEMDETDto> ReadEDUPASSPORTITEMDETsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUPASSPORTITEMDET, bool>> filter)
		{
			return this.EDUPASSPORTITEMDETService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUPASSPORTITEMDETDto ReadEDUPASSPORTITEMDETs(string dtoKey)
		{
			return this.EDUPASSPORTITEMDETService.GetByKey(dtoKey);
		}


		public int CountEDUPASSPORTITEMDETs()
		{
			return this.EDUPASSPORTITEMDETService.Count();
		}


		public int CountEDUPASSPORTITEMDETs(string filterExpression)
		{
			return this.EDUPASSPORTITEMDETService.Count(filterExpression);
		}


		public int CountEDUPASSPORTITEMDETs(Expression<Func<EDUPASSPORTITEMDET, bool>> filter)
		{
			return this.EDUPASSPORTITEMDETService.Count(filter);
		}


		public string CreateEDUPASSPORTITEMDET(EDUPASSPORTITEMDETDto edupassportitemdet, bool doSaveChanges = true)
		{
			string key = this.EDUPASSPORTITEMDETService.Add(edupassportitemdet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUPASSPORTITEMDET(EDUPASSPORTITEMDETDto edupassportitemdet, bool doSaveChanges = true)
		{
			this.EDUPASSPORTITEMDETService.Update(edupassportitemdet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUPASSPORTITEMDETs(IEnumerable<EDUPASSPORTITEMDETDto> edupassportitemdets, bool doSaveChanges = true)
		{
			if (edupassportitemdets == null)
			{
				return;
			}
			foreach (EDUPASSPORTITEMDETDto instance in edupassportitemdets)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUPASSPORTITEMDETService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUPASSPORTITEMDET(EDUPASSPORTITEMDETDto edupassportitemdet, bool doSaveChanges = true)
		{
			this.EDUPASSPORTITEMDETService.Delete(edupassportitemdet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUPASSPORTITEMDETs(IEnumerable<EDUPASSPORTITEMDETDto> edupassportitemdets, bool doSaveChanges = true)
		{
			if (edupassportitemdets == null)
			{
				return;
			}
			foreach (EDUPASSPORTITEMDETDto instance in edupassportitemdets)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUPASSPORTITEMDETService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUPASSPORTITEMDET(EDUPASSPORTITEMDETDto edupassportitemdet, bool doSaveChanges = true)
		{
			switch (edupassportitemdet.RowState)
			{
				case RowState.Insert:
					this.CreateEDUPASSPORTITEMDET(edupassportitemdet, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUPASSPORTITEMDET(edupassportitemdet, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUPASSPORTITEMDET(edupassportitemdet, doSaveChanges);
					break;
			}
		}


		public void SaveEDUPASSPORTITEMDETs(IEnumerable<EDUPASSPORTITEMDETDto> edupassportitemdets, bool doSaveChanges = true)
		{
			if (edupassportitemdets == null)
			{
				return;
			}
			foreach (EDUPASSPORTITEMDETDto instance in edupassportitemdets)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUPASSPORTITEMDET(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUPASSPORTITEMDET CRUD Operations


		#region EDUPASSPORTITEM CRUD Operations


		private IEDUPASSPORTITEMService edupassportitem;
		public virtual IEDUPASSPORTITEMService EDUPASSPORTITEMService
		{
			get
			{
				if (this.edupassportitem == null)
				{
					IEDUPASSPORTITEMAssembler assembler = new EDUPASSPORTITEMAssembler();
					IEDUPASSPORTITEMRepository repository = new EDUPASSPORTITEMRepository(this.UnitOfWork);
					this.edupassportitem = new EDUPASSPORTITEMService(assembler, repository);
				}
				return this.edupassportitem;
			}
		}


		public IQueryable<EDUPASSPORTITEM> EDUPASSPORTITEMs
		{
			get { return this.EDUPASSPORTITEMService.Repository.GetAll(); }
		}


		public IQueryable<EDUPASSPORTITEM> ReadEDUPASSPORTITEMs(Expression<Func<EDUPASSPORTITEM, bool>> filter, int dummy)
		{
			return this.EDUPASSPORTITEMService.Repository.Find(filter);
		}


		public IEnumerable<EDUPASSPORTITEMDto> ReadEDUPASSPORTITEMs()
		{
			return this.EDUPASSPORTITEMService.GetAll();
		}


		public IEnumerable<EDUPASSPORTITEMDto> ReadEDUPASSPORTITEMs(Expression<Func<EDUPASSPORTITEM, bool>> filter)
		{
			return this.EDUPASSPORTITEMService.Find(filter);
		}


		public IEnumerable<EDUPASSPORTITEMDto> ReadEDUPASSPORTITEMs(ISpecification<EDUPASSPORTITEM> specification)
		{
			return this.EDUPASSPORTITEMService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUPASSPORTITEMDto> ReadEDUPASSPORTITEMs(IQueryable<EDUPASSPORTITEM> query)
		{
			return this.EDUPASSPORTITEMService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUPASSPORTITEMDto> ReadEDUPASSPORTITEMs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUPASSPORTITEMService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUPASSPORTITEMDto> ReadEDUPASSPORTITEMs(object[] keyWords)
		{
			return this.EDUPASSPORTITEMService.Find(keyWords);
		}


		public IEnumerable<EDUPASSPORTITEMDto> ReadEDUPASSPORTITEMsPaged(int startIndex, int pageSize)
		{
			return this.EDUPASSPORTITEMService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUPASSPORTITEMDto> ReadEDUPASSPORTITEMsPaged(IQueryable<EDUPASSPORTITEM> source, int pageIndex, int pageSize)
		{
			return this.EDUPASSPORTITEMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUPASSPORTITEMDto> ReadEDUPASSPORTITEMsPaged(IQueryable<EDUPASSPORTITEM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUPASSPORTITEMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUPASSPORTITEMDto> ReadEDUPASSPORTITEMsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUPASSPORTITEMService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUPASSPORTITEMDto> ReadEDUPASSPORTITEMsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUPASSPORTITEMService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUPASSPORTITEMDto> ReadEDUPASSPORTITEMsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUPASSPORTITEM, bool>> filter)
		{
			return this.EDUPASSPORTITEMService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUPASSPORTITEMDto ReadEDUPASSPORTITEMs(string dtoKey)
		{
			return this.EDUPASSPORTITEMService.GetByKey(dtoKey);
		}


		public int CountEDUPASSPORTITEMs()
		{
			return this.EDUPASSPORTITEMService.Count();
		}


		public int CountEDUPASSPORTITEMs(string filterExpression)
		{
			return this.EDUPASSPORTITEMService.Count(filterExpression);
		}


		public int CountEDUPASSPORTITEMs(Expression<Func<EDUPASSPORTITEM, bool>> filter)
		{
			return this.EDUPASSPORTITEMService.Count(filter);
		}


		public string CreateEDUPASSPORTITEM(EDUPASSPORTITEMDto edupassportitem, bool doSaveChanges = true)
		{
			string key = this.EDUPASSPORTITEMService.Add(edupassportitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUPASSPORTITEM(EDUPASSPORTITEMDto edupassportitem, bool doSaveChanges = true)
		{
			this.EDUPASSPORTITEMService.Update(edupassportitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUPASSPORTITEMs(IEnumerable<EDUPASSPORTITEMDto> edupassportitems, bool doSaveChanges = true)
		{
			if (edupassportitems == null)
			{
				return;
			}
			foreach (EDUPASSPORTITEMDto instance in edupassportitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUPASSPORTITEMService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUPASSPORTITEM(EDUPASSPORTITEMDto edupassportitem, bool doSaveChanges = true)
		{
			this.EDUPASSPORTITEMService.Delete(edupassportitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUPASSPORTITEMs(IEnumerable<EDUPASSPORTITEMDto> edupassportitems, bool doSaveChanges = true)
		{
			if (edupassportitems == null)
			{
				return;
			}
			foreach (EDUPASSPORTITEMDto instance in edupassportitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUPASSPORTITEMService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUPASSPORTITEM(EDUPASSPORTITEMDto edupassportitem, bool doSaveChanges = true)
		{
			switch (edupassportitem.RowState)
			{
				case RowState.Insert:
					this.CreateEDUPASSPORTITEM(edupassportitem, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUPASSPORTITEM(edupassportitem, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUPASSPORTITEM(edupassportitem, doSaveChanges);
					break;
			}
		}


		public void SaveEDUPASSPORTITEMs(IEnumerable<EDUPASSPORTITEMDto> edupassportitems, bool doSaveChanges = true)
		{
			if (edupassportitems == null)
			{
				return;
			}
			foreach (EDUPASSPORTITEMDto instance in edupassportitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUPASSPORTITEM(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUPASSPORTITEM CRUD Operations


		#region EDUPASSPORTINSTANCE CRUD Operations


		private IEDUPASSPORTINSTANCEService edupassportinstance;
		public virtual IEDUPASSPORTINSTANCEService EDUPASSPORTINSTANCEService
		{
			get
			{
				if (this.edupassportinstance == null)
				{
					IEDUPASSPORTINSTANCEAssembler assembler = new EDUPASSPORTINSTANCEAssembler();
					IEDUPASSPORTINSTANCERepository repository = new EDUPASSPORTINSTANCERepository(this.UnitOfWork);
					this.edupassportinstance = new EDUPASSPORTINSTANCEService(assembler, repository);
				}
				return this.edupassportinstance;
			}
		}


		public IQueryable<EDUPASSPORTINSTANCE> EDUPASSPORTINSTANCEs
		{
			get { return this.EDUPASSPORTINSTANCEService.Repository.GetAll(); }
		}


		public IQueryable<EDUPASSPORTINSTANCE> ReadEDUPASSPORTINSTANCEs(Expression<Func<EDUPASSPORTINSTANCE, bool>> filter, int dummy)
		{
			return this.EDUPASSPORTINSTANCEService.Repository.Find(filter);
		}


		public IEnumerable<EDUPASSPORTINSTANCEDto> ReadEDUPASSPORTINSTANCEs()
		{
			return this.EDUPASSPORTINSTANCEService.GetAll();
		}


		public IEnumerable<EDUPASSPORTINSTANCEDto> ReadEDUPASSPORTINSTANCEs(Expression<Func<EDUPASSPORTINSTANCE, bool>> filter)
		{
			return this.EDUPASSPORTINSTANCEService.Find(filter);
		}


		public IEnumerable<EDUPASSPORTINSTANCEDto> ReadEDUPASSPORTINSTANCEs(ISpecification<EDUPASSPORTINSTANCE> specification)
		{
			return this.EDUPASSPORTINSTANCEService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUPASSPORTINSTANCEDto> ReadEDUPASSPORTINSTANCEs(IQueryable<EDUPASSPORTINSTANCE> query)
		{
			return this.EDUPASSPORTINSTANCEService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUPASSPORTINSTANCEDto> ReadEDUPASSPORTINSTANCEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUPASSPORTINSTANCEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUPASSPORTINSTANCEDto> ReadEDUPASSPORTINSTANCEs(object[] keyWords)
		{
			return this.EDUPASSPORTINSTANCEService.Find(keyWords);
		}


		public IEnumerable<EDUPASSPORTINSTANCEDto> ReadEDUPASSPORTINSTANCEsPaged(int startIndex, int pageSize)
		{
			return this.EDUPASSPORTINSTANCEService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUPASSPORTINSTANCEDto> ReadEDUPASSPORTINSTANCEsPaged(IQueryable<EDUPASSPORTINSTANCE> source, int pageIndex, int pageSize)
		{
			return this.EDUPASSPORTINSTANCEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUPASSPORTINSTANCEDto> ReadEDUPASSPORTINSTANCEsPaged(IQueryable<EDUPASSPORTINSTANCE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUPASSPORTINSTANCEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUPASSPORTINSTANCEDto> ReadEDUPASSPORTINSTANCEsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUPASSPORTINSTANCEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUPASSPORTINSTANCEDto> ReadEDUPASSPORTINSTANCEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUPASSPORTINSTANCEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUPASSPORTINSTANCEDto> ReadEDUPASSPORTINSTANCEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUPASSPORTINSTANCE, bool>> filter)
		{
			return this.EDUPASSPORTINSTANCEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUPASSPORTINSTANCEDto ReadEDUPASSPORTINSTANCEs(string dtoKey)
		{
			return this.EDUPASSPORTINSTANCEService.GetByKey(dtoKey);
		}


		public int CountEDUPASSPORTINSTANCEs()
		{
			return this.EDUPASSPORTINSTANCEService.Count();
		}


		public int CountEDUPASSPORTINSTANCEs(string filterExpression)
		{
			return this.EDUPASSPORTINSTANCEService.Count(filterExpression);
		}


		public int CountEDUPASSPORTINSTANCEs(Expression<Func<EDUPASSPORTINSTANCE, bool>> filter)
		{
			return this.EDUPASSPORTINSTANCEService.Count(filter);
		}


		public string CreateEDUPASSPORTINSTANCE(EDUPASSPORTINSTANCEDto edupassportinstance, bool doSaveChanges = true)
		{
			string key = this.EDUPASSPORTINSTANCEService.Add(edupassportinstance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUPASSPORTINSTANCE(EDUPASSPORTINSTANCEDto edupassportinstance, bool doSaveChanges = true)
		{
			this.EDUPASSPORTINSTANCEService.Update(edupassportinstance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUPASSPORTINSTANCEs(IEnumerable<EDUPASSPORTINSTANCEDto> edupassportinstances, bool doSaveChanges = true)
		{
			if (edupassportinstances == null)
			{
				return;
			}
			foreach (EDUPASSPORTINSTANCEDto instance in edupassportinstances)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUPASSPORTINSTANCEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUPASSPORTINSTANCE(EDUPASSPORTINSTANCEDto edupassportinstance, bool doSaveChanges = true)
		{
			this.EDUPASSPORTINSTANCEService.Delete(edupassportinstance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUPASSPORTINSTANCEs(IEnumerable<EDUPASSPORTINSTANCEDto> edupassportinstances, bool doSaveChanges = true)
		{
			if (edupassportinstances == null)
			{
				return;
			}
			foreach (EDUPASSPORTINSTANCEDto instance in edupassportinstances)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUPASSPORTINSTANCEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUPASSPORTINSTANCE(EDUPASSPORTINSTANCEDto edupassportinstance, bool doSaveChanges = true)
		{
			switch (edupassportinstance.RowState)
			{
				case RowState.Insert:
					this.CreateEDUPASSPORTINSTANCE(edupassportinstance, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUPASSPORTINSTANCE(edupassportinstance, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUPASSPORTINSTANCE(edupassportinstance, doSaveChanges);
					break;
			}
		}


		public void SaveEDUPASSPORTINSTANCEs(IEnumerable<EDUPASSPORTINSTANCEDto> edupassportinstances, bool doSaveChanges = true)
		{
			if (edupassportinstances == null)
			{
				return;
			}
			foreach (EDUPASSPORTINSTANCEDto instance in edupassportinstances)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUPASSPORTINSTANCE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUPASSPORTINSTANCE CRUD Operations


		#region EDUPASSPORTINSITEMREJECTHI CRUD Operations


		private IEDUPASSPORTINSITEMREJECTHIService edupassportinsitemrejecthi;
		public virtual IEDUPASSPORTINSITEMREJECTHIService EDUPASSPORTINSITEMREJECTHIService
		{
			get
			{
				if (this.edupassportinsitemrejecthi == null)
				{
					IEDUPASSPORTINSITEMREJECTHIAssembler assembler = new EDUPASSPORTINSITEMREJECTHIAssembler();
					IEDUPASSPORTINSITEMREJECTHIRepository repository = new EDUPASSPORTINSITEMREJECTHIRepository(this.UnitOfWork);
					this.edupassportinsitemrejecthi = new EDUPASSPORTINSITEMREJECTHIService(assembler, repository);
				}
				return this.edupassportinsitemrejecthi;
			}
		}


		public IQueryable<EDUPASSPORTINSITEMREJECTHI> EDUPASSPORTINSITEMREJECTHIs
		{
			get { return this.EDUPASSPORTINSITEMREJECTHIService.Repository.GetAll(); }
		}


		public IQueryable<EDUPASSPORTINSITEMREJECTHI> ReadEDUPASSPORTINSITEMREJECTHIs(Expression<Func<EDUPASSPORTINSITEMREJECTHI, bool>> filter, int dummy)
		{
			return this.EDUPASSPORTINSITEMREJECTHIService.Repository.Find(filter);
		}


		public IEnumerable<EDUPASSPORTINSITEMREJECTHIDto> ReadEDUPASSPORTINSITEMREJECTHIs()
		{
			return this.EDUPASSPORTINSITEMREJECTHIService.GetAll();
		}


		public IEnumerable<EDUPASSPORTINSITEMREJECTHIDto> ReadEDUPASSPORTINSITEMREJECTHIs(Expression<Func<EDUPASSPORTINSITEMREJECTHI, bool>> filter)
		{
			return this.EDUPASSPORTINSITEMREJECTHIService.Find(filter);
		}


		public IEnumerable<EDUPASSPORTINSITEMREJECTHIDto> ReadEDUPASSPORTINSITEMREJECTHIs(ISpecification<EDUPASSPORTINSITEMREJECTHI> specification)
		{
			return this.EDUPASSPORTINSITEMREJECTHIService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUPASSPORTINSITEMREJECTHIDto> ReadEDUPASSPORTINSITEMREJECTHIs(IQueryable<EDUPASSPORTINSITEMREJECTHI> query)
		{
			return this.EDUPASSPORTINSITEMREJECTHIService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUPASSPORTINSITEMREJECTHIDto> ReadEDUPASSPORTINSITEMREJECTHIs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUPASSPORTINSITEMREJECTHIService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUPASSPORTINSITEMREJECTHIDto> ReadEDUPASSPORTINSITEMREJECTHIs(object[] keyWords)
		{
			return this.EDUPASSPORTINSITEMREJECTHIService.Find(keyWords);
		}


		public IEnumerable<EDUPASSPORTINSITEMREJECTHIDto> ReadEDUPASSPORTINSITEMREJECTHIsPaged(int startIndex, int pageSize)
		{
			return this.EDUPASSPORTINSITEMREJECTHIService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUPASSPORTINSITEMREJECTHIDto> ReadEDUPASSPORTINSITEMREJECTHIsPaged(IQueryable<EDUPASSPORTINSITEMREJECTHI> source, int pageIndex, int pageSize)
		{
			return this.EDUPASSPORTINSITEMREJECTHIService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUPASSPORTINSITEMREJECTHIDto> ReadEDUPASSPORTINSITEMREJECTHIsPaged(IQueryable<EDUPASSPORTINSITEMREJECTHI> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUPASSPORTINSITEMREJECTHIService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUPASSPORTINSITEMREJECTHIDto> ReadEDUPASSPORTINSITEMREJECTHIsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUPASSPORTINSITEMREJECTHIService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUPASSPORTINSITEMREJECTHIDto> ReadEDUPASSPORTINSITEMREJECTHIsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUPASSPORTINSITEMREJECTHIService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUPASSPORTINSITEMREJECTHIDto> ReadEDUPASSPORTINSITEMREJECTHIsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUPASSPORTINSITEMREJECTHI, bool>> filter)
		{
			return this.EDUPASSPORTINSITEMREJECTHIService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUPASSPORTINSITEMREJECTHIDto ReadEDUPASSPORTINSITEMREJECTHIs(string dtoKey)
		{
			return this.EDUPASSPORTINSITEMREJECTHIService.GetByKey(dtoKey);
		}


		public int CountEDUPASSPORTINSITEMREJECTHIs()
		{
			return this.EDUPASSPORTINSITEMREJECTHIService.Count();
		}


		public int CountEDUPASSPORTINSITEMREJECTHIs(string filterExpression)
		{
			return this.EDUPASSPORTINSITEMREJECTHIService.Count(filterExpression);
		}


		public int CountEDUPASSPORTINSITEMREJECTHIs(Expression<Func<EDUPASSPORTINSITEMREJECTHI, bool>> filter)
		{
			return this.EDUPASSPORTINSITEMREJECTHIService.Count(filter);
		}


		public string CreateEDUPASSPORTINSITEMREJECTHI(EDUPASSPORTINSITEMREJECTHIDto edupassportinsitemrejecthi, bool doSaveChanges = true)
		{
			string key = this.EDUPASSPORTINSITEMREJECTHIService.Add(edupassportinsitemrejecthi);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUPASSPORTINSITEMREJECTHI(EDUPASSPORTINSITEMREJECTHIDto edupassportinsitemrejecthi, bool doSaveChanges = true)
		{
			this.EDUPASSPORTINSITEMREJECTHIService.Update(edupassportinsitemrejecthi);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUPASSPORTINSITEMREJECTHIs(IEnumerable<EDUPASSPORTINSITEMREJECTHIDto> edupassportinsitemrejecthis, bool doSaveChanges = true)
		{
			if (edupassportinsitemrejecthis == null)
			{
				return;
			}
			foreach (EDUPASSPORTINSITEMREJECTHIDto instance in edupassportinsitemrejecthis)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUPASSPORTINSITEMREJECTHIService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUPASSPORTINSITEMREJECTHI(EDUPASSPORTINSITEMREJECTHIDto edupassportinsitemrejecthi, bool doSaveChanges = true)
		{
			this.EDUPASSPORTINSITEMREJECTHIService.Delete(edupassportinsitemrejecthi);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUPASSPORTINSITEMREJECTHIs(IEnumerable<EDUPASSPORTINSITEMREJECTHIDto> edupassportinsitemrejecthis, bool doSaveChanges = true)
		{
			if (edupassportinsitemrejecthis == null)
			{
				return;
			}
			foreach (EDUPASSPORTINSITEMREJECTHIDto instance in edupassportinsitemrejecthis)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUPASSPORTINSITEMREJECTHIService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUPASSPORTINSITEMREJECTHI(EDUPASSPORTINSITEMREJECTHIDto edupassportinsitemrejecthi, bool doSaveChanges = true)
		{
			switch (edupassportinsitemrejecthi.RowState)
			{
				case RowState.Insert:
					this.CreateEDUPASSPORTINSITEMREJECTHI(edupassportinsitemrejecthi, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUPASSPORTINSITEMREJECTHI(edupassportinsitemrejecthi, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUPASSPORTINSITEMREJECTHI(edupassportinsitemrejecthi, doSaveChanges);
					break;
			}
		}


		public void SaveEDUPASSPORTINSITEMREJECTHIs(IEnumerable<EDUPASSPORTINSITEMREJECTHIDto> edupassportinsitemrejecthis, bool doSaveChanges = true)
		{
			if (edupassportinsitemrejecthis == null)
			{
				return;
			}
			foreach (EDUPASSPORTINSITEMREJECTHIDto instance in edupassportinsitemrejecthis)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUPASSPORTINSITEMREJECTHI(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUPASSPORTINSITEMREJECTHI CRUD Operations


		#region EDUPASSPORTINSITEMREF CRUD Operations


		private IEDUPASSPORTINSITEMREFService edupassportinsitemref;
		public virtual IEDUPASSPORTINSITEMREFService EDUPASSPORTINSITEMREFService
		{
			get
			{
				if (this.edupassportinsitemref == null)
				{
					IEDUPASSPORTINSITEMREFAssembler assembler = new EDUPASSPORTINSITEMREFAssembler();
					IEDUPASSPORTINSITEMREFRepository repository = new EDUPASSPORTINSITEMREFRepository(this.UnitOfWork);
					this.edupassportinsitemref = new EDUPASSPORTINSITEMREFService(assembler, repository);
				}
				return this.edupassportinsitemref;
			}
		}


		public IQueryable<EDUPASSPORTINSITEMREF> EDUPASSPORTINSITEMREFs
		{
			get { return this.EDUPASSPORTINSITEMREFService.Repository.GetAll(); }
		}


		public IQueryable<EDUPASSPORTINSITEMREF> ReadEDUPASSPORTINSITEMREFs(Expression<Func<EDUPASSPORTINSITEMREF, bool>> filter, int dummy)
		{
			return this.EDUPASSPORTINSITEMREFService.Repository.Find(filter);
		}


		public IEnumerable<EDUPASSPORTINSITEMREFDto> ReadEDUPASSPORTINSITEMREFs()
		{
			return this.EDUPASSPORTINSITEMREFService.GetAll();
		}


		public IEnumerable<EDUPASSPORTINSITEMREFDto> ReadEDUPASSPORTINSITEMREFs(Expression<Func<EDUPASSPORTINSITEMREF, bool>> filter)
		{
			return this.EDUPASSPORTINSITEMREFService.Find(filter);
		}


		public IEnumerable<EDUPASSPORTINSITEMREFDto> ReadEDUPASSPORTINSITEMREFs(ISpecification<EDUPASSPORTINSITEMREF> specification)
		{
			return this.EDUPASSPORTINSITEMREFService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUPASSPORTINSITEMREFDto> ReadEDUPASSPORTINSITEMREFs(IQueryable<EDUPASSPORTINSITEMREF> query)
		{
			return this.EDUPASSPORTINSITEMREFService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUPASSPORTINSITEMREFDto> ReadEDUPASSPORTINSITEMREFs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUPASSPORTINSITEMREFService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUPASSPORTINSITEMREFDto> ReadEDUPASSPORTINSITEMREFs(object[] keyWords)
		{
			return this.EDUPASSPORTINSITEMREFService.Find(keyWords);
		}


		public IEnumerable<EDUPASSPORTINSITEMREFDto> ReadEDUPASSPORTINSITEMREFsPaged(int startIndex, int pageSize)
		{
			return this.EDUPASSPORTINSITEMREFService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUPASSPORTINSITEMREFDto> ReadEDUPASSPORTINSITEMREFsPaged(IQueryable<EDUPASSPORTINSITEMREF> source, int pageIndex, int pageSize)
		{
			return this.EDUPASSPORTINSITEMREFService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUPASSPORTINSITEMREFDto> ReadEDUPASSPORTINSITEMREFsPaged(IQueryable<EDUPASSPORTINSITEMREF> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUPASSPORTINSITEMREFService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUPASSPORTINSITEMREFDto> ReadEDUPASSPORTINSITEMREFsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUPASSPORTINSITEMREFService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUPASSPORTINSITEMREFDto> ReadEDUPASSPORTINSITEMREFsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUPASSPORTINSITEMREFService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUPASSPORTINSITEMREFDto> ReadEDUPASSPORTINSITEMREFsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUPASSPORTINSITEMREF, bool>> filter)
		{
			return this.EDUPASSPORTINSITEMREFService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUPASSPORTINSITEMREFDto ReadEDUPASSPORTINSITEMREFs(string dtoKey)
		{
			return this.EDUPASSPORTINSITEMREFService.GetByKey(dtoKey);
		}


		public int CountEDUPASSPORTINSITEMREFs()
		{
			return this.EDUPASSPORTINSITEMREFService.Count();
		}


		public int CountEDUPASSPORTINSITEMREFs(string filterExpression)
		{
			return this.EDUPASSPORTINSITEMREFService.Count(filterExpression);
		}


		public int CountEDUPASSPORTINSITEMREFs(Expression<Func<EDUPASSPORTINSITEMREF, bool>> filter)
		{
			return this.EDUPASSPORTINSITEMREFService.Count(filter);
		}


		public string CreateEDUPASSPORTINSITEMREF(EDUPASSPORTINSITEMREFDto edupassportinsitemref, bool doSaveChanges = true)
		{
			string key = this.EDUPASSPORTINSITEMREFService.Add(edupassportinsitemref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUPASSPORTINSITEMREF(EDUPASSPORTINSITEMREFDto edupassportinsitemref, bool doSaveChanges = true)
		{
			this.EDUPASSPORTINSITEMREFService.Update(edupassportinsitemref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUPASSPORTINSITEMREFs(IEnumerable<EDUPASSPORTINSITEMREFDto> edupassportinsitemrefs, bool doSaveChanges = true)
		{
			if (edupassportinsitemrefs == null)
			{
				return;
			}
			foreach (EDUPASSPORTINSITEMREFDto instance in edupassportinsitemrefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUPASSPORTINSITEMREFService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUPASSPORTINSITEMREF(EDUPASSPORTINSITEMREFDto edupassportinsitemref, bool doSaveChanges = true)
		{
			this.EDUPASSPORTINSITEMREFService.Delete(edupassportinsitemref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUPASSPORTINSITEMREFs(IEnumerable<EDUPASSPORTINSITEMREFDto> edupassportinsitemrefs, bool doSaveChanges = true)
		{
			if (edupassportinsitemrefs == null)
			{
				return;
			}
			foreach (EDUPASSPORTINSITEMREFDto instance in edupassportinsitemrefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUPASSPORTINSITEMREFService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUPASSPORTINSITEMREF(EDUPASSPORTINSITEMREFDto edupassportinsitemref, bool doSaveChanges = true)
		{
			switch (edupassportinsitemref.RowState)
			{
				case RowState.Insert:
					this.CreateEDUPASSPORTINSITEMREF(edupassportinsitemref, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUPASSPORTINSITEMREF(edupassportinsitemref, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUPASSPORTINSITEMREF(edupassportinsitemref, doSaveChanges);
					break;
			}
		}


		public void SaveEDUPASSPORTINSITEMREFs(IEnumerable<EDUPASSPORTINSITEMREFDto> edupassportinsitemrefs, bool doSaveChanges = true)
		{
			if (edupassportinsitemrefs == null)
			{
				return;
			}
			foreach (EDUPASSPORTINSITEMREFDto instance in edupassportinsitemrefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUPASSPORTINSITEMREF(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUPASSPORTINSITEMREF CRUD Operations


		#region EDUPASSPORTINSITEMDET CRUD Operations


		private IEDUPASSPORTINSITEMDETService edupassportinsitemdet;
		public virtual IEDUPASSPORTINSITEMDETService EDUPASSPORTINSITEMDETService
		{
			get
			{
				if (this.edupassportinsitemdet == null)
				{
					IEDUPASSPORTINSITEMDETAssembler assembler = new EDUPASSPORTINSITEMDETAssembler();
					IEDUPASSPORTINSITEMDETRepository repository = new EDUPASSPORTINSITEMDETRepository(this.UnitOfWork);
					this.edupassportinsitemdet = new EDUPASSPORTINSITEMDETService(assembler, repository);
				}
				return this.edupassportinsitemdet;
			}
		}


		public IQueryable<EDUPASSPORTINSITEMDET> EDUPASSPORTINSITEMDETs
		{
			get { return this.EDUPASSPORTINSITEMDETService.Repository.GetAll(); }
		}


		public IQueryable<EDUPASSPORTINSITEMDET> ReadEDUPASSPORTINSITEMDETs(Expression<Func<EDUPASSPORTINSITEMDET, bool>> filter, int dummy)
		{
			return this.EDUPASSPORTINSITEMDETService.Repository.Find(filter);
		}


		public IEnumerable<EDUPASSPORTINSITEMDETDto> ReadEDUPASSPORTINSITEMDETs()
		{
			return this.EDUPASSPORTINSITEMDETService.GetAll();
		}


		public IEnumerable<EDUPASSPORTINSITEMDETDto> ReadEDUPASSPORTINSITEMDETs(Expression<Func<EDUPASSPORTINSITEMDET, bool>> filter)
		{
			return this.EDUPASSPORTINSITEMDETService.Find(filter);
		}


		public IEnumerable<EDUPASSPORTINSITEMDETDto> ReadEDUPASSPORTINSITEMDETs(ISpecification<EDUPASSPORTINSITEMDET> specification)
		{
			return this.EDUPASSPORTINSITEMDETService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUPASSPORTINSITEMDETDto> ReadEDUPASSPORTINSITEMDETs(IQueryable<EDUPASSPORTINSITEMDET> query)
		{
			return this.EDUPASSPORTINSITEMDETService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUPASSPORTINSITEMDETDto> ReadEDUPASSPORTINSITEMDETs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUPASSPORTINSITEMDETService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUPASSPORTINSITEMDETDto> ReadEDUPASSPORTINSITEMDETs(object[] keyWords)
		{
			return this.EDUPASSPORTINSITEMDETService.Find(keyWords);
		}


		public IEnumerable<EDUPASSPORTINSITEMDETDto> ReadEDUPASSPORTINSITEMDETsPaged(int startIndex, int pageSize)
		{
			return this.EDUPASSPORTINSITEMDETService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUPASSPORTINSITEMDETDto> ReadEDUPASSPORTINSITEMDETsPaged(IQueryable<EDUPASSPORTINSITEMDET> source, int pageIndex, int pageSize)
		{
			return this.EDUPASSPORTINSITEMDETService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUPASSPORTINSITEMDETDto> ReadEDUPASSPORTINSITEMDETsPaged(IQueryable<EDUPASSPORTINSITEMDET> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUPASSPORTINSITEMDETService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUPASSPORTINSITEMDETDto> ReadEDUPASSPORTINSITEMDETsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUPASSPORTINSITEMDETService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUPASSPORTINSITEMDETDto> ReadEDUPASSPORTINSITEMDETsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUPASSPORTINSITEMDETService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUPASSPORTINSITEMDETDto> ReadEDUPASSPORTINSITEMDETsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUPASSPORTINSITEMDET, bool>> filter)
		{
			return this.EDUPASSPORTINSITEMDETService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUPASSPORTINSITEMDETDto ReadEDUPASSPORTINSITEMDETs(string dtoKey)
		{
			return this.EDUPASSPORTINSITEMDETService.GetByKey(dtoKey);
		}


		public int CountEDUPASSPORTINSITEMDETs()
		{
			return this.EDUPASSPORTINSITEMDETService.Count();
		}


		public int CountEDUPASSPORTINSITEMDETs(string filterExpression)
		{
			return this.EDUPASSPORTINSITEMDETService.Count(filterExpression);
		}


		public int CountEDUPASSPORTINSITEMDETs(Expression<Func<EDUPASSPORTINSITEMDET, bool>> filter)
		{
			return this.EDUPASSPORTINSITEMDETService.Count(filter);
		}


		public string CreateEDUPASSPORTINSITEMDET(EDUPASSPORTINSITEMDETDto edupassportinsitemdet, bool doSaveChanges = true)
		{
			string key = this.EDUPASSPORTINSITEMDETService.Add(edupassportinsitemdet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUPASSPORTINSITEMDET(EDUPASSPORTINSITEMDETDto edupassportinsitemdet, bool doSaveChanges = true)
		{
			this.EDUPASSPORTINSITEMDETService.Update(edupassportinsitemdet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUPASSPORTINSITEMDETs(IEnumerable<EDUPASSPORTINSITEMDETDto> edupassportinsitemdets, bool doSaveChanges = true)
		{
			if (edupassportinsitemdets == null)
			{
				return;
			}
			foreach (EDUPASSPORTINSITEMDETDto instance in edupassportinsitemdets)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUPASSPORTINSITEMDETService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUPASSPORTINSITEMDET(EDUPASSPORTINSITEMDETDto edupassportinsitemdet, bool doSaveChanges = true)
		{
			this.EDUPASSPORTINSITEMDETService.Delete(edupassportinsitemdet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUPASSPORTINSITEMDETs(IEnumerable<EDUPASSPORTINSITEMDETDto> edupassportinsitemdets, bool doSaveChanges = true)
		{
			if (edupassportinsitemdets == null)
			{
				return;
			}
			foreach (EDUPASSPORTINSITEMDETDto instance in edupassportinsitemdets)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUPASSPORTINSITEMDETService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUPASSPORTINSITEMDET(EDUPASSPORTINSITEMDETDto edupassportinsitemdet, bool doSaveChanges = true)
		{
			switch (edupassportinsitemdet.RowState)
			{
				case RowState.Insert:
					this.CreateEDUPASSPORTINSITEMDET(edupassportinsitemdet, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUPASSPORTINSITEMDET(edupassportinsitemdet, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUPASSPORTINSITEMDET(edupassportinsitemdet, doSaveChanges);
					break;
			}
		}


		public void SaveEDUPASSPORTINSITEMDETs(IEnumerable<EDUPASSPORTINSITEMDETDto> edupassportinsitemdets, bool doSaveChanges = true)
		{
			if (edupassportinsitemdets == null)
			{
				return;
			}
			foreach (EDUPASSPORTINSITEMDETDto instance in edupassportinsitemdets)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUPASSPORTINSITEMDET(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUPASSPORTINSITEMDET CRUD Operations


		#region EDUPASSPORTINSITEM CRUD Operations


		private IEDUPASSPORTINSITEMService edupassportinsitem;
		public virtual IEDUPASSPORTINSITEMService EDUPASSPORTINSITEMService
		{
			get
			{
				if (this.edupassportinsitem == null)
				{
					IEDUPASSPORTINSITEMAssembler assembler = new EDUPASSPORTINSITEMAssembler();
					IEDUPASSPORTINSITEMRepository repository = new EDUPASSPORTINSITEMRepository(this.UnitOfWork);
					this.edupassportinsitem = new EDUPASSPORTINSITEMService(assembler, repository);
				}
				return this.edupassportinsitem;
			}
		}


		public IQueryable<EDUPASSPORTINSITEM> EDUPASSPORTINSITEMs
		{
			get { return this.EDUPASSPORTINSITEMService.Repository.GetAll(); }
		}


		public IQueryable<EDUPASSPORTINSITEM> ReadEDUPASSPORTINSITEMs(Expression<Func<EDUPASSPORTINSITEM, bool>> filter, int dummy)
		{
			return this.EDUPASSPORTINSITEMService.Repository.Find(filter);
		}


		public IEnumerable<EDUPASSPORTINSITEMDto> ReadEDUPASSPORTINSITEMs()
		{
			return this.EDUPASSPORTINSITEMService.GetAll();
		}


		public IEnumerable<EDUPASSPORTINSITEMDto> ReadEDUPASSPORTINSITEMs(Expression<Func<EDUPASSPORTINSITEM, bool>> filter)
		{
			return this.EDUPASSPORTINSITEMService.Find(filter);
		}


		public IEnumerable<EDUPASSPORTINSITEMDto> ReadEDUPASSPORTINSITEMs(ISpecification<EDUPASSPORTINSITEM> specification)
		{
			return this.EDUPASSPORTINSITEMService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUPASSPORTINSITEMDto> ReadEDUPASSPORTINSITEMs(IQueryable<EDUPASSPORTINSITEM> query)
		{
			return this.EDUPASSPORTINSITEMService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUPASSPORTINSITEMDto> ReadEDUPASSPORTINSITEMs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUPASSPORTINSITEMService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUPASSPORTINSITEMDto> ReadEDUPASSPORTINSITEMs(object[] keyWords)
		{
			return this.EDUPASSPORTINSITEMService.Find(keyWords);
		}


		public IEnumerable<EDUPASSPORTINSITEMDto> ReadEDUPASSPORTINSITEMsPaged(int startIndex, int pageSize)
		{
			return this.EDUPASSPORTINSITEMService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUPASSPORTINSITEMDto> ReadEDUPASSPORTINSITEMsPaged(IQueryable<EDUPASSPORTINSITEM> source, int pageIndex, int pageSize)
		{
			return this.EDUPASSPORTINSITEMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUPASSPORTINSITEMDto> ReadEDUPASSPORTINSITEMsPaged(IQueryable<EDUPASSPORTINSITEM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUPASSPORTINSITEMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUPASSPORTINSITEMDto> ReadEDUPASSPORTINSITEMsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUPASSPORTINSITEMService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUPASSPORTINSITEMDto> ReadEDUPASSPORTINSITEMsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUPASSPORTINSITEMService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUPASSPORTINSITEMDto> ReadEDUPASSPORTINSITEMsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUPASSPORTINSITEM, bool>> filter)
		{
			return this.EDUPASSPORTINSITEMService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUPASSPORTINSITEMDto ReadEDUPASSPORTINSITEMs(string dtoKey)
		{
			return this.EDUPASSPORTINSITEMService.GetByKey(dtoKey);
		}


		public int CountEDUPASSPORTINSITEMs()
		{
			return this.EDUPASSPORTINSITEMService.Count();
		}


		public int CountEDUPASSPORTINSITEMs(string filterExpression)
		{
			return this.EDUPASSPORTINSITEMService.Count(filterExpression);
		}


		public int CountEDUPASSPORTINSITEMs(Expression<Func<EDUPASSPORTINSITEM, bool>> filter)
		{
			return this.EDUPASSPORTINSITEMService.Count(filter);
		}


		public string CreateEDUPASSPORTINSITEM(EDUPASSPORTINSITEMDto edupassportinsitem, bool doSaveChanges = true)
		{
			string key = this.EDUPASSPORTINSITEMService.Add(edupassportinsitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUPASSPORTINSITEM(EDUPASSPORTINSITEMDto edupassportinsitem, bool doSaveChanges = true)
		{
			this.EDUPASSPORTINSITEMService.Update(edupassportinsitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUPASSPORTINSITEMs(IEnumerable<EDUPASSPORTINSITEMDto> edupassportinsitems, bool doSaveChanges = true)
		{
			if (edupassportinsitems == null)
			{
				return;
			}
			foreach (EDUPASSPORTINSITEMDto instance in edupassportinsitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUPASSPORTINSITEMService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUPASSPORTINSITEM(EDUPASSPORTINSITEMDto edupassportinsitem, bool doSaveChanges = true)
		{
			this.EDUPASSPORTINSITEMService.Delete(edupassportinsitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUPASSPORTINSITEMs(IEnumerable<EDUPASSPORTINSITEMDto> edupassportinsitems, bool doSaveChanges = true)
		{
			if (edupassportinsitems == null)
			{
				return;
			}
			foreach (EDUPASSPORTINSITEMDto instance in edupassportinsitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUPASSPORTINSITEMService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUPASSPORTINSITEM(EDUPASSPORTINSITEMDto edupassportinsitem, bool doSaveChanges = true)
		{
			switch (edupassportinsitem.RowState)
			{
				case RowState.Insert:
					this.CreateEDUPASSPORTINSITEM(edupassportinsitem, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUPASSPORTINSITEM(edupassportinsitem, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUPASSPORTINSITEM(edupassportinsitem, doSaveChanges);
					break;
			}
		}


		public void SaveEDUPASSPORTINSITEMs(IEnumerable<EDUPASSPORTINSITEMDto> edupassportinsitems, bool doSaveChanges = true)
		{
			if (edupassportinsitems == null)
			{
				return;
			}
			foreach (EDUPASSPORTINSITEMDto instance in edupassportinsitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUPASSPORTINSITEM(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUPASSPORTINSITEM CRUD Operations


		#region EDUNOTETEMPLATE CRUD Operations


		private IEDUNOTETEMPLATEService edunotetemplate;
		public virtual IEDUNOTETEMPLATEService EDUNOTETEMPLATEService
		{
			get
			{
				if (this.edunotetemplate == null)
				{
					IEDUNOTETEMPLATEAssembler assembler = new EDUNOTETEMPLATEAssembler();
					IEDUNOTETEMPLATERepository repository = new EDUNOTETEMPLATERepository(this.UnitOfWork);
					this.edunotetemplate = new EDUNOTETEMPLATEService(assembler, repository);
				}
				return this.edunotetemplate;
			}
		}


		public IQueryable<EDUNOTETEMPLATE> EDUNOTETEMPLATEs
		{
			get { return this.EDUNOTETEMPLATEService.Repository.GetAll(); }
		}


		public IQueryable<EDUNOTETEMPLATE> ReadEDUNOTETEMPLATEs(Expression<Func<EDUNOTETEMPLATE, bool>> filter, int dummy)
		{
			return this.EDUNOTETEMPLATEService.Repository.Find(filter);
		}


		public IEnumerable<EDUNOTETEMPLATEDto> ReadEDUNOTETEMPLATEs()
		{
			return this.EDUNOTETEMPLATEService.GetAll();
		}


		public IEnumerable<EDUNOTETEMPLATEDto> ReadEDUNOTETEMPLATEs(Expression<Func<EDUNOTETEMPLATE, bool>> filter)
		{
			return this.EDUNOTETEMPLATEService.Find(filter);
		}


		public IEnumerable<EDUNOTETEMPLATEDto> ReadEDUNOTETEMPLATEs(ISpecification<EDUNOTETEMPLATE> specification)
		{
			return this.EDUNOTETEMPLATEService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUNOTETEMPLATEDto> ReadEDUNOTETEMPLATEs(IQueryable<EDUNOTETEMPLATE> query)
		{
			return this.EDUNOTETEMPLATEService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUNOTETEMPLATEDto> ReadEDUNOTETEMPLATEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUNOTETEMPLATEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUNOTETEMPLATEDto> ReadEDUNOTETEMPLATEs(object[] keyWords)
		{
			return this.EDUNOTETEMPLATEService.Find(keyWords);
		}


		public IEnumerable<EDUNOTETEMPLATEDto> ReadEDUNOTETEMPLATEsPaged(int startIndex, int pageSize)
		{
			return this.EDUNOTETEMPLATEService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUNOTETEMPLATEDto> ReadEDUNOTETEMPLATEsPaged(IQueryable<EDUNOTETEMPLATE> source, int pageIndex, int pageSize)
		{
			return this.EDUNOTETEMPLATEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUNOTETEMPLATEDto> ReadEDUNOTETEMPLATEsPaged(IQueryable<EDUNOTETEMPLATE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUNOTETEMPLATEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUNOTETEMPLATEDto> ReadEDUNOTETEMPLATEsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUNOTETEMPLATEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUNOTETEMPLATEDto> ReadEDUNOTETEMPLATEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUNOTETEMPLATEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUNOTETEMPLATEDto> ReadEDUNOTETEMPLATEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUNOTETEMPLATE, bool>> filter)
		{
			return this.EDUNOTETEMPLATEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUNOTETEMPLATEDto ReadEDUNOTETEMPLATEs(string dtoKey)
		{
			return this.EDUNOTETEMPLATEService.GetByKey(dtoKey);
		}


		public int CountEDUNOTETEMPLATEs()
		{
			return this.EDUNOTETEMPLATEService.Count();
		}


		public int CountEDUNOTETEMPLATEs(string filterExpression)
		{
			return this.EDUNOTETEMPLATEService.Count(filterExpression);
		}


		public int CountEDUNOTETEMPLATEs(Expression<Func<EDUNOTETEMPLATE, bool>> filter)
		{
			return this.EDUNOTETEMPLATEService.Count(filter);
		}


		public string CreateEDUNOTETEMPLATE(EDUNOTETEMPLATEDto edunotetemplate, bool doSaveChanges = true)
		{
			string key = this.EDUNOTETEMPLATEService.Add(edunotetemplate);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUNOTETEMPLATE(EDUNOTETEMPLATEDto edunotetemplate, bool doSaveChanges = true)
		{
			this.EDUNOTETEMPLATEService.Update(edunotetemplate);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUNOTETEMPLATEs(IEnumerable<EDUNOTETEMPLATEDto> edunotetemplates, bool doSaveChanges = true)
		{
			if (edunotetemplates == null)
			{
				return;
			}
			foreach (EDUNOTETEMPLATEDto instance in edunotetemplates)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUNOTETEMPLATEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUNOTETEMPLATE(EDUNOTETEMPLATEDto edunotetemplate, bool doSaveChanges = true)
		{
			this.EDUNOTETEMPLATEService.Delete(edunotetemplate);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUNOTETEMPLATEs(IEnumerable<EDUNOTETEMPLATEDto> edunotetemplates, bool doSaveChanges = true)
		{
			if (edunotetemplates == null)
			{
				return;
			}
			foreach (EDUNOTETEMPLATEDto instance in edunotetemplates)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUNOTETEMPLATEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUNOTETEMPLATE(EDUNOTETEMPLATEDto edunotetemplate, bool doSaveChanges = true)
		{
			switch (edunotetemplate.RowState)
			{
				case RowState.Insert:
					this.CreateEDUNOTETEMPLATE(edunotetemplate, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUNOTETEMPLATE(edunotetemplate, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUNOTETEMPLATE(edunotetemplate, doSaveChanges);
					break;
			}
		}


		public void SaveEDUNOTETEMPLATEs(IEnumerable<EDUNOTETEMPLATEDto> edunotetemplates, bool doSaveChanges = true)
		{
			if (edunotetemplates == null)
			{
				return;
			}
			foreach (EDUNOTETEMPLATEDto instance in edunotetemplates)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUNOTETEMPLATE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUNOTETEMPLATE CRUD Operations


		#region EDUNOTELIST CRUD Operations


		private IEDUNOTELISTService edunotelist;
		public virtual IEDUNOTELISTService EDUNOTELISTService
		{
			get
			{
				if (this.edunotelist == null)
				{
					IEDUNOTELISTAssembler assembler = new EDUNOTELISTAssembler();
					IEDUNOTELISTRepository repository = new EDUNOTELISTRepository(this.UnitOfWork);
					this.edunotelist = new EDUNOTELISTService(assembler, repository);
				}
				return this.edunotelist;
			}
		}


		public IQueryable<EDUNOTELIST> EDUNOTELISTs
		{
			get { return this.EDUNOTELISTService.Repository.GetAll(); }
		}


		public IQueryable<EDUNOTELIST> ReadEDUNOTELISTs(Expression<Func<EDUNOTELIST, bool>> filter, int dummy)
		{
			return this.EDUNOTELISTService.Repository.Find(filter);
		}


		public IEnumerable<EDUNOTELISTDto> ReadEDUNOTELISTs()
		{
			return this.EDUNOTELISTService.GetAll();
		}


		public IEnumerable<EDUNOTELISTDto> ReadEDUNOTELISTs(Expression<Func<EDUNOTELIST, bool>> filter)
		{
			return this.EDUNOTELISTService.Find(filter);
		}


		public IEnumerable<EDUNOTELISTDto> ReadEDUNOTELISTs(ISpecification<EDUNOTELIST> specification)
		{
			return this.EDUNOTELISTService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUNOTELISTDto> ReadEDUNOTELISTs(IQueryable<EDUNOTELIST> query)
		{
			return this.EDUNOTELISTService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUNOTELISTDto> ReadEDUNOTELISTs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUNOTELISTService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUNOTELISTDto> ReadEDUNOTELISTs(object[] keyWords)
		{
			return this.EDUNOTELISTService.Find(keyWords);
		}


		public IEnumerable<EDUNOTELISTDto> ReadEDUNOTELISTsPaged(int startIndex, int pageSize)
		{
			return this.EDUNOTELISTService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUNOTELISTDto> ReadEDUNOTELISTsPaged(IQueryable<EDUNOTELIST> source, int pageIndex, int pageSize)
		{
			return this.EDUNOTELISTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUNOTELISTDto> ReadEDUNOTELISTsPaged(IQueryable<EDUNOTELIST> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUNOTELISTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUNOTELISTDto> ReadEDUNOTELISTsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUNOTELISTService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUNOTELISTDto> ReadEDUNOTELISTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUNOTELISTService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUNOTELISTDto> ReadEDUNOTELISTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUNOTELIST, bool>> filter)
		{
			return this.EDUNOTELISTService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUNOTELISTDto ReadEDUNOTELISTs(string dtoKey)
		{
			return this.EDUNOTELISTService.GetByKey(dtoKey);
		}


		public int CountEDUNOTELISTs()
		{
			return this.EDUNOTELISTService.Count();
		}


		public int CountEDUNOTELISTs(string filterExpression)
		{
			return this.EDUNOTELISTService.Count(filterExpression);
		}


		public int CountEDUNOTELISTs(Expression<Func<EDUNOTELIST, bool>> filter)
		{
			return this.EDUNOTELISTService.Count(filter);
		}


		public string CreateEDUNOTELIST(EDUNOTELISTDto edunotelist, bool doSaveChanges = true)
		{
			string key = this.EDUNOTELISTService.Add(edunotelist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUNOTELIST(EDUNOTELISTDto edunotelist, bool doSaveChanges = true)
		{
			this.EDUNOTELISTService.Update(edunotelist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUNOTELISTs(IEnumerable<EDUNOTELISTDto> edunotelists, bool doSaveChanges = true)
		{
			if (edunotelists == null)
			{
				return;
			}
			foreach (EDUNOTELISTDto instance in edunotelists)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUNOTELISTService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUNOTELIST(EDUNOTELISTDto edunotelist, bool doSaveChanges = true)
		{
			this.EDUNOTELISTService.Delete(edunotelist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUNOTELISTs(IEnumerable<EDUNOTELISTDto> edunotelists, bool doSaveChanges = true)
		{
			if (edunotelists == null)
			{
				return;
			}
			foreach (EDUNOTELISTDto instance in edunotelists)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUNOTELISTService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUNOTELIST(EDUNOTELISTDto edunotelist, bool doSaveChanges = true)
		{
			switch (edunotelist.RowState)
			{
				case RowState.Insert:
					this.CreateEDUNOTELIST(edunotelist, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUNOTELIST(edunotelist, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUNOTELIST(edunotelist, doSaveChanges);
					break;
			}
		}


		public void SaveEDUNOTELISTs(IEnumerable<EDUNOTELISTDto> edunotelists, bool doSaveChanges = true)
		{
			if (edunotelists == null)
			{
				return;
			}
			foreach (EDUNOTELISTDto instance in edunotelists)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUNOTELIST(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUNOTELIST CRUD Operations


		#region EDUNOTEITEM CRUD Operations


		private IEDUNOTEITEMService edunoteitem;
		public virtual IEDUNOTEITEMService EDUNOTEITEMService
		{
			get
			{
				if (this.edunoteitem == null)
				{
					IEDUNOTEITEMAssembler assembler = new EDUNOTEITEMAssembler();
					IEDUNOTEITEMRepository repository = new EDUNOTEITEMRepository(this.UnitOfWork);
					this.edunoteitem = new EDUNOTEITEMService(assembler, repository);
				}
				return this.edunoteitem;
			}
		}


		public IQueryable<EDUNOTEITEM> EDUNOTEITEMs
		{
			get { return this.EDUNOTEITEMService.Repository.GetAll(); }
		}


		public IQueryable<EDUNOTEITEM> ReadEDUNOTEITEMs(Expression<Func<EDUNOTEITEM, bool>> filter, int dummy)
		{
			return this.EDUNOTEITEMService.Repository.Find(filter);
		}


		public IEnumerable<EDUNOTEITEMDto> ReadEDUNOTEITEMs()
		{
			return this.EDUNOTEITEMService.GetAll();
		}


		public IEnumerable<EDUNOTEITEMDto> ReadEDUNOTEITEMs(Expression<Func<EDUNOTEITEM, bool>> filter)
		{
			return this.EDUNOTEITEMService.Find(filter);
		}


		public IEnumerable<EDUNOTEITEMDto> ReadEDUNOTEITEMs(ISpecification<EDUNOTEITEM> specification)
		{
			return this.EDUNOTEITEMService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUNOTEITEMDto> ReadEDUNOTEITEMs(IQueryable<EDUNOTEITEM> query)
		{
			return this.EDUNOTEITEMService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUNOTEITEMDto> ReadEDUNOTEITEMs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUNOTEITEMService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUNOTEITEMDto> ReadEDUNOTEITEMs(object[] keyWords)
		{
			return this.EDUNOTEITEMService.Find(keyWords);
		}


		public IEnumerable<EDUNOTEITEMDto> ReadEDUNOTEITEMsPaged(int startIndex, int pageSize)
		{
			return this.EDUNOTEITEMService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUNOTEITEMDto> ReadEDUNOTEITEMsPaged(IQueryable<EDUNOTEITEM> source, int pageIndex, int pageSize)
		{
			return this.EDUNOTEITEMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUNOTEITEMDto> ReadEDUNOTEITEMsPaged(IQueryable<EDUNOTEITEM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUNOTEITEMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUNOTEITEMDto> ReadEDUNOTEITEMsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUNOTEITEMService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUNOTEITEMDto> ReadEDUNOTEITEMsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUNOTEITEMService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUNOTEITEMDto> ReadEDUNOTEITEMsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUNOTEITEM, bool>> filter)
		{
			return this.EDUNOTEITEMService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUNOTEITEMDto ReadEDUNOTEITEMs(string dtoKey)
		{
			return this.EDUNOTEITEMService.GetByKey(dtoKey);
		}


		public int CountEDUNOTEITEMs()
		{
			return this.EDUNOTEITEMService.Count();
		}


		public int CountEDUNOTEITEMs(string filterExpression)
		{
			return this.EDUNOTEITEMService.Count(filterExpression);
		}


		public int CountEDUNOTEITEMs(Expression<Func<EDUNOTEITEM, bool>> filter)
		{
			return this.EDUNOTEITEMService.Count(filter);
		}


		public string CreateEDUNOTEITEM(EDUNOTEITEMDto edunoteitem, bool doSaveChanges = true)
		{
			string key = this.EDUNOTEITEMService.Add(edunoteitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUNOTEITEM(EDUNOTEITEMDto edunoteitem, bool doSaveChanges = true)
		{
			this.EDUNOTEITEMService.Update(edunoteitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUNOTEITEMs(IEnumerable<EDUNOTEITEMDto> edunoteitems, bool doSaveChanges = true)
		{
			if (edunoteitems == null)
			{
				return;
			}
			foreach (EDUNOTEITEMDto instance in edunoteitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUNOTEITEMService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUNOTEITEM(EDUNOTEITEMDto edunoteitem, bool doSaveChanges = true)
		{
			this.EDUNOTEITEMService.Delete(edunoteitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUNOTEITEMs(IEnumerable<EDUNOTEITEMDto> edunoteitems, bool doSaveChanges = true)
		{
			if (edunoteitems == null)
			{
				return;
			}
			foreach (EDUNOTEITEMDto instance in edunoteitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUNOTEITEMService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUNOTEITEM(EDUNOTEITEMDto edunoteitem, bool doSaveChanges = true)
		{
			switch (edunoteitem.RowState)
			{
				case RowState.Insert:
					this.CreateEDUNOTEITEM(edunoteitem, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUNOTEITEM(edunoteitem, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUNOTEITEM(edunoteitem, doSaveChanges);
					break;
			}
		}


		public void SaveEDUNOTEITEMs(IEnumerable<EDUNOTEITEMDto> edunoteitems, bool doSaveChanges = true)
		{
			if (edunoteitems == null)
			{
				return;
			}
			foreach (EDUNOTEITEMDto instance in edunoteitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUNOTEITEM(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUNOTEITEM CRUD Operations


		#region EDUNOTE CRUD Operations


		private IEDUNOTEService edunote;
		public virtual IEDUNOTEService EDUNOTEService
		{
			get
			{
				if (this.edunote == null)
				{
					IEDUNOTEAssembler assembler = new EDUNOTEAssembler();
					IEDUNOTERepository repository = new EDUNOTERepository(this.UnitOfWork);
					this.edunote = new EDUNOTEService(assembler, repository);
				}
				return this.edunote;
			}
		}


		public IQueryable<EDUNOTE> EDUNOTEs
		{
			get { return this.EDUNOTEService.Repository.GetAll(); }
		}


		public IQueryable<EDUNOTE> ReadEDUNOTEs(Expression<Func<EDUNOTE, bool>> filter, int dummy)
		{
			return this.EDUNOTEService.Repository.Find(filter);
		}


		public IEnumerable<EDUNOTEDto> ReadEDUNOTEs()
		{
			return this.EDUNOTEService.GetAll();
		}


		public IEnumerable<EDUNOTEDto> ReadEDUNOTEs(Expression<Func<EDUNOTE, bool>> filter)
		{
			return this.EDUNOTEService.Find(filter);
		}


		public IEnumerable<EDUNOTEDto> ReadEDUNOTEs(ISpecification<EDUNOTE> specification)
		{
			return this.EDUNOTEService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUNOTEDto> ReadEDUNOTEs(IQueryable<EDUNOTE> query)
		{
			return this.EDUNOTEService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUNOTEDto> ReadEDUNOTEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUNOTEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUNOTEDto> ReadEDUNOTEs(object[] keyWords)
		{
			return this.EDUNOTEService.Find(keyWords);
		}


		public IEnumerable<EDUNOTEDto> ReadEDUNOTEsPaged(int startIndex, int pageSize)
		{
			return this.EDUNOTEService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUNOTEDto> ReadEDUNOTEsPaged(IQueryable<EDUNOTE> source, int pageIndex, int pageSize)
		{
			return this.EDUNOTEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUNOTEDto> ReadEDUNOTEsPaged(IQueryable<EDUNOTE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUNOTEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUNOTEDto> ReadEDUNOTEsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUNOTEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUNOTEDto> ReadEDUNOTEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUNOTEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUNOTEDto> ReadEDUNOTEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUNOTE, bool>> filter)
		{
			return this.EDUNOTEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUNOTEDto ReadEDUNOTEs(string dtoKey)
		{
			return this.EDUNOTEService.GetByKey(dtoKey);
		}


		public int CountEDUNOTEs()
		{
			return this.EDUNOTEService.Count();
		}


		public int CountEDUNOTEs(string filterExpression)
		{
			return this.EDUNOTEService.Count(filterExpression);
		}


		public int CountEDUNOTEs(Expression<Func<EDUNOTE, bool>> filter)
		{
			return this.EDUNOTEService.Count(filter);
		}


		public string CreateEDUNOTE(EDUNOTEDto edunote, bool doSaveChanges = true)
		{
			string key = this.EDUNOTEService.Add(edunote);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUNOTE(EDUNOTEDto edunote, bool doSaveChanges = true)
		{
			this.EDUNOTEService.Update(edunote);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUNOTEs(IEnumerable<EDUNOTEDto> edunotes, bool doSaveChanges = true)
		{
			if (edunotes == null)
			{
				return;
			}
			foreach (EDUNOTEDto instance in edunotes)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUNOTEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUNOTE(EDUNOTEDto edunote, bool doSaveChanges = true)
		{
			this.EDUNOTEService.Delete(edunote);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUNOTEs(IEnumerable<EDUNOTEDto> edunotes, bool doSaveChanges = true)
		{
			if (edunotes == null)
			{
				return;
			}
			foreach (EDUNOTEDto instance in edunotes)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUNOTEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUNOTE(EDUNOTEDto edunote, bool doSaveChanges = true)
		{
			switch (edunote.RowState)
			{
				case RowState.Insert:
					this.CreateEDUNOTE(edunote, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUNOTE(edunote, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUNOTE(edunote, doSaveChanges);
					break;
			}
		}


		public void SaveEDUNOTEs(IEnumerable<EDUNOTEDto> edunotes, bool doSaveChanges = true)
		{
			if (edunotes == null)
			{
				return;
			}
			foreach (EDUNOTEDto instance in edunotes)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUNOTE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUNOTE CRUD Operations


		#region EDUNOTALERTSETTING CRUD Operations


		private IEDUNOTALERTSETTINGService edunotalertsetting;
		public virtual IEDUNOTALERTSETTINGService EDUNOTALERTSETTINGService
		{
			get
			{
				if (this.edunotalertsetting == null)
				{
					IEDUNOTALERTSETTINGAssembler assembler = new EDUNOTALERTSETTINGAssembler();
					IEDUNOTALERTSETTINGRepository repository = new EDUNOTALERTSETTINGRepository(this.UnitOfWork);
					this.edunotalertsetting = new EDUNOTALERTSETTINGService(assembler, repository);
				}
				return this.edunotalertsetting;
			}
		}


		public IQueryable<EDUNOTALERTSETTING> EDUNOTALERTSETTINGs
		{
			get { return this.EDUNOTALERTSETTINGService.Repository.GetAll(); }
		}


		public IQueryable<EDUNOTALERTSETTING> ReadEDUNOTALERTSETTINGs(Expression<Func<EDUNOTALERTSETTING, bool>> filter, int dummy)
		{
			return this.EDUNOTALERTSETTINGService.Repository.Find(filter);
		}


		public IEnumerable<EDUNOTALERTSETTINGDto> ReadEDUNOTALERTSETTINGs()
		{
			return this.EDUNOTALERTSETTINGService.GetAll();
		}


		public IEnumerable<EDUNOTALERTSETTINGDto> ReadEDUNOTALERTSETTINGs(Expression<Func<EDUNOTALERTSETTING, bool>> filter)
		{
			return this.EDUNOTALERTSETTINGService.Find(filter);
		}


		public IEnumerable<EDUNOTALERTSETTINGDto> ReadEDUNOTALERTSETTINGs(ISpecification<EDUNOTALERTSETTING> specification)
		{
			return this.EDUNOTALERTSETTINGService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUNOTALERTSETTINGDto> ReadEDUNOTALERTSETTINGs(IQueryable<EDUNOTALERTSETTING> query)
		{
			return this.EDUNOTALERTSETTINGService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUNOTALERTSETTINGDto> ReadEDUNOTALERTSETTINGs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUNOTALERTSETTINGService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUNOTALERTSETTINGDto> ReadEDUNOTALERTSETTINGs(object[] keyWords)
		{
			return this.EDUNOTALERTSETTINGService.Find(keyWords);
		}


		public IEnumerable<EDUNOTALERTSETTINGDto> ReadEDUNOTALERTSETTINGsPaged(int startIndex, int pageSize)
		{
			return this.EDUNOTALERTSETTINGService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUNOTALERTSETTINGDto> ReadEDUNOTALERTSETTINGsPaged(IQueryable<EDUNOTALERTSETTING> source, int pageIndex, int pageSize)
		{
			return this.EDUNOTALERTSETTINGService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUNOTALERTSETTINGDto> ReadEDUNOTALERTSETTINGsPaged(IQueryable<EDUNOTALERTSETTING> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUNOTALERTSETTINGService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUNOTALERTSETTINGDto> ReadEDUNOTALERTSETTINGsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUNOTALERTSETTINGService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUNOTALERTSETTINGDto> ReadEDUNOTALERTSETTINGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUNOTALERTSETTINGService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUNOTALERTSETTINGDto> ReadEDUNOTALERTSETTINGsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUNOTALERTSETTING, bool>> filter)
		{
			return this.EDUNOTALERTSETTINGService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUNOTALERTSETTINGDto ReadEDUNOTALERTSETTINGs(string dtoKey)
		{
			return this.EDUNOTALERTSETTINGService.GetByKey(dtoKey);
		}


		public int CountEDUNOTALERTSETTINGs()
		{
			return this.EDUNOTALERTSETTINGService.Count();
		}


		public int CountEDUNOTALERTSETTINGs(string filterExpression)
		{
			return this.EDUNOTALERTSETTINGService.Count(filterExpression);
		}


		public int CountEDUNOTALERTSETTINGs(Expression<Func<EDUNOTALERTSETTING, bool>> filter)
		{
			return this.EDUNOTALERTSETTINGService.Count(filter);
		}


		public string CreateEDUNOTALERTSETTING(EDUNOTALERTSETTINGDto edunotalertsetting, bool doSaveChanges = true)
		{
			string key = this.EDUNOTALERTSETTINGService.Add(edunotalertsetting);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUNOTALERTSETTING(EDUNOTALERTSETTINGDto edunotalertsetting, bool doSaveChanges = true)
		{
			this.EDUNOTALERTSETTINGService.Update(edunotalertsetting);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUNOTALERTSETTINGs(IEnumerable<EDUNOTALERTSETTINGDto> edunotalertsettings, bool doSaveChanges = true)
		{
			if (edunotalertsettings == null)
			{
				return;
			}
			foreach (EDUNOTALERTSETTINGDto instance in edunotalertsettings)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUNOTALERTSETTINGService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUNOTALERTSETTING(EDUNOTALERTSETTINGDto edunotalertsetting, bool doSaveChanges = true)
		{
			this.EDUNOTALERTSETTINGService.Delete(edunotalertsetting);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUNOTALERTSETTINGs(IEnumerable<EDUNOTALERTSETTINGDto> edunotalertsettings, bool doSaveChanges = true)
		{
			if (edunotalertsettings == null)
			{
				return;
			}
			foreach (EDUNOTALERTSETTINGDto instance in edunotalertsettings)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUNOTALERTSETTINGService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUNOTALERTSETTING(EDUNOTALERTSETTINGDto edunotalertsetting, bool doSaveChanges = true)
		{
			switch (edunotalertsetting.RowState)
			{
				case RowState.Insert:
					this.CreateEDUNOTALERTSETTING(edunotalertsetting, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUNOTALERTSETTING(edunotalertsetting, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUNOTALERTSETTING(edunotalertsetting, doSaveChanges);
					break;
			}
		}


		public void SaveEDUNOTALERTSETTINGs(IEnumerable<EDUNOTALERTSETTINGDto> edunotalertsettings, bool doSaveChanges = true)
		{
			if (edunotalertsettings == null)
			{
				return;
			}
			foreach (EDUNOTALERTSETTINGDto instance in edunotalertsettings)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUNOTALERTSETTING(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUNOTALERTSETTING CRUD Operations


		#region EDUMENU CRUD Operations


		private IEDUMENUService edumenu;
		public virtual IEDUMENUService EDUMENUService
		{
			get
			{
				if (this.edumenu == null)
				{
					IEDUMENUAssembler assembler = new EDUMENUAssembler();
					IEDUMENURepository repository = new EDUMENURepository(this.UnitOfWork);
					this.edumenu = new EDUMENUService(assembler, repository);
				}
				return this.edumenu;
			}
		}


		public IQueryable<EDUMENU> EDUMENUs
		{
			get { return this.EDUMENUService.Repository.GetAll(); }
		}


		public IQueryable<EDUMENU> ReadEDUMENUs(Expression<Func<EDUMENU, bool>> filter, int dummy)
		{
			return this.EDUMENUService.Repository.Find(filter);
		}


		public IEnumerable<EDUMENUDto> ReadEDUMENUs()
		{
			return this.EDUMENUService.GetAll();
		}


		public IEnumerable<EDUMENUDto> ReadEDUMENUs(Expression<Func<EDUMENU, bool>> filter)
		{
			return this.EDUMENUService.Find(filter);
		}


		public IEnumerable<EDUMENUDto> ReadEDUMENUs(ISpecification<EDUMENU> specification)
		{
			return this.EDUMENUService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUMENUDto> ReadEDUMENUs(IQueryable<EDUMENU> query)
		{
			return this.EDUMENUService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUMENUDto> ReadEDUMENUs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUMENUService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUMENUDto> ReadEDUMENUs(object[] keyWords)
		{
			return this.EDUMENUService.Find(keyWords);
		}


		public IEnumerable<EDUMENUDto> ReadEDUMENUsPaged(int startIndex, int pageSize)
		{
			return this.EDUMENUService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUMENUDto> ReadEDUMENUsPaged(IQueryable<EDUMENU> source, int pageIndex, int pageSize)
		{
			return this.EDUMENUService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUMENUDto> ReadEDUMENUsPaged(IQueryable<EDUMENU> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUMENUService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUMENUDto> ReadEDUMENUsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUMENUService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUMENUDto> ReadEDUMENUsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUMENUService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUMENUDto> ReadEDUMENUsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUMENU, bool>> filter)
		{
			return this.EDUMENUService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUMENUDto ReadEDUMENUs(string dtoKey)
		{
			return this.EDUMENUService.GetByKey(dtoKey);
		}


		public int CountEDUMENUs()
		{
			return this.EDUMENUService.Count();
		}


		public int CountEDUMENUs(string filterExpression)
		{
			return this.EDUMENUService.Count(filterExpression);
		}


		public int CountEDUMENUs(Expression<Func<EDUMENU, bool>> filter)
		{
			return this.EDUMENUService.Count(filter);
		}


		public string CreateEDUMENU(EDUMENUDto edumenu, bool doSaveChanges = true)
		{
			string key = this.EDUMENUService.Add(edumenu);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUMENU(EDUMENUDto edumenu, bool doSaveChanges = true)
		{
			this.EDUMENUService.Update(edumenu);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUMENUs(IEnumerable<EDUMENUDto> edumenus, bool doSaveChanges = true)
		{
			if (edumenus == null)
			{
				return;
			}
			foreach (EDUMENUDto instance in edumenus)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUMENUService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUMENU(EDUMENUDto edumenu, bool doSaveChanges = true)
		{
			this.EDUMENUService.Delete(edumenu);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUMENUs(IEnumerable<EDUMENUDto> edumenus, bool doSaveChanges = true)
		{
			if (edumenus == null)
			{
				return;
			}
			foreach (EDUMENUDto instance in edumenus)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUMENUService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUMENU(EDUMENUDto edumenu, bool doSaveChanges = true)
		{
			switch (edumenu.RowState)
			{
				case RowState.Insert:
					this.CreateEDUMENU(edumenu, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUMENU(edumenu, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUMENU(edumenu, doSaveChanges);
					break;
			}
		}


		public void SaveEDUMENUs(IEnumerable<EDUMENUDto> edumenus, bool doSaveChanges = true)
		{
			if (edumenus == null)
			{
				return;
			}
			foreach (EDUMENUDto instance in edumenus)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUMENU(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUMENU CRUD Operations


		#region EDUFORMTEMPLATETARGET CRUD Operations


		private IEDUFORMTEMPLATETARGETService eduformtemplatetarget;
		public virtual IEDUFORMTEMPLATETARGETService EDUFORMTEMPLATETARGETService
		{
			get
			{
				if (this.eduformtemplatetarget == null)
				{
					IEDUFORMTEMPLATETARGETAssembler assembler = new EDUFORMTEMPLATETARGETAssembler();
					IEDUFORMTEMPLATETARGETRepository repository = new EDUFORMTEMPLATETARGETRepository(this.UnitOfWork);
					this.eduformtemplatetarget = new EDUFORMTEMPLATETARGETService(assembler, repository);
				}
				return this.eduformtemplatetarget;
			}
		}


		public IQueryable<EDUFORMTEMPLATETARGET> EDUFORMTEMPLATETARGETs
		{
			get { return this.EDUFORMTEMPLATETARGETService.Repository.GetAll(); }
		}


		public IQueryable<EDUFORMTEMPLATETARGET> ReadEDUFORMTEMPLATETARGETs(Expression<Func<EDUFORMTEMPLATETARGET, bool>> filter, int dummy)
		{
			return this.EDUFORMTEMPLATETARGETService.Repository.Find(filter);
		}


		public IEnumerable<EDUFORMTEMPLATETARGETDto> ReadEDUFORMTEMPLATETARGETs()
		{
			return this.EDUFORMTEMPLATETARGETService.GetAll();
		}


		public IEnumerable<EDUFORMTEMPLATETARGETDto> ReadEDUFORMTEMPLATETARGETs(Expression<Func<EDUFORMTEMPLATETARGET, bool>> filter)
		{
			return this.EDUFORMTEMPLATETARGETService.Find(filter);
		}


		public IEnumerable<EDUFORMTEMPLATETARGETDto> ReadEDUFORMTEMPLATETARGETs(ISpecification<EDUFORMTEMPLATETARGET> specification)
		{
			return this.EDUFORMTEMPLATETARGETService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUFORMTEMPLATETARGETDto> ReadEDUFORMTEMPLATETARGETs(IQueryable<EDUFORMTEMPLATETARGET> query)
		{
			return this.EDUFORMTEMPLATETARGETService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUFORMTEMPLATETARGETDto> ReadEDUFORMTEMPLATETARGETs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUFORMTEMPLATETARGETService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUFORMTEMPLATETARGETDto> ReadEDUFORMTEMPLATETARGETs(object[] keyWords)
		{
			return this.EDUFORMTEMPLATETARGETService.Find(keyWords);
		}


		public IEnumerable<EDUFORMTEMPLATETARGETDto> ReadEDUFORMTEMPLATETARGETsPaged(int startIndex, int pageSize)
		{
			return this.EDUFORMTEMPLATETARGETService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUFORMTEMPLATETARGETDto> ReadEDUFORMTEMPLATETARGETsPaged(IQueryable<EDUFORMTEMPLATETARGET> source, int pageIndex, int pageSize)
		{
			return this.EDUFORMTEMPLATETARGETService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUFORMTEMPLATETARGETDto> ReadEDUFORMTEMPLATETARGETsPaged(IQueryable<EDUFORMTEMPLATETARGET> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUFORMTEMPLATETARGETService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUFORMTEMPLATETARGETDto> ReadEDUFORMTEMPLATETARGETsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUFORMTEMPLATETARGETService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUFORMTEMPLATETARGETDto> ReadEDUFORMTEMPLATETARGETsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUFORMTEMPLATETARGETService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUFORMTEMPLATETARGETDto> ReadEDUFORMTEMPLATETARGETsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUFORMTEMPLATETARGET, bool>> filter)
		{
			return this.EDUFORMTEMPLATETARGETService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUFORMTEMPLATETARGETDto ReadEDUFORMTEMPLATETARGETs(string dtoKey)
		{
			return this.EDUFORMTEMPLATETARGETService.GetByKey(dtoKey);
		}


		public int CountEDUFORMTEMPLATETARGETs()
		{
			return this.EDUFORMTEMPLATETARGETService.Count();
		}


		public int CountEDUFORMTEMPLATETARGETs(string filterExpression)
		{
			return this.EDUFORMTEMPLATETARGETService.Count(filterExpression);
		}


		public int CountEDUFORMTEMPLATETARGETs(Expression<Func<EDUFORMTEMPLATETARGET, bool>> filter)
		{
			return this.EDUFORMTEMPLATETARGETService.Count(filter);
		}


		public string CreateEDUFORMTEMPLATETARGET(EDUFORMTEMPLATETARGETDto eduformtemplatetarget, bool doSaveChanges = true)
		{
			string key = this.EDUFORMTEMPLATETARGETService.Add(eduformtemplatetarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUFORMTEMPLATETARGET(EDUFORMTEMPLATETARGETDto eduformtemplatetarget, bool doSaveChanges = true)
		{
			this.EDUFORMTEMPLATETARGETService.Update(eduformtemplatetarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUFORMTEMPLATETARGETs(IEnumerable<EDUFORMTEMPLATETARGETDto> eduformtemplatetargets, bool doSaveChanges = true)
		{
			if (eduformtemplatetargets == null)
			{
				return;
			}
			foreach (EDUFORMTEMPLATETARGETDto instance in eduformtemplatetargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUFORMTEMPLATETARGETService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUFORMTEMPLATETARGET(EDUFORMTEMPLATETARGETDto eduformtemplatetarget, bool doSaveChanges = true)
		{
			this.EDUFORMTEMPLATETARGETService.Delete(eduformtemplatetarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUFORMTEMPLATETARGETs(IEnumerable<EDUFORMTEMPLATETARGETDto> eduformtemplatetargets, bool doSaveChanges = true)
		{
			if (eduformtemplatetargets == null)
			{
				return;
			}
			foreach (EDUFORMTEMPLATETARGETDto instance in eduformtemplatetargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUFORMTEMPLATETARGETService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUFORMTEMPLATETARGET(EDUFORMTEMPLATETARGETDto eduformtemplatetarget, bool doSaveChanges = true)
		{
			switch (eduformtemplatetarget.RowState)
			{
				case RowState.Insert:
					this.CreateEDUFORMTEMPLATETARGET(eduformtemplatetarget, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUFORMTEMPLATETARGET(eduformtemplatetarget, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUFORMTEMPLATETARGET(eduformtemplatetarget, doSaveChanges);
					break;
			}
		}


		public void SaveEDUFORMTEMPLATETARGETs(IEnumerable<EDUFORMTEMPLATETARGETDto> eduformtemplatetargets, bool doSaveChanges = true)
		{
			if (eduformtemplatetargets == null)
			{
				return;
			}
			foreach (EDUFORMTEMPLATETARGETDto instance in eduformtemplatetargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUFORMTEMPLATETARGET(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUFORMTEMPLATETARGET CRUD Operations


		#region EDUFORMTEMPLATELIST CRUD Operations


		private IEDUFORMTEMPLATELISTService eduformtemplatelist;
		public virtual IEDUFORMTEMPLATELISTService EDUFORMTEMPLATELISTService
		{
			get
			{
				if (this.eduformtemplatelist == null)
				{
					IEDUFORMTEMPLATELISTAssembler assembler = new EDUFORMTEMPLATELISTAssembler();
					IEDUFORMTEMPLATELISTRepository repository = new EDUFORMTEMPLATELISTRepository(this.UnitOfWork);
					this.eduformtemplatelist = new EDUFORMTEMPLATELISTService(assembler, repository);
				}
				return this.eduformtemplatelist;
			}
		}


		public IQueryable<EDUFORMTEMPLATELIST> EDUFORMTEMPLATELISTs
		{
			get { return this.EDUFORMTEMPLATELISTService.Repository.GetAll(); }
		}


		public IQueryable<EDUFORMTEMPLATELIST> ReadEDUFORMTEMPLATELISTs(Expression<Func<EDUFORMTEMPLATELIST, bool>> filter, int dummy)
		{
			return this.EDUFORMTEMPLATELISTService.Repository.Find(filter);
		}


		public IEnumerable<EDUFORMTEMPLATELISTDto> ReadEDUFORMTEMPLATELISTs()
		{
			return this.EDUFORMTEMPLATELISTService.GetAll();
		}


		public IEnumerable<EDUFORMTEMPLATELISTDto> ReadEDUFORMTEMPLATELISTs(Expression<Func<EDUFORMTEMPLATELIST, bool>> filter)
		{
			return this.EDUFORMTEMPLATELISTService.Find(filter);
		}


		public IEnumerable<EDUFORMTEMPLATELISTDto> ReadEDUFORMTEMPLATELISTs(ISpecification<EDUFORMTEMPLATELIST> specification)
		{
			return this.EDUFORMTEMPLATELISTService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUFORMTEMPLATELISTDto> ReadEDUFORMTEMPLATELISTs(IQueryable<EDUFORMTEMPLATELIST> query)
		{
			return this.EDUFORMTEMPLATELISTService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUFORMTEMPLATELISTDto> ReadEDUFORMTEMPLATELISTs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUFORMTEMPLATELISTService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUFORMTEMPLATELISTDto> ReadEDUFORMTEMPLATELISTs(object[] keyWords)
		{
			return this.EDUFORMTEMPLATELISTService.Find(keyWords);
		}


		public IEnumerable<EDUFORMTEMPLATELISTDto> ReadEDUFORMTEMPLATELISTsPaged(int startIndex, int pageSize)
		{
			return this.EDUFORMTEMPLATELISTService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUFORMTEMPLATELISTDto> ReadEDUFORMTEMPLATELISTsPaged(IQueryable<EDUFORMTEMPLATELIST> source, int pageIndex, int pageSize)
		{
			return this.EDUFORMTEMPLATELISTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUFORMTEMPLATELISTDto> ReadEDUFORMTEMPLATELISTsPaged(IQueryable<EDUFORMTEMPLATELIST> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUFORMTEMPLATELISTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUFORMTEMPLATELISTDto> ReadEDUFORMTEMPLATELISTsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUFORMTEMPLATELISTService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUFORMTEMPLATELISTDto> ReadEDUFORMTEMPLATELISTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUFORMTEMPLATELISTService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUFORMTEMPLATELISTDto> ReadEDUFORMTEMPLATELISTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUFORMTEMPLATELIST, bool>> filter)
		{
			return this.EDUFORMTEMPLATELISTService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUFORMTEMPLATELISTDto ReadEDUFORMTEMPLATELISTs(string dtoKey)
		{
			return this.EDUFORMTEMPLATELISTService.GetByKey(dtoKey);
		}


		public int CountEDUFORMTEMPLATELISTs()
		{
			return this.EDUFORMTEMPLATELISTService.Count();
		}


		public int CountEDUFORMTEMPLATELISTs(string filterExpression)
		{
			return this.EDUFORMTEMPLATELISTService.Count(filterExpression);
		}


		public int CountEDUFORMTEMPLATELISTs(Expression<Func<EDUFORMTEMPLATELIST, bool>> filter)
		{
			return this.EDUFORMTEMPLATELISTService.Count(filter);
		}


		public string CreateEDUFORMTEMPLATELIST(EDUFORMTEMPLATELISTDto eduformtemplatelist, bool doSaveChanges = true)
		{
			string key = this.EDUFORMTEMPLATELISTService.Add(eduformtemplatelist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUFORMTEMPLATELIST(EDUFORMTEMPLATELISTDto eduformtemplatelist, bool doSaveChanges = true)
		{
			this.EDUFORMTEMPLATELISTService.Update(eduformtemplatelist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUFORMTEMPLATELISTs(IEnumerable<EDUFORMTEMPLATELISTDto> eduformtemplatelists, bool doSaveChanges = true)
		{
			if (eduformtemplatelists == null)
			{
				return;
			}
			foreach (EDUFORMTEMPLATELISTDto instance in eduformtemplatelists)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUFORMTEMPLATELISTService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUFORMTEMPLATELIST(EDUFORMTEMPLATELISTDto eduformtemplatelist, bool doSaveChanges = true)
		{
			this.EDUFORMTEMPLATELISTService.Delete(eduformtemplatelist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUFORMTEMPLATELISTs(IEnumerable<EDUFORMTEMPLATELISTDto> eduformtemplatelists, bool doSaveChanges = true)
		{
			if (eduformtemplatelists == null)
			{
				return;
			}
			foreach (EDUFORMTEMPLATELISTDto instance in eduformtemplatelists)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUFORMTEMPLATELISTService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUFORMTEMPLATELIST(EDUFORMTEMPLATELISTDto eduformtemplatelist, bool doSaveChanges = true)
		{
			switch (eduformtemplatelist.RowState)
			{
				case RowState.Insert:
					this.CreateEDUFORMTEMPLATELIST(eduformtemplatelist, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUFORMTEMPLATELIST(eduformtemplatelist, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUFORMTEMPLATELIST(eduformtemplatelist, doSaveChanges);
					break;
			}
		}


		public void SaveEDUFORMTEMPLATELISTs(IEnumerable<EDUFORMTEMPLATELISTDto> eduformtemplatelists, bool doSaveChanges = true)
		{
			if (eduformtemplatelists == null)
			{
				return;
			}
			foreach (EDUFORMTEMPLATELISTDto instance in eduformtemplatelists)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUFORMTEMPLATELIST(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUFORMTEMPLATELIST CRUD Operations


		#region EDUFORMSTASTICPERMISSION CRUD Operations


		private IEDUFORMSTASTICPERMISSIONService eduformstasticpermission;
		public virtual IEDUFORMSTASTICPERMISSIONService EDUFORMSTASTICPERMISSIONService
		{
			get
			{
				if (this.eduformstasticpermission == null)
				{
					IEDUFORMSTASTICPERMISSIONAssembler assembler = new EDUFORMSTASTICPERMISSIONAssembler();
					IEDUFORMSTASTICPERMISSIONRepository repository = new EDUFORMSTASTICPERMISSIONRepository(this.UnitOfWork);
					this.eduformstasticpermission = new EDUFORMSTASTICPERMISSIONService(assembler, repository);
				}
				return this.eduformstasticpermission;
			}
		}


		public IQueryable<EDUFORMSTASTICPERMISSION> EDUFORMSTASTICPERMISSIONs
		{
			get { return this.EDUFORMSTASTICPERMISSIONService.Repository.GetAll(); }
		}


		public IQueryable<EDUFORMSTASTICPERMISSION> ReadEDUFORMSTASTICPERMISSIONs(Expression<Func<EDUFORMSTASTICPERMISSION, bool>> filter, int dummy)
		{
			return this.EDUFORMSTASTICPERMISSIONService.Repository.Find(filter);
		}


		public IEnumerable<EDUFORMSTASTICPERMISSIONDto> ReadEDUFORMSTASTICPERMISSIONs()
		{
			return this.EDUFORMSTASTICPERMISSIONService.GetAll();
		}


		public IEnumerable<EDUFORMSTASTICPERMISSIONDto> ReadEDUFORMSTASTICPERMISSIONs(Expression<Func<EDUFORMSTASTICPERMISSION, bool>> filter)
		{
			return this.EDUFORMSTASTICPERMISSIONService.Find(filter);
		}


		public IEnumerable<EDUFORMSTASTICPERMISSIONDto> ReadEDUFORMSTASTICPERMISSIONs(ISpecification<EDUFORMSTASTICPERMISSION> specification)
		{
			return this.EDUFORMSTASTICPERMISSIONService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUFORMSTASTICPERMISSIONDto> ReadEDUFORMSTASTICPERMISSIONs(IQueryable<EDUFORMSTASTICPERMISSION> query)
		{
			return this.EDUFORMSTASTICPERMISSIONService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUFORMSTASTICPERMISSIONDto> ReadEDUFORMSTASTICPERMISSIONs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUFORMSTASTICPERMISSIONService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUFORMSTASTICPERMISSIONDto> ReadEDUFORMSTASTICPERMISSIONs(object[] keyWords)
		{
			return this.EDUFORMSTASTICPERMISSIONService.Find(keyWords);
		}


		public IEnumerable<EDUFORMSTASTICPERMISSIONDto> ReadEDUFORMSTASTICPERMISSIONsPaged(int startIndex, int pageSize)
		{
			return this.EDUFORMSTASTICPERMISSIONService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUFORMSTASTICPERMISSIONDto> ReadEDUFORMSTASTICPERMISSIONsPaged(IQueryable<EDUFORMSTASTICPERMISSION> source, int pageIndex, int pageSize)
		{
			return this.EDUFORMSTASTICPERMISSIONService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUFORMSTASTICPERMISSIONDto> ReadEDUFORMSTASTICPERMISSIONsPaged(IQueryable<EDUFORMSTASTICPERMISSION> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUFORMSTASTICPERMISSIONService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUFORMSTASTICPERMISSIONDto> ReadEDUFORMSTASTICPERMISSIONsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUFORMSTASTICPERMISSIONService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUFORMSTASTICPERMISSIONDto> ReadEDUFORMSTASTICPERMISSIONsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUFORMSTASTICPERMISSIONService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUFORMSTASTICPERMISSIONDto> ReadEDUFORMSTASTICPERMISSIONsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUFORMSTASTICPERMISSION, bool>> filter)
		{
			return this.EDUFORMSTASTICPERMISSIONService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUFORMSTASTICPERMISSIONDto ReadEDUFORMSTASTICPERMISSIONs(string dtoKey)
		{
			return this.EDUFORMSTASTICPERMISSIONService.GetByKey(dtoKey);
		}


		public int CountEDUFORMSTASTICPERMISSIONs()
		{
			return this.EDUFORMSTASTICPERMISSIONService.Count();
		}


		public int CountEDUFORMSTASTICPERMISSIONs(string filterExpression)
		{
			return this.EDUFORMSTASTICPERMISSIONService.Count(filterExpression);
		}


		public int CountEDUFORMSTASTICPERMISSIONs(Expression<Func<EDUFORMSTASTICPERMISSION, bool>> filter)
		{
			return this.EDUFORMSTASTICPERMISSIONService.Count(filter);
		}


		public string CreateEDUFORMSTASTICPERMISSION(EDUFORMSTASTICPERMISSIONDto eduformstasticpermission, bool doSaveChanges = true)
		{
			string key = this.EDUFORMSTASTICPERMISSIONService.Add(eduformstasticpermission);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUFORMSTASTICPERMISSION(EDUFORMSTASTICPERMISSIONDto eduformstasticpermission, bool doSaveChanges = true)
		{
			this.EDUFORMSTASTICPERMISSIONService.Update(eduformstasticpermission);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUFORMSTASTICPERMISSIONs(IEnumerable<EDUFORMSTASTICPERMISSIONDto> eduformstasticpermissions, bool doSaveChanges = true)
		{
			if (eduformstasticpermissions == null)
			{
				return;
			}
			foreach (EDUFORMSTASTICPERMISSIONDto instance in eduformstasticpermissions)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUFORMSTASTICPERMISSIONService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUFORMSTASTICPERMISSION(EDUFORMSTASTICPERMISSIONDto eduformstasticpermission, bool doSaveChanges = true)
		{
			this.EDUFORMSTASTICPERMISSIONService.Delete(eduformstasticpermission);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUFORMSTASTICPERMISSIONs(IEnumerable<EDUFORMSTASTICPERMISSIONDto> eduformstasticpermissions, bool doSaveChanges = true)
		{
			if (eduformstasticpermissions == null)
			{
				return;
			}
			foreach (EDUFORMSTASTICPERMISSIONDto instance in eduformstasticpermissions)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUFORMSTASTICPERMISSIONService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUFORMSTASTICPERMISSION(EDUFORMSTASTICPERMISSIONDto eduformstasticpermission, bool doSaveChanges = true)
		{
			switch (eduformstasticpermission.RowState)
			{
				case RowState.Insert:
					this.CreateEDUFORMSTASTICPERMISSION(eduformstasticpermission, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUFORMSTASTICPERMISSION(eduformstasticpermission, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUFORMSTASTICPERMISSION(eduformstasticpermission, doSaveChanges);
					break;
			}
		}


		public void SaveEDUFORMSTASTICPERMISSIONs(IEnumerable<EDUFORMSTASTICPERMISSIONDto> eduformstasticpermissions, bool doSaveChanges = true)
		{
			if (eduformstasticpermissions == null)
			{
				return;
			}
			foreach (EDUFORMSTASTICPERMISSIONDto instance in eduformstasticpermissions)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUFORMSTASTICPERMISSION(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUFORMSTASTICPERMISSION CRUD Operations


		#region EDUACTVIEWTARGET CRUD Operations


		private IEDUACTVIEWTARGETService eduactviewtarget;
		public virtual IEDUACTVIEWTARGETService EDUACTVIEWTARGETService
		{
			get
			{
				if (this.eduactviewtarget == null)
				{
					IEDUACTVIEWTARGETAssembler assembler = new EDUACTVIEWTARGETAssembler();
					IEDUACTVIEWTARGETRepository repository = new EDUACTVIEWTARGETRepository(this.UnitOfWork);
					this.eduactviewtarget = new EDUACTVIEWTARGETService(assembler, repository);
				}
				return this.eduactviewtarget;
			}
		}


		public IQueryable<EDUACTVIEWTARGET> EDUACTVIEWTARGETs
		{
			get { return this.EDUACTVIEWTARGETService.Repository.GetAll(); }
		}


		public IQueryable<EDUACTVIEWTARGET> ReadEDUACTVIEWTARGETs(Expression<Func<EDUACTVIEWTARGET, bool>> filter, int dummy)
		{
			return this.EDUACTVIEWTARGETService.Repository.Find(filter);
		}


		public IEnumerable<EDUACTVIEWTARGETDto> ReadEDUACTVIEWTARGETs()
		{
			return this.EDUACTVIEWTARGETService.GetAll();
		}


		public IEnumerable<EDUACTVIEWTARGETDto> ReadEDUACTVIEWTARGETs(Expression<Func<EDUACTVIEWTARGET, bool>> filter)
		{
			return this.EDUACTVIEWTARGETService.Find(filter);
		}


		public IEnumerable<EDUACTVIEWTARGETDto> ReadEDUACTVIEWTARGETs(ISpecification<EDUACTVIEWTARGET> specification)
		{
			return this.EDUACTVIEWTARGETService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUACTVIEWTARGETDto> ReadEDUACTVIEWTARGETs(IQueryable<EDUACTVIEWTARGET> query)
		{
			return this.EDUACTVIEWTARGETService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUACTVIEWTARGETDto> ReadEDUACTVIEWTARGETs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUACTVIEWTARGETService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUACTVIEWTARGETDto> ReadEDUACTVIEWTARGETs(object[] keyWords)
		{
			return this.EDUACTVIEWTARGETService.Find(keyWords);
		}


		public IEnumerable<EDUACTVIEWTARGETDto> ReadEDUACTVIEWTARGETsPaged(int startIndex, int pageSize)
		{
			return this.EDUACTVIEWTARGETService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUACTVIEWTARGETDto> ReadEDUACTVIEWTARGETsPaged(IQueryable<EDUACTVIEWTARGET> source, int pageIndex, int pageSize)
		{
			return this.EDUACTVIEWTARGETService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUACTVIEWTARGETDto> ReadEDUACTVIEWTARGETsPaged(IQueryable<EDUACTVIEWTARGET> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUACTVIEWTARGETService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUACTVIEWTARGETDto> ReadEDUACTVIEWTARGETsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUACTVIEWTARGETService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUACTVIEWTARGETDto> ReadEDUACTVIEWTARGETsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUACTVIEWTARGETService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUACTVIEWTARGETDto> ReadEDUACTVIEWTARGETsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUACTVIEWTARGET, bool>> filter)
		{
			return this.EDUACTVIEWTARGETService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUACTVIEWTARGETDto ReadEDUACTVIEWTARGETs(string dtoKey)
		{
			return this.EDUACTVIEWTARGETService.GetByKey(dtoKey);
		}


		public int CountEDUACTVIEWTARGETs()
		{
			return this.EDUACTVIEWTARGETService.Count();
		}


		public int CountEDUACTVIEWTARGETs(string filterExpression)
		{
			return this.EDUACTVIEWTARGETService.Count(filterExpression);
		}


		public int CountEDUACTVIEWTARGETs(Expression<Func<EDUACTVIEWTARGET, bool>> filter)
		{
			return this.EDUACTVIEWTARGETService.Count(filter);
		}


		public string CreateEDUACTVIEWTARGET(EDUACTVIEWTARGETDto eduactviewtarget, bool doSaveChanges = true)
		{
			string key = this.EDUACTVIEWTARGETService.Add(eduactviewtarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUACTVIEWTARGET(EDUACTVIEWTARGETDto eduactviewtarget, bool doSaveChanges = true)
		{
			this.EDUACTVIEWTARGETService.Update(eduactviewtarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUACTVIEWTARGETs(IEnumerable<EDUACTVIEWTARGETDto> eduactviewtargets, bool doSaveChanges = true)
		{
			if (eduactviewtargets == null)
			{
				return;
			}
			foreach (EDUACTVIEWTARGETDto instance in eduactviewtargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUACTVIEWTARGETService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUACTVIEWTARGET(EDUACTVIEWTARGETDto eduactviewtarget, bool doSaveChanges = true)
		{
			this.EDUACTVIEWTARGETService.Delete(eduactviewtarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUACTVIEWTARGETs(IEnumerable<EDUACTVIEWTARGETDto> eduactviewtargets, bool doSaveChanges = true)
		{
			if (eduactviewtargets == null)
			{
				return;
			}
			foreach (EDUACTVIEWTARGETDto instance in eduactviewtargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUACTVIEWTARGETService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUACTVIEWTARGET(EDUACTVIEWTARGETDto eduactviewtarget, bool doSaveChanges = true)
		{
			switch (eduactviewtarget.RowState)
			{
				case RowState.Insert:
					this.CreateEDUACTVIEWTARGET(eduactviewtarget, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUACTVIEWTARGET(eduactviewtarget, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUACTVIEWTARGET(eduactviewtarget, doSaveChanges);
					break;
			}
		}


		public void SaveEDUACTVIEWTARGETs(IEnumerable<EDUACTVIEWTARGETDto> eduactviewtargets, bool doSaveChanges = true)
		{
			if (eduactviewtargets == null)
			{
				return;
			}
			foreach (EDUACTVIEWTARGETDto instance in eduactviewtargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUACTVIEWTARGET(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUACTVIEWTARGET CRUD Operations


		#region EDUACTTYPEROLEREF CRUD Operations


		private IEDUACTTYPEROLEREFService eduacttyperoleref;
		public virtual IEDUACTTYPEROLEREFService EDUACTTYPEROLEREFService
		{
			get
			{
				if (this.eduacttyperoleref == null)
				{
					IEDUACTTYPEROLEREFAssembler assembler = new EDUACTTYPEROLEREFAssembler();
					IEDUACTTYPEROLEREFRepository repository = new EDUACTTYPEROLEREFRepository(this.UnitOfWork);
					this.eduacttyperoleref = new EDUACTTYPEROLEREFService(assembler, repository);
				}
				return this.eduacttyperoleref;
			}
		}


		public IQueryable<EDUACTTYPEROLEREF> EDUACTTYPEROLEREFs
		{
			get { return this.EDUACTTYPEROLEREFService.Repository.GetAll(); }
		}


		public IQueryable<EDUACTTYPEROLEREF> ReadEDUACTTYPEROLEREFs(Expression<Func<EDUACTTYPEROLEREF, bool>> filter, int dummy)
		{
			return this.EDUACTTYPEROLEREFService.Repository.Find(filter);
		}


		public IEnumerable<EDUACTTYPEROLEREFDto> ReadEDUACTTYPEROLEREFs()
		{
			return this.EDUACTTYPEROLEREFService.GetAll();
		}


		public IEnumerable<EDUACTTYPEROLEREFDto> ReadEDUACTTYPEROLEREFs(Expression<Func<EDUACTTYPEROLEREF, bool>> filter)
		{
			return this.EDUACTTYPEROLEREFService.Find(filter);
		}


		public IEnumerable<EDUACTTYPEROLEREFDto> ReadEDUACTTYPEROLEREFs(ISpecification<EDUACTTYPEROLEREF> specification)
		{
			return this.EDUACTTYPEROLEREFService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUACTTYPEROLEREFDto> ReadEDUACTTYPEROLEREFs(IQueryable<EDUACTTYPEROLEREF> query)
		{
			return this.EDUACTTYPEROLEREFService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUACTTYPEROLEREFDto> ReadEDUACTTYPEROLEREFs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUACTTYPEROLEREFService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUACTTYPEROLEREFDto> ReadEDUACTTYPEROLEREFs(object[] keyWords)
		{
			return this.EDUACTTYPEROLEREFService.Find(keyWords);
		}


		public IEnumerable<EDUACTTYPEROLEREFDto> ReadEDUACTTYPEROLEREFsPaged(int startIndex, int pageSize)
		{
			return this.EDUACTTYPEROLEREFService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUACTTYPEROLEREFDto> ReadEDUACTTYPEROLEREFsPaged(IQueryable<EDUACTTYPEROLEREF> source, int pageIndex, int pageSize)
		{
			return this.EDUACTTYPEROLEREFService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUACTTYPEROLEREFDto> ReadEDUACTTYPEROLEREFsPaged(IQueryable<EDUACTTYPEROLEREF> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUACTTYPEROLEREFService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUACTTYPEROLEREFDto> ReadEDUACTTYPEROLEREFsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUACTTYPEROLEREFService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUACTTYPEROLEREFDto> ReadEDUACTTYPEROLEREFsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUACTTYPEROLEREFService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUACTTYPEROLEREFDto> ReadEDUACTTYPEROLEREFsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUACTTYPEROLEREF, bool>> filter)
		{
			return this.EDUACTTYPEROLEREFService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUACTTYPEROLEREFDto ReadEDUACTTYPEROLEREFs(string dtoKey)
		{
			return this.EDUACTTYPEROLEREFService.GetByKey(dtoKey);
		}


		public int CountEDUACTTYPEROLEREFs()
		{
			return this.EDUACTTYPEROLEREFService.Count();
		}


		public int CountEDUACTTYPEROLEREFs(string filterExpression)
		{
			return this.EDUACTTYPEROLEREFService.Count(filterExpression);
		}


		public int CountEDUACTTYPEROLEREFs(Expression<Func<EDUACTTYPEROLEREF, bool>> filter)
		{
			return this.EDUACTTYPEROLEREFService.Count(filter);
		}


		public string CreateEDUACTTYPEROLEREF(EDUACTTYPEROLEREFDto eduacttyperoleref, bool doSaveChanges = true)
		{
			string key = this.EDUACTTYPEROLEREFService.Add(eduacttyperoleref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUACTTYPEROLEREF(EDUACTTYPEROLEREFDto eduacttyperoleref, bool doSaveChanges = true)
		{
			this.EDUACTTYPEROLEREFService.Update(eduacttyperoleref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUACTTYPEROLEREFs(IEnumerable<EDUACTTYPEROLEREFDto> eduacttyperolerefs, bool doSaveChanges = true)
		{
			if (eduacttyperolerefs == null)
			{
				return;
			}
			foreach (EDUACTTYPEROLEREFDto instance in eduacttyperolerefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUACTTYPEROLEREFService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUACTTYPEROLEREF(EDUACTTYPEROLEREFDto eduacttyperoleref, bool doSaveChanges = true)
		{
			this.EDUACTTYPEROLEREFService.Delete(eduacttyperoleref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUACTTYPEROLEREFs(IEnumerable<EDUACTTYPEROLEREFDto> eduacttyperolerefs, bool doSaveChanges = true)
		{
			if (eduacttyperolerefs == null)
			{
				return;
			}
			foreach (EDUACTTYPEROLEREFDto instance in eduacttyperolerefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUACTTYPEROLEREFService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUACTTYPEROLEREF(EDUACTTYPEROLEREFDto eduacttyperoleref, bool doSaveChanges = true)
		{
			switch (eduacttyperoleref.RowState)
			{
				case RowState.Insert:
					this.CreateEDUACTTYPEROLEREF(eduacttyperoleref, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUACTTYPEROLEREF(eduacttyperoleref, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUACTTYPEROLEREF(eduacttyperoleref, doSaveChanges);
					break;
			}
		}


		public void SaveEDUACTTYPEROLEREFs(IEnumerable<EDUACTTYPEROLEREFDto> eduacttyperolerefs, bool doSaveChanges = true)
		{
			if (eduacttyperolerefs == null)
			{
				return;
			}
			foreach (EDUACTTYPEROLEREFDto instance in eduacttyperolerefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUACTTYPEROLEREF(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUACTTYPEROLEREF CRUD Operations


		#region EDUACTTYPEREF CRUD Operations


		private IEDUACTTYPEREFService eduacttyperef;
		public virtual IEDUACTTYPEREFService EDUACTTYPEREFService
		{
			get
			{
				if (this.eduacttyperef == null)
				{
					IEDUACTTYPEREFAssembler assembler = new EDUACTTYPEREFAssembler();
					IEDUACTTYPEREFRepository repository = new EDUACTTYPEREFRepository(this.UnitOfWork);
					this.eduacttyperef = new EDUACTTYPEREFService(assembler, repository);
				}
				return this.eduacttyperef;
			}
		}


		public IQueryable<EDUACTTYPEREF> EDUACTTYPEREFs
		{
			get { return this.EDUACTTYPEREFService.Repository.GetAll(); }
		}


		public IQueryable<EDUACTTYPEREF> ReadEDUACTTYPEREFs(Expression<Func<EDUACTTYPEREF, bool>> filter, int dummy)
		{
			return this.EDUACTTYPEREFService.Repository.Find(filter);
		}


		public IEnumerable<EDUACTTYPEREFDto> ReadEDUACTTYPEREFs()
		{
			return this.EDUACTTYPEREFService.GetAll();
		}


		public IEnumerable<EDUACTTYPEREFDto> ReadEDUACTTYPEREFs(Expression<Func<EDUACTTYPEREF, bool>> filter)
		{
			return this.EDUACTTYPEREFService.Find(filter);
		}


		public IEnumerable<EDUACTTYPEREFDto> ReadEDUACTTYPEREFs(ISpecification<EDUACTTYPEREF> specification)
		{
			return this.EDUACTTYPEREFService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUACTTYPEREFDto> ReadEDUACTTYPEREFs(IQueryable<EDUACTTYPEREF> query)
		{
			return this.EDUACTTYPEREFService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUACTTYPEREFDto> ReadEDUACTTYPEREFs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUACTTYPEREFService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUACTTYPEREFDto> ReadEDUACTTYPEREFs(object[] keyWords)
		{
			return this.EDUACTTYPEREFService.Find(keyWords);
		}


		public IEnumerable<EDUACTTYPEREFDto> ReadEDUACTTYPEREFsPaged(int startIndex, int pageSize)
		{
			return this.EDUACTTYPEREFService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUACTTYPEREFDto> ReadEDUACTTYPEREFsPaged(IQueryable<EDUACTTYPEREF> source, int pageIndex, int pageSize)
		{
			return this.EDUACTTYPEREFService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUACTTYPEREFDto> ReadEDUACTTYPEREFsPaged(IQueryable<EDUACTTYPEREF> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUACTTYPEREFService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUACTTYPEREFDto> ReadEDUACTTYPEREFsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUACTTYPEREFService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUACTTYPEREFDto> ReadEDUACTTYPEREFsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUACTTYPEREFService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUACTTYPEREFDto> ReadEDUACTTYPEREFsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUACTTYPEREF, bool>> filter)
		{
			return this.EDUACTTYPEREFService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUACTTYPEREFDto ReadEDUACTTYPEREFs(string dtoKey)
		{
			return this.EDUACTTYPEREFService.GetByKey(dtoKey);
		}


		public int CountEDUACTTYPEREFs()
		{
			return this.EDUACTTYPEREFService.Count();
		}


		public int CountEDUACTTYPEREFs(string filterExpression)
		{
			return this.EDUACTTYPEREFService.Count(filterExpression);
		}


		public int CountEDUACTTYPEREFs(Expression<Func<EDUACTTYPEREF, bool>> filter)
		{
			return this.EDUACTTYPEREFService.Count(filter);
		}


		public string CreateEDUACTTYPEREF(EDUACTTYPEREFDto eduacttyperef, bool doSaveChanges = true)
		{
			string key = this.EDUACTTYPEREFService.Add(eduacttyperef);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUACTTYPEREF(EDUACTTYPEREFDto eduacttyperef, bool doSaveChanges = true)
		{
			this.EDUACTTYPEREFService.Update(eduacttyperef);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUACTTYPEREFs(IEnumerable<EDUACTTYPEREFDto> eduacttyperefs, bool doSaveChanges = true)
		{
			if (eduacttyperefs == null)
			{
				return;
			}
			foreach (EDUACTTYPEREFDto instance in eduacttyperefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUACTTYPEREFService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUACTTYPEREF(EDUACTTYPEREFDto eduacttyperef, bool doSaveChanges = true)
		{
			this.EDUACTTYPEREFService.Delete(eduacttyperef);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUACTTYPEREFs(IEnumerable<EDUACTTYPEREFDto> eduacttyperefs, bool doSaveChanges = true)
		{
			if (eduacttyperefs == null)
			{
				return;
			}
			foreach (EDUACTTYPEREFDto instance in eduacttyperefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUACTTYPEREFService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUACTTYPEREF(EDUACTTYPEREFDto eduacttyperef, bool doSaveChanges = true)
		{
			switch (eduacttyperef.RowState)
			{
				case RowState.Insert:
					this.CreateEDUACTTYPEREF(eduacttyperef, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUACTTYPEREF(eduacttyperef, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUACTTYPEREF(eduacttyperef, doSaveChanges);
					break;
			}
		}


		public void SaveEDUACTTYPEREFs(IEnumerable<EDUACTTYPEREFDto> eduacttyperefs, bool doSaveChanges = true)
		{
			if (eduacttyperefs == null)
			{
				return;
			}
			foreach (EDUACTTYPEREFDto instance in eduacttyperefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUACTTYPEREF(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUACTTYPEREF CRUD Operations


		#region EDUACTTYPEGROUPING CRUD Operations


		private IEDUACTTYPEGROUPINGService eduacttypegrouping;
		public virtual IEDUACTTYPEGROUPINGService EDUACTTYPEGROUPINGService
		{
			get
			{
				if (this.eduacttypegrouping == null)
				{
					IEDUACTTYPEGROUPINGAssembler assembler = new EDUACTTYPEGROUPINGAssembler();
					IEDUACTTYPEGROUPINGRepository repository = new EDUACTTYPEGROUPINGRepository(this.UnitOfWork);
					this.eduacttypegrouping = new EDUACTTYPEGROUPINGService(assembler, repository);
				}
				return this.eduacttypegrouping;
			}
		}


		public IQueryable<EDUACTTYPEGROUPING> EDUACTTYPEGROUPINGs
		{
			get { return this.EDUACTTYPEGROUPINGService.Repository.GetAll(); }
		}


		public IQueryable<EDUACTTYPEGROUPING> ReadEDUACTTYPEGROUPINGs(Expression<Func<EDUACTTYPEGROUPING, bool>> filter, int dummy)
		{
			return this.EDUACTTYPEGROUPINGService.Repository.Find(filter);
		}


		public IEnumerable<EDUACTTYPEGROUPINGDto> ReadEDUACTTYPEGROUPINGs()
		{
			return this.EDUACTTYPEGROUPINGService.GetAll();
		}


		public IEnumerable<EDUACTTYPEGROUPINGDto> ReadEDUACTTYPEGROUPINGs(Expression<Func<EDUACTTYPEGROUPING, bool>> filter)
		{
			return this.EDUACTTYPEGROUPINGService.Find(filter);
		}


		public IEnumerable<EDUACTTYPEGROUPINGDto> ReadEDUACTTYPEGROUPINGs(ISpecification<EDUACTTYPEGROUPING> specification)
		{
			return this.EDUACTTYPEGROUPINGService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUACTTYPEGROUPINGDto> ReadEDUACTTYPEGROUPINGs(IQueryable<EDUACTTYPEGROUPING> query)
		{
			return this.EDUACTTYPEGROUPINGService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUACTTYPEGROUPINGDto> ReadEDUACTTYPEGROUPINGs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUACTTYPEGROUPINGService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUACTTYPEGROUPINGDto> ReadEDUACTTYPEGROUPINGs(object[] keyWords)
		{
			return this.EDUACTTYPEGROUPINGService.Find(keyWords);
		}


		public IEnumerable<EDUACTTYPEGROUPINGDto> ReadEDUACTTYPEGROUPINGsPaged(int startIndex, int pageSize)
		{
			return this.EDUACTTYPEGROUPINGService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUACTTYPEGROUPINGDto> ReadEDUACTTYPEGROUPINGsPaged(IQueryable<EDUACTTYPEGROUPING> source, int pageIndex, int pageSize)
		{
			return this.EDUACTTYPEGROUPINGService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUACTTYPEGROUPINGDto> ReadEDUACTTYPEGROUPINGsPaged(IQueryable<EDUACTTYPEGROUPING> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUACTTYPEGROUPINGService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUACTTYPEGROUPINGDto> ReadEDUACTTYPEGROUPINGsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUACTTYPEGROUPINGService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUACTTYPEGROUPINGDto> ReadEDUACTTYPEGROUPINGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUACTTYPEGROUPINGService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUACTTYPEGROUPINGDto> ReadEDUACTTYPEGROUPINGsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUACTTYPEGROUPING, bool>> filter)
		{
			return this.EDUACTTYPEGROUPINGService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUACTTYPEGROUPINGDto ReadEDUACTTYPEGROUPINGs(string dtoKey)
		{
			return this.EDUACTTYPEGROUPINGService.GetByKey(dtoKey);
		}


		public int CountEDUACTTYPEGROUPINGs()
		{
			return this.EDUACTTYPEGROUPINGService.Count();
		}


		public int CountEDUACTTYPEGROUPINGs(string filterExpression)
		{
			return this.EDUACTTYPEGROUPINGService.Count(filterExpression);
		}


		public int CountEDUACTTYPEGROUPINGs(Expression<Func<EDUACTTYPEGROUPING, bool>> filter)
		{
			return this.EDUACTTYPEGROUPINGService.Count(filter);
		}


		public string CreateEDUACTTYPEGROUPING(EDUACTTYPEGROUPINGDto eduacttypegrouping, bool doSaveChanges = true)
		{
			string key = this.EDUACTTYPEGROUPINGService.Add(eduacttypegrouping);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUACTTYPEGROUPING(EDUACTTYPEGROUPINGDto eduacttypegrouping, bool doSaveChanges = true)
		{
			this.EDUACTTYPEGROUPINGService.Update(eduacttypegrouping);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUACTTYPEGROUPINGs(IEnumerable<EDUACTTYPEGROUPINGDto> eduacttypegroupings, bool doSaveChanges = true)
		{
			if (eduacttypegroupings == null)
			{
				return;
			}
			foreach (EDUACTTYPEGROUPINGDto instance in eduacttypegroupings)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUACTTYPEGROUPINGService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUACTTYPEGROUPING(EDUACTTYPEGROUPINGDto eduacttypegrouping, bool doSaveChanges = true)
		{
			this.EDUACTTYPEGROUPINGService.Delete(eduacttypegrouping);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUACTTYPEGROUPINGs(IEnumerable<EDUACTTYPEGROUPINGDto> eduacttypegroupings, bool doSaveChanges = true)
		{
			if (eduacttypegroupings == null)
			{
				return;
			}
			foreach (EDUACTTYPEGROUPINGDto instance in eduacttypegroupings)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUACTTYPEGROUPINGService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUACTTYPEGROUPING(EDUACTTYPEGROUPINGDto eduacttypegrouping, bool doSaveChanges = true)
		{
			switch (eduacttypegrouping.RowState)
			{
				case RowState.Insert:
					this.CreateEDUACTTYPEGROUPING(eduacttypegrouping, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUACTTYPEGROUPING(eduacttypegrouping, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUACTTYPEGROUPING(eduacttypegrouping, doSaveChanges);
					break;
			}
		}


		public void SaveEDUACTTYPEGROUPINGs(IEnumerable<EDUACTTYPEGROUPINGDto> eduacttypegroupings, bool doSaveChanges = true)
		{
			if (eduacttypegroupings == null)
			{
				return;
			}
			foreach (EDUACTTYPEGROUPINGDto instance in eduacttypegroupings)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUACTTYPEGROUPING(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUACTTYPEGROUPING CRUD Operations


		#region EDUACTTYPE_BK CRUD Operations


		private IEDUACTTYPE_BKService eduacttype_bk;
		public virtual IEDUACTTYPE_BKService EDUACTTYPE_BKService
		{
			get
			{
				if (this.eduacttype_bk == null)
				{
					IEDUACTTYPE_BKAssembler assembler = new EDUACTTYPE_BKAssembler();
					IEDUACTTYPE_BKRepository repository = new EDUACTTYPE_BKRepository(this.UnitOfWork);
					this.eduacttype_bk = new EDUACTTYPE_BKService(assembler, repository);
				}
				return this.eduacttype_bk;
			}
		}


		public IQueryable<EDUACTTYPE_BK> EDUACTTYPE_BKs
		{
			get { return this.EDUACTTYPE_BKService.Repository.GetAll(); }
		}


		public IQueryable<EDUACTTYPE_BK> ReadEDUACTTYPE_BKs(Expression<Func<EDUACTTYPE_BK, bool>> filter, int dummy)
		{
			return this.EDUACTTYPE_BKService.Repository.Find(filter);
		}


		public IEnumerable<EDUACTTYPE_BKDto> ReadEDUACTTYPE_BKs()
		{
			return this.EDUACTTYPE_BKService.GetAll();
		}


		public IEnumerable<EDUACTTYPE_BKDto> ReadEDUACTTYPE_BKs(Expression<Func<EDUACTTYPE_BK, bool>> filter)
		{
			return this.EDUACTTYPE_BKService.Find(filter);
		}


		public IEnumerable<EDUACTTYPE_BKDto> ReadEDUACTTYPE_BKs(ISpecification<EDUACTTYPE_BK> specification)
		{
			return this.EDUACTTYPE_BKService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUACTTYPE_BKDto> ReadEDUACTTYPE_BKs(IQueryable<EDUACTTYPE_BK> query)
		{
			return this.EDUACTTYPE_BKService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUACTTYPE_BKDto> ReadEDUACTTYPE_BKs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUACTTYPE_BKService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUACTTYPE_BKDto> ReadEDUACTTYPE_BKs(object[] keyWords)
		{
			return this.EDUACTTYPE_BKService.Find(keyWords);
		}


		public IEnumerable<EDUACTTYPE_BKDto> ReadEDUACTTYPE_BKsPaged(int startIndex, int pageSize)
		{
			return this.EDUACTTYPE_BKService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUACTTYPE_BKDto> ReadEDUACTTYPE_BKsPaged(IQueryable<EDUACTTYPE_BK> source, int pageIndex, int pageSize)
		{
			return this.EDUACTTYPE_BKService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUACTTYPE_BKDto> ReadEDUACTTYPE_BKsPaged(IQueryable<EDUACTTYPE_BK> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUACTTYPE_BKService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUACTTYPE_BKDto> ReadEDUACTTYPE_BKsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUACTTYPE_BKService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUACTTYPE_BKDto> ReadEDUACTTYPE_BKsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUACTTYPE_BKService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUACTTYPE_BKDto> ReadEDUACTTYPE_BKsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUACTTYPE_BK, bool>> filter)
		{
			return this.EDUACTTYPE_BKService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUACTTYPE_BKDto ReadEDUACTTYPE_BKs(string dtoKey)
		{
			return this.EDUACTTYPE_BKService.GetByKey(dtoKey);
		}


		public int CountEDUACTTYPE_BKs()
		{
			return this.EDUACTTYPE_BKService.Count();
		}


		public int CountEDUACTTYPE_BKs(string filterExpression)
		{
			return this.EDUACTTYPE_BKService.Count(filterExpression);
		}


		public int CountEDUACTTYPE_BKs(Expression<Func<EDUACTTYPE_BK, bool>> filter)
		{
			return this.EDUACTTYPE_BKService.Count(filter);
		}


		public string CreateEDUACTTYPE_BK(EDUACTTYPE_BKDto eduacttype_bk, bool doSaveChanges = true)
		{
			string key = this.EDUACTTYPE_BKService.Add(eduacttype_bk);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUACTTYPE_BK(EDUACTTYPE_BKDto eduacttype_bk, bool doSaveChanges = true)
		{
			this.EDUACTTYPE_BKService.Update(eduacttype_bk);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUACTTYPE_BKs(IEnumerable<EDUACTTYPE_BKDto> eduacttype_bks, bool doSaveChanges = true)
		{
			if (eduacttype_bks == null)
			{
				return;
			}
			foreach (EDUACTTYPE_BKDto instance in eduacttype_bks)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUACTTYPE_BKService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUACTTYPE_BK(EDUACTTYPE_BKDto eduacttype_bk, bool doSaveChanges = true)
		{
			this.EDUACTTYPE_BKService.Delete(eduacttype_bk);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUACTTYPE_BKs(IEnumerable<EDUACTTYPE_BKDto> eduacttype_bks, bool doSaveChanges = true)
		{
			if (eduacttype_bks == null)
			{
				return;
			}
			foreach (EDUACTTYPE_BKDto instance in eduacttype_bks)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUACTTYPE_BKService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUACTTYPE_BK(EDUACTTYPE_BKDto eduacttype_bk, bool doSaveChanges = true)
		{
			switch (eduacttype_bk.RowState)
			{
				case RowState.Insert:
					this.CreateEDUACTTYPE_BK(eduacttype_bk, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUACTTYPE_BK(eduacttype_bk, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUACTTYPE_BK(eduacttype_bk, doSaveChanges);
					break;
			}
		}


		public void SaveEDUACTTYPE_BKs(IEnumerable<EDUACTTYPE_BKDto> eduacttype_bks, bool doSaveChanges = true)
		{
			if (eduacttype_bks == null)
			{
				return;
			}
			foreach (EDUACTTYPE_BKDto instance in eduacttype_bks)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUACTTYPE_BK(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUACTTYPE_BK CRUD Operations


		#region EDUACTTYPE CRUD Operations


		private IEDUACTTYPEService eduacttype;
		public virtual IEDUACTTYPEService EDUACTTYPEService
		{
			get
			{
				if (this.eduacttype == null)
				{
					IEDUACTTYPEAssembler assembler = new EDUACTTYPEAssembler();
					IEDUACTTYPERepository repository = new EDUACTTYPERepository(this.UnitOfWork);
					this.eduacttype = new EDUACTTYPEService(assembler, repository);
				}
				return this.eduacttype;
			}
		}


		public IQueryable<EDUACTTYPE> EDUACTTYPEs
		{
			get { return this.EDUACTTYPEService.Repository.GetAll(); }
		}


		public IQueryable<EDUACTTYPE> ReadEDUACTTYPEs(Expression<Func<EDUACTTYPE, bool>> filter, int dummy)
		{
			return this.EDUACTTYPEService.Repository.Find(filter);
		}


		public IEnumerable<EDUACTTYPEDto> ReadEDUACTTYPEs()
		{
			return this.EDUACTTYPEService.GetAll();
		}


		public IEnumerable<EDUACTTYPEDto> ReadEDUACTTYPEs(Expression<Func<EDUACTTYPE, bool>> filter)
		{
			return this.EDUACTTYPEService.Find(filter);
		}


		public IEnumerable<EDUACTTYPEDto> ReadEDUACTTYPEs(ISpecification<EDUACTTYPE> specification)
		{
			return this.EDUACTTYPEService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUACTTYPEDto> ReadEDUACTTYPEs(IQueryable<EDUACTTYPE> query)
		{
			return this.EDUACTTYPEService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUACTTYPEDto> ReadEDUACTTYPEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUACTTYPEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUACTTYPEDto> ReadEDUACTTYPEs(object[] keyWords)
		{
			return this.EDUACTTYPEService.Find(keyWords);
		}


		public IEnumerable<EDUACTTYPEDto> ReadEDUACTTYPEsPaged(int startIndex, int pageSize)
		{
			return this.EDUACTTYPEService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUACTTYPEDto> ReadEDUACTTYPEsPaged(IQueryable<EDUACTTYPE> source, int pageIndex, int pageSize)
		{
			return this.EDUACTTYPEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUACTTYPEDto> ReadEDUACTTYPEsPaged(IQueryable<EDUACTTYPE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUACTTYPEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUACTTYPEDto> ReadEDUACTTYPEsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUACTTYPEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUACTTYPEDto> ReadEDUACTTYPEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUACTTYPEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUACTTYPEDto> ReadEDUACTTYPEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUACTTYPE, bool>> filter)
		{
			return this.EDUACTTYPEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUACTTYPEDto ReadEDUACTTYPEs(string dtoKey)
		{
			return this.EDUACTTYPEService.GetByKey(dtoKey);
		}


		public int CountEDUACTTYPEs()
		{
			return this.EDUACTTYPEService.Count();
		}


		public int CountEDUACTTYPEs(string filterExpression)
		{
			return this.EDUACTTYPEService.Count(filterExpression);
		}


		public int CountEDUACTTYPEs(Expression<Func<EDUACTTYPE, bool>> filter)
		{
			return this.EDUACTTYPEService.Count(filter);
		}


		public string CreateEDUACTTYPE(EDUACTTYPEDto eduacttype, bool doSaveChanges = true)
		{
			string key = this.EDUACTTYPEService.Add(eduacttype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUACTTYPE(EDUACTTYPEDto eduacttype, bool doSaveChanges = true)
		{
			this.EDUACTTYPEService.Update(eduacttype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUACTTYPEs(IEnumerable<EDUACTTYPEDto> eduacttypes, bool doSaveChanges = true)
		{
			if (eduacttypes == null)
			{
				return;
			}
			foreach (EDUACTTYPEDto instance in eduacttypes)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUACTTYPEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUACTTYPE(EDUACTTYPEDto eduacttype, bool doSaveChanges = true)
		{
			this.EDUACTTYPEService.Delete(eduacttype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUACTTYPEs(IEnumerable<EDUACTTYPEDto> eduacttypes, bool doSaveChanges = true)
		{
			if (eduacttypes == null)
			{
				return;
			}
			foreach (EDUACTTYPEDto instance in eduacttypes)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUACTTYPEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUACTTYPE(EDUACTTYPEDto eduacttype, bool doSaveChanges = true)
		{
			switch (eduacttype.RowState)
			{
				case RowState.Insert:
					this.CreateEDUACTTYPE(eduacttype, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUACTTYPE(eduacttype, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUACTTYPE(eduacttype, doSaveChanges);
					break;
			}
		}


		public void SaveEDUACTTYPEs(IEnumerable<EDUACTTYPEDto> eduacttypes, bool doSaveChanges = true)
		{
			if (eduacttypes == null)
			{
				return;
			}
			foreach (EDUACTTYPEDto instance in eduacttypes)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUACTTYPE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUACTTYPE CRUD Operations


		#region EDUACTTOPIC CRUD Operations


		private IEDUACTTOPICService eduacttopic;
		public virtual IEDUACTTOPICService EDUACTTOPICService
		{
			get
			{
				if (this.eduacttopic == null)
				{
					IEDUACTTOPICAssembler assembler = new EDUACTTOPICAssembler();
					IEDUACTTOPICRepository repository = new EDUACTTOPICRepository(this.UnitOfWork);
					this.eduacttopic = new EDUACTTOPICService(assembler, repository);
				}
				return this.eduacttopic;
			}
		}


		public IQueryable<EDUACTTOPIC> EDUACTTOPICs
		{
			get { return this.EDUACTTOPICService.Repository.GetAll(); }
		}


		public IQueryable<EDUACTTOPIC> ReadEDUACTTOPICs(Expression<Func<EDUACTTOPIC, bool>> filter, int dummy)
		{
			return this.EDUACTTOPICService.Repository.Find(filter);
		}


		public IEnumerable<EDUACTTOPICDto> ReadEDUACTTOPICs()
		{
			return this.EDUACTTOPICService.GetAll();
		}


		public IEnumerable<EDUACTTOPICDto> ReadEDUACTTOPICs(Expression<Func<EDUACTTOPIC, bool>> filter)
		{
			return this.EDUACTTOPICService.Find(filter);
		}


		public IEnumerable<EDUACTTOPICDto> ReadEDUACTTOPICs(ISpecification<EDUACTTOPIC> specification)
		{
			return this.EDUACTTOPICService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUACTTOPICDto> ReadEDUACTTOPICs(IQueryable<EDUACTTOPIC> query)
		{
			return this.EDUACTTOPICService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUACTTOPICDto> ReadEDUACTTOPICs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUACTTOPICService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUACTTOPICDto> ReadEDUACTTOPICs(object[] keyWords)
		{
			return this.EDUACTTOPICService.Find(keyWords);
		}


		public IEnumerable<EDUACTTOPICDto> ReadEDUACTTOPICsPaged(int startIndex, int pageSize)
		{
			return this.EDUACTTOPICService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUACTTOPICDto> ReadEDUACTTOPICsPaged(IQueryable<EDUACTTOPIC> source, int pageIndex, int pageSize)
		{
			return this.EDUACTTOPICService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUACTTOPICDto> ReadEDUACTTOPICsPaged(IQueryable<EDUACTTOPIC> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUACTTOPICService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUACTTOPICDto> ReadEDUACTTOPICsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUACTTOPICService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUACTTOPICDto> ReadEDUACTTOPICsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUACTTOPICService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUACTTOPICDto> ReadEDUACTTOPICsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUACTTOPIC, bool>> filter)
		{
			return this.EDUACTTOPICService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUACTTOPICDto ReadEDUACTTOPICs(string dtoKey)
		{
			return this.EDUACTTOPICService.GetByKey(dtoKey);
		}


		public int CountEDUACTTOPICs()
		{
			return this.EDUACTTOPICService.Count();
		}


		public int CountEDUACTTOPICs(string filterExpression)
		{
			return this.EDUACTTOPICService.Count(filterExpression);
		}


		public int CountEDUACTTOPICs(Expression<Func<EDUACTTOPIC, bool>> filter)
		{
			return this.EDUACTTOPICService.Count(filter);
		}


		public string CreateEDUACTTOPIC(EDUACTTOPICDto eduacttopic, bool doSaveChanges = true)
		{
			string key = this.EDUACTTOPICService.Add(eduacttopic);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUACTTOPIC(EDUACTTOPICDto eduacttopic, bool doSaveChanges = true)
		{
			this.EDUACTTOPICService.Update(eduacttopic);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUACTTOPICs(IEnumerable<EDUACTTOPICDto> eduacttopics, bool doSaveChanges = true)
		{
			if (eduacttopics == null)
			{
				return;
			}
			foreach (EDUACTTOPICDto instance in eduacttopics)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUACTTOPICService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUACTTOPIC(EDUACTTOPICDto eduacttopic, bool doSaveChanges = true)
		{
			this.EDUACTTOPICService.Delete(eduacttopic);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUACTTOPICs(IEnumerable<EDUACTTOPICDto> eduacttopics, bool doSaveChanges = true)
		{
			if (eduacttopics == null)
			{
				return;
			}
			foreach (EDUACTTOPICDto instance in eduacttopics)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUACTTOPICService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUACTTOPIC(EDUACTTOPICDto eduacttopic, bool doSaveChanges = true)
		{
			switch (eduacttopic.RowState)
			{
				case RowState.Insert:
					this.CreateEDUACTTOPIC(eduacttopic, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUACTTOPIC(eduacttopic, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUACTTOPIC(eduacttopic, doSaveChanges);
					break;
			}
		}


		public void SaveEDUACTTOPICs(IEnumerable<EDUACTTOPICDto> eduacttopics, bool doSaveChanges = true)
		{
			if (eduacttopics == null)
			{
				return;
			}
			foreach (EDUACTTOPICDto instance in eduacttopics)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUACTTOPIC(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUACTTOPIC CRUD Operations


		#region EDUACTTARGET CRUD Operations


		private IEDUACTTARGETService eduacttarget;
		public virtual IEDUACTTARGETService EDUACTTARGETService
		{
			get
			{
				if (this.eduacttarget == null)
				{
					IEDUACTTARGETAssembler assembler = new EDUACTTARGETAssembler();
					IEDUACTTARGETRepository repository = new EDUACTTARGETRepository(this.UnitOfWork);
					this.eduacttarget = new EDUACTTARGETService(assembler, repository);
				}
				return this.eduacttarget;
			}
		}


		public IQueryable<EDUACTTARGET> EDUACTTARGETs
		{
			get { return this.EDUACTTARGETService.Repository.GetAll(); }
		}


		public IQueryable<EDUACTTARGET> ReadEDUACTTARGETs(Expression<Func<EDUACTTARGET, bool>> filter, int dummy)
		{
			return this.EDUACTTARGETService.Repository.Find(filter);
		}


		public IEnumerable<EDUACTTARGETDto> ReadEDUACTTARGETs()
		{
			return this.EDUACTTARGETService.GetAll();
		}


		public IEnumerable<EDUACTTARGETDto> ReadEDUACTTARGETs(Expression<Func<EDUACTTARGET, bool>> filter)
		{
			return this.EDUACTTARGETService.Find(filter);
		}


		public IEnumerable<EDUACTTARGETDto> ReadEDUACTTARGETs(ISpecification<EDUACTTARGET> specification)
		{
			return this.EDUACTTARGETService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUACTTARGETDto> ReadEDUACTTARGETs(IQueryable<EDUACTTARGET> query)
		{
			return this.EDUACTTARGETService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUACTTARGETDto> ReadEDUACTTARGETs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUACTTARGETService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUACTTARGETDto> ReadEDUACTTARGETs(object[] keyWords)
		{
			return this.EDUACTTARGETService.Find(keyWords);
		}


		public IEnumerable<EDUACTTARGETDto> ReadEDUACTTARGETsPaged(int startIndex, int pageSize)
		{
			return this.EDUACTTARGETService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUACTTARGETDto> ReadEDUACTTARGETsPaged(IQueryable<EDUACTTARGET> source, int pageIndex, int pageSize)
		{
			return this.EDUACTTARGETService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUACTTARGETDto> ReadEDUACTTARGETsPaged(IQueryable<EDUACTTARGET> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUACTTARGETService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUACTTARGETDto> ReadEDUACTTARGETsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUACTTARGETService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUACTTARGETDto> ReadEDUACTTARGETsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUACTTARGETService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUACTTARGETDto> ReadEDUACTTARGETsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUACTTARGET, bool>> filter)
		{
			return this.EDUACTTARGETService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUACTTARGETDto ReadEDUACTTARGETs(string dtoKey)
		{
			return this.EDUACTTARGETService.GetByKey(dtoKey);
		}


		public int CountEDUACTTARGETs()
		{
			return this.EDUACTTARGETService.Count();
		}


		public int CountEDUACTTARGETs(string filterExpression)
		{
			return this.EDUACTTARGETService.Count(filterExpression);
		}


		public int CountEDUACTTARGETs(Expression<Func<EDUACTTARGET, bool>> filter)
		{
			return this.EDUACTTARGETService.Count(filter);
		}


		public string CreateEDUACTTARGET(EDUACTTARGETDto eduacttarget, bool doSaveChanges = true)
		{
			string key = this.EDUACTTARGETService.Add(eduacttarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUACTTARGET(EDUACTTARGETDto eduacttarget, bool doSaveChanges = true)
		{
			this.EDUACTTARGETService.Update(eduacttarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUACTTARGETs(IEnumerable<EDUACTTARGETDto> eduacttargets, bool doSaveChanges = true)
		{
			if (eduacttargets == null)
			{
				return;
			}
			foreach (EDUACTTARGETDto instance in eduacttargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUACTTARGETService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUACTTARGET(EDUACTTARGETDto eduacttarget, bool doSaveChanges = true)
		{
			this.EDUACTTARGETService.Delete(eduacttarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUACTTARGETs(IEnumerable<EDUACTTARGETDto> eduacttargets, bool doSaveChanges = true)
		{
			if (eduacttargets == null)
			{
				return;
			}
			foreach (EDUACTTARGETDto instance in eduacttargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUACTTARGETService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUACTTARGET(EDUACTTARGETDto eduacttarget, bool doSaveChanges = true)
		{
			switch (eduacttarget.RowState)
			{
				case RowState.Insert:
					this.CreateEDUACTTARGET(eduacttarget, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUACTTARGET(eduacttarget, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUACTTARGET(eduacttarget, doSaveChanges);
					break;
			}
		}


		public void SaveEDUACTTARGETs(IEnumerable<EDUACTTARGETDto> eduacttargets, bool doSaveChanges = true)
		{
			if (eduacttargets == null)
			{
				return;
			}
			foreach (EDUACTTARGETDto instance in eduacttargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUACTTARGET(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUACTTARGET CRUD Operations


		#region EDUACTBOOKING CRUD Operations


		private IEDUACTBOOKINGService eduactbooking;
		public virtual IEDUACTBOOKINGService EDUACTBOOKINGService
		{
			get
			{
				if (this.eduactbooking == null)
				{
					IEDUACTBOOKINGAssembler assembler = new EDUACTBOOKINGAssembler();
					IEDUACTBOOKINGRepository repository = new EDUACTBOOKINGRepository(this.UnitOfWork);
					this.eduactbooking = new EDUACTBOOKINGService(assembler, repository);
				}
				return this.eduactbooking;
			}
		}


		public IQueryable<EDUACTBOOKING> EDUACTBOOKINGs
		{
			get { return this.EDUACTBOOKINGService.Repository.GetAll(); }
		}


		public IQueryable<EDUACTBOOKING> ReadEDUACTBOOKINGs(Expression<Func<EDUACTBOOKING, bool>> filter, int dummy)
		{
			return this.EDUACTBOOKINGService.Repository.Find(filter);
		}


		public IEnumerable<EDUACTBOOKINGDto> ReadEDUACTBOOKINGs()
		{
			return this.EDUACTBOOKINGService.GetAll();
		}


		public IEnumerable<EDUACTBOOKINGDto> ReadEDUACTBOOKINGs(Expression<Func<EDUACTBOOKING, bool>> filter)
		{
			return this.EDUACTBOOKINGService.Find(filter);
		}


		public IEnumerable<EDUACTBOOKINGDto> ReadEDUACTBOOKINGs(ISpecification<EDUACTBOOKING> specification)
		{
			return this.EDUACTBOOKINGService.Find(specification.GetExpression());
		}


		public IEnumerable<EDUACTBOOKINGDto> ReadEDUACTBOOKINGs(IQueryable<EDUACTBOOKING> query)
		{
			return this.EDUACTBOOKINGService.Assembler.Assemble(query);
		}


		public IEnumerable<EDUACTBOOKINGDto> ReadEDUACTBOOKINGs(string[] propertyToSearch, object[] keyWords)
		{
			return this.EDUACTBOOKINGService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<EDUACTBOOKINGDto> ReadEDUACTBOOKINGs(object[] keyWords)
		{
			return this.EDUACTBOOKINGService.Find(keyWords);
		}


		public IEnumerable<EDUACTBOOKINGDto> ReadEDUACTBOOKINGsPaged(int startIndex, int pageSize)
		{
			return this.EDUACTBOOKINGService.Find(startIndex, pageSize);
		}


		public IEnumerable<EDUACTBOOKINGDto> ReadEDUACTBOOKINGsPaged(IQueryable<EDUACTBOOKING> source, int pageIndex, int pageSize)
		{
			return this.EDUACTBOOKINGService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUACTBOOKINGDto> ReadEDUACTBOOKINGsPaged(IQueryable<EDUACTBOOKING> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.EDUACTBOOKINGService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<EDUACTBOOKINGDto> ReadEDUACTBOOKINGsFiltered(string sortExpression, string filterExpression)
		{
			return this.EDUACTBOOKINGService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EDUACTBOOKINGDto> ReadEDUACTBOOKINGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EDUACTBOOKINGService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<EDUACTBOOKINGDto> ReadEDUACTBOOKINGsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<EDUACTBOOKING, bool>> filter)
		{
			return this.EDUACTBOOKINGService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public EDUACTBOOKINGDto ReadEDUACTBOOKINGs(string dtoKey)
		{
			return this.EDUACTBOOKINGService.GetByKey(dtoKey);
		}


		public int CountEDUACTBOOKINGs()
		{
			return this.EDUACTBOOKINGService.Count();
		}


		public int CountEDUACTBOOKINGs(string filterExpression)
		{
			return this.EDUACTBOOKINGService.Count(filterExpression);
		}


		public int CountEDUACTBOOKINGs(Expression<Func<EDUACTBOOKING, bool>> filter)
		{
			return this.EDUACTBOOKINGService.Count(filter);
		}


		public string CreateEDUACTBOOKING(EDUACTBOOKINGDto eduactbooking, bool doSaveChanges = true)
		{
			string key = this.EDUACTBOOKINGService.Add(eduactbooking);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEDUACTBOOKING(EDUACTBOOKINGDto eduactbooking, bool doSaveChanges = true)
		{
			this.EDUACTBOOKINGService.Update(eduactbooking);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEDUACTBOOKINGs(IEnumerable<EDUACTBOOKINGDto> eduactbookings, bool doSaveChanges = true)
		{
			if (eduactbookings == null)
			{
				return;
			}
			foreach (EDUACTBOOKINGDto instance in eduactbookings)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUACTBOOKINGService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEDUACTBOOKING(EDUACTBOOKINGDto eduactbooking, bool doSaveChanges = true)
		{
			this.EDUACTBOOKINGService.Delete(eduactbooking);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEDUACTBOOKINGs(IEnumerable<EDUACTBOOKINGDto> eduactbookings, bool doSaveChanges = true)
		{
			if (eduactbookings == null)
			{
				return;
			}
			foreach (EDUACTBOOKINGDto instance in eduactbookings)
			{
				if (instance == null)
				{
					continue;
				}


				this.EDUACTBOOKINGService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveEDUACTBOOKING(EDUACTBOOKINGDto eduactbooking, bool doSaveChanges = true)
		{
			switch (eduactbooking.RowState)
			{
				case RowState.Insert:
					this.CreateEDUACTBOOKING(eduactbooking, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateEDUACTBOOKING(eduactbooking, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteEDUACTBOOKING(eduactbooking, doSaveChanges);
					break;
			}
		}


		public void SaveEDUACTBOOKINGs(IEnumerable<EDUACTBOOKINGDto> eduactbookings, bool doSaveChanges = true)
		{
			if (eduactbookings == null)
			{
				return;
			}
			foreach (EDUACTBOOKINGDto instance in eduactbookings)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveEDUACTBOOKING(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion EDUACTBOOKING CRUD Operations


		#region DOCTORPOINTTYPE CRUD Operations


		private IDOCTORPOINTTYPEService doctorpointtype;
		public virtual IDOCTORPOINTTYPEService DOCTORPOINTTYPEService
		{
			get
			{
				if (this.doctorpointtype == null)
				{
					IDOCTORPOINTTYPEAssembler assembler = new DOCTORPOINTTYPEAssembler();
					IDOCTORPOINTTYPERepository repository = new DOCTORPOINTTYPERepository(this.UnitOfWork);
					this.doctorpointtype = new DOCTORPOINTTYPEService(assembler, repository);
				}
				return this.doctorpointtype;
			}
		}


		public IQueryable<DOCTORPOINTTYPE> DOCTORPOINTTYPEs
		{
			get { return this.DOCTORPOINTTYPEService.Repository.GetAll(); }
		}


		public IQueryable<DOCTORPOINTTYPE> ReadDOCTORPOINTTYPEs(Expression<Func<DOCTORPOINTTYPE, bool>> filter, int dummy)
		{
			return this.DOCTORPOINTTYPEService.Repository.Find(filter);
		}


		public IEnumerable<DOCTORPOINTTYPEDto> ReadDOCTORPOINTTYPEs()
		{
			return this.DOCTORPOINTTYPEService.GetAll();
		}


		public IEnumerable<DOCTORPOINTTYPEDto> ReadDOCTORPOINTTYPEs(Expression<Func<DOCTORPOINTTYPE, bool>> filter)
		{
			return this.DOCTORPOINTTYPEService.Find(filter);
		}


		public IEnumerable<DOCTORPOINTTYPEDto> ReadDOCTORPOINTTYPEs(ISpecification<DOCTORPOINTTYPE> specification)
		{
			return this.DOCTORPOINTTYPEService.Find(specification.GetExpression());
		}


		public IEnumerable<DOCTORPOINTTYPEDto> ReadDOCTORPOINTTYPEs(IQueryable<DOCTORPOINTTYPE> query)
		{
			return this.DOCTORPOINTTYPEService.Assembler.Assemble(query);
		}


		public IEnumerable<DOCTORPOINTTYPEDto> ReadDOCTORPOINTTYPEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.DOCTORPOINTTYPEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<DOCTORPOINTTYPEDto> ReadDOCTORPOINTTYPEs(object[] keyWords)
		{
			return this.DOCTORPOINTTYPEService.Find(keyWords);
		}


		public IEnumerable<DOCTORPOINTTYPEDto> ReadDOCTORPOINTTYPEsPaged(int startIndex, int pageSize)
		{
			return this.DOCTORPOINTTYPEService.Find(startIndex, pageSize);
		}


		public IEnumerable<DOCTORPOINTTYPEDto> ReadDOCTORPOINTTYPEsPaged(IQueryable<DOCTORPOINTTYPE> source, int pageIndex, int pageSize)
		{
			return this.DOCTORPOINTTYPEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<DOCTORPOINTTYPEDto> ReadDOCTORPOINTTYPEsPaged(IQueryable<DOCTORPOINTTYPE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.DOCTORPOINTTYPEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<DOCTORPOINTTYPEDto> ReadDOCTORPOINTTYPEsFiltered(string sortExpression, string filterExpression)
		{
			return this.DOCTORPOINTTYPEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<DOCTORPOINTTYPEDto> ReadDOCTORPOINTTYPEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.DOCTORPOINTTYPEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<DOCTORPOINTTYPEDto> ReadDOCTORPOINTTYPEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<DOCTORPOINTTYPE, bool>> filter)
		{
			return this.DOCTORPOINTTYPEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public DOCTORPOINTTYPEDto ReadDOCTORPOINTTYPEs(string dtoKey)
		{
			return this.DOCTORPOINTTYPEService.GetByKey(dtoKey);
		}


		public int CountDOCTORPOINTTYPEs()
		{
			return this.DOCTORPOINTTYPEService.Count();
		}


		public int CountDOCTORPOINTTYPEs(string filterExpression)
		{
			return this.DOCTORPOINTTYPEService.Count(filterExpression);
		}


		public int CountDOCTORPOINTTYPEs(Expression<Func<DOCTORPOINTTYPE, bool>> filter)
		{
			return this.DOCTORPOINTTYPEService.Count(filter);
		}


		public string CreateDOCTORPOINTTYPE(DOCTORPOINTTYPEDto doctorpointtype, bool doSaveChanges = true)
		{
			string key = this.DOCTORPOINTTYPEService.Add(doctorpointtype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateDOCTORPOINTTYPE(DOCTORPOINTTYPEDto doctorpointtype, bool doSaveChanges = true)
		{
			this.DOCTORPOINTTYPEService.Update(doctorpointtype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateDOCTORPOINTTYPEs(IEnumerable<DOCTORPOINTTYPEDto> doctorpointtypes, bool doSaveChanges = true)
		{
			if (doctorpointtypes == null)
			{
				return;
			}
			foreach (DOCTORPOINTTYPEDto instance in doctorpointtypes)
			{
				if (instance == null)
				{
					continue;
				}


				this.DOCTORPOINTTYPEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteDOCTORPOINTTYPE(DOCTORPOINTTYPEDto doctorpointtype, bool doSaveChanges = true)
		{
			this.DOCTORPOINTTYPEService.Delete(doctorpointtype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteDOCTORPOINTTYPEs(IEnumerable<DOCTORPOINTTYPEDto> doctorpointtypes, bool doSaveChanges = true)
		{
			if (doctorpointtypes == null)
			{
				return;
			}
			foreach (DOCTORPOINTTYPEDto instance in doctorpointtypes)
			{
				if (instance == null)
				{
					continue;
				}


				this.DOCTORPOINTTYPEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveDOCTORPOINTTYPE(DOCTORPOINTTYPEDto doctorpointtype, bool doSaveChanges = true)
		{
			switch (doctorpointtype.RowState)
			{
				case RowState.Insert:
					this.CreateDOCTORPOINTTYPE(doctorpointtype, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateDOCTORPOINTTYPE(doctorpointtype, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteDOCTORPOINTTYPE(doctorpointtype, doSaveChanges);
					break;
			}
		}


		public void SaveDOCTORPOINTTYPEs(IEnumerable<DOCTORPOINTTYPEDto> doctorpointtypes, bool doSaveChanges = true)
		{
			if (doctorpointtypes == null)
			{
				return;
			}
			foreach (DOCTORPOINTTYPEDto instance in doctorpointtypes)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveDOCTORPOINTTYPE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion DOCTORPOINTTYPE CRUD Operations


		#region DOCTORPOINTCALTYPE CRUD Operations


		private IDOCTORPOINTCALTYPEService doctorpointcaltype;
		public virtual IDOCTORPOINTCALTYPEService DOCTORPOINTCALTYPEService
		{
			get
			{
				if (this.doctorpointcaltype == null)
				{
					IDOCTORPOINTCALTYPEAssembler assembler = new DOCTORPOINTCALTYPEAssembler();
					IDOCTORPOINTCALTYPERepository repository = new DOCTORPOINTCALTYPERepository(this.UnitOfWork);
					this.doctorpointcaltype = new DOCTORPOINTCALTYPEService(assembler, repository);
				}
				return this.doctorpointcaltype;
			}
		}


		public IQueryable<DOCTORPOINTCALTYPE> DOCTORPOINTCALTYPEs
		{
			get { return this.DOCTORPOINTCALTYPEService.Repository.GetAll(); }
		}


		public IQueryable<DOCTORPOINTCALTYPE> ReadDOCTORPOINTCALTYPEs(Expression<Func<DOCTORPOINTCALTYPE, bool>> filter, int dummy)
		{
			return this.DOCTORPOINTCALTYPEService.Repository.Find(filter);
		}


		public IEnumerable<DOCTORPOINTCALTYPEDto> ReadDOCTORPOINTCALTYPEs()
		{
			return this.DOCTORPOINTCALTYPEService.GetAll();
		}


		public IEnumerable<DOCTORPOINTCALTYPEDto> ReadDOCTORPOINTCALTYPEs(Expression<Func<DOCTORPOINTCALTYPE, bool>> filter)
		{
			return this.DOCTORPOINTCALTYPEService.Find(filter);
		}


		public IEnumerable<DOCTORPOINTCALTYPEDto> ReadDOCTORPOINTCALTYPEs(ISpecification<DOCTORPOINTCALTYPE> specification)
		{
			return this.DOCTORPOINTCALTYPEService.Find(specification.GetExpression());
		}


		public IEnumerable<DOCTORPOINTCALTYPEDto> ReadDOCTORPOINTCALTYPEs(IQueryable<DOCTORPOINTCALTYPE> query)
		{
			return this.DOCTORPOINTCALTYPEService.Assembler.Assemble(query);
		}


		public IEnumerable<DOCTORPOINTCALTYPEDto> ReadDOCTORPOINTCALTYPEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.DOCTORPOINTCALTYPEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<DOCTORPOINTCALTYPEDto> ReadDOCTORPOINTCALTYPEs(object[] keyWords)
		{
			return this.DOCTORPOINTCALTYPEService.Find(keyWords);
		}


		public IEnumerable<DOCTORPOINTCALTYPEDto> ReadDOCTORPOINTCALTYPEsPaged(int startIndex, int pageSize)
		{
			return this.DOCTORPOINTCALTYPEService.Find(startIndex, pageSize);
		}


		public IEnumerable<DOCTORPOINTCALTYPEDto> ReadDOCTORPOINTCALTYPEsPaged(IQueryable<DOCTORPOINTCALTYPE> source, int pageIndex, int pageSize)
		{
			return this.DOCTORPOINTCALTYPEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<DOCTORPOINTCALTYPEDto> ReadDOCTORPOINTCALTYPEsPaged(IQueryable<DOCTORPOINTCALTYPE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.DOCTORPOINTCALTYPEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<DOCTORPOINTCALTYPEDto> ReadDOCTORPOINTCALTYPEsFiltered(string sortExpression, string filterExpression)
		{
			return this.DOCTORPOINTCALTYPEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<DOCTORPOINTCALTYPEDto> ReadDOCTORPOINTCALTYPEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.DOCTORPOINTCALTYPEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<DOCTORPOINTCALTYPEDto> ReadDOCTORPOINTCALTYPEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<DOCTORPOINTCALTYPE, bool>> filter)
		{
			return this.DOCTORPOINTCALTYPEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public DOCTORPOINTCALTYPEDto ReadDOCTORPOINTCALTYPEs(string dtoKey)
		{
			return this.DOCTORPOINTCALTYPEService.GetByKey(dtoKey);
		}


		public int CountDOCTORPOINTCALTYPEs()
		{
			return this.DOCTORPOINTCALTYPEService.Count();
		}


		public int CountDOCTORPOINTCALTYPEs(string filterExpression)
		{
			return this.DOCTORPOINTCALTYPEService.Count(filterExpression);
		}


		public int CountDOCTORPOINTCALTYPEs(Expression<Func<DOCTORPOINTCALTYPE, bool>> filter)
		{
			return this.DOCTORPOINTCALTYPEService.Count(filter);
		}


		public string CreateDOCTORPOINTCALTYPE(DOCTORPOINTCALTYPEDto doctorpointcaltype, bool doSaveChanges = true)
		{
			string key = this.DOCTORPOINTCALTYPEService.Add(doctorpointcaltype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateDOCTORPOINTCALTYPE(DOCTORPOINTCALTYPEDto doctorpointcaltype, bool doSaveChanges = true)
		{
			this.DOCTORPOINTCALTYPEService.Update(doctorpointcaltype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateDOCTORPOINTCALTYPEs(IEnumerable<DOCTORPOINTCALTYPEDto> doctorpointcaltypes, bool doSaveChanges = true)
		{
			if (doctorpointcaltypes == null)
			{
				return;
			}
			foreach (DOCTORPOINTCALTYPEDto instance in doctorpointcaltypes)
			{
				if (instance == null)
				{
					continue;
				}


				this.DOCTORPOINTCALTYPEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteDOCTORPOINTCALTYPE(DOCTORPOINTCALTYPEDto doctorpointcaltype, bool doSaveChanges = true)
		{
			this.DOCTORPOINTCALTYPEService.Delete(doctorpointcaltype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteDOCTORPOINTCALTYPEs(IEnumerable<DOCTORPOINTCALTYPEDto> doctorpointcaltypes, bool doSaveChanges = true)
		{
			if (doctorpointcaltypes == null)
			{
				return;
			}
			foreach (DOCTORPOINTCALTYPEDto instance in doctorpointcaltypes)
			{
				if (instance == null)
				{
					continue;
				}


				this.DOCTORPOINTCALTYPEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveDOCTORPOINTCALTYPE(DOCTORPOINTCALTYPEDto doctorpointcaltype, bool doSaveChanges = true)
		{
			switch (doctorpointcaltype.RowState)
			{
				case RowState.Insert:
					this.CreateDOCTORPOINTCALTYPE(doctorpointcaltype, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateDOCTORPOINTCALTYPE(doctorpointcaltype, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteDOCTORPOINTCALTYPE(doctorpointcaltype, doSaveChanges);
					break;
			}
		}


		public void SaveDOCTORPOINTCALTYPEs(IEnumerable<DOCTORPOINTCALTYPEDto> doctorpointcaltypes, bool doSaveChanges = true)
		{
			if (doctorpointcaltypes == null)
			{
				return;
			}
			foreach (DOCTORPOINTCALTYPEDto instance in doctorpointcaltypes)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveDOCTORPOINTCALTYPE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion DOCTORPOINTCALTYPE CRUD Operations


		#region DOCTORPOINT CRUD Operations


		private IDOCTORPOINTService doctorpoint;
		public virtual IDOCTORPOINTService DOCTORPOINTService
		{
			get
			{
				if (this.doctorpoint == null)
				{
					IDOCTORPOINTAssembler assembler = new DOCTORPOINTAssembler();
					IDOCTORPOINTRepository repository = new DOCTORPOINTRepository(this.UnitOfWork);
					this.doctorpoint = new DOCTORPOINTService(assembler, repository);
				}
				return this.doctorpoint;
			}
		}


		public IQueryable<DOCTORPOINT> DOCTORPOINTs
		{
			get { return this.DOCTORPOINTService.Repository.GetAll(); }
		}


		public IQueryable<DOCTORPOINT> ReadDOCTORPOINTs(Expression<Func<DOCTORPOINT, bool>> filter, int dummy)
		{
			return this.DOCTORPOINTService.Repository.Find(filter);
		}


		public IEnumerable<DOCTORPOINTDto> ReadDOCTORPOINTs()
		{
			return this.DOCTORPOINTService.GetAll();
		}


		public IEnumerable<DOCTORPOINTDto> ReadDOCTORPOINTs(Expression<Func<DOCTORPOINT, bool>> filter)
		{
			return this.DOCTORPOINTService.Find(filter);
		}


		public IEnumerable<DOCTORPOINTDto> ReadDOCTORPOINTs(ISpecification<DOCTORPOINT> specification)
		{
			return this.DOCTORPOINTService.Find(specification.GetExpression());
		}


		public IEnumerable<DOCTORPOINTDto> ReadDOCTORPOINTs(IQueryable<DOCTORPOINT> query)
		{
			return this.DOCTORPOINTService.Assembler.Assemble(query);
		}


		public IEnumerable<DOCTORPOINTDto> ReadDOCTORPOINTs(string[] propertyToSearch, object[] keyWords)
		{
			return this.DOCTORPOINTService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<DOCTORPOINTDto> ReadDOCTORPOINTs(object[] keyWords)
		{
			return this.DOCTORPOINTService.Find(keyWords);
		}


		public IEnumerable<DOCTORPOINTDto> ReadDOCTORPOINTsPaged(int startIndex, int pageSize)
		{
			return this.DOCTORPOINTService.Find(startIndex, pageSize);
		}


		public IEnumerable<DOCTORPOINTDto> ReadDOCTORPOINTsPaged(IQueryable<DOCTORPOINT> source, int pageIndex, int pageSize)
		{
			return this.DOCTORPOINTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<DOCTORPOINTDto> ReadDOCTORPOINTsPaged(IQueryable<DOCTORPOINT> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.DOCTORPOINTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<DOCTORPOINTDto> ReadDOCTORPOINTsFiltered(string sortExpression, string filterExpression)
		{
			return this.DOCTORPOINTService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<DOCTORPOINTDto> ReadDOCTORPOINTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.DOCTORPOINTService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<DOCTORPOINTDto> ReadDOCTORPOINTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<DOCTORPOINT, bool>> filter)
		{
			return this.DOCTORPOINTService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public DOCTORPOINTDto ReadDOCTORPOINTs(string dtoKey)
		{
			return this.DOCTORPOINTService.GetByKey(dtoKey);
		}


		public int CountDOCTORPOINTs()
		{
			return this.DOCTORPOINTService.Count();
		}


		public int CountDOCTORPOINTs(string filterExpression)
		{
			return this.DOCTORPOINTService.Count(filterExpression);
		}


		public int CountDOCTORPOINTs(Expression<Func<DOCTORPOINT, bool>> filter)
		{
			return this.DOCTORPOINTService.Count(filter);
		}


		public string CreateDOCTORPOINT(DOCTORPOINTDto doctorpoint, bool doSaveChanges = true)
		{
			string key = this.DOCTORPOINTService.Add(doctorpoint);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateDOCTORPOINT(DOCTORPOINTDto doctorpoint, bool doSaveChanges = true)
		{
			this.DOCTORPOINTService.Update(doctorpoint);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateDOCTORPOINTs(IEnumerable<DOCTORPOINTDto> doctorpoints, bool doSaveChanges = true)
		{
			if (doctorpoints == null)
			{
				return;
			}
			foreach (DOCTORPOINTDto instance in doctorpoints)
			{
				if (instance == null)
				{
					continue;
				}


				this.DOCTORPOINTService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteDOCTORPOINT(DOCTORPOINTDto doctorpoint, bool doSaveChanges = true)
		{
			this.DOCTORPOINTService.Delete(doctorpoint);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteDOCTORPOINTs(IEnumerable<DOCTORPOINTDto> doctorpoints, bool doSaveChanges = true)
		{
			if (doctorpoints == null)
			{
				return;
			}
			foreach (DOCTORPOINTDto instance in doctorpoints)
			{
				if (instance == null)
				{
					continue;
				}


				this.DOCTORPOINTService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveDOCTORPOINT(DOCTORPOINTDto doctorpoint, bool doSaveChanges = true)
		{
			switch (doctorpoint.RowState)
			{
				case RowState.Insert:
					this.CreateDOCTORPOINT(doctorpoint, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateDOCTORPOINT(doctorpoint, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteDOCTORPOINT(doctorpoint, doSaveChanges);
					break;
			}
		}


		public void SaveDOCTORPOINTs(IEnumerable<DOCTORPOINTDto> doctorpoints, bool doSaveChanges = true)
		{
			if (doctorpoints == null)
			{
				return;
			}
			foreach (DOCTORPOINTDto instance in doctorpoints)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveDOCTORPOINT(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion DOCTORPOINT CRUD Operations


		#region DEPSECTEMP CRUD Operations


		private IDEPSECTEMPService depsectemp;
		public virtual IDEPSECTEMPService DEPSECTEMPService
		{
			get
			{
				if (this.depsectemp == null)
				{
					IDEPSECTEMPAssembler assembler = new DEPSECTEMPAssembler();
					IDEPSECTEMPRepository repository = new DEPSECTEMPRepository(this.UnitOfWork);
					this.depsectemp = new DEPSECTEMPService(assembler, repository);
				}
				return this.depsectemp;
			}
		}


		public IQueryable<DEPSECTEMP> DEPSECTEMPs
		{
			get { return this.DEPSECTEMPService.Repository.GetAll(); }
		}


		public IQueryable<DEPSECTEMP> ReadDEPSECTEMPs(Expression<Func<DEPSECTEMP, bool>> filter, int dummy)
		{
			return this.DEPSECTEMPService.Repository.Find(filter);
		}


		public IEnumerable<DEPSECTEMPDto> ReadDEPSECTEMPs()
		{
			return this.DEPSECTEMPService.GetAll();
		}


		public IEnumerable<DEPSECTEMPDto> ReadDEPSECTEMPs(Expression<Func<DEPSECTEMP, bool>> filter)
		{
			return this.DEPSECTEMPService.Find(filter);
		}


		public IEnumerable<DEPSECTEMPDto> ReadDEPSECTEMPs(ISpecification<DEPSECTEMP> specification)
		{
			return this.DEPSECTEMPService.Find(specification.GetExpression());
		}


		public IEnumerable<DEPSECTEMPDto> ReadDEPSECTEMPs(IQueryable<DEPSECTEMP> query)
		{
			return this.DEPSECTEMPService.Assembler.Assemble(query);
		}


		public IEnumerable<DEPSECTEMPDto> ReadDEPSECTEMPs(string[] propertyToSearch, object[] keyWords)
		{
			return this.DEPSECTEMPService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<DEPSECTEMPDto> ReadDEPSECTEMPs(object[] keyWords)
		{
			return this.DEPSECTEMPService.Find(keyWords);
		}


		public IEnumerable<DEPSECTEMPDto> ReadDEPSECTEMPsPaged(int startIndex, int pageSize)
		{
			return this.DEPSECTEMPService.Find(startIndex, pageSize);
		}


		public IEnumerable<DEPSECTEMPDto> ReadDEPSECTEMPsPaged(IQueryable<DEPSECTEMP> source, int pageIndex, int pageSize)
		{
			return this.DEPSECTEMPService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<DEPSECTEMPDto> ReadDEPSECTEMPsPaged(IQueryable<DEPSECTEMP> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.DEPSECTEMPService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<DEPSECTEMPDto> ReadDEPSECTEMPsFiltered(string sortExpression, string filterExpression)
		{
			return this.DEPSECTEMPService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<DEPSECTEMPDto> ReadDEPSECTEMPsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.DEPSECTEMPService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<DEPSECTEMPDto> ReadDEPSECTEMPsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<DEPSECTEMP, bool>> filter)
		{
			return this.DEPSECTEMPService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public DEPSECTEMPDto ReadDEPSECTEMPs(string dtoKey)
		{
			return this.DEPSECTEMPService.GetByKey(dtoKey);
		}


		public int CountDEPSECTEMPs()
		{
			return this.DEPSECTEMPService.Count();
		}


		public int CountDEPSECTEMPs(string filterExpression)
		{
			return this.DEPSECTEMPService.Count(filterExpression);
		}


		public int CountDEPSECTEMPs(Expression<Func<DEPSECTEMP, bool>> filter)
		{
			return this.DEPSECTEMPService.Count(filter);
		}


		public string CreateDEPSECTEMP(DEPSECTEMPDto depsectemp, bool doSaveChanges = true)
		{
			string key = this.DEPSECTEMPService.Add(depsectemp);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateDEPSECTEMP(DEPSECTEMPDto depsectemp, bool doSaveChanges = true)
		{
			this.DEPSECTEMPService.Update(depsectemp);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateDEPSECTEMPs(IEnumerable<DEPSECTEMPDto> depsectemps, bool doSaveChanges = true)
		{
			if (depsectemps == null)
			{
				return;
			}
			foreach (DEPSECTEMPDto instance in depsectemps)
			{
				if (instance == null)
				{
					continue;
				}


				this.DEPSECTEMPService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteDEPSECTEMP(DEPSECTEMPDto depsectemp, bool doSaveChanges = true)
		{
			this.DEPSECTEMPService.Delete(depsectemp);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteDEPSECTEMPs(IEnumerable<DEPSECTEMPDto> depsectemps, bool doSaveChanges = true)
		{
			if (depsectemps == null)
			{
				return;
			}
			foreach (DEPSECTEMPDto instance in depsectemps)
			{
				if (instance == null)
				{
					continue;
				}


				this.DEPSECTEMPService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveDEPSECTEMP(DEPSECTEMPDto depsectemp, bool doSaveChanges = true)
		{
			switch (depsectemp.RowState)
			{
				case RowState.Insert:
					this.CreateDEPSECTEMP(depsectemp, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateDEPSECTEMP(depsectemp, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteDEPSECTEMP(depsectemp, doSaveChanges);
					break;
			}
		}


		public void SaveDEPSECTEMPs(IEnumerable<DEPSECTEMPDto> depsectemps, bool doSaveChanges = true)
		{
			if (depsectemps == null)
			{
				return;
			}
			foreach (DEPSECTEMPDto instance in depsectemps)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveDEPSECTEMP(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion DEPSECTEMP CRUD Operations


		#region DEPSECDATUM CRUD Operations


		private IDEPSECDATUMService depsecdatum;
		public virtual IDEPSECDATUMService DEPSECDATUMService
		{
			get
			{
				if (this.depsecdatum == null)
				{
					IDEPSECDATUMAssembler assembler = new DEPSECDATUMAssembler();
					IDEPSECDATUMRepository repository = new DEPSECDATUMRepository(this.UnitOfWork);
					this.depsecdatum = new DEPSECDATUMService(assembler, repository);
				}
				return this.depsecdatum;
			}
		}


		public IQueryable<DEPSECDATUM> DEPSECDATa
		{
			get { return this.DEPSECDATUMService.Repository.GetAll(); }
		}


		public IQueryable<DEPSECDATUM> ReadDEPSECDATa(Expression<Func<DEPSECDATUM, bool>> filter, int dummy)
		{
			return this.DEPSECDATUMService.Repository.Find(filter);
		}


		public IEnumerable<DEPSECDATUMDto> ReadDEPSECDATa()
		{
			return this.DEPSECDATUMService.GetAll();
		}


		public IEnumerable<DEPSECDATUMDto> ReadDEPSECDATa(Expression<Func<DEPSECDATUM, bool>> filter)
		{
			return this.DEPSECDATUMService.Find(filter);
		}


		public IEnumerable<DEPSECDATUMDto> ReadDEPSECDATa(ISpecification<DEPSECDATUM> specification)
		{
			return this.DEPSECDATUMService.Find(specification.GetExpression());
		}


		public IEnumerable<DEPSECDATUMDto> ReadDEPSECDATa(IQueryable<DEPSECDATUM> query)
		{
			return this.DEPSECDATUMService.Assembler.Assemble(query);
		}


		public IEnumerable<DEPSECDATUMDto> ReadDEPSECDATa(string[] propertyToSearch, object[] keyWords)
		{
			return this.DEPSECDATUMService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<DEPSECDATUMDto> ReadDEPSECDATa(object[] keyWords)
		{
			return this.DEPSECDATUMService.Find(keyWords);
		}


		public IEnumerable<DEPSECDATUMDto> ReadDEPSECDATaPaged(int startIndex, int pageSize)
		{
			return this.DEPSECDATUMService.Find(startIndex, pageSize);
		}


		public IEnumerable<DEPSECDATUMDto> ReadDEPSECDATaPaged(IQueryable<DEPSECDATUM> source, int pageIndex, int pageSize)
		{
			return this.DEPSECDATUMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<DEPSECDATUMDto> ReadDEPSECDATaPaged(IQueryable<DEPSECDATUM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.DEPSECDATUMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<DEPSECDATUMDto> ReadDEPSECDATaFiltered(string sortExpression, string filterExpression)
		{
			return this.DEPSECDATUMService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<DEPSECDATUMDto> ReadDEPSECDATaPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.DEPSECDATUMService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<DEPSECDATUMDto> ReadDEPSECDATaPagedAndFiltered(int startIndex, int pageSize, Expression<Func<DEPSECDATUM, bool>> filter)
		{
			return this.DEPSECDATUMService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public DEPSECDATUMDto ReadDEPSECDATa(string dtoKey)
		{
			return this.DEPSECDATUMService.GetByKey(dtoKey);
		}


		public int CountDEPSECDATa()
		{
			return this.DEPSECDATUMService.Count();
		}


		public int CountDEPSECDATa(string filterExpression)
		{
			return this.DEPSECDATUMService.Count(filterExpression);
		}


		public int CountDEPSECDATa(Expression<Func<DEPSECDATUM, bool>> filter)
		{
			return this.DEPSECDATUMService.Count(filter);
		}


		public string CreateDEPSECDATUM(DEPSECDATUMDto depsecdatum, bool doSaveChanges = true)
		{
			string key = this.DEPSECDATUMService.Add(depsecdatum);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateDEPSECDATUM(DEPSECDATUMDto depsecdatum, bool doSaveChanges = true)
		{
			this.DEPSECDATUMService.Update(depsecdatum);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateDEPSECDATa(IEnumerable<DEPSECDATUMDto> depsecdata, bool doSaveChanges = true)
		{
			if (depsecdata == null)
			{
				return;
			}
			foreach (DEPSECDATUMDto instance in depsecdata)
			{
				if (instance == null)
				{
					continue;
				}


				this.DEPSECDATUMService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteDEPSECDATUM(DEPSECDATUMDto depsecdatum, bool doSaveChanges = true)
		{
			this.DEPSECDATUMService.Delete(depsecdatum);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteDEPSECDATa(IEnumerable<DEPSECDATUMDto> depsecdata, bool doSaveChanges = true)
		{
			if (depsecdata == null)
			{
				return;
			}
			foreach (DEPSECDATUMDto instance in depsecdata)
			{
				if (instance == null)
				{
					continue;
				}


				this.DEPSECDATUMService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveDEPSECDATUM(DEPSECDATUMDto depsecdatum, bool doSaveChanges = true)
		{
			switch (depsecdatum.RowState)
			{
				case RowState.Insert:
					this.CreateDEPSECDATUM(depsecdatum, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateDEPSECDATUM(depsecdatum, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteDEPSECDATUM(depsecdatum, doSaveChanges);
					break;
			}
		}


		public void SaveDEPSECDATa(IEnumerable<DEPSECDATUMDto> depsecdata, bool doSaveChanges = true)
		{
			if (depsecdata == null)
			{
				return;
			}
			foreach (DEPSECDATUMDto instance in depsecdata)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveDEPSECDATUM(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion DEPSECDATUM CRUD Operations


		#region CLERKIPDNOTEDATUM CRUD Operations


		private ICLERKIPDNOTEDATUMService clerkipdnotedatum;
		public virtual ICLERKIPDNOTEDATUMService CLERKIPDNOTEDATUMService
		{
			get
			{
				if (this.clerkipdnotedatum == null)
				{
					ICLERKIPDNOTEDATUMAssembler assembler = new CLERKIPDNOTEDATUMAssembler();
					ICLERKIPDNOTEDATUMRepository repository = new CLERKIPDNOTEDATUMRepository(this.UnitOfWork);
					this.clerkipdnotedatum = new CLERKIPDNOTEDATUMService(assembler, repository);
				}
				return this.clerkipdnotedatum;
			}
		}


		public IQueryable<CLERKIPDNOTEDATUM> CLERKIPDNOTEDATa
		{
			get { return this.CLERKIPDNOTEDATUMService.Repository.GetAll(); }
		}


		public IQueryable<CLERKIPDNOTEDATUM> ReadCLERKIPDNOTEDATa(Expression<Func<CLERKIPDNOTEDATUM, bool>> filter, int dummy)
		{
			return this.CLERKIPDNOTEDATUMService.Repository.Find(filter);
		}


		public IEnumerable<CLERKIPDNOTEDATUMDto> ReadCLERKIPDNOTEDATa()
		{
			return this.CLERKIPDNOTEDATUMService.GetAll();
		}


		public IEnumerable<CLERKIPDNOTEDATUMDto> ReadCLERKIPDNOTEDATa(Expression<Func<CLERKIPDNOTEDATUM, bool>> filter)
		{
			return this.CLERKIPDNOTEDATUMService.Find(filter);
		}


		public IEnumerable<CLERKIPDNOTEDATUMDto> ReadCLERKIPDNOTEDATa(ISpecification<CLERKIPDNOTEDATUM> specification)
		{
			return this.CLERKIPDNOTEDATUMService.Find(specification.GetExpression());
		}


		public IEnumerable<CLERKIPDNOTEDATUMDto> ReadCLERKIPDNOTEDATa(IQueryable<CLERKIPDNOTEDATUM> query)
		{
			return this.CLERKIPDNOTEDATUMService.Assembler.Assemble(query);
		}


		public IEnumerable<CLERKIPDNOTEDATUMDto> ReadCLERKIPDNOTEDATa(string[] propertyToSearch, object[] keyWords)
		{
			return this.CLERKIPDNOTEDATUMService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<CLERKIPDNOTEDATUMDto> ReadCLERKIPDNOTEDATa(object[] keyWords)
		{
			return this.CLERKIPDNOTEDATUMService.Find(keyWords);
		}


		public IEnumerable<CLERKIPDNOTEDATUMDto> ReadCLERKIPDNOTEDATaPaged(int startIndex, int pageSize)
		{
			return this.CLERKIPDNOTEDATUMService.Find(startIndex, pageSize);
		}


		public IEnumerable<CLERKIPDNOTEDATUMDto> ReadCLERKIPDNOTEDATaPaged(IQueryable<CLERKIPDNOTEDATUM> source, int pageIndex, int pageSize)
		{
			return this.CLERKIPDNOTEDATUMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<CLERKIPDNOTEDATUMDto> ReadCLERKIPDNOTEDATaPaged(IQueryable<CLERKIPDNOTEDATUM> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.CLERKIPDNOTEDATUMService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<CLERKIPDNOTEDATUMDto> ReadCLERKIPDNOTEDATaFiltered(string sortExpression, string filterExpression)
		{
			return this.CLERKIPDNOTEDATUMService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<CLERKIPDNOTEDATUMDto> ReadCLERKIPDNOTEDATaPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.CLERKIPDNOTEDATUMService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<CLERKIPDNOTEDATUMDto> ReadCLERKIPDNOTEDATaPagedAndFiltered(int startIndex, int pageSize, Expression<Func<CLERKIPDNOTEDATUM, bool>> filter)
		{
			return this.CLERKIPDNOTEDATUMService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public CLERKIPDNOTEDATUMDto ReadCLERKIPDNOTEDATa(string dtoKey)
		{
			return this.CLERKIPDNOTEDATUMService.GetByKey(dtoKey);
		}


		public int CountCLERKIPDNOTEDATa()
		{
			return this.CLERKIPDNOTEDATUMService.Count();
		}


		public int CountCLERKIPDNOTEDATa(string filterExpression)
		{
			return this.CLERKIPDNOTEDATUMService.Count(filterExpression);
		}


		public int CountCLERKIPDNOTEDATa(Expression<Func<CLERKIPDNOTEDATUM, bool>> filter)
		{
			return this.CLERKIPDNOTEDATUMService.Count(filter);
		}


		public string CreateCLERKIPDNOTEDATUM(CLERKIPDNOTEDATUMDto clerkipdnotedatum, bool doSaveChanges = true)
		{
			string key = this.CLERKIPDNOTEDATUMService.Add(clerkipdnotedatum);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateCLERKIPDNOTEDATUM(CLERKIPDNOTEDATUMDto clerkipdnotedatum, bool doSaveChanges = true)
		{
			this.CLERKIPDNOTEDATUMService.Update(clerkipdnotedatum);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateCLERKIPDNOTEDATa(IEnumerable<CLERKIPDNOTEDATUMDto> clerkipdnotedata, bool doSaveChanges = true)
		{
			if (clerkipdnotedata == null)
			{
				return;
			}
			foreach (CLERKIPDNOTEDATUMDto instance in clerkipdnotedata)
			{
				if (instance == null)
				{
					continue;
				}


				this.CLERKIPDNOTEDATUMService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteCLERKIPDNOTEDATUM(CLERKIPDNOTEDATUMDto clerkipdnotedatum, bool doSaveChanges = true)
		{
			this.CLERKIPDNOTEDATUMService.Delete(clerkipdnotedatum);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteCLERKIPDNOTEDATa(IEnumerable<CLERKIPDNOTEDATUMDto> clerkipdnotedata, bool doSaveChanges = true)
		{
			if (clerkipdnotedata == null)
			{
				return;
			}
			foreach (CLERKIPDNOTEDATUMDto instance in clerkipdnotedata)
			{
				if (instance == null)
				{
					continue;
				}


				this.CLERKIPDNOTEDATUMService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveCLERKIPDNOTEDATUM(CLERKIPDNOTEDATUMDto clerkipdnotedatum, bool doSaveChanges = true)
		{
			switch (clerkipdnotedatum.RowState)
			{
				case RowState.Insert:
					this.CreateCLERKIPDNOTEDATUM(clerkipdnotedatum, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateCLERKIPDNOTEDATUM(clerkipdnotedatum, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteCLERKIPDNOTEDATUM(clerkipdnotedatum, doSaveChanges);
					break;
			}
		}


		public void SaveCLERKIPDNOTEDATa(IEnumerable<CLERKIPDNOTEDATUMDto> clerkipdnotedata, bool doSaveChanges = true)
		{
			if (clerkipdnotedata == null)
			{
				return;
			}
			foreach (CLERKIPDNOTEDATUMDto instance in clerkipdnotedata)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveCLERKIPDNOTEDATUM(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion CLERKIPDNOTEDATUM CRUD Operations


		#region CICBOOK CRUD Operations


		private ICICBOOKService cicbook;
		public virtual ICICBOOKService CICBOOKService
		{
			get
			{
				if (this.cicbook == null)
				{
					ICICBOOKAssembler assembler = new CICBOOKAssembler();
					ICICBOOKRepository repository = new CICBOOKRepository(this.UnitOfWork);
					this.cicbook = new CICBOOKService(assembler, repository);
				}
				return this.cicbook;
			}
		}


		public IQueryable<CICBOOK> CICBOOKs
		{
			get { return this.CICBOOKService.Repository.GetAll(); }
		}


		public IQueryable<CICBOOK> ReadCICBOOKs(Expression<Func<CICBOOK, bool>> filter, int dummy)
		{
			return this.CICBOOKService.Repository.Find(filter);
		}


		public IEnumerable<CICBOOKDto> ReadCICBOOKs()
		{
			return this.CICBOOKService.GetAll();
		}


		public IEnumerable<CICBOOKDto> ReadCICBOOKs(Expression<Func<CICBOOK, bool>> filter)
		{
			return this.CICBOOKService.Find(filter);
		}


		public IEnumerable<CICBOOKDto> ReadCICBOOKs(ISpecification<CICBOOK> specification)
		{
			return this.CICBOOKService.Find(specification.GetExpression());
		}


		public IEnumerable<CICBOOKDto> ReadCICBOOKs(IQueryable<CICBOOK> query)
		{
			return this.CICBOOKService.Assembler.Assemble(query);
		}


		public IEnumerable<CICBOOKDto> ReadCICBOOKs(string[] propertyToSearch, object[] keyWords)
		{
			return this.CICBOOKService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<CICBOOKDto> ReadCICBOOKs(object[] keyWords)
		{
			return this.CICBOOKService.Find(keyWords);
		}


		public IEnumerable<CICBOOKDto> ReadCICBOOKsPaged(int startIndex, int pageSize)
		{
			return this.CICBOOKService.Find(startIndex, pageSize);
		}


		public IEnumerable<CICBOOKDto> ReadCICBOOKsPaged(IQueryable<CICBOOK> source, int pageIndex, int pageSize)
		{
			return this.CICBOOKService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<CICBOOKDto> ReadCICBOOKsPaged(IQueryable<CICBOOK> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.CICBOOKService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<CICBOOKDto> ReadCICBOOKsFiltered(string sortExpression, string filterExpression)
		{
			return this.CICBOOKService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<CICBOOKDto> ReadCICBOOKsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.CICBOOKService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<CICBOOKDto> ReadCICBOOKsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<CICBOOK, bool>> filter)
		{
			return this.CICBOOKService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public CICBOOKDto ReadCICBOOKs(string dtoKey)
		{
			return this.CICBOOKService.GetByKey(dtoKey);
		}


		public int CountCICBOOKs()
		{
			return this.CICBOOKService.Count();
		}


		public int CountCICBOOKs(string filterExpression)
		{
			return this.CICBOOKService.Count(filterExpression);
		}


		public int CountCICBOOKs(Expression<Func<CICBOOK, bool>> filter)
		{
			return this.CICBOOKService.Count(filter);
		}


		public string CreateCICBOOK(CICBOOKDto cicbook, bool doSaveChanges = true)
		{
			string key = this.CICBOOKService.Add(cicbook);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateCICBOOK(CICBOOKDto cicbook, bool doSaveChanges = true)
		{
			this.CICBOOKService.Update(cicbook);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateCICBOOKs(IEnumerable<CICBOOKDto> cicbooks, bool doSaveChanges = true)
		{
			if (cicbooks == null)
			{
				return;
			}
			foreach (CICBOOKDto instance in cicbooks)
			{
				if (instance == null)
				{
					continue;
				}


				this.CICBOOKService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteCICBOOK(CICBOOKDto cicbook, bool doSaveChanges = true)
		{
			this.CICBOOKService.Delete(cicbook);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteCICBOOKs(IEnumerable<CICBOOKDto> cicbooks, bool doSaveChanges = true)
		{
			if (cicbooks == null)
			{
				return;
			}
			foreach (CICBOOKDto instance in cicbooks)
			{
				if (instance == null)
				{
					continue;
				}


				this.CICBOOKService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveCICBOOK(CICBOOKDto cicbook, bool doSaveChanges = true)
		{
			switch (cicbook.RowState)
			{
				case RowState.Insert:
					this.CreateCICBOOK(cicbook, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateCICBOOK(cicbook, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteCICBOOK(cicbook, doSaveChanges);
					break;
			}
		}


		public void SaveCICBOOKs(IEnumerable<CICBOOKDto> cicbooks, bool doSaveChanges = true)
		{
			if (cicbooks == null)
			{
				return;
			}
			foreach (CICBOOKDto instance in cicbooks)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveCICBOOK(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion CICBOOK CRUD Operations


		#region AUTOEDUFORMTEMPLATETARGET CRUD Operations


		private IAUTOEDUFORMTEMPLATETARGETService autoeduformtemplatetarget;
		public virtual IAUTOEDUFORMTEMPLATETARGETService AUTOEDUFORMTEMPLATETARGETService
		{
			get
			{
				if (this.autoeduformtemplatetarget == null)
				{
					IAUTOEDUFORMTEMPLATETARGETAssembler assembler = new AUTOEDUFORMTEMPLATETARGETAssembler();
					IAUTOEDUFORMTEMPLATETARGETRepository repository = new AUTOEDUFORMTEMPLATETARGETRepository(this.UnitOfWork);
					this.autoeduformtemplatetarget = new AUTOEDUFORMTEMPLATETARGETService(assembler, repository);
				}
				return this.autoeduformtemplatetarget;
			}
		}


		public IQueryable<AUTOEDUFORMTEMPLATETARGET> AUTOEDUFORMTEMPLATETARGETs
		{
			get { return this.AUTOEDUFORMTEMPLATETARGETService.Repository.GetAll(); }
		}


		public IQueryable<AUTOEDUFORMTEMPLATETARGET> ReadAUTOEDUFORMTEMPLATETARGETs(Expression<Func<AUTOEDUFORMTEMPLATETARGET, bool>> filter, int dummy)
		{
			return this.AUTOEDUFORMTEMPLATETARGETService.Repository.Find(filter);
		}


		public IEnumerable<AUTOEDUFORMTEMPLATETARGETDto> ReadAUTOEDUFORMTEMPLATETARGETs()
		{
			return this.AUTOEDUFORMTEMPLATETARGETService.GetAll();
		}


		public IEnumerable<AUTOEDUFORMTEMPLATETARGETDto> ReadAUTOEDUFORMTEMPLATETARGETs(Expression<Func<AUTOEDUFORMTEMPLATETARGET, bool>> filter)
		{
			return this.AUTOEDUFORMTEMPLATETARGETService.Find(filter);
		}


		public IEnumerable<AUTOEDUFORMTEMPLATETARGETDto> ReadAUTOEDUFORMTEMPLATETARGETs(ISpecification<AUTOEDUFORMTEMPLATETARGET> specification)
		{
			return this.AUTOEDUFORMTEMPLATETARGETService.Find(specification.GetExpression());
		}


		public IEnumerable<AUTOEDUFORMTEMPLATETARGETDto> ReadAUTOEDUFORMTEMPLATETARGETs(IQueryable<AUTOEDUFORMTEMPLATETARGET> query)
		{
			return this.AUTOEDUFORMTEMPLATETARGETService.Assembler.Assemble(query);
		}


		public IEnumerable<AUTOEDUFORMTEMPLATETARGETDto> ReadAUTOEDUFORMTEMPLATETARGETs(string[] propertyToSearch, object[] keyWords)
		{
			return this.AUTOEDUFORMTEMPLATETARGETService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<AUTOEDUFORMTEMPLATETARGETDto> ReadAUTOEDUFORMTEMPLATETARGETs(object[] keyWords)
		{
			return this.AUTOEDUFORMTEMPLATETARGETService.Find(keyWords);
		}


		public IEnumerable<AUTOEDUFORMTEMPLATETARGETDto> ReadAUTOEDUFORMTEMPLATETARGETsPaged(int startIndex, int pageSize)
		{
			return this.AUTOEDUFORMTEMPLATETARGETService.Find(startIndex, pageSize);
		}


		public IEnumerable<AUTOEDUFORMTEMPLATETARGETDto> ReadAUTOEDUFORMTEMPLATETARGETsPaged(IQueryable<AUTOEDUFORMTEMPLATETARGET> source, int pageIndex, int pageSize)
		{
			return this.AUTOEDUFORMTEMPLATETARGETService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<AUTOEDUFORMTEMPLATETARGETDto> ReadAUTOEDUFORMTEMPLATETARGETsPaged(IQueryable<AUTOEDUFORMTEMPLATETARGET> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.AUTOEDUFORMTEMPLATETARGETService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<AUTOEDUFORMTEMPLATETARGETDto> ReadAUTOEDUFORMTEMPLATETARGETsFiltered(string sortExpression, string filterExpression)
		{
			return this.AUTOEDUFORMTEMPLATETARGETService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<AUTOEDUFORMTEMPLATETARGETDto> ReadAUTOEDUFORMTEMPLATETARGETsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.AUTOEDUFORMTEMPLATETARGETService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<AUTOEDUFORMTEMPLATETARGETDto> ReadAUTOEDUFORMTEMPLATETARGETsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<AUTOEDUFORMTEMPLATETARGET, bool>> filter)
		{
			return this.AUTOEDUFORMTEMPLATETARGETService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public AUTOEDUFORMTEMPLATETARGETDto ReadAUTOEDUFORMTEMPLATETARGETs(string dtoKey)
		{
			return this.AUTOEDUFORMTEMPLATETARGETService.GetByKey(dtoKey);
		}


		public int CountAUTOEDUFORMTEMPLATETARGETs()
		{
			return this.AUTOEDUFORMTEMPLATETARGETService.Count();
		}


		public int CountAUTOEDUFORMTEMPLATETARGETs(string filterExpression)
		{
			return this.AUTOEDUFORMTEMPLATETARGETService.Count(filterExpression);
		}


		public int CountAUTOEDUFORMTEMPLATETARGETs(Expression<Func<AUTOEDUFORMTEMPLATETARGET, bool>> filter)
		{
			return this.AUTOEDUFORMTEMPLATETARGETService.Count(filter);
		}


		public string CreateAUTOEDUFORMTEMPLATETARGET(AUTOEDUFORMTEMPLATETARGETDto autoeduformtemplatetarget, bool doSaveChanges = true)
		{
			string key = this.AUTOEDUFORMTEMPLATETARGETService.Add(autoeduformtemplatetarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateAUTOEDUFORMTEMPLATETARGET(AUTOEDUFORMTEMPLATETARGETDto autoeduformtemplatetarget, bool doSaveChanges = true)
		{
			this.AUTOEDUFORMTEMPLATETARGETService.Update(autoeduformtemplatetarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateAUTOEDUFORMTEMPLATETARGETs(IEnumerable<AUTOEDUFORMTEMPLATETARGETDto> autoeduformtemplatetargets, bool doSaveChanges = true)
		{
			if (autoeduformtemplatetargets == null)
			{
				return;
			}
			foreach (AUTOEDUFORMTEMPLATETARGETDto instance in autoeduformtemplatetargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.AUTOEDUFORMTEMPLATETARGETService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteAUTOEDUFORMTEMPLATETARGET(AUTOEDUFORMTEMPLATETARGETDto autoeduformtemplatetarget, bool doSaveChanges = true)
		{
			this.AUTOEDUFORMTEMPLATETARGETService.Delete(autoeduformtemplatetarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteAUTOEDUFORMTEMPLATETARGETs(IEnumerable<AUTOEDUFORMTEMPLATETARGETDto> autoeduformtemplatetargets, bool doSaveChanges = true)
		{
			if (autoeduformtemplatetargets == null)
			{
				return;
			}
			foreach (AUTOEDUFORMTEMPLATETARGETDto instance in autoeduformtemplatetargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.AUTOEDUFORMTEMPLATETARGETService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveAUTOEDUFORMTEMPLATETARGET(AUTOEDUFORMTEMPLATETARGETDto autoeduformtemplatetarget, bool doSaveChanges = true)
		{
			switch (autoeduformtemplatetarget.RowState)
			{
				case RowState.Insert:
					this.CreateAUTOEDUFORMTEMPLATETARGET(autoeduformtemplatetarget, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateAUTOEDUFORMTEMPLATETARGET(autoeduformtemplatetarget, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteAUTOEDUFORMTEMPLATETARGET(autoeduformtemplatetarget, doSaveChanges);
					break;
			}
		}


		public void SaveAUTOEDUFORMTEMPLATETARGETs(IEnumerable<AUTOEDUFORMTEMPLATETARGETDto> autoeduformtemplatetargets, bool doSaveChanges = true)
		{
			if (autoeduformtemplatetargets == null)
			{
				return;
			}
			foreach (AUTOEDUFORMTEMPLATETARGETDto instance in autoeduformtemplatetargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveAUTOEDUFORMTEMPLATETARGET(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion AUTOEDUFORMTEMPLATETARGET CRUD Operations


		#region AUTOEDUFORMTEMPLATESIGNER CRUD Operations


		private IAUTOEDUFORMTEMPLATESIGNERService autoeduformtemplatesigner;
		public virtual IAUTOEDUFORMTEMPLATESIGNERService AUTOEDUFORMTEMPLATESIGNERService
		{
			get
			{
				if (this.autoeduformtemplatesigner == null)
				{
					IAUTOEDUFORMTEMPLATESIGNERAssembler assembler = new AUTOEDUFORMTEMPLATESIGNERAssembler();
					IAUTOEDUFORMTEMPLATESIGNERRepository repository = new AUTOEDUFORMTEMPLATESIGNERRepository(this.UnitOfWork);
					this.autoeduformtemplatesigner = new AUTOEDUFORMTEMPLATESIGNERService(assembler, repository);
				}
				return this.autoeduformtemplatesigner;
			}
		}


		public IQueryable<AUTOEDUFORMTEMPLATESIGNER> AUTOEDUFORMTEMPLATESIGNERs
		{
			get { return this.AUTOEDUFORMTEMPLATESIGNERService.Repository.GetAll(); }
		}


		public IQueryable<AUTOEDUFORMTEMPLATESIGNER> ReadAUTOEDUFORMTEMPLATESIGNERs(Expression<Func<AUTOEDUFORMTEMPLATESIGNER, bool>> filter, int dummy)
		{
			return this.AUTOEDUFORMTEMPLATESIGNERService.Repository.Find(filter);
		}


		public IEnumerable<AUTOEDUFORMTEMPLATESIGNERDto> ReadAUTOEDUFORMTEMPLATESIGNERs()
		{
			return this.AUTOEDUFORMTEMPLATESIGNERService.GetAll();
		}


		public IEnumerable<AUTOEDUFORMTEMPLATESIGNERDto> ReadAUTOEDUFORMTEMPLATESIGNERs(Expression<Func<AUTOEDUFORMTEMPLATESIGNER, bool>> filter)
		{
			return this.AUTOEDUFORMTEMPLATESIGNERService.Find(filter);
		}


		public IEnumerable<AUTOEDUFORMTEMPLATESIGNERDto> ReadAUTOEDUFORMTEMPLATESIGNERs(ISpecification<AUTOEDUFORMTEMPLATESIGNER> specification)
		{
			return this.AUTOEDUFORMTEMPLATESIGNERService.Find(specification.GetExpression());
		}


		public IEnumerable<AUTOEDUFORMTEMPLATESIGNERDto> ReadAUTOEDUFORMTEMPLATESIGNERs(IQueryable<AUTOEDUFORMTEMPLATESIGNER> query)
		{
			return this.AUTOEDUFORMTEMPLATESIGNERService.Assembler.Assemble(query);
		}


		public IEnumerable<AUTOEDUFORMTEMPLATESIGNERDto> ReadAUTOEDUFORMTEMPLATESIGNERs(string[] propertyToSearch, object[] keyWords)
		{
			return this.AUTOEDUFORMTEMPLATESIGNERService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<AUTOEDUFORMTEMPLATESIGNERDto> ReadAUTOEDUFORMTEMPLATESIGNERs(object[] keyWords)
		{
			return this.AUTOEDUFORMTEMPLATESIGNERService.Find(keyWords);
		}


		public IEnumerable<AUTOEDUFORMTEMPLATESIGNERDto> ReadAUTOEDUFORMTEMPLATESIGNERsPaged(int startIndex, int pageSize)
		{
			return this.AUTOEDUFORMTEMPLATESIGNERService.Find(startIndex, pageSize);
		}


		public IEnumerable<AUTOEDUFORMTEMPLATESIGNERDto> ReadAUTOEDUFORMTEMPLATESIGNERsPaged(IQueryable<AUTOEDUFORMTEMPLATESIGNER> source, int pageIndex, int pageSize)
		{
			return this.AUTOEDUFORMTEMPLATESIGNERService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<AUTOEDUFORMTEMPLATESIGNERDto> ReadAUTOEDUFORMTEMPLATESIGNERsPaged(IQueryable<AUTOEDUFORMTEMPLATESIGNER> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.AUTOEDUFORMTEMPLATESIGNERService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<AUTOEDUFORMTEMPLATESIGNERDto> ReadAUTOEDUFORMTEMPLATESIGNERsFiltered(string sortExpression, string filterExpression)
		{
			return this.AUTOEDUFORMTEMPLATESIGNERService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<AUTOEDUFORMTEMPLATESIGNERDto> ReadAUTOEDUFORMTEMPLATESIGNERsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.AUTOEDUFORMTEMPLATESIGNERService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<AUTOEDUFORMTEMPLATESIGNERDto> ReadAUTOEDUFORMTEMPLATESIGNERsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<AUTOEDUFORMTEMPLATESIGNER, bool>> filter)
		{
			return this.AUTOEDUFORMTEMPLATESIGNERService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public AUTOEDUFORMTEMPLATESIGNERDto ReadAUTOEDUFORMTEMPLATESIGNERs(string dtoKey)
		{
			return this.AUTOEDUFORMTEMPLATESIGNERService.GetByKey(dtoKey);
		}


		public int CountAUTOEDUFORMTEMPLATESIGNERs()
		{
			return this.AUTOEDUFORMTEMPLATESIGNERService.Count();
		}


		public int CountAUTOEDUFORMTEMPLATESIGNERs(string filterExpression)
		{
			return this.AUTOEDUFORMTEMPLATESIGNERService.Count(filterExpression);
		}


		public int CountAUTOEDUFORMTEMPLATESIGNERs(Expression<Func<AUTOEDUFORMTEMPLATESIGNER, bool>> filter)
		{
			return this.AUTOEDUFORMTEMPLATESIGNERService.Count(filter);
		}


		public string CreateAUTOEDUFORMTEMPLATESIGNER(AUTOEDUFORMTEMPLATESIGNERDto autoeduformtemplatesigner, bool doSaveChanges = true)
		{
			string key = this.AUTOEDUFORMTEMPLATESIGNERService.Add(autoeduformtemplatesigner);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateAUTOEDUFORMTEMPLATESIGNER(AUTOEDUFORMTEMPLATESIGNERDto autoeduformtemplatesigner, bool doSaveChanges = true)
		{
			this.AUTOEDUFORMTEMPLATESIGNERService.Update(autoeduformtemplatesigner);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateAUTOEDUFORMTEMPLATESIGNERs(IEnumerable<AUTOEDUFORMTEMPLATESIGNERDto> autoeduformtemplatesigners, bool doSaveChanges = true)
		{
			if (autoeduformtemplatesigners == null)
			{
				return;
			}
			foreach (AUTOEDUFORMTEMPLATESIGNERDto instance in autoeduformtemplatesigners)
			{
				if (instance == null)
				{
					continue;
				}


				this.AUTOEDUFORMTEMPLATESIGNERService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteAUTOEDUFORMTEMPLATESIGNER(AUTOEDUFORMTEMPLATESIGNERDto autoeduformtemplatesigner, bool doSaveChanges = true)
		{
			this.AUTOEDUFORMTEMPLATESIGNERService.Delete(autoeduformtemplatesigner);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteAUTOEDUFORMTEMPLATESIGNERs(IEnumerable<AUTOEDUFORMTEMPLATESIGNERDto> autoeduformtemplatesigners, bool doSaveChanges = true)
		{
			if (autoeduformtemplatesigners == null)
			{
				return;
			}
			foreach (AUTOEDUFORMTEMPLATESIGNERDto instance in autoeduformtemplatesigners)
			{
				if (instance == null)
				{
					continue;
				}


				this.AUTOEDUFORMTEMPLATESIGNERService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveAUTOEDUFORMTEMPLATESIGNER(AUTOEDUFORMTEMPLATESIGNERDto autoeduformtemplatesigner, bool doSaveChanges = true)
		{
			switch (autoeduformtemplatesigner.RowState)
			{
				case RowState.Insert:
					this.CreateAUTOEDUFORMTEMPLATESIGNER(autoeduformtemplatesigner, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateAUTOEDUFORMTEMPLATESIGNER(autoeduformtemplatesigner, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteAUTOEDUFORMTEMPLATESIGNER(autoeduformtemplatesigner, doSaveChanges);
					break;
			}
		}


		public void SaveAUTOEDUFORMTEMPLATESIGNERs(IEnumerable<AUTOEDUFORMTEMPLATESIGNERDto> autoeduformtemplatesigners, bool doSaveChanges = true)
		{
			if (autoeduformtemplatesigners == null)
			{
				return;
			}
			foreach (AUTOEDUFORMTEMPLATESIGNERDto instance in autoeduformtemplatesigners)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveAUTOEDUFORMTEMPLATESIGNER(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion AUTOEDUFORMTEMPLATESIGNER CRUD Operations


		#region AUTOEDUFORMTEMPLATELIST CRUD Operations


		private IAUTOEDUFORMTEMPLATELISTService autoeduformtemplatelist;
		public virtual IAUTOEDUFORMTEMPLATELISTService AUTOEDUFORMTEMPLATELISTService
		{
			get
			{
				if (this.autoeduformtemplatelist == null)
				{
					IAUTOEDUFORMTEMPLATELISTAssembler assembler = new AUTOEDUFORMTEMPLATELISTAssembler();
					IAUTOEDUFORMTEMPLATELISTRepository repository = new AUTOEDUFORMTEMPLATELISTRepository(this.UnitOfWork);
					this.autoeduformtemplatelist = new AUTOEDUFORMTEMPLATELISTService(assembler, repository);
				}
				return this.autoeduformtemplatelist;
			}
		}


		public IQueryable<AUTOEDUFORMTEMPLATELIST> AUTOEDUFORMTEMPLATELISTs
		{
			get { return this.AUTOEDUFORMTEMPLATELISTService.Repository.GetAll(); }
		}


		public IQueryable<AUTOEDUFORMTEMPLATELIST> ReadAUTOEDUFORMTEMPLATELISTs(Expression<Func<AUTOEDUFORMTEMPLATELIST, bool>> filter, int dummy)
		{
			return this.AUTOEDUFORMTEMPLATELISTService.Repository.Find(filter);
		}


		public IEnumerable<AUTOEDUFORMTEMPLATELISTDto> ReadAUTOEDUFORMTEMPLATELISTs()
		{
			return this.AUTOEDUFORMTEMPLATELISTService.GetAll();
		}


		public IEnumerable<AUTOEDUFORMTEMPLATELISTDto> ReadAUTOEDUFORMTEMPLATELISTs(Expression<Func<AUTOEDUFORMTEMPLATELIST, bool>> filter)
		{
			return this.AUTOEDUFORMTEMPLATELISTService.Find(filter);
		}


		public IEnumerable<AUTOEDUFORMTEMPLATELISTDto> ReadAUTOEDUFORMTEMPLATELISTs(ISpecification<AUTOEDUFORMTEMPLATELIST> specification)
		{
			return this.AUTOEDUFORMTEMPLATELISTService.Find(specification.GetExpression());
		}


		public IEnumerable<AUTOEDUFORMTEMPLATELISTDto> ReadAUTOEDUFORMTEMPLATELISTs(IQueryable<AUTOEDUFORMTEMPLATELIST> query)
		{
			return this.AUTOEDUFORMTEMPLATELISTService.Assembler.Assemble(query);
		}


		public IEnumerable<AUTOEDUFORMTEMPLATELISTDto> ReadAUTOEDUFORMTEMPLATELISTs(string[] propertyToSearch, object[] keyWords)
		{
			return this.AUTOEDUFORMTEMPLATELISTService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<AUTOEDUFORMTEMPLATELISTDto> ReadAUTOEDUFORMTEMPLATELISTs(object[] keyWords)
		{
			return this.AUTOEDUFORMTEMPLATELISTService.Find(keyWords);
		}


		public IEnumerable<AUTOEDUFORMTEMPLATELISTDto> ReadAUTOEDUFORMTEMPLATELISTsPaged(int startIndex, int pageSize)
		{
			return this.AUTOEDUFORMTEMPLATELISTService.Find(startIndex, pageSize);
		}


		public IEnumerable<AUTOEDUFORMTEMPLATELISTDto> ReadAUTOEDUFORMTEMPLATELISTsPaged(IQueryable<AUTOEDUFORMTEMPLATELIST> source, int pageIndex, int pageSize)
		{
			return this.AUTOEDUFORMTEMPLATELISTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<AUTOEDUFORMTEMPLATELISTDto> ReadAUTOEDUFORMTEMPLATELISTsPaged(IQueryable<AUTOEDUFORMTEMPLATELIST> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.AUTOEDUFORMTEMPLATELISTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<AUTOEDUFORMTEMPLATELISTDto> ReadAUTOEDUFORMTEMPLATELISTsFiltered(string sortExpression, string filterExpression)
		{
			return this.AUTOEDUFORMTEMPLATELISTService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<AUTOEDUFORMTEMPLATELISTDto> ReadAUTOEDUFORMTEMPLATELISTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.AUTOEDUFORMTEMPLATELISTService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<AUTOEDUFORMTEMPLATELISTDto> ReadAUTOEDUFORMTEMPLATELISTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<AUTOEDUFORMTEMPLATELIST, bool>> filter)
		{
			return this.AUTOEDUFORMTEMPLATELISTService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public AUTOEDUFORMTEMPLATELISTDto ReadAUTOEDUFORMTEMPLATELISTs(string dtoKey)
		{
			return this.AUTOEDUFORMTEMPLATELISTService.GetByKey(dtoKey);
		}


		public int CountAUTOEDUFORMTEMPLATELISTs()
		{
			return this.AUTOEDUFORMTEMPLATELISTService.Count();
		}


		public int CountAUTOEDUFORMTEMPLATELISTs(string filterExpression)
		{
			return this.AUTOEDUFORMTEMPLATELISTService.Count(filterExpression);
		}


		public int CountAUTOEDUFORMTEMPLATELISTs(Expression<Func<AUTOEDUFORMTEMPLATELIST, bool>> filter)
		{
			return this.AUTOEDUFORMTEMPLATELISTService.Count(filter);
		}


		public string CreateAUTOEDUFORMTEMPLATELIST(AUTOEDUFORMTEMPLATELISTDto autoeduformtemplatelist, bool doSaveChanges = true)
		{
			string key = this.AUTOEDUFORMTEMPLATELISTService.Add(autoeduformtemplatelist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateAUTOEDUFORMTEMPLATELIST(AUTOEDUFORMTEMPLATELISTDto autoeduformtemplatelist, bool doSaveChanges = true)
		{
			this.AUTOEDUFORMTEMPLATELISTService.Update(autoeduformtemplatelist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateAUTOEDUFORMTEMPLATELISTs(IEnumerable<AUTOEDUFORMTEMPLATELISTDto> autoeduformtemplatelists, bool doSaveChanges = true)
		{
			if (autoeduformtemplatelists == null)
			{
				return;
			}
			foreach (AUTOEDUFORMTEMPLATELISTDto instance in autoeduformtemplatelists)
			{
				if (instance == null)
				{
					continue;
				}


				this.AUTOEDUFORMTEMPLATELISTService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteAUTOEDUFORMTEMPLATELIST(AUTOEDUFORMTEMPLATELISTDto autoeduformtemplatelist, bool doSaveChanges = true)
		{
			this.AUTOEDUFORMTEMPLATELISTService.Delete(autoeduformtemplatelist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteAUTOEDUFORMTEMPLATELISTs(IEnumerable<AUTOEDUFORMTEMPLATELISTDto> autoeduformtemplatelists, bool doSaveChanges = true)
		{
			if (autoeduformtemplatelists == null)
			{
				return;
			}
			foreach (AUTOEDUFORMTEMPLATELISTDto instance in autoeduformtemplatelists)
			{
				if (instance == null)
				{
					continue;
				}


				this.AUTOEDUFORMTEMPLATELISTService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveAUTOEDUFORMTEMPLATELIST(AUTOEDUFORMTEMPLATELISTDto autoeduformtemplatelist, bool doSaveChanges = true)
		{
			switch (autoeduformtemplatelist.RowState)
			{
				case RowState.Insert:
					this.CreateAUTOEDUFORMTEMPLATELIST(autoeduformtemplatelist, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateAUTOEDUFORMTEMPLATELIST(autoeduformtemplatelist, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteAUTOEDUFORMTEMPLATELIST(autoeduformtemplatelist, doSaveChanges);
					break;
			}
		}


		public void SaveAUTOEDUFORMTEMPLATELISTs(IEnumerable<AUTOEDUFORMTEMPLATELISTDto> autoeduformtemplatelists, bool doSaveChanges = true)
		{
			if (autoeduformtemplatelists == null)
			{
				return;
			}
			foreach (AUTOEDUFORMTEMPLATELISTDto instance in autoeduformtemplatelists)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveAUTOEDUFORMTEMPLATELIST(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion AUTOEDUFORMTEMPLATELIST CRUD Operations


		#region AUTOEDUFORMTEMPLATEEXCEPT CRUD Operations


		private IAUTOEDUFORMTEMPLATEEXCEPTService autoeduformtemplateexcept;
		public virtual IAUTOEDUFORMTEMPLATEEXCEPTService AUTOEDUFORMTEMPLATEEXCEPTService
		{
			get
			{
				if (this.autoeduformtemplateexcept == null)
				{
					IAUTOEDUFORMTEMPLATEEXCEPTAssembler assembler = new AUTOEDUFORMTEMPLATEEXCEPTAssembler();
					IAUTOEDUFORMTEMPLATEEXCEPTRepository repository = new AUTOEDUFORMTEMPLATEEXCEPTRepository(this.UnitOfWork);
					this.autoeduformtemplateexcept = new AUTOEDUFORMTEMPLATEEXCEPTService(assembler, repository);
				}
				return this.autoeduformtemplateexcept;
			}
		}


		public IQueryable<AUTOEDUFORMTEMPLATEEXCEPT> AUTOEDUFORMTEMPLATEEXCEPTs
		{
			get { return this.AUTOEDUFORMTEMPLATEEXCEPTService.Repository.GetAll(); }
		}


		public IQueryable<AUTOEDUFORMTEMPLATEEXCEPT> ReadAUTOEDUFORMTEMPLATEEXCEPTs(Expression<Func<AUTOEDUFORMTEMPLATEEXCEPT, bool>> filter, int dummy)
		{
			return this.AUTOEDUFORMTEMPLATEEXCEPTService.Repository.Find(filter);
		}


		public IEnumerable<AUTOEDUFORMTEMPLATEEXCEPTDto> ReadAUTOEDUFORMTEMPLATEEXCEPTs()
		{
			return this.AUTOEDUFORMTEMPLATEEXCEPTService.GetAll();
		}


		public IEnumerable<AUTOEDUFORMTEMPLATEEXCEPTDto> ReadAUTOEDUFORMTEMPLATEEXCEPTs(Expression<Func<AUTOEDUFORMTEMPLATEEXCEPT, bool>> filter)
		{
			return this.AUTOEDUFORMTEMPLATEEXCEPTService.Find(filter);
		}


		public IEnumerable<AUTOEDUFORMTEMPLATEEXCEPTDto> ReadAUTOEDUFORMTEMPLATEEXCEPTs(ISpecification<AUTOEDUFORMTEMPLATEEXCEPT> specification)
		{
			return this.AUTOEDUFORMTEMPLATEEXCEPTService.Find(specification.GetExpression());
		}


		public IEnumerable<AUTOEDUFORMTEMPLATEEXCEPTDto> ReadAUTOEDUFORMTEMPLATEEXCEPTs(IQueryable<AUTOEDUFORMTEMPLATEEXCEPT> query)
		{
			return this.AUTOEDUFORMTEMPLATEEXCEPTService.Assembler.Assemble(query);
		}


		public IEnumerable<AUTOEDUFORMTEMPLATEEXCEPTDto> ReadAUTOEDUFORMTEMPLATEEXCEPTs(string[] propertyToSearch, object[] keyWords)
		{
			return this.AUTOEDUFORMTEMPLATEEXCEPTService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<AUTOEDUFORMTEMPLATEEXCEPTDto> ReadAUTOEDUFORMTEMPLATEEXCEPTs(object[] keyWords)
		{
			return this.AUTOEDUFORMTEMPLATEEXCEPTService.Find(keyWords);
		}


		public IEnumerable<AUTOEDUFORMTEMPLATEEXCEPTDto> ReadAUTOEDUFORMTEMPLATEEXCEPTsPaged(int startIndex, int pageSize)
		{
			return this.AUTOEDUFORMTEMPLATEEXCEPTService.Find(startIndex, pageSize);
		}


		public IEnumerable<AUTOEDUFORMTEMPLATEEXCEPTDto> ReadAUTOEDUFORMTEMPLATEEXCEPTsPaged(IQueryable<AUTOEDUFORMTEMPLATEEXCEPT> source, int pageIndex, int pageSize)
		{
			return this.AUTOEDUFORMTEMPLATEEXCEPTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<AUTOEDUFORMTEMPLATEEXCEPTDto> ReadAUTOEDUFORMTEMPLATEEXCEPTsPaged(IQueryable<AUTOEDUFORMTEMPLATEEXCEPT> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.AUTOEDUFORMTEMPLATEEXCEPTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<AUTOEDUFORMTEMPLATEEXCEPTDto> ReadAUTOEDUFORMTEMPLATEEXCEPTsFiltered(string sortExpression, string filterExpression)
		{
			return this.AUTOEDUFORMTEMPLATEEXCEPTService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<AUTOEDUFORMTEMPLATEEXCEPTDto> ReadAUTOEDUFORMTEMPLATEEXCEPTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.AUTOEDUFORMTEMPLATEEXCEPTService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<AUTOEDUFORMTEMPLATEEXCEPTDto> ReadAUTOEDUFORMTEMPLATEEXCEPTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<AUTOEDUFORMTEMPLATEEXCEPT, bool>> filter)
		{
			return this.AUTOEDUFORMTEMPLATEEXCEPTService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public AUTOEDUFORMTEMPLATEEXCEPTDto ReadAUTOEDUFORMTEMPLATEEXCEPTs(string dtoKey)
		{
			return this.AUTOEDUFORMTEMPLATEEXCEPTService.GetByKey(dtoKey);
		}


		public int CountAUTOEDUFORMTEMPLATEEXCEPTs()
		{
			return this.AUTOEDUFORMTEMPLATEEXCEPTService.Count();
		}


		public int CountAUTOEDUFORMTEMPLATEEXCEPTs(string filterExpression)
		{
			return this.AUTOEDUFORMTEMPLATEEXCEPTService.Count(filterExpression);
		}


		public int CountAUTOEDUFORMTEMPLATEEXCEPTs(Expression<Func<AUTOEDUFORMTEMPLATEEXCEPT, bool>> filter)
		{
			return this.AUTOEDUFORMTEMPLATEEXCEPTService.Count(filter);
		}


		public string CreateAUTOEDUFORMTEMPLATEEXCEPT(AUTOEDUFORMTEMPLATEEXCEPTDto autoeduformtemplateexcept, bool doSaveChanges = true)
		{
			string key = this.AUTOEDUFORMTEMPLATEEXCEPTService.Add(autoeduformtemplateexcept);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateAUTOEDUFORMTEMPLATEEXCEPT(AUTOEDUFORMTEMPLATEEXCEPTDto autoeduformtemplateexcept, bool doSaveChanges = true)
		{
			this.AUTOEDUFORMTEMPLATEEXCEPTService.Update(autoeduformtemplateexcept);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateAUTOEDUFORMTEMPLATEEXCEPTs(IEnumerable<AUTOEDUFORMTEMPLATEEXCEPTDto> autoeduformtemplateexcepts, bool doSaveChanges = true)
		{
			if (autoeduformtemplateexcepts == null)
			{
				return;
			}
			foreach (AUTOEDUFORMTEMPLATEEXCEPTDto instance in autoeduformtemplateexcepts)
			{
				if (instance == null)
				{
					continue;
				}


				this.AUTOEDUFORMTEMPLATEEXCEPTService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteAUTOEDUFORMTEMPLATEEXCEPT(AUTOEDUFORMTEMPLATEEXCEPTDto autoeduformtemplateexcept, bool doSaveChanges = true)
		{
			this.AUTOEDUFORMTEMPLATEEXCEPTService.Delete(autoeduformtemplateexcept);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteAUTOEDUFORMTEMPLATEEXCEPTs(IEnumerable<AUTOEDUFORMTEMPLATEEXCEPTDto> autoeduformtemplateexcepts, bool doSaveChanges = true)
		{
			if (autoeduformtemplateexcepts == null)
			{
				return;
			}
			foreach (AUTOEDUFORMTEMPLATEEXCEPTDto instance in autoeduformtemplateexcepts)
			{
				if (instance == null)
				{
					continue;
				}


				this.AUTOEDUFORMTEMPLATEEXCEPTService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveAUTOEDUFORMTEMPLATEEXCEPT(AUTOEDUFORMTEMPLATEEXCEPTDto autoeduformtemplateexcept, bool doSaveChanges = true)
		{
			switch (autoeduformtemplateexcept.RowState)
			{
				case RowState.Insert:
					this.CreateAUTOEDUFORMTEMPLATEEXCEPT(autoeduformtemplateexcept, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateAUTOEDUFORMTEMPLATEEXCEPT(autoeduformtemplateexcept, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteAUTOEDUFORMTEMPLATEEXCEPT(autoeduformtemplateexcept, doSaveChanges);
					break;
			}
		}


		public void SaveAUTOEDUFORMTEMPLATEEXCEPTs(IEnumerable<AUTOEDUFORMTEMPLATEEXCEPTDto> autoeduformtemplateexcepts, bool doSaveChanges = true)
		{
			if (autoeduformtemplateexcepts == null)
			{
				return;
			}
			foreach (AUTOEDUFORMTEMPLATEEXCEPTDto instance in autoeduformtemplateexcepts)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveAUTOEDUFORMTEMPLATEEXCEPT(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion AUTOEDUFORMTEMPLATEEXCEPT CRUD Operations


		#region AUTHROLE CRUD Operations


		private IAUTHROLEService authrole;
		public virtual IAUTHROLEService AUTHROLEService
		{
			get
			{
				if (this.authrole == null)
				{
					IAUTHROLEAssembler assembler = new AUTHROLEAssembler();
					IAUTHROLERepository repository = new AUTHROLERepository(this.UnitOfWork);
					this.authrole = new AUTHROLEService(assembler, repository);
				}
				return this.authrole;
			}
		}


		public IQueryable<AUTHROLE> AUTHROLEs
		{
			get { return this.AUTHROLEService.Repository.GetAll(); }
		}


		public IQueryable<AUTHROLE> ReadAUTHROLEs(Expression<Func<AUTHROLE, bool>> filter, int dummy)
		{
			return this.AUTHROLEService.Repository.Find(filter);
		}


		public IEnumerable<AUTHROLEDto> ReadAUTHROLEs()
		{
			return this.AUTHROLEService.GetAll();
		}


		public IEnumerable<AUTHROLEDto> ReadAUTHROLEs(Expression<Func<AUTHROLE, bool>> filter)
		{
			return this.AUTHROLEService.Find(filter);
		}


		public IEnumerable<AUTHROLEDto> ReadAUTHROLEs(ISpecification<AUTHROLE> specification)
		{
			return this.AUTHROLEService.Find(specification.GetExpression());
		}


		public IEnumerable<AUTHROLEDto> ReadAUTHROLEs(IQueryable<AUTHROLE> query)
		{
			return this.AUTHROLEService.Assembler.Assemble(query);
		}


		public IEnumerable<AUTHROLEDto> ReadAUTHROLEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.AUTHROLEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<AUTHROLEDto> ReadAUTHROLEs(object[] keyWords)
		{
			return this.AUTHROLEService.Find(keyWords);
		}


		public IEnumerable<AUTHROLEDto> ReadAUTHROLEsPaged(int startIndex, int pageSize)
		{
			return this.AUTHROLEService.Find(startIndex, pageSize);
		}


		public IEnumerable<AUTHROLEDto> ReadAUTHROLEsPaged(IQueryable<AUTHROLE> source, int pageIndex, int pageSize)
		{
			return this.AUTHROLEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<AUTHROLEDto> ReadAUTHROLEsPaged(IQueryable<AUTHROLE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.AUTHROLEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<AUTHROLEDto> ReadAUTHROLEsFiltered(string sortExpression, string filterExpression)
		{
			return this.AUTHROLEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<AUTHROLEDto> ReadAUTHROLEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.AUTHROLEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<AUTHROLEDto> ReadAUTHROLEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<AUTHROLE, bool>> filter)
		{
			return this.AUTHROLEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public AUTHROLEDto ReadAUTHROLEs(string dtoKey)
		{
			return this.AUTHROLEService.GetByKey(dtoKey);
		}


		public int CountAUTHROLEs()
		{
			return this.AUTHROLEService.Count();
		}


		public int CountAUTHROLEs(string filterExpression)
		{
			return this.AUTHROLEService.Count(filterExpression);
		}


		public int CountAUTHROLEs(Expression<Func<AUTHROLE, bool>> filter)
		{
			return this.AUTHROLEService.Count(filter);
		}


		public string CreateAUTHROLE(AUTHROLEDto authrole, bool doSaveChanges = true)
		{
			string key = this.AUTHROLEService.Add(authrole);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateAUTHROLE(AUTHROLEDto authrole, bool doSaveChanges = true)
		{
			this.AUTHROLEService.Update(authrole);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateAUTHROLEs(IEnumerable<AUTHROLEDto> authroles, bool doSaveChanges = true)
		{
			if (authroles == null)
			{
				return;
			}
			foreach (AUTHROLEDto instance in authroles)
			{
				if (instance == null)
				{
					continue;
				}


				this.AUTHROLEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteAUTHROLE(AUTHROLEDto authrole, bool doSaveChanges = true)
		{
			this.AUTHROLEService.Delete(authrole);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteAUTHROLEs(IEnumerable<AUTHROLEDto> authroles, bool doSaveChanges = true)
		{
			if (authroles == null)
			{
				return;
			}
			foreach (AUTHROLEDto instance in authroles)
			{
				if (instance == null)
				{
					continue;
				}


				this.AUTHROLEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveAUTHROLE(AUTHROLEDto authrole, bool doSaveChanges = true)
		{
			switch (authrole.RowState)
			{
				case RowState.Insert:
					this.CreateAUTHROLE(authrole, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateAUTHROLE(authrole, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteAUTHROLE(authrole, doSaveChanges);
					break;
			}
		}


		public void SaveAUTHROLEs(IEnumerable<AUTHROLEDto> authroles, bool doSaveChanges = true)
		{
			if (authroles == null)
			{
				return;
			}
			foreach (AUTHROLEDto instance in authroles)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveAUTHROLE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion AUTHROLE CRUD Operations


		#region AUTHMENU CRUD Operations


		private IAUTHMENUService authmenu;
		public virtual IAUTHMENUService AUTHMENUService
		{
			get
			{
				if (this.authmenu == null)
				{
					IAUTHMENUAssembler assembler = new AUTHMENUAssembler();
					IAUTHMENURepository repository = new AUTHMENURepository(this.UnitOfWork);
					this.authmenu = new AUTHMENUService(assembler, repository);
				}
				return this.authmenu;
			}
		}


		public IQueryable<AUTHMENU> AUTHMENUs
		{
			get { return this.AUTHMENUService.Repository.GetAll(); }
		}


		public IQueryable<AUTHMENU> ReadAUTHMENUs(Expression<Func<AUTHMENU, bool>> filter, int dummy)
		{
			return this.AUTHMENUService.Repository.Find(filter);
		}


		public IEnumerable<AUTHMENUDto> ReadAUTHMENUs()
		{
			return this.AUTHMENUService.GetAll();
		}


		public IEnumerable<AUTHMENUDto> ReadAUTHMENUs(Expression<Func<AUTHMENU, bool>> filter)
		{
			return this.AUTHMENUService.Find(filter);
		}


		public IEnumerable<AUTHMENUDto> ReadAUTHMENUs(ISpecification<AUTHMENU> specification)
		{
			return this.AUTHMENUService.Find(specification.GetExpression());
		}


		public IEnumerable<AUTHMENUDto> ReadAUTHMENUs(IQueryable<AUTHMENU> query)
		{
			return this.AUTHMENUService.Assembler.Assemble(query);
		}


		public IEnumerable<AUTHMENUDto> ReadAUTHMENUs(string[] propertyToSearch, object[] keyWords)
		{
			return this.AUTHMENUService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<AUTHMENUDto> ReadAUTHMENUs(object[] keyWords)
		{
			return this.AUTHMENUService.Find(keyWords);
		}


		public IEnumerable<AUTHMENUDto> ReadAUTHMENUsPaged(int startIndex, int pageSize)
		{
			return this.AUTHMENUService.Find(startIndex, pageSize);
		}


		public IEnumerable<AUTHMENUDto> ReadAUTHMENUsPaged(IQueryable<AUTHMENU> source, int pageIndex, int pageSize)
		{
			return this.AUTHMENUService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<AUTHMENUDto> ReadAUTHMENUsPaged(IQueryable<AUTHMENU> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.AUTHMENUService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<AUTHMENUDto> ReadAUTHMENUsFiltered(string sortExpression, string filterExpression)
		{
			return this.AUTHMENUService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<AUTHMENUDto> ReadAUTHMENUsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.AUTHMENUService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<AUTHMENUDto> ReadAUTHMENUsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<AUTHMENU, bool>> filter)
		{
			return this.AUTHMENUService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public AUTHMENUDto ReadAUTHMENUs(string dtoKey)
		{
			return this.AUTHMENUService.GetByKey(dtoKey);
		}


		public int CountAUTHMENUs()
		{
			return this.AUTHMENUService.Count();
		}


		public int CountAUTHMENUs(string filterExpression)
		{
			return this.AUTHMENUService.Count(filterExpression);
		}


		public int CountAUTHMENUs(Expression<Func<AUTHMENU, bool>> filter)
		{
			return this.AUTHMENUService.Count(filter);
		}


		public string CreateAUTHMENU(AUTHMENUDto authmenu, bool doSaveChanges = true)
		{
			string key = this.AUTHMENUService.Add(authmenu);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateAUTHMENU(AUTHMENUDto authmenu, bool doSaveChanges = true)
		{
			this.AUTHMENUService.Update(authmenu);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateAUTHMENUs(IEnumerable<AUTHMENUDto> authmenus, bool doSaveChanges = true)
		{
			if (authmenus == null)
			{
				return;
			}
			foreach (AUTHMENUDto instance in authmenus)
			{
				if (instance == null)
				{
					continue;
				}


				this.AUTHMENUService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteAUTHMENU(AUTHMENUDto authmenu, bool doSaveChanges = true)
		{
			this.AUTHMENUService.Delete(authmenu);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteAUTHMENUs(IEnumerable<AUTHMENUDto> authmenus, bool doSaveChanges = true)
		{
			if (authmenus == null)
			{
				return;
			}
			foreach (AUTHMENUDto instance in authmenus)
			{
				if (instance == null)
				{
					continue;
				}


				this.AUTHMENUService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveAUTHMENU(AUTHMENUDto authmenu, bool doSaveChanges = true)
		{
			switch (authmenu.RowState)
			{
				case RowState.Insert:
					this.CreateAUTHMENU(authmenu, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateAUTHMENU(authmenu, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteAUTHMENU(authmenu, doSaveChanges);
					break;
			}
		}


		public void SaveAUTHMENUs(IEnumerable<AUTHMENUDto> authmenus, bool doSaveChanges = true)
		{
			if (authmenus == null)
			{
				return;
			}
			foreach (AUTHMENUDto instance in authmenus)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveAUTHMENU(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion AUTHMENU CRUD Operations


		#region ACTTYPETREE_TEMP CRUD Operations


		private IACTTYPETREE_TEMPService acttypetree_temp;
		public virtual IACTTYPETREE_TEMPService ACTTYPETREE_TEMPService
		{
			get
			{
				if (this.acttypetree_temp == null)
				{
					IACTTYPETREE_TEMPAssembler assembler = new ACTTYPETREE_TEMPAssembler();
					IACTTYPETREE_TEMPRepository repository = new ACTTYPETREE_TEMPRepository(this.UnitOfWork);
					this.acttypetree_temp = new ACTTYPETREE_TEMPService(assembler, repository);
				}
				return this.acttypetree_temp;
			}
		}


		public IQueryable<ACTTYPETREE_TEMP> ACTTYPETREE_TEMPs
		{
			get { return this.ACTTYPETREE_TEMPService.Repository.GetAll(); }
		}


		public IQueryable<ACTTYPETREE_TEMP> ReadACTTYPETREE_TEMPs(Expression<Func<ACTTYPETREE_TEMP, bool>> filter, int dummy)
		{
			return this.ACTTYPETREE_TEMPService.Repository.Find(filter);
		}


		public IEnumerable<ACTTYPETREE_TEMPDto> ReadACTTYPETREE_TEMPs()
		{
			return this.ACTTYPETREE_TEMPService.GetAll();
		}


		public IEnumerable<ACTTYPETREE_TEMPDto> ReadACTTYPETREE_TEMPs(Expression<Func<ACTTYPETREE_TEMP, bool>> filter)
		{
			return this.ACTTYPETREE_TEMPService.Find(filter);
		}


		public IEnumerable<ACTTYPETREE_TEMPDto> ReadACTTYPETREE_TEMPs(ISpecification<ACTTYPETREE_TEMP> specification)
		{
			return this.ACTTYPETREE_TEMPService.Find(specification.GetExpression());
		}


		public IEnumerable<ACTTYPETREE_TEMPDto> ReadACTTYPETREE_TEMPs(IQueryable<ACTTYPETREE_TEMP> query)
		{
			return this.ACTTYPETREE_TEMPService.Assembler.Assemble(query);
		}


		public IEnumerable<ACTTYPETREE_TEMPDto> ReadACTTYPETREE_TEMPs(string[] propertyToSearch, object[] keyWords)
		{
			return this.ACTTYPETREE_TEMPService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<ACTTYPETREE_TEMPDto> ReadACTTYPETREE_TEMPs(object[] keyWords)
		{
			return this.ACTTYPETREE_TEMPService.Find(keyWords);
		}


		public IEnumerable<ACTTYPETREE_TEMPDto> ReadACTTYPETREE_TEMPsPaged(int startIndex, int pageSize)
		{
			return this.ACTTYPETREE_TEMPService.Find(startIndex, pageSize);
		}


		public IEnumerable<ACTTYPETREE_TEMPDto> ReadACTTYPETREE_TEMPsPaged(IQueryable<ACTTYPETREE_TEMP> source, int pageIndex, int pageSize)
		{
			return this.ACTTYPETREE_TEMPService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<ACTTYPETREE_TEMPDto> ReadACTTYPETREE_TEMPsPaged(IQueryable<ACTTYPETREE_TEMP> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.ACTTYPETREE_TEMPService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<ACTTYPETREE_TEMPDto> ReadACTTYPETREE_TEMPsFiltered(string sortExpression, string filterExpression)
		{
			return this.ACTTYPETREE_TEMPService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<ACTTYPETREE_TEMPDto> ReadACTTYPETREE_TEMPsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.ACTTYPETREE_TEMPService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<ACTTYPETREE_TEMPDto> ReadACTTYPETREE_TEMPsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<ACTTYPETREE_TEMP, bool>> filter)
		{
			return this.ACTTYPETREE_TEMPService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public ACTTYPETREE_TEMPDto ReadACTTYPETREE_TEMPs(string dtoKey)
		{
			return this.ACTTYPETREE_TEMPService.GetByKey(dtoKey);
		}


		public int CountACTTYPETREE_TEMPs()
		{
			return this.ACTTYPETREE_TEMPService.Count();
		}


		public int CountACTTYPETREE_TEMPs(string filterExpression)
		{
			return this.ACTTYPETREE_TEMPService.Count(filterExpression);
		}


		public int CountACTTYPETREE_TEMPs(Expression<Func<ACTTYPETREE_TEMP, bool>> filter)
		{
			return this.ACTTYPETREE_TEMPService.Count(filter);
		}


		public string CreateACTTYPETREE_TEMP(ACTTYPETREE_TEMPDto acttypetree_temp, bool doSaveChanges = true)
		{
			string key = this.ACTTYPETREE_TEMPService.Add(acttypetree_temp);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateACTTYPETREE_TEMP(ACTTYPETREE_TEMPDto acttypetree_temp, bool doSaveChanges = true)
		{
			this.ACTTYPETREE_TEMPService.Update(acttypetree_temp);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateACTTYPETREE_TEMPs(IEnumerable<ACTTYPETREE_TEMPDto> acttypetree_temps, bool doSaveChanges = true)
		{
			if (acttypetree_temps == null)
			{
				return;
			}
			foreach (ACTTYPETREE_TEMPDto instance in acttypetree_temps)
			{
				if (instance == null)
				{
					continue;
				}


				this.ACTTYPETREE_TEMPService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteACTTYPETREE_TEMP(ACTTYPETREE_TEMPDto acttypetree_temp, bool doSaveChanges = true)
		{
			this.ACTTYPETREE_TEMPService.Delete(acttypetree_temp);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteACTTYPETREE_TEMPs(IEnumerable<ACTTYPETREE_TEMPDto> acttypetree_temps, bool doSaveChanges = true)
		{
			if (acttypetree_temps == null)
			{
				return;
			}
			foreach (ACTTYPETREE_TEMPDto instance in acttypetree_temps)
			{
				if (instance == null)
				{
					continue;
				}


				this.ACTTYPETREE_TEMPService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveACTTYPETREE_TEMP(ACTTYPETREE_TEMPDto acttypetree_temp, bool doSaveChanges = true)
		{
			switch (acttypetree_temp.RowState)
			{
				case RowState.Insert:
					this.CreateACTTYPETREE_TEMP(acttypetree_temp, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateACTTYPETREE_TEMP(acttypetree_temp, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteACTTYPETREE_TEMP(acttypetree_temp, doSaveChanges);
					break;
			}
		}


		public void SaveACTTYPETREE_TEMPs(IEnumerable<ACTTYPETREE_TEMPDto> acttypetree_temps, bool doSaveChanges = true)
		{
			if (acttypetree_temps == null)
			{
				return;
			}
			foreach (ACTTYPETREE_TEMPDto instance in acttypetree_temps)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveACTTYPETREE_TEMP(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion ACTTYPETREE_TEMP CRUD Operations


		#region ACCOUNT CRUD Operations


		private IACCOUNTService account;
		public virtual IACCOUNTService ACCOUNTService
		{
			get
			{
				if (this.account == null)
				{
					IACCOUNTAssembler assembler = new ACCOUNTAssembler();
					IACCOUNTRepository repository = new ACCOUNTRepository(this.UnitOfWork);
					this.account = new ACCOUNTService(assembler, repository);
				}
				return this.account;
			}
		}


		public IQueryable<ACCOUNT> ACCOUNTs
		{
			get { return this.ACCOUNTService.Repository.GetAll(); }
		}


		public IQueryable<ACCOUNT> ReadACCOUNTs(Expression<Func<ACCOUNT, bool>> filter, int dummy)
		{
			return this.ACCOUNTService.Repository.Find(filter);
		}


		public IEnumerable<ACCOUNTDto> ReadACCOUNTs()
		{
			return this.ACCOUNTService.GetAll();
		}


		public IEnumerable<ACCOUNTDto> ReadACCOUNTs(Expression<Func<ACCOUNT, bool>> filter)
		{
			return this.ACCOUNTService.Find(filter);
		}


		public IEnumerable<ACCOUNTDto> ReadACCOUNTs(ISpecification<ACCOUNT> specification)
		{
			return this.ACCOUNTService.Find(specification.GetExpression());
		}


		public IEnumerable<ACCOUNTDto> ReadACCOUNTs(IQueryable<ACCOUNT> query)
		{
			return this.ACCOUNTService.Assembler.Assemble(query);
		}


		public IEnumerable<ACCOUNTDto> ReadACCOUNTs(string[] propertyToSearch, object[] keyWords)
		{
			return this.ACCOUNTService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<ACCOUNTDto> ReadACCOUNTs(object[] keyWords)
		{
			return this.ACCOUNTService.Find(keyWords);
		}


		public IEnumerable<ACCOUNTDto> ReadACCOUNTsPaged(int startIndex, int pageSize)
		{
			return this.ACCOUNTService.Find(startIndex, pageSize);
		}


		public IEnumerable<ACCOUNTDto> ReadACCOUNTsPaged(IQueryable<ACCOUNT> source, int pageIndex, int pageSize)
		{
			return this.ACCOUNTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<ACCOUNTDto> ReadACCOUNTsPaged(IQueryable<ACCOUNT> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.ACCOUNTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<ACCOUNTDto> ReadACCOUNTsFiltered(string sortExpression, string filterExpression)
		{
			return this.ACCOUNTService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<ACCOUNTDto> ReadACCOUNTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.ACCOUNTService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<ACCOUNTDto> ReadACCOUNTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<ACCOUNT, bool>> filter)
		{
			return this.ACCOUNTService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public ACCOUNTDto ReadACCOUNTs(string dtoKey)
		{
			return this.ACCOUNTService.GetByKey(dtoKey);
		}


		public int CountACCOUNTs()
		{
			return this.ACCOUNTService.Count();
		}


		public int CountACCOUNTs(string filterExpression)
		{
			return this.ACCOUNTService.Count(filterExpression);
		}


		public int CountACCOUNTs(Expression<Func<ACCOUNT, bool>> filter)
		{
			return this.ACCOUNTService.Count(filter);
		}


		public string CreateACCOUNT(ACCOUNTDto account, bool doSaveChanges = true)
		{
			string key = this.ACCOUNTService.Add(account);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateACCOUNT(ACCOUNTDto account, bool doSaveChanges = true)
		{
			this.ACCOUNTService.Update(account);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateACCOUNTs(IEnumerable<ACCOUNTDto> accounts, bool doSaveChanges = true)
		{
			if (accounts == null)
			{
				return;
			}
			foreach (ACCOUNTDto instance in accounts)
			{
				if (instance == null)
				{
					continue;
				}


				this.ACCOUNTService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteACCOUNT(ACCOUNTDto account, bool doSaveChanges = true)
		{
			this.ACCOUNTService.Delete(account);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteACCOUNTs(IEnumerable<ACCOUNTDto> accounts, bool doSaveChanges = true)
		{
			if (accounts == null)
			{
				return;
			}
			foreach (ACCOUNTDto instance in accounts)
			{
				if (instance == null)
				{
					continue;
				}


				this.ACCOUNTService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveACCOUNT(ACCOUNTDto account, bool doSaveChanges = true)
		{
			switch (account.RowState)
			{
				case RowState.Insert:
					this.CreateACCOUNT(account, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateACCOUNT(account, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteACCOUNT(account, doSaveChanges);
					break;
			}
		}


		public void SaveACCOUNTs(IEnumerable<ACCOUNTDto> accounts, bool doSaveChanges = true)
		{
			if (accounts == null)
			{
				return;
			}
			foreach (ACCOUNTDto instance in accounts)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveACCOUNT(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion ACCOUNT CRUD Operations


		#region ACCOUNTROLEIMPORT CRUD Operations


		private IACCOUNTROLEIMPORTService accountroleimport;
		public virtual IACCOUNTROLEIMPORTService ACCOUNTROLEIMPORTService
		{
			get
			{
				if (this.accountroleimport == null)
				{
					IACCOUNTROLEIMPORTAssembler assembler = new ACCOUNTROLEIMPORTAssembler();
					IACCOUNTROLEIMPORTRepository repository = new ACCOUNTROLEIMPORTRepository(this.UnitOfWork);
					this.accountroleimport = new ACCOUNTROLEIMPORTService(assembler, repository);
				}
				return this.accountroleimport;
			}
		}


		public IQueryable<ACCOUNTROLEIMPORT> ACCOUNTROLEIMPORTs
		{
			get { return this.ACCOUNTROLEIMPORTService.Repository.GetAll(); }
		}


		public IQueryable<ACCOUNTROLEIMPORT> ReadACCOUNTROLEIMPORTs(Expression<Func<ACCOUNTROLEIMPORT, bool>> filter, int dummy)
		{
			return this.ACCOUNTROLEIMPORTService.Repository.Find(filter);
		}


		public IEnumerable<ACCOUNTROLEIMPORTDto> ReadACCOUNTROLEIMPORTs()
		{
			return this.ACCOUNTROLEIMPORTService.GetAll();
		}


		public IEnumerable<ACCOUNTROLEIMPORTDto> ReadACCOUNTROLEIMPORTs(Expression<Func<ACCOUNTROLEIMPORT, bool>> filter)
		{
			return this.ACCOUNTROLEIMPORTService.Find(filter);
		}


		public IEnumerable<ACCOUNTROLEIMPORTDto> ReadACCOUNTROLEIMPORTs(ISpecification<ACCOUNTROLEIMPORT> specification)
		{
			return this.ACCOUNTROLEIMPORTService.Find(specification.GetExpression());
		}


		public IEnumerable<ACCOUNTROLEIMPORTDto> ReadACCOUNTROLEIMPORTs(IQueryable<ACCOUNTROLEIMPORT> query)
		{
			return this.ACCOUNTROLEIMPORTService.Assembler.Assemble(query);
		}


		public IEnumerable<ACCOUNTROLEIMPORTDto> ReadACCOUNTROLEIMPORTs(string[] propertyToSearch, object[] keyWords)
		{
			return this.ACCOUNTROLEIMPORTService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<ACCOUNTROLEIMPORTDto> ReadACCOUNTROLEIMPORTs(object[] keyWords)
		{
			return this.ACCOUNTROLEIMPORTService.Find(keyWords);
		}


		public IEnumerable<ACCOUNTROLEIMPORTDto> ReadACCOUNTROLEIMPORTsPaged(int startIndex, int pageSize)
		{
			return this.ACCOUNTROLEIMPORTService.Find(startIndex, pageSize);
		}


		public IEnumerable<ACCOUNTROLEIMPORTDto> ReadACCOUNTROLEIMPORTsPaged(IQueryable<ACCOUNTROLEIMPORT> source, int pageIndex, int pageSize)
		{
			return this.ACCOUNTROLEIMPORTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<ACCOUNTROLEIMPORTDto> ReadACCOUNTROLEIMPORTsPaged(IQueryable<ACCOUNTROLEIMPORT> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.ACCOUNTROLEIMPORTService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<ACCOUNTROLEIMPORTDto> ReadACCOUNTROLEIMPORTsFiltered(string sortExpression, string filterExpression)
		{
			return this.ACCOUNTROLEIMPORTService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<ACCOUNTROLEIMPORTDto> ReadACCOUNTROLEIMPORTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.ACCOUNTROLEIMPORTService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<ACCOUNTROLEIMPORTDto> ReadACCOUNTROLEIMPORTsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<ACCOUNTROLEIMPORT, bool>> filter)
		{
			return this.ACCOUNTROLEIMPORTService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public ACCOUNTROLEIMPORTDto ReadACCOUNTROLEIMPORTs(string dtoKey)
		{
			return this.ACCOUNTROLEIMPORTService.GetByKey(dtoKey);
		}


		public int CountACCOUNTROLEIMPORTs()
		{
			return this.ACCOUNTROLEIMPORTService.Count();
		}


		public int CountACCOUNTROLEIMPORTs(string filterExpression)
		{
			return this.ACCOUNTROLEIMPORTService.Count(filterExpression);
		}


		public int CountACCOUNTROLEIMPORTs(Expression<Func<ACCOUNTROLEIMPORT, bool>> filter)
		{
			return this.ACCOUNTROLEIMPORTService.Count(filter);
		}


		public string CreateACCOUNTROLEIMPORT(ACCOUNTROLEIMPORTDto accountroleimport, bool doSaveChanges = true)
		{
			string key = this.ACCOUNTROLEIMPORTService.Add(accountroleimport);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateACCOUNTROLEIMPORT(ACCOUNTROLEIMPORTDto accountroleimport, bool doSaveChanges = true)
		{
			this.ACCOUNTROLEIMPORTService.Update(accountroleimport);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateACCOUNTROLEIMPORTs(IEnumerable<ACCOUNTROLEIMPORTDto> accountroleimports, bool doSaveChanges = true)
		{
			if (accountroleimports == null)
			{
				return;
			}
			foreach (ACCOUNTROLEIMPORTDto instance in accountroleimports)
			{
				if (instance == null)
				{
					continue;
				}


				this.ACCOUNTROLEIMPORTService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteACCOUNTROLEIMPORT(ACCOUNTROLEIMPORTDto accountroleimport, bool doSaveChanges = true)
		{
			this.ACCOUNTROLEIMPORTService.Delete(accountroleimport);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteACCOUNTROLEIMPORTs(IEnumerable<ACCOUNTROLEIMPORTDto> accountroleimports, bool doSaveChanges = true)
		{
			if (accountroleimports == null)
			{
				return;
			}
			foreach (ACCOUNTROLEIMPORTDto instance in accountroleimports)
			{
				if (instance == null)
				{
					continue;
				}


				this.ACCOUNTROLEIMPORTService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveACCOUNTROLEIMPORT(ACCOUNTROLEIMPORTDto accountroleimport, bool doSaveChanges = true)
		{
			switch (accountroleimport.RowState)
			{
				case RowState.Insert:
					this.CreateACCOUNTROLEIMPORT(accountroleimport, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateACCOUNTROLEIMPORT(accountroleimport, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteACCOUNTROLEIMPORT(accountroleimport, doSaveChanges);
					break;
			}
		}


		public void SaveACCOUNTROLEIMPORTs(IEnumerable<ACCOUNTROLEIMPORTDto> accountroleimports, bool doSaveChanges = true)
		{
			if (accountroleimports == null)
			{
				return;
			}
			foreach (ACCOUNTROLEIMPORTDto instance in accountroleimports)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveACCOUNTROLEIMPORT(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion ACCOUNTROLEIMPORT CRUD Operations


		#region ACCOUNTROLE CRUD Operations


		private IACCOUNTROLEService accountrole;
		public virtual IACCOUNTROLEService ACCOUNTROLEService
		{
			get
			{
				if (this.accountrole == null)
				{
					IACCOUNTROLEAssembler assembler = new ACCOUNTROLEAssembler();
					IACCOUNTROLERepository repository = new ACCOUNTROLERepository(this.UnitOfWork);
					this.accountrole = new ACCOUNTROLEService(assembler, repository);
				}
				return this.accountrole;
			}
		}


		public IQueryable<ACCOUNTROLE> ACCOUNTROLEs
		{
			get { return this.ACCOUNTROLEService.Repository.GetAll(); }
		}


		public IQueryable<ACCOUNTROLE> ReadACCOUNTROLEs(Expression<Func<ACCOUNTROLE, bool>> filter, int dummy)
		{
			return this.ACCOUNTROLEService.Repository.Find(filter);
		}


		public IEnumerable<ACCOUNTROLEDto> ReadACCOUNTROLEs()
		{
			return this.ACCOUNTROLEService.GetAll();
		}


		public IEnumerable<ACCOUNTROLEDto> ReadACCOUNTROLEs(Expression<Func<ACCOUNTROLE, bool>> filter)
		{
			return this.ACCOUNTROLEService.Find(filter);
		}


		public IEnumerable<ACCOUNTROLEDto> ReadACCOUNTROLEs(ISpecification<ACCOUNTROLE> specification)
		{
			return this.ACCOUNTROLEService.Find(specification.GetExpression());
		}


		public IEnumerable<ACCOUNTROLEDto> ReadACCOUNTROLEs(IQueryable<ACCOUNTROLE> query)
		{
			return this.ACCOUNTROLEService.Assembler.Assemble(query);
		}


		public IEnumerable<ACCOUNTROLEDto> ReadACCOUNTROLEs(string[] propertyToSearch, object[] keyWords)
		{
			return this.ACCOUNTROLEService.Find(propertyToSearch, keyWords);
		}


		public IEnumerable<ACCOUNTROLEDto> ReadACCOUNTROLEs(object[] keyWords)
		{
			return this.ACCOUNTROLEService.Find(keyWords);
		}


		public IEnumerable<ACCOUNTROLEDto> ReadACCOUNTROLEsPaged(int startIndex, int pageSize)
		{
			return this.ACCOUNTROLEService.Find(startIndex, pageSize);
		}


		public IEnumerable<ACCOUNTROLEDto> ReadACCOUNTROLEsPaged(IQueryable<ACCOUNTROLE> source, int pageIndex, int pageSize)
		{
			return this.ACCOUNTROLEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<ACCOUNTROLEDto> ReadACCOUNTROLEsPaged(IQueryable<ACCOUNTROLE> source, int pageIndex, int pageSize, ref int totalCount, ref int totalPage)
		{
			totalCount = source.Count();
			totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);
			return this.ACCOUNTROLEService.Assembler.Assemble(source.Skip(pageIndex * pageSize).Take(pageSize));
		}


		public IEnumerable<ACCOUNTROLEDto> ReadACCOUNTROLEsFiltered(string sortExpression, string filterExpression)
		{
			return this.ACCOUNTROLEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<ACCOUNTROLEDto> ReadACCOUNTROLEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.ACCOUNTROLEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IEnumerable<ACCOUNTROLEDto> ReadACCOUNTROLEsPagedAndFiltered(int startIndex, int pageSize, Expression<Func<ACCOUNTROLE, bool>> filter)
		{
			return this.ACCOUNTROLEService.Find(startIndex, pageSize, string.Empty, filter);
		}


		public ACCOUNTROLEDto ReadACCOUNTROLEs(string dtoKey)
		{
			return this.ACCOUNTROLEService.GetByKey(dtoKey);
		}


		public int CountACCOUNTROLEs()
		{
			return this.ACCOUNTROLEService.Count();
		}


		public int CountACCOUNTROLEs(string filterExpression)
		{
			return this.ACCOUNTROLEService.Count(filterExpression);
		}


		public int CountACCOUNTROLEs(Expression<Func<ACCOUNTROLE, bool>> filter)
		{
			return this.ACCOUNTROLEService.Count(filter);
		}


		public string CreateACCOUNTROLE(ACCOUNTROLEDto accountrole, bool doSaveChanges = true)
		{
			string key = this.ACCOUNTROLEService.Add(accountrole);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateACCOUNTROLE(ACCOUNTROLEDto accountrole, bool doSaveChanges = true)
		{
			this.ACCOUNTROLEService.Update(accountrole);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateACCOUNTROLEs(IEnumerable<ACCOUNTROLEDto> accountroles, bool doSaveChanges = true)
		{
			if (accountroles == null)
			{
				return;
			}
			foreach (ACCOUNTROLEDto instance in accountroles)
			{
				if (instance == null)
				{
					continue;
				}


				this.ACCOUNTROLEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteACCOUNTROLE(ACCOUNTROLEDto accountrole, bool doSaveChanges = true)
		{
			this.ACCOUNTROLEService.Delete(accountrole);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteACCOUNTROLEs(IEnumerable<ACCOUNTROLEDto> accountroles, bool doSaveChanges = true)
		{
			if (accountroles == null)
			{
				return;
			}
			foreach (ACCOUNTROLEDto instance in accountroles)
			{
				if (instance == null)
				{
					continue;
				}


				this.ACCOUNTROLEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void SaveACCOUNTROLE(ACCOUNTROLEDto accountrole, bool doSaveChanges = true)
		{
			switch (accountrole.RowState)
			{
				case RowState.Insert:
					this.CreateACCOUNTROLE(accountrole, doSaveChanges);
					break;
				case RowState.Update:
					this.UpdateACCOUNTROLE(accountrole, doSaveChanges);
					break;
				case RowState.Delete:
					this.DeleteACCOUNTROLE(accountrole, doSaveChanges);
					break;
			}
		}


		public void SaveACCOUNTROLEs(IEnumerable<ACCOUNTROLEDto> accountroles, bool doSaveChanges = true)
		{
			if (accountroles == null)
			{
				return;
			}
			foreach (ACCOUNTROLEDto instance in accountroles)
			{
				if (instance == null)
				{
					continue;
				}


				this.SaveACCOUNTROLE(instance, false);
			}
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		#endregion ACCOUNTROLE CRUD Operations


	}
}
#pragma warning restore 1591

